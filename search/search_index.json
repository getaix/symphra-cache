{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Symphra Cache \u6587\u6863","text":"<p>\u6b22\u8fce\u4f7f\u7528 Symphra Cache - \u751f\u4ea7\u7ea7 Python \u5f02\u6b65\u7f13\u5b58\u5e93!</p>"},{"location":"#_1","title":"\ud83d\ude80 \u6838\u5fc3\u7279\u6027","text":"<ul> <li>\u5168\u5f02\u6b65\u652f\u6301 - \u5b8c\u6574\u7684 async/await \u652f\u6301\uff0c\u9ad8\u6548\u5904\u7406\u5e76\u53d1</li> <li>\u591a\u540e\u7aef\u652f\u6301 - \u5185\u5b58\u3001\u6587\u4ef6\u3001Redis \u591a\u79cd\u540e\u7aef\u53ef\u9009</li> <li>\u5206\u5e03\u5f0f\u7279\u6027 - \u5185\u7f6e\u5206\u5e03\u5f0f\u9501\u3001\u7f13\u5b58\u5931\u6548\u901a\u77e5</li> <li>\u7075\u6d3b\u7684\u88c5\u9970\u5668 - \u652f\u6301\u540c\u6b65\u548c\u5f02\u6b65\u88c5\u9970\u5668</li> <li>\u76d1\u63a7\u5bfc\u51fa - Prometheus \u548c StatsD \u76d1\u63a7\u652f\u6301</li> <li>\u914d\u7f6e\u7075\u6d3b - \u652f\u6301 YAML\u3001TOML\u3001JSON \u7b49\u591a\u79cd\u914d\u7f6e\u683c\u5f0f</li> <li>\u751f\u4ea7\u5c31\u7eea - \u5b8c\u6574\u7684\u9519\u8bef\u5904\u7406\u3001\u65e5\u5fd7\u8bb0\u5f55\u3001\u6027\u80fd\u4f18\u5316</li> </ul>"},{"location":"#_2","title":"\ud83d\udce6 \u5feb\u901f\u5f00\u59cb","text":""},{"location":"#_3","title":"\u5b89\u88c5","text":"<pre><code>pip install symphra-cache\n</code></pre>"},{"location":"#_4","title":"\u57fa\u7840\u4f7f\u7528","text":"<pre><code>from symphra_cache import CacheManager, create_memory_cache\n\n# \u521b\u5efa\u7f13\u5b58\ncache = create_memory_cache()\n\n# \u8bbe\u7f6e\u503c\ncache.set(\"key\", \"value\", ttl=3600)\n\n# \u83b7\u53d6\u503c\nvalue = cache.get(\"key\")\n</code></pre>"},{"location":"#_5","title":"\u4f7f\u7528\u88c5\u9970\u5668","text":"<pre><code>@cache.cache(ttl=3600)\ndef expensive_function(arg):\n    return compute_something(arg)\n\n# \u5f02\u6b65\u7248\u672c\n@cache.acache(ttl=3600)\nasync def async_expensive_function(arg):\n    return await compute_something_async(arg)\n</code></pre>"},{"location":"#_6","title":"\ud83d\udcda \u6587\u6863\u5bfc\u822a","text":"<ul> <li>\u5feb\u901f\u5f00\u59cb - \u5b89\u88c5\u548c\u57fa\u7840\u914d\u7f6e</li> <li>\u7528\u6237\u6307\u5357 - \u8be6\u7ec6\u7684\u529f\u80fd\u8bf4\u660e</li> <li>API \u53c2\u8003 - \u5b8c\u6574\u7684 API \u6587\u6863</li> <li>\u6700\u4f73\u5b9e\u8df5 - \u6027\u80fd\u4f18\u5316\u548c\u6700\u4f73\u5b9e\u8df5</li> <li>\u5e38\u89c1\u95ee\u9898 - FAQ \u548c\u6545\u969c\u6392\u9664</li> </ul>"},{"location":"#_7","title":"\ud83c\udfaf \u4e3b\u8981\u4f18\u52bf","text":""},{"location":"#_8","title":"\u6027\u80fd\u4f18\u5f02","text":"<ul> <li>\u5185\u5b58\u540e\u7aef\u91c7\u7528 LRU \u6dd8\u6c70\u7b56\u7565</li> <li>Redis \u540e\u7aef\u652f\u6301\u5206\u5e03\u5f0f\u7f13\u5b58</li> <li>\u5f02\u6b65\u64cd\u4f5c\u65e0\u963b\u585e</li> </ul>"},{"location":"#_9","title":"\u6613\u4e8e\u4f7f\u7528","text":"<ul> <li>\u7edf\u4e00\u7684 API \u63a5\u53e3</li> <li>\u88c5\u9970\u5668\u7b80\u5316\u4f7f\u7528</li> <li>\u4fbf\u5229\u5de5\u5382\u51fd\u6570</li> </ul>"},{"location":"#_10","title":"\u529f\u80fd\u5b8c\u6574","text":"<ul> <li>\u652f\u6301\u591a\u79cd\u5e8f\u5217\u5316\u65b9\u5f0f</li> <li>\u7075\u6d3b\u7684\u7f13\u5b58\u5931\u6548\u7b56\u7565</li> <li>\u5206\u5e03\u5f0f\u9501\u5e76\u53d1\u63a7\u5236</li> </ul>"},{"location":"#_11","title":"\u751f\u4ea7\u7ea7\u8d28\u91cf","text":"<ul> <li>\u5b8c\u6574\u7684\u7c7b\u578b\u6ce8\u89e3</li> <li>100% \u7684\u6587\u6863\u8986\u76d6</li> <li>\u9ad8\u4ee3\u7801\u8d28\u91cf\u8bc4\u5206</li> </ul>"},{"location":"#_12","title":"\ud83d\udca1 \u4f7f\u7528\u793a\u4f8b","text":""},{"location":"#_13","title":"\u9009\u62e9\u540e\u7aef","text":"<pre><code>from symphra_cache import create_memory_cache, create_redis_cache, create_file_cache\n\n# \u5185\u5b58\u7f13\u5b58 - \u9002\u5408\u5355\u673a\u5e94\u7528\nmemory_cache = create_memory_cache(max_size=5000)\n\n# Redis \u7f13\u5b58 - \u9002\u5408\u5206\u5e03\u5f0f\u5e94\u7528\nredis_cache = create_redis_cache(host=\"localhost\", port=6379)\n\n# \u6587\u4ef6\u7f13\u5b58 - \u9002\u5408\u6301\u4e45\u5316\u9700\u6c42\nfile_cache = create_file_cache(db_path=\"./cache.db\")\n</code></pre>"},{"location":"#_14","title":"\u7f13\u5b58\u5931\u6548","text":"<pre><code>from symphra_cache.invalidation import CacheInvalidator\n\ninvalidator = CacheInvalidator(cache)\n\n# \u5931\u6548\u7279\u5b9a\u952e\nawait invalidator.invalidate_keys([\"key1\", \"key2\"])\n\n# \u4f7f\u7528\u6a21\u5f0f\u5339\u914d\u5931\u6548\nawait invalidator.invalidate_pattern(\"user:*\")\n\n# \u5931\u6548\u6240\u6709\u7f13\u5b58\nawait invalidator.invalidate_all()\n</code></pre>"},{"location":"#_15","title":"\u5206\u5e03\u5f0f\u9501","text":"<pre><code>from symphra_cache.locks import DistributedLock\n\nlock = DistributedLock(cache, \"resource:1\", timeout=10)\n\nwith lock:\n    # \u4e34\u754c\u533a\u4ee3\u7801\uff0c\u4fdd\u8bc1\u4e00\u6b21\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f8b\u6267\u884c\n    process_shared_resource()\n</code></pre>"},{"location":"#_16","title":"\ud83d\udd27 \u914d\u7f6e","text":"<p>\u652f\u6301\u591a\u79cd\u914d\u7f6e\u65b9\u5f0f:</p> <pre><code># YAML \u914d\u7f6e\ncache = CacheManager.from_file(\"config.yaml\")\n\n# \u5b57\u5178\u914d\u7f6e\ncache = CacheManager.from_config({\n    \"backend\": \"redis\",\n    \"options\": {\n        \"host\": \"localhost\",\n        \"port\": 6379,\n    }\n})\n</code></pre>"},{"location":"#_17","title":"\ud83d\udcca \u76d1\u63a7","text":"<p>\u96c6\u6210 Prometheus \u548c StatsD \u76d1\u63a7:</p> <pre><code>from symphra_cache.monitoring.prometheus import PrometheusExporter\n\nmonitor = CacheMonitor(cache)\nexporter = PrometheusExporter(monitor)\n\n# \u83b7\u53d6 Prometheus \u683c\u5f0f\u6307\u6807\nmetrics = exporter.generate_metrics()\n</code></pre>"},{"location":"#_18","title":"\ud83e\udd1d \u8d21\u732e","text":"<p>\u6b22\u8fce\u63d0\u4ea4 Issue \u548c Pull Request!</p>"},{"location":"#_19","title":"\ud83d\udcc4 \u8bb8\u53ef\u8bc1","text":"<p>MIT License</p> <p>\u6700\u540e\u66f4\u65b0: 2024-10-25 \u7248\u672c: 1.0.0</p>"},{"location":"en/","title":"Symphra Cache","text":"<p>A production-grade Python async cache library with unified APIs and pluggable backends. It supports in-memory, SQLite file, and Redis storage, with decorators, distributed locks, warming, invalidation, and monitoring built-in.</p> <ul> <li>Fully async and sync APIs</li> <li>Drop-in decorators for caching and invalidation</li> <li>Backends: Memory, File (SQLite, hot reload), Redis</li> <li>Distributed lock helper</li> <li>Cache warming and group invalidation</li> <li>Monitoring exporters: Prometheus, StatsD</li> </ul>"},{"location":"en/#architecture","title":"Architecture","text":"<ul> <li><code>CacheManager</code>: Facade providing consistent cache operations</li> <li>Backends: <code>MemoryBackend</code>, <code>FileBackend</code>, <code>RedisBackend</code></li> <li>Decorators: <code>cache</code>, <code>acache</code>, <code>cache_invalidate</code>, <code>CachedProperty</code></li> <li>Utilities: <code>DistributedLock</code>, <code>CacheWarmer</code>, <code>CacheInvalidator</code></li> <li>Monitoring: <code>CacheMonitor</code>, <code>PrometheusExporter</code>, <code>StatsDExporter</code></li> </ul>"},{"location":"en/#links","title":"Links","text":"<ul> <li>Installation: installation.md</li> <li>Getting Started: getting-started.md</li> <li>API Reference: api/index.md</li> </ul>"},{"location":"en/best-practices/","title":"Best Practices","text":"<p>Guidelines for robust, efficient caching with Symphra Cache.</p>"},{"location":"en/best-practices/#keys-and-namespaces","title":"Keys and Namespaces","text":"<ul> <li>Use consistent <code>key_prefix</code> naming by domain (e.g., <code>user:</code>)</li> <li>Avoid embedding volatile parameters directly; normalize where possible</li> </ul>"},{"location":"en/best-practices/#ttl-and-freshness","title":"TTL and Freshness","text":"<ul> <li>Choose TTLs based on data volatility and SLA</li> <li>Combine TTL with explicit invalidation for correctness</li> </ul>"},{"location":"en/best-practices/#decorators","title":"Decorators","text":"<ul> <li>Prefer <code>@cache</code> and <code>@acache</code> for simplicity</li> <li>Keep function arguments JSON-serializable or provide custom serializer</li> </ul>"},{"location":"en/best-practices/#backends","title":"Backends","text":"<ul> <li>Use <code>MemoryBackend</code> for single-process speed</li> <li>Use <code>FileBackend</code> for hot-reload development flows</li> <li>Use <code>RedisBackend</code> for multi-instance sharing and persistence</li> </ul>"},{"location":"en/best-practices/#monitoring-and-ops","title":"Monitoring and Ops","text":"<ul> <li>Track hit/miss, latency percentiles, error rates</li> <li>Alert on miss spikes and backend timeouts</li> <li>Warm critical paths before peak traffic</li> </ul>"},{"location":"en/best-practices/#testing","title":"Testing","text":"<ul> <li>Mock backends in unit tests for determinism</li> <li>Validate cache keys and invalidation paths</li> </ul>"},{"location":"en/changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented here. For the canonical changelog in the repository, see <code>CHANGELOG.md</code>.</p> <p>The format follows Keep a Changelog and adheres to Semantic Versioning.</p>"},{"location":"en/changelog/#unreleased","title":"Unreleased","text":""},{"location":"en/changelog/#planned-features","title":"Planned Features","text":"<ul> <li>Prometheus/StatsD monitoring exporters</li> <li>Advanced cache warming strategies</li> <li>Cache invalidation notifications</li> <li>Performance benchmarks</li> </ul>"},{"location":"en/changelog/#010-2025-10-25","title":"0.1.0 - 2025-10-25","text":""},{"location":"en/changelog/#added-core-backends","title":"Added - Core Backends","text":"<ul> <li>MemoryBackend: \u9ad8\u6027\u80fd\u5185\u5b58\u7f13\u5b58</li> <li>LRU \u6dd8\u6c70\u7b56\u7565\uff08\u57fa\u4e8e OrderedDict, O(1) \u590d\u6742\u5ea6\uff09</li> <li>\u540e\u53f0 TTL \u6e05\u7406\uff08\u5b88\u62a4\u7ebf\u7a0b\uff09</li> <li>\u7ebf\u7a0b\u5b89\u5168\uff08RLock \u4fdd\u62a4\uff09</li> <li> <p>\u6279\u91cf\u64cd\u4f5c\u4f18\u5316</p> </li> <li> <p>FileBackend: \u6301\u4e45\u5316\u6587\u4ef6\u7f13\u5b58</p> </li> <li>\u57fa\u4e8e SQLite WAL \u6a21\u5f0f</li> <li>\u70ed\u91cd\u8f7d\u652f\u6301\uff08\u5f00\u53d1\u6a21\u5f0f\uff09</li> <li>LRU \u6dd8\u6c70\uff08\u57fa\u4e8e last_access \u5b57\u6bb5\uff09</li> <li> <p>\u5b8c\u6574\u7684\u5f02\u6b65\u652f\u6301\uff08aiosqlite\uff09</p> </li> <li> <p>RedisBackend: \u5206\u5e03\u5f0f\u7f13\u5b58</p> </li> <li>redis-py 4.x+ \u652f\u6301</li> <li>\u8fde\u63a5\u6c60\u4f18\u5316</li> <li>\u6279\u91cf\u64cd\u4f5c\uff08MGET/MSET \u7ba1\u9053\uff09</li> <li>\u539f\u5b50\u64cd\u4f5c\uff08incr/decr\uff09</li> </ul>"},{"location":"en/changelog/#added-core-features","title":"Added - Core Features","text":"<ul> <li>\u7edf\u4e00\u7684\u7f13\u5b58\u7ba1\u7406\u5668 (<code>CacheManager</code>)</li> <li>\u540c\u6b65\u548c\u5f02\u6b65\u53cc API\uff08get/aget, set/aset, etc.)</li> <li>TTL \u8fc7\u671f\u63a7\u5236\uff08\u79d2\u7ea7\u7cbe\u5ea6\uff09</li> <li>\u6279\u91cf\u64cd\u4f5c\uff08get_many, set_many, delete_many\uff09</li> <li>\u5f02\u5e38\u5c42\u6b21\u7ed3\u6784\uff088 \u4e2a\u81ea\u5b9a\u4e49\u5f02\u5e38\u7c7b\uff09</li> </ul>"},{"location":"en/changelog/#added-decorators","title":"Added - Decorators","text":"<ul> <li><code>@cache</code>: \u540c\u6b65\u51fd\u6570\u7f13\u5b58\u88c5\u9970\u5668</li> <li><code>@acache</code>: \u5f02\u6b65\u51fd\u6570\u7f13\u5b58\u88c5\u9970\u5668</li> <li><code>@cache_invalidate</code>: \u7f13\u5b58\u5931\u6548\u88c5\u9970\u5668</li> <li><code>CachedProperty</code>: \u7f13\u5b58\u5c5e\u6027\u88c5\u9970\u5668</li> <li>\u81ea\u5b9a\u4e49\u952e\u751f\u6210\u7b56\u7565</li> </ul>"},{"location":"en/changelog/#added-serialization","title":"Added - Serialization","text":"<ul> <li>JSON \u5e8f\u5217\u5316\u5668\uff08\u8de8\u8bed\u8a00\u517c\u5bb9\uff09</li> <li>Pickle \u5e8f\u5217\u5316\u5668\uff08\u652f\u6301\u590d\u6742\u5bf9\u8c61\uff09</li> <li>MessagePack \u5e8f\u5217\u5316\u5668\uff08\u9ad8\u6027\u80fd\uff09</li> <li>\u53ef\u6269\u5c55\u7684\u5e8f\u5217\u5316\u5668\u6ce8\u518c\u673a\u5236</li> </ul>"},{"location":"en/changelog/#added-advanced-features","title":"Added - Advanced Features","text":"<ul> <li>\u5206\u5e03\u5f0f\u9501\uff08DistributedLock\uff09</li> <li>\u552f\u4e00\u6807\u8bc6\u7b26\u9632\u6b62\u9501\u51b2\u7a81</li> <li>\u963b\u585e\u548c\u975e\u963b\u585e\u6a21\u5f0f</li> <li>\u81ea\u52a8\u8d85\u65f6\u91ca\u653e</li> </ul>"},{"location":"en/changelog/#added-testing","title":"Added - Testing","text":"<ul> <li>73 \u4e2a\u5355\u5143\u6d4b\u8bd5\uff0c\u5168\u90e8\u901a\u8fc7</li> <li>\u6d4b\u8bd5\u8986\u76d6\u6240\u6709\u6838\u5fc3\u529f\u80fd</li> <li>\u5185\u5b58\u540e\u7aef\uff1a27 \u4e2a\u6d4b\u8bd5</li> <li>\u6587\u4ef6\u540e\u7aef\uff1a16 \u4e2a\u6d4b\u8bd5</li> <li>\u5e8f\u5217\u5316\u5668\uff1a8 \u4e2a\u6d4b\u8bd5</li> <li>\u88c5\u9970\u5668\uff1a5 \u4e2a\u6d4b\u8bd5</li> <li>\u5f02\u5e38\u548c\u7c7b\u578b\uff1a17 \u4e2a\u6d4b\u8bd5</li> </ul>"},{"location":"en/changelog/#added-documentation","title":"Added - Documentation","text":"<ul> <li>\u5b8c\u6574\u7684\u4e2d\u6587\u4ee3\u7801\u6ce8\u91ca\uff082000+ \u884c\uff09</li> <li>3 \u4e2a\u4f7f\u7528\u793a\u4f8b\uff08basic_usage, decorator_usage, file_backend_usage\uff09</li> <li>\u53cc\u8bed README\uff08English + \u4e2d\u6587\uff09</li> <li>SOLID \u539f\u5219\u8d2f\u7a7f\u5b9e\u73b0</li> </ul>"},{"location":"en/changelog/#technical-details","title":"Technical Details","text":"<ul> <li>Python 3.11+ \u652f\u6301</li> <li>\u57fa\u4e8e uv \u5305\u7ba1\u7406\u5668</li> <li>Mypy \u4e25\u683c\u6a21\u5f0f\u901a\u8fc7</li> <li>Ruff \u683c\u5f0f\u5316\u548c Lint</li> <li>GitHub Actions CI/CD</li> </ul>"},{"location":"en/faq/","title":"FAQ","text":"<p>Answers to common questions.</p>"},{"location":"en/faq/#does-it-support-both-sync-and-async","title":"Does it support both sync and async?","text":"<p>Yes. Use <code>@cache</code> for sync functions and <code>@acache</code> for async.</p>"},{"location":"en/faq/#how-to-choose-a-backend","title":"How to choose a backend?","text":"<ul> <li><code>MemoryBackend</code>: fastest, per-process</li> <li><code>FileBackend</code>: simple persistence, hot reload</li> <li><code>RedisBackend</code>: shared, durable, horizontal scale</li> </ul>"},{"location":"en/faq/#how-do-i-invalidate-a-specific-key","title":"How do I invalidate a specific key?","text":"<p>Use <code>CacheInvalidator.invalidate_key(\"prefix:...:id\")</code> or <code>@cache_invalidate</code>.</p>"},{"location":"en/faq/#can-i-customize-serialization","title":"Can I customize serialization?","text":"<p>Yes. Use <code>serializers.get_serializer(...)</code> or implement <code>BaseSerializer</code>.</p>"},{"location":"en/faq/#does-it-provide-metrics","title":"Does it provide metrics?","text":"<p>Yes. Use <code>CacheMonitor</code> and exporters for Prometheus or StatsD.</p>"},{"location":"en/faq/#how-to-configure-from-files","title":"How to configure from files?","text":"<p>Load <code>CacheConfig</code> from YAML/TOML/JSON and attach to <code>CacheManager</code>.</p>"},{"location":"en/getting-started/","title":"Getting Started","text":"<p>This quickstart shows the core usage patterns: basic operations, decorators, async flows, and configuration.</p>"},{"location":"en/getting-started/#basic-usage","title":"Basic Usage","text":"<pre><code>from symphra_cache import CacheManager\nfrom symphra_cache.backends import MemoryBackend\n\ncache = CacheManager(backend=MemoryBackend())\ncache.set(\"user:123\", {\"name\": \"Alice\"}, ttl=3600)\nuser = cache.get(\"user:123\")\nprint(user)\n</code></pre>"},{"location":"en/getting-started/#decorators-sync","title":"Decorators (sync)","text":"<pre><code>from symphra_cache import CacheManager\nfrom symphra_cache.backends import MemoryBackend\nfrom symphra_cache.decorators import cache, cache_invalidate\n\ncache_mgr = CacheManager(backend=MemoryBackend())\n\n@cache(cache_mgr, ttl=600, key_prefix=\"user:\")\ndef get_user(user_id: int):\n    # Simulate DB query\n    return {\"id\": user_id, \"name\": \"Alice\"}\n\n@cache_invalidate(cache_mgr, key_prefix=\"user:\")\ndef update_user(user_id: int, **updates):\n    # Simulate DB update\n    return True\n\nget_user(123)\nupdate_user(123, name=\"Bob\")\nget_user(123)  # refreshed\n</code></pre>"},{"location":"en/getting-started/#decorators-async","title":"Decorators (async)","text":"<pre><code>import httpx\nfrom symphra_cache import CacheManager\nfrom symphra_cache.backends import MemoryBackend\nfrom symphra_cache.decorators import acache\n\ncache_mgr = CacheManager(backend=MemoryBackend())\n\n@acache(cache_mgr, ttl=300)\nasync def fetch_json(url: str):\n    async with httpx.AsyncClient() as client:\n        resp = await client.get(url)\n        return resp.json()\n</code></pre>"},{"location":"en/getting-started/#configuration","title":"Configuration","text":"<p>Create from a file:</p> <pre><code>from symphra_cache import CacheManager\nfrom symphra_cache.config import CacheConfig\n\nconfig = CacheConfig.from_file(\"config/cache.yaml\")\ncache = CacheManager.from_config(config)\n</code></pre> <p>See <code>examples/</code> for more usage: <code>basic_usage.py</code>, <code>decorator_usage.py</code>, <code>config_usage.py</code>.</p>"},{"location":"en/installation/","title":"Installation","text":"<p>Install the core library:</p> <pre><code>pip install symphra-cache\n</code></pre> <p>Optional extras:</p> <ul> <li>Monitoring exporters:   <pre><code>pip install \"symphra-cache[monitoring]\"\n</code></pre></li> <li>Docs tooling (to build this site locally):   <pre><code>pip install \"symphra-cache[docs]\"\n</code></pre></li> <li>Redis performance acceleration (C extension):   <pre><code>pip install \"symphra-cache[hiredis]\"\n</code></pre></li> </ul> <p>Python requirements: <code>&gt;= 3.11</code>.</p>"},{"location":"en/installation/#verify-installation","title":"Verify Installation","text":"<pre><code>from symphra_cache import CacheManager\nfrom symphra_cache.backends import MemoryBackend\n\ncache = CacheManager(backend=MemoryBackend())\ncache.set(\"hello\", \"world\", ttl=60)\nassert cache.get(\"hello\") == \"world\"\n</code></pre>"},{"location":"en/use-cases/","title":"Use Cases","text":"<p>Practical scenarios showing how Symphra Cache fits into applications.</p>"},{"location":"en/use-cases/#web-api-response-caching","title":"Web API Response Caching","text":"<pre><code>from fastapi import FastAPI\nfrom symphra_cache import CacheManager\nfrom symphra_cache.backends import RedisBackend\nfrom symphra_cache.decorators import cache\n\napp = FastAPI()\ncache = CacheManager(backend=RedisBackend(url=\"redis://localhost:6379\"))\n\n@cache(cache, ttl=60, key_prefix=\"api:v1:prod:\")\nasync def fetch_products(category: str):\n    # heavy DB query\n    return [{\"id\": 1, \"name\": \"Keyboard\"}]\n</code></pre>"},{"location":"en/use-cases/#feature-flags-and-config","title":"Feature Flags and Config","text":"<pre><code>from symphra_cache.decorators import cache\n\n@cache(cache, ttl=5, key_prefix=\"flags:\")\nasync def get_flag(name: str) -&gt; bool:\n    # fetch from remote config store\n    return True\n</code></pre>"},{"location":"en/use-cases/#computation-results","title":"Computation Results","text":"<pre><code>@cache(cache, ttl=300, key_prefix=\"calc:\")\nasync def expensive_fn(x: int, y: int):\n    # CPU-bound logic\n    return x ** y\n</code></pre>"},{"location":"en/use-cases/#batch-jobs","title":"Batch Jobs","text":"<ul> <li>Warm popular keys before traffic spikes</li> <li>Invalidate product group after nightly ETL</li> </ul>"},{"location":"en/use-cases/#observability","title":"Observability","text":"<ul> <li>Monitor hit/miss rates and latency</li> <li>Export to Prometheus/StatsD for dashboards</li> </ul>"},{"location":"en/advanced/invalidation/","title":"Cache Invalidation (Advanced)","text":"<p>Cache invalidation ensures data consistency by removing stale entries. Symphra Cache provides programmatic invalidation, pattern-based invalidation, and group invalidation utilities.</p>"},{"location":"en/advanced/invalidation/#when-to-invalidate","title":"When to Invalidate","text":"<ul> <li>After write operations that change authoritative data</li> <li>When background jobs refresh datasets</li> <li>On scheduled intervals for time-sensitive data</li> </ul>"},{"location":"en/advanced/invalidation/#programmatic-invalidation","title":"Programmatic Invalidation","text":"<p>Use the decorator to invalidate a matching cached key after a function completes.</p> <pre><code>from symphra_cache import CacheManager\nfrom symphra_cache.backends import MemoryBackend\nfrom symphra_cache.decorators import cache, cache_invalidate\n\ncache = CacheManager(backend=MemoryBackend())\n\n@cache(cache, ttl=600, key_prefix=\"user:\")\ndef get_user(user_id: int):\n    return {\"id\": user_id, \"name\": \"Alice\"}\n\n@cache_invalidate(cache, key_prefix=\"user:\")\ndef update_user(user_id: int, **updates):\n    # mutate authoritative store\n    return True\n</code></pre>"},{"location":"en/advanced/invalidation/#group-invalidation","title":"Group Invalidation","text":"<pre><code>from symphra_cache import CacheManager\nfrom symphra_cache.backends import MemoryBackend\nfrom symphra_cache.invalidation import CacheInvalidator\n\ncache = CacheManager(backend=MemoryBackend())\ninvalidator = CacheInvalidator(cache)\n\n# Invalidate all keys with prefix\ngroup = invalidator.create_cache_group_invalidator(\"user:\")\nawait group.invalidate_all()\nawait group.invalidate_pattern(\"user:*:profile\")\n</code></pre>"},{"location":"en/advanced/invalidation/#pattern-invalidation","title":"Pattern Invalidation","text":"<pre><code>await invalidator.invalidate_pattern(\"product:*:price\")\n</code></pre>"},{"location":"en/advanced/invalidation/#best-practices","title":"Best Practices","text":"<ul> <li>Keep prefixes consistent across <code>cache</code> and <code>cache_invalidate</code></li> <li>Prefer targeted invalidation over global clears</li> <li>Use group invalidation for coherent datasets (e.g., all keys for a user)</li> <li>Combine TTL with invalidation for defense-in-depth</li> </ul>"},{"location":"en/advanced/monitoring/","title":"Monitoring (Advanced)","text":"<p>Measure cache effectiveness and latency, export metrics to Prometheus or StatsD.</p>"},{"location":"en/advanced/monitoring/#built-in-metrics","title":"Built-in Metrics","text":"<pre><code>from symphra_cache.monitor import CacheMonitor\n\nmonitor = CacheMonitor()\n# Attach monitor to manager\nfrom symphra_cache import CacheManager\nfrom symphra_cache.backends import MemoryBackend\n\nmanager = CacheManager(backend=MemoryBackend(), monitor=monitor)\n</code></pre>"},{"location":"en/advanced/monitoring/#prometheus-exporter","title":"Prometheus Exporter","text":"<pre><code>from symphra_cache.monitoring.prometheus import PrometheusExporter\n\nexporter = PrometheusExporter(monitor)\nexporter.start_http_server(port=8000)\n</code></pre>"},{"location":"en/advanced/monitoring/#statsd-exporter","title":"StatsD Exporter","text":"<pre><code>from symphra_cache.monitoring.statsd import StatsDExporter\n\nexporter = StatsDExporter(monitor, host=\"127.0.0.1\", port=8125)\nexporter.start()\n</code></pre>"},{"location":"en/advanced/monitoring/#key-metrics","title":"Key Metrics","text":"<ul> <li>Hit ratio, miss ratio</li> <li>Latency percentiles (p50/p90/p99)</li> <li>Backend errors and timeouts</li> <li>Evictions and invalidations</li> </ul>"},{"location":"en/advanced/monitoring/#operability-tips","title":"Operability Tips","text":"<ul> <li>Set alerts for miss spikes and error rates</li> <li>Track warming impact on tail latency</li> <li>Tag metrics by backend type and key namespaces</li> </ul>"},{"location":"en/advanced/warming/","title":"Cache Warming (Advanced)","text":"<p>Cache warming preloads frequently accessed data to avoid cold-start latency.</p>"},{"location":"en/advanced/warming/#manual-warming","title":"Manual Warming","text":"<pre><code>from symphra_cache import CacheManager\nfrom symphra_cache.backends import MemoryBackend\nfrom symphra_cache.warming import CacheWarmer\n\ncache = CacheManager(backend=MemoryBackend())\nwarmer = CacheWarmer(cache)\n\n# Preload specific keys\nawait warmer.warm_up({\n    \"user:123\": {\"name\": \"Alice\"},\n    \"user:456\": {\"name\": \"Bob\"},\n})\n</code></pre>"},{"location":"en/advanced/warming/#smart-warming","title":"Smart Warming","text":"<pre><code>from symphra_cache.warming import SmartCacheWarmer\n\nwarmer = SmartCacheWarmer(cache)\nawait warmer.auto_warm_up()  # strategy based on access patterns\n</code></pre>"},{"location":"en/advanced/warming/#strategies","title":"Strategies","text":"<ul> <li>Time-based warming before traffic peaks</li> <li>Popular keys warming from analytics</li> <li>Dependency graph warming after batch updates</li> </ul>"},{"location":"en/advanced/warming/#tips","title":"Tips","text":"<ul> <li>Combine warming with monitoring to measure latency improvements</li> <li>Avoid over-warming large datasets; target the hot set</li> <li>Use namespaced prefixes to warm coherent groups</li> </ul>"},{"location":"en/api/","title":"API Reference","text":"<p>This section documents the public APIs. Pages use auto-generated documentation via <code>mkdocstrings</code> from the source under <code>src/symphra_cache</code>.</p> <ul> <li>Manager: unified cache operations</li> <li>Decorators: sync/async caching and invalidation</li> <li>Backends: Memory, File, Redis</li> <li>Locks: distributed lock helper</li> <li>Config: typed configuration with Pydantic</li> <li>Serializers: JSON, Pickle, MessagePack</li> <li>Types: enums and type aliases</li> <li>Monitoring: metrics collection and exporters</li> <li>Warming: preloading strategies</li> <li>Invalidation: group and pattern invalidation</li> </ul>"},{"location":"en/api/config/","title":"CacheConfig","text":"<p>Typed configuration powered by Pydantic for backend selection and options.</p> <p>               Bases: <code>BaseModel</code></p> <p>\u7f13\u5b58\u914d\u7f6e\u7c7b</p> <p>\u4f7f\u7528 Pydantic \u8fdb\u884c\u81ea\u52a8\u9a8c\u8bc1,\u91c7\u7528 backend + options \u7684\u6269\u5c55\u6a21\u5f0f\u3002</p> <p>\u652f\u6301\u4ece\u591a\u79cd\u6765\u6e90\u52a0\u8f7d: - \u5b57\u5178 - YAML \u6587\u4ef6 - TOML \u6587\u4ef6 - JSON \u6587\u4ef6 - \u73af\u5883\u53d8\u91cf</p> \u914d\u7f6e\u793a\u4f8b <pre><code># \u65b9\u5f0f1: \u4f7f\u7528\u9ed8\u8ba4\u5185\u5b58\u540e\u7aef\nconfig = CacheConfig()\n\n# \u65b9\u5f0f2: \u6307\u5b9a\u540e\u7aef\u540d\u79f0\nconfig = CacheConfig(backend=\"memory\")\n\n# \u65b9\u5f0f3: \u6307\u5b9a\u540e\u7aef\u548c\u53c2\u6570\nconfig = CacheConfig(backend=\"redis\", options={\"host\": \"localhost\", \"port\": 6379})\n\n# \u5b9e\u4f8b\u5316\u540e\u7aef\nbackend = config.create_backend()\n</code></pre> \u5c5e\u6027 Source code in <code>src/symphra_cache/config.py</code> <pre><code>class CacheConfig(BaseModel):\n    \"\"\"\n    \u7f13\u5b58\u914d\u7f6e\u7c7b\n\n    \u4f7f\u7528 Pydantic \u8fdb\u884c\u81ea\u52a8\u9a8c\u8bc1,\u91c7\u7528 backend + options \u7684\u6269\u5c55\u6a21\u5f0f\u3002\n\n    \u652f\u6301\u4ece\u591a\u79cd\u6765\u6e90\u52a0\u8f7d:\n    - \u5b57\u5178\n    - YAML \u6587\u4ef6\n    - TOML \u6587\u4ef6\n    - JSON \u6587\u4ef6\n    - \u73af\u5883\u53d8\u91cf\n\n    \u914d\u7f6e\u793a\u4f8b:\n        ```python\n        # \u65b9\u5f0f1: \u4f7f\u7528\u9ed8\u8ba4\u5185\u5b58\u540e\u7aef\n        config = CacheConfig()\n\n        # \u65b9\u5f0f2: \u6307\u5b9a\u540e\u7aef\u540d\u79f0\n        config = CacheConfig(backend=\"memory\")\n\n        # \u65b9\u5f0f3: \u6307\u5b9a\u540e\u7aef\u548c\u53c2\u6570\n        config = CacheConfig(backend=\"redis\", options={\"host\": \"localhost\", \"port\": 6379})\n\n        # \u5b9e\u4f8b\u5316\u540e\u7aef\n        backend = config.create_backend()\n        ```\n\n    \u5c5e\u6027:\n        backend: \u5df2\u6ce8\u518c\u7684\u540e\u7aef\u540d\u79f0(\u5982 memory\u3001file\u3001redis)\n        options: \u4f20\u9012\u7ed9\u540e\u7aef\u6784\u9020\u51fd\u6570\u7684\u53c2\u6570\u5b57\u5178\n    \"\"\"\n\n    backend: str = Field(\n        default=\"memory\",\n        description=\"\u540e\u7aef\u540d\u79f0,\u5bf9\u5e94\u5df2\u6ce8\u518c\u7684 backend \u6807\u8bc6(\u5982 memory\u3001file\u3001redis)\",\n    )\n\n    options: dict[str, Any] = Field(\n        default_factory=dict,\n        description=\"\u540e\u7aef\u6784\u9020\u53c2\u6570,\u4f1a\u5728\u5b9e\u4f8b\u5316\u65f6\u4f20\u9012\u7ed9\u5177\u4f53\u540e\u7aef\u5b9e\u73b0\",\n    )\n\n    # ========== Pydantic \u914d\u7f6e ==========\n\n    model_config = {\n        \"validate_assignment\": True,\n        \"extra\": \"forbid\",  # \u7981\u6b62\u989d\u5916\u5b57\u6bb5\n        \"str_strip_whitespace\": True,\n    }\n\n    # ========== \u9a8c\u8bc1\u5668 ==========\n\n    @model_validator(mode=\"after\")\n    def validate_backend(self) -&gt; CacheConfig:\n        \"\"\"\u9a8c\u8bc1\u540e\u7aef\u914d\u7f6e\"\"\"\n        from .backends import get_registered_backends\n\n        # \u9a8c\u8bc1\u540e\u7aef\u7c7b\u578b\n        available_backends = get_registered_backends()\n        if self.backend.lower() not in available_backends:\n            valid_backends = \", \".join(available_backends)\n            msg = f\"\u4e0d\u652f\u6301\u7684\u540e\u7aef\u7c7b\u578b: {self.backend}\u3002\u652f\u6301\u7684\u7c7b\u578b: {valid_backends}\"\n            raise ValueError(msg)\n\n        return self\n\n    # ========== \u540e\u7aef\u5b9e\u4f8b\u5316 ==========\n\n    def create_backend(self) -&gt; BaseBackend:\n        \"\"\"\n        \u6839\u636e\u914d\u7f6e\u521b\u5efa\u540e\u7aef\u5b9e\u4f8b\n\n        Returns:\n            \u914d\u7f6e\u597d\u7684\u540e\u7aef\u5b9e\u4f8b\n\n        Raises:\n            CacheConfigError: \u540e\u7aef\u521b\u5efa\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; config = CacheConfig(backend=\"memory\", options={\"max_size\": 1000})\n            &gt;&gt;&gt; backend = config.create_backend()\n        \"\"\"\n        from .backends import create_backend\n\n        try:\n            return create_backend(self.backend, **self.options)\n        except Exception as e:\n            msg = f\"\u521b\u5efa {self.backend} \u540e\u7aef\u5931\u8d25: {e}\"\n            raise CacheConfigError(msg) from e\n\n    # ========== \u5de5\u5382\u65b9\u6cd5 ==========\n\n    @classmethod\n    def from_file(cls, file_path: str | Path) -&gt; CacheConfig:\n        \"\"\"\n        \u4ece\u914d\u7f6e\u6587\u4ef6\u521b\u5efa\u914d\u7f6e\n\n        \u652f\u6301\u7684\u683c\u5f0f:\n        - YAML (.yaml, .yml)\n        - TOML (.toml)\n        - JSON (.json)\n\n        Args:\n            file_path: \u914d\u7f6e\u6587\u4ef6\u8def\u5f84\n\n        Returns:\n            CacheConfig \u5b9e\u4f8b\n\n        Raises:\n            CacheConfigError: \u6587\u4ef6\u8bfb\u53d6\u6216\u89e3\u6790\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; config = CacheConfig.from_file(\"config/cache.yaml\")\n        \"\"\"\n        file_path = Path(file_path)\n\n        if not file_path.exists():\n            msg = f\"\u914d\u7f6e\u6587\u4ef6\u4e0d\u5b58\u5728: {file_path}\"\n            raise CacheConfigError(msg)\n\n        suffix = file_path.suffix.lower()\n\n        try:\n            if suffix in {\".yaml\", \".yml\"}:\n                return cls._from_yaml(file_path)\n            if suffix == \".toml\":\n                return cls._from_toml(file_path)\n            if suffix == \".json\":\n                return cls._from_json(file_path)\n            msg = f\"\u4e0d\u652f\u6301\u7684\u914d\u7f6e\u6587\u4ef6\u683c\u5f0f: {suffix}\"\n            raise CacheConfigError(msg)\n        except Exception as e:\n            if isinstance(e, CacheConfigError):\n                raise\n            msg = f\"\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\u5931\u8d25: {file_path}\"\n            raise CacheConfigError(msg) from e\n\n    @classmethod\n    def _from_yaml(cls, file_path: Path) -&gt; CacheConfig:\n        \"\"\"\u4ece YAML \u6587\u4ef6\u52a0\u8f7d\"\"\"\n        try:\n            import yaml\n        except ImportError as e:\n            msg = \"YAML \u652f\u6301\u9700\u8981\u5b89\u88c5 PyYAML: pip install pyyaml\"\n            raise ImportError(msg) from e\n\n        with file_path.open(\"r\", encoding=\"utf-8\") as f:\n            data = yaml.safe_load(f)\n\n        if not isinstance(data, dict):\n            msg = \"YAML \u914d\u7f6e\u6587\u4ef6\u5fc5\u987b\u662f\u5b57\u5178\u683c\u5f0f\"\n            raise CacheConfigError(msg)\n\n        return cls(**data)\n\n    @classmethod\n    def _from_toml(cls, file_path: Path) -&gt; CacheConfig:\n        \"\"\"\u4ece TOML \u6587\u4ef6\u52a0\u8f7d\"\"\"\n        try:\n            import tomllib\n        except ImportError:\n            try:\n                import tomli as tomllib  # Python &lt; 3.11\n            except ImportError as e:\n                msg = \"TOML \u652f\u6301\u9700\u8981\u5b89\u88c5 tomli: pip install tomli\"\n                raise ImportError(msg) from e\n\n        with file_path.open(\"rb\") as f:\n            data = tomllib.load(f)\n\n        if not isinstance(data, dict):\n            msg = \"TOML \u914d\u7f6e\u6587\u4ef6\u5fc5\u987b\u662f\u5b57\u5178\u683c\u5f0f\"\n            raise CacheConfigError(msg)\n\n        return cls(**data)\n\n    @classmethod\n    def _from_json(cls, file_path: Path) -&gt; CacheConfig:\n        \"\"\"\u4ece JSON \u6587\u4ef6\u52a0\u8f7d\"\"\"\n        import json\n\n        with file_path.open(\"r\", encoding=\"utf-8\") as f:\n            data = json.load(f)\n\n        if not isinstance(data, dict):\n            msg = \"JSON \u914d\u7f6e\u6587\u4ef6\u5fc5\u987b\u662f\u5b57\u5178\u683c\u5f0f\"\n            raise CacheConfigError(msg)\n\n        return cls(**data)\n\n    @classmethod\n    def from_env(cls, prefix: str = \"SYMPHRA_CACHE_\") -&gt; CacheConfig:\n        \"\"\"\n        \u4ece\u73af\u5883\u53d8\u91cf\u521b\u5efa\u914d\u7f6e\n\n        \u73af\u5883\u53d8\u91cf\u547d\u540d\u89c4\u5219:\n        - SYMPHRA_CACHE_BACKEND=memory\n        - SYMPHRA_CACHE_OPTIONS__MAX_SIZE=10000  (options \u4f7f\u7528\u53cc\u4e0b\u5212\u7ebf)\n        - SYMPHRA_CACHE_OPTIONS__HOST=localhost\n\n        Args:\n            prefix: \u73af\u5883\u53d8\u91cf\u524d\u7f00\n\n        Returns:\n            CacheConfig \u5b9e\u4f8b\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; import os\n            &gt;&gt;&gt; os.environ[\"SYMPHRA_CACHE_BACKEND\"] = \"redis\"\n            &gt;&gt;&gt; os.environ[\"SYMPHRA_CACHE_OPTIONS__HOST\"] = \"localhost\"\n            &gt;&gt;&gt; config = CacheConfig.from_env()\n        \"\"\"\n        backend = os.environ.get(f\"{prefix}BACKEND\", \"memory\")\n        options: dict[str, Any] = {}\n\n        # \u6536\u96c6 options\n        options_prefix = f\"{prefix}OPTIONS__\"\n        for key, value in os.environ.items():\n            if key.startswith(options_prefix):\n                # \u79fb\u9664\u524d\u7f00\u5e76\u8f6c\u4e3a\u5c0f\u5199\n                option_key = key[len(options_prefix) :].lower()\n                # \u7c7b\u578b\u8f6c\u6362\n                options[option_key] = cls._convert_env_value(value)\n\n        return cls(backend=backend, options=options)\n\n    @staticmethod\n    def _convert_env_value(value: str) -&gt; Any:\n        \"\"\"\u8f6c\u6362\u73af\u5883\u53d8\u91cf\u503c\u7c7b\u578b\"\"\"\n        # \u5e03\u5c14\u503c\n        if value.lower() in {\"true\", \"1\", \"yes\", \"on\"}:\n            return True\n        if value.lower() in {\"false\", \"0\", \"no\", \"off\"}:\n            return False\n\n        # None/null\n        if value.lower() in {\"none\", \"null\", \"\"}:\n            return None\n\n        # \u6570\u5b57\n        try:\n            if \".\" in value:\n                return float(value)\n            return int(value)\n        except ValueError:\n            pass\n\n        # \u5b57\u7b26\u4e32\n        return value\n\n    def __repr__(self) -&gt; str:\n        \"\"\"\u5b57\u7b26\u4e32\u8868\u793a\"\"\"\n        return f\"CacheConfig(backend={self.backend!r}, options={self.options!r})\"\n</code></pre>"},{"location":"en/api/config/#symphra_cache.config.CacheConfig.__repr__","title":"<code>__repr__()</code>","text":"<p>\u5b57\u7b26\u4e32\u8868\u793a</p> Source code in <code>src/symphra_cache/config.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"\u5b57\u7b26\u4e32\u8868\u793a\"\"\"\n    return f\"CacheConfig(backend={self.backend!r}, options={self.options!r})\"\n</code></pre>"},{"location":"en/api/config/#symphra_cache.config.CacheConfig.create_backend","title":"<code>create_backend()</code>","text":"<p>\u6839\u636e\u914d\u7f6e\u521b\u5efa\u540e\u7aef\u5b9e\u4f8b</p> <p>Returns:</p> Type Description <code>BaseBackend</code> <p>\u914d\u7f6e\u597d\u7684\u540e\u7aef\u5b9e\u4f8b</p> <p>Raises:</p> Type Description <code>CacheConfigError</code> <p>\u540e\u7aef\u521b\u5efa\u5931\u8d25</p> \u793a\u4f8b <p>config = CacheConfig(backend=\"memory\", options={\"max_size\": 1000}) backend = config.create_backend()</p> Source code in <code>src/symphra_cache/config.py</code> <pre><code>def create_backend(self) -&gt; BaseBackend:\n    \"\"\"\n    \u6839\u636e\u914d\u7f6e\u521b\u5efa\u540e\u7aef\u5b9e\u4f8b\n\n    Returns:\n        \u914d\u7f6e\u597d\u7684\u540e\u7aef\u5b9e\u4f8b\n\n    Raises:\n        CacheConfigError: \u540e\u7aef\u521b\u5efa\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; config = CacheConfig(backend=\"memory\", options={\"max_size\": 1000})\n        &gt;&gt;&gt; backend = config.create_backend()\n    \"\"\"\n    from .backends import create_backend\n\n    try:\n        return create_backend(self.backend, **self.options)\n    except Exception as e:\n        msg = f\"\u521b\u5efa {self.backend} \u540e\u7aef\u5931\u8d25: {e}\"\n        raise CacheConfigError(msg) from e\n</code></pre>"},{"location":"en/api/config/#symphra_cache.config.CacheConfig.from_env","title":"<code>from_env(prefix='SYMPHRA_CACHE_')</code>  <code>classmethod</code>","text":"<p>\u4ece\u73af\u5883\u53d8\u91cf\u521b\u5efa\u914d\u7f6e</p> <p>\u73af\u5883\u53d8\u91cf\u547d\u540d\u89c4\u5219: - SYMPHRA_CACHE_BACKEND=memory - SYMPHRA_CACHE_OPTIONS__MAX_SIZE=10000  (options \u4f7f\u7528\u53cc\u4e0b\u5212\u7ebf) - SYMPHRA_CACHE_OPTIONS__HOST=localhost</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>\u73af\u5883\u53d8\u91cf\u524d\u7f00</p> <code>'SYMPHRA_CACHE_'</code> <p>Returns:</p> Type Description <code>CacheConfig</code> <p>CacheConfig \u5b9e\u4f8b</p> \u793a\u4f8b <p>import os os.environ[\"SYMPHRA_CACHE_BACKEND\"] = \"redis\" os.environ[\"SYMPHRA_CACHE_OPTIONS__HOST\"] = \"localhost\" config = CacheConfig.from_env()</p> Source code in <code>src/symphra_cache/config.py</code> <pre><code>@classmethod\ndef from_env(cls, prefix: str = \"SYMPHRA_CACHE_\") -&gt; CacheConfig:\n    \"\"\"\n    \u4ece\u73af\u5883\u53d8\u91cf\u521b\u5efa\u914d\u7f6e\n\n    \u73af\u5883\u53d8\u91cf\u547d\u540d\u89c4\u5219:\n    - SYMPHRA_CACHE_BACKEND=memory\n    - SYMPHRA_CACHE_OPTIONS__MAX_SIZE=10000  (options \u4f7f\u7528\u53cc\u4e0b\u5212\u7ebf)\n    - SYMPHRA_CACHE_OPTIONS__HOST=localhost\n\n    Args:\n        prefix: \u73af\u5883\u53d8\u91cf\u524d\u7f00\n\n    Returns:\n        CacheConfig \u5b9e\u4f8b\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; import os\n        &gt;&gt;&gt; os.environ[\"SYMPHRA_CACHE_BACKEND\"] = \"redis\"\n        &gt;&gt;&gt; os.environ[\"SYMPHRA_CACHE_OPTIONS__HOST\"] = \"localhost\"\n        &gt;&gt;&gt; config = CacheConfig.from_env()\n    \"\"\"\n    backend = os.environ.get(f\"{prefix}BACKEND\", \"memory\")\n    options: dict[str, Any] = {}\n\n    # \u6536\u96c6 options\n    options_prefix = f\"{prefix}OPTIONS__\"\n    for key, value in os.environ.items():\n        if key.startswith(options_prefix):\n            # \u79fb\u9664\u524d\u7f00\u5e76\u8f6c\u4e3a\u5c0f\u5199\n            option_key = key[len(options_prefix) :].lower()\n            # \u7c7b\u578b\u8f6c\u6362\n            options[option_key] = cls._convert_env_value(value)\n\n    return cls(backend=backend, options=options)\n</code></pre>"},{"location":"en/api/config/#symphra_cache.config.CacheConfig.from_file","title":"<code>from_file(file_path)</code>  <code>classmethod</code>","text":"<p>\u4ece\u914d\u7f6e\u6587\u4ef6\u521b\u5efa\u914d\u7f6e</p> <p>\u652f\u6301\u7684\u683c\u5f0f: - YAML (.yaml, .yml) - TOML (.toml) - JSON (.json)</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str | Path</code> <p>\u914d\u7f6e\u6587\u4ef6\u8def\u5f84</p> required <p>Returns:</p> Type Description <code>CacheConfig</code> <p>CacheConfig \u5b9e\u4f8b</p> <p>Raises:</p> Type Description <code>CacheConfigError</code> <p>\u6587\u4ef6\u8bfb\u53d6\u6216\u89e3\u6790\u5931\u8d25</p> \u793a\u4f8b <p>config = CacheConfig.from_file(\"config/cache.yaml\")</p> Source code in <code>src/symphra_cache/config.py</code> <pre><code>@classmethod\ndef from_file(cls, file_path: str | Path) -&gt; CacheConfig:\n    \"\"\"\n    \u4ece\u914d\u7f6e\u6587\u4ef6\u521b\u5efa\u914d\u7f6e\n\n    \u652f\u6301\u7684\u683c\u5f0f:\n    - YAML (.yaml, .yml)\n    - TOML (.toml)\n    - JSON (.json)\n\n    Args:\n        file_path: \u914d\u7f6e\u6587\u4ef6\u8def\u5f84\n\n    Returns:\n        CacheConfig \u5b9e\u4f8b\n\n    Raises:\n        CacheConfigError: \u6587\u4ef6\u8bfb\u53d6\u6216\u89e3\u6790\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; config = CacheConfig.from_file(\"config/cache.yaml\")\n    \"\"\"\n    file_path = Path(file_path)\n\n    if not file_path.exists():\n        msg = f\"\u914d\u7f6e\u6587\u4ef6\u4e0d\u5b58\u5728: {file_path}\"\n        raise CacheConfigError(msg)\n\n    suffix = file_path.suffix.lower()\n\n    try:\n        if suffix in {\".yaml\", \".yml\"}:\n            return cls._from_yaml(file_path)\n        if suffix == \".toml\":\n            return cls._from_toml(file_path)\n        if suffix == \".json\":\n            return cls._from_json(file_path)\n        msg = f\"\u4e0d\u652f\u6301\u7684\u914d\u7f6e\u6587\u4ef6\u683c\u5f0f: {suffix}\"\n        raise CacheConfigError(msg)\n    except Exception as e:\n        if isinstance(e, CacheConfigError):\n            raise\n        msg = f\"\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\u5931\u8d25: {file_path}\"\n        raise CacheConfigError(msg) from e\n</code></pre>"},{"location":"en/api/config/#symphra_cache.config.CacheConfig.validate_backend","title":"<code>validate_backend()</code>","text":"<p>\u9a8c\u8bc1\u540e\u7aef\u914d\u7f6e</p> Source code in <code>src/symphra_cache/config.py</code> <pre><code>@model_validator(mode=\"after\")\ndef validate_backend(self) -&gt; CacheConfig:\n    \"\"\"\u9a8c\u8bc1\u540e\u7aef\u914d\u7f6e\"\"\"\n    from .backends import get_registered_backends\n\n    # \u9a8c\u8bc1\u540e\u7aef\u7c7b\u578b\n    available_backends = get_registered_backends()\n    if self.backend.lower() not in available_backends:\n        valid_backends = \", \".join(available_backends)\n        msg = f\"\u4e0d\u652f\u6301\u7684\u540e\u7aef\u7c7b\u578b: {self.backend}\u3002\u652f\u6301\u7684\u7c7b\u578b: {valid_backends}\"\n        raise ValueError(msg)\n\n    return self\n</code></pre>"},{"location":"en/api/decorators/","title":"Decorators","text":"<p>Synchronous and asynchronous caching decorators, plus cache invalidation and cached property.</p> <p>\u7f13\u5b58\u88c5\u9970\u5668\uff08\u540c\u6b65\u51fd\u6570\uff09</p> <p>\u81ea\u52a8\u7f13\u5b58\u51fd\u6570\u8fd4\u56de\u503c\uff0c\u63d0\u5347\u6027\u80fd\u3002</p> <p>Parameters:</p> Name Type Description Default <code>manager</code> <code>CacheManager</code> <p>\u7f13\u5b58\u7ba1\u7406\u5668\u5b9e\u4f8b</p> required <code>ttl</code> <code>int | None</code> <p>\u7f13\u5b58\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u8868\u793a\u6c38\u4e0d\u8fc7\u671f</p> <code>None</code> <code>key_builder</code> <code>Callable[[Callable[..., Any], tuple[Any, ...], dict[str, Any]], str] | None</code> <p>\u81ea\u5b9a\u4e49\u952e\u751f\u6210\u51fd\u6570</p> <code>None</code> <code>key_prefix</code> <code>str</code> <p>\u952e\u524d\u7f00\uff08\u7528\u4e8e\u547d\u540d\u7a7a\u95f4\u9694\u79bb\uff09</p> <code>''</code> <p>Returns:</p> Type Description <code>Callable[[F], F]</code> <p>\u88c5\u9970\u540e\u7684\u51fd\u6570</p> <p>\u793a\u4f8b\uff1a     &gt;&gt;&gt; @cache(manager, ttl=3600, key_prefix=\"user:\")     &gt;&gt;&gt; def get_user(user_id: int):     ...     return db.query(User).get(user_id)     &gt;&gt;&gt;     &gt;&gt;&gt; user = get_user(123)  # \u7f13\u5b58 1 \u5c0f\u65f6</p> Source code in <code>src/symphra_cache/decorators.py</code> <pre><code>def cache(\n    manager: CacheManager,\n    ttl: int | None = None,\n    key_builder: Callable[[Callable[..., Any], tuple[Any, ...], dict[str, Any]], str] | None = None,\n    key_prefix: str = \"\",\n) -&gt; Callable[[F], F]:\n    \"\"\"\n    \u7f13\u5b58\u88c5\u9970\u5668\uff08\u540c\u6b65\u51fd\u6570\uff09\n\n    \u81ea\u52a8\u7f13\u5b58\u51fd\u6570\u8fd4\u56de\u503c\uff0c\u63d0\u5347\u6027\u80fd\u3002\n\n    Args:\n        manager: \u7f13\u5b58\u7ba1\u7406\u5668\u5b9e\u4f8b\n        ttl: \u7f13\u5b58\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n        key_builder: \u81ea\u5b9a\u4e49\u952e\u751f\u6210\u51fd\u6570\n        key_prefix: \u952e\u524d\u7f00\uff08\u7528\u4e8e\u547d\u540d\u7a7a\u95f4\u9694\u79bb\uff09\n\n    Returns:\n        \u88c5\u9970\u540e\u7684\u51fd\u6570\n\n    \u793a\u4f8b\uff1a\n        &gt;&gt;&gt; @cache(manager, ttl=3600, key_prefix=\"user:\")\n        &gt;&gt;&gt; def get_user(user_id: int):\n        ...     return db.query(User).get(user_id)\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; user = get_user(123)  # \u7f13\u5b58 1 \u5c0f\u65f6\n    \"\"\"\n\n    def decorator(func: F) -&gt; F:\n        # \u4f7f\u7528\u9ed8\u8ba4\u952e\u751f\u6210\u5668\n        nonlocal key_builder\n        if key_builder is None:\n            key_builder = default_key_builder\n\n        @functools.wraps(func)\n        def wrapper(*args: Any, **kwargs: Any) -&gt; Any:\n            # \u751f\u6210\u7f13\u5b58\u952e\n            cache_key = key_prefix + key_builder(func, args, kwargs)\n\n            # \u5c1d\u8bd5\u4ece\u7f13\u5b58\u83b7\u53d6\n            cached_value = manager.get(cache_key)\n            if cached_value is not None:\n                return cached_value\n\n            # \u7f13\u5b58\u672a\u547d\u4e2d\uff0c\u6267\u884c\u51fd\u6570\n            result = func(*args, **kwargs)\n\n            # \u5b58\u5165\u7f13\u5b58\n            if result is not None:  # \u4e0d\u7f13\u5b58 None \u503c\n                manager.set(cache_key, result, ttl=ttl)\n\n            return result\n\n        return cast(\"F\", wrapper)\n\n    return decorator\n</code></pre> <p>\u7f13\u5b58\u88c5\u9970\u5668\uff08\u5f02\u6b65\u51fd\u6570\uff09</p> <p>\u5f02\u6b65\u7248\u672c\u7684\u7f13\u5b58\u88c5\u9970\u5668\uff0c\u652f\u6301 async/await \u51fd\u6570\u3002</p> <p>Parameters:</p> Name Type Description Default <code>manager</code> <code>CacheManager</code> <p>\u7f13\u5b58\u7ba1\u7406\u5668\u5b9e\u4f8b</p> required <code>ttl</code> <code>int | None</code> <p>\u7f13\u5b58\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09</p> <code>None</code> <code>key_builder</code> <code>Callable[[Callable[..., Any], tuple[Any, ...], dict[str, Any]], str] | None</code> <p>\u81ea\u5b9a\u4e49\u952e\u751f\u6210\u51fd\u6570</p> <code>None</code> <code>key_prefix</code> <code>str</code> <p>\u952e\u524d\u7f00</p> <code>''</code> <p>Returns:</p> Type Description <code>Callable[[AsyncF], AsyncF]</code> <p>\u88c5\u9970\u540e\u7684\u5f02\u6b65\u51fd\u6570</p> <p>\u793a\u4f8b\uff1a     &gt;&gt;&gt; @acache(manager, ttl=600)     &gt;&gt;&gt; async def fetch_data(api_url: str):     ...     async with httpx.AsyncClient() as client:     ...         response = await client.get(api_url)     ...         return response.json()     &gt;&gt;&gt;     &gt;&gt;&gt; data = await fetch_data(\"https://api.example.com/users\")</p> Source code in <code>src/symphra_cache/decorators.py</code> <pre><code>def acache(\n    manager: CacheManager,\n    ttl: int | None = None,\n    key_builder: Callable[[Callable[..., Any], tuple[Any, ...], dict[str, Any]], str] | None = None,\n    key_prefix: str = \"\",\n) -&gt; Callable[[AsyncF], AsyncF]:\n    \"\"\"\n    \u7f13\u5b58\u88c5\u9970\u5668\uff08\u5f02\u6b65\u51fd\u6570\uff09\n\n    \u5f02\u6b65\u7248\u672c\u7684\u7f13\u5b58\u88c5\u9970\u5668\uff0c\u652f\u6301 async/await \u51fd\u6570\u3002\n\n    Args:\n        manager: \u7f13\u5b58\u7ba1\u7406\u5668\u5b9e\u4f8b\n        ttl: \u7f13\u5b58\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\n        key_builder: \u81ea\u5b9a\u4e49\u952e\u751f\u6210\u51fd\u6570\n        key_prefix: \u952e\u524d\u7f00\n\n    Returns:\n        \u88c5\u9970\u540e\u7684\u5f02\u6b65\u51fd\u6570\n\n    \u793a\u4f8b\uff1a\n        &gt;&gt;&gt; @acache(manager, ttl=600)\n        &gt;&gt;&gt; async def fetch_data(api_url: str):\n        ...     async with httpx.AsyncClient() as client:\n        ...         response = await client.get(api_url)\n        ...         return response.json()\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; data = await fetch_data(\"https://api.example.com/users\")\n    \"\"\"\n\n    def decorator(func: AsyncF) -&gt; AsyncF:\n        # \u4f7f\u7528\u9ed8\u8ba4\u952e\u751f\u6210\u5668\n        nonlocal key_builder\n        if key_builder is None:\n            key_builder = default_key_builder\n\n        @functools.wraps(func)\n        async def wrapper(*args: Any, **kwargs: Any) -&gt; Any:\n            # \u751f\u6210\u7f13\u5b58\u952e\n            cache_key = key_prefix + key_builder(func, args, kwargs)\n\n            # \u5c1d\u8bd5\u4ece\u7f13\u5b58\u83b7\u53d6\n            cached_value = await manager.aget(cache_key)\n            if cached_value is not None:\n                return cached_value\n\n            # \u7f13\u5b58\u672a\u547d\u4e2d\uff0c\u6267\u884c\u51fd\u6570\n            result = await func(*args, **kwargs)\n\n            # \u5b58\u5165\u7f13\u5b58\n            if result is not None:\n                await manager.aset(cache_key, result, ttl=ttl)\n\n            return result\n\n        return cast(\"AsyncF\", wrapper)\n\n    return decorator\n</code></pre> <p>\u7f13\u5b58\u5931\u6548\u88c5\u9970\u5668</p> <p>\u5728\u51fd\u6570\u6267\u884c\u540e\uff0c\u5220\u9664\u5bf9\u5e94\u7684\u7f13\u5b58\u3002 \u5e38\u7528\u4e8e\u66f4\u65b0\u64cd\u4f5c\uff08\u5982 update_user \u540e\u6e05\u9664 get_user \u7f13\u5b58\uff09\u3002</p> <p>Parameters:</p> Name Type Description Default <code>manager</code> <code>CacheManager</code> <p>\u7f13\u5b58\u7ba1\u7406\u5668</p> required <code>key_builder</code> <code>Callable[[Callable[..., Any], tuple[Any, ...], dict[str, Any]], str] | None</code> <p>\u952e\u751f\u6210\u51fd\u6570\uff08\u9700\u4e0e @cache \u4e00\u81f4\uff09</p> <code>None</code> <code>key_prefix</code> <code>str</code> <p>\u952e\u524d\u7f00</p> <code>''</code> <p>Returns:</p> Type Description <code>Callable[[F], F]</code> <p>\u88c5\u9970\u540e\u7684\u51fd\u6570</p> <p>\u793a\u4f8b\uff1a     &gt;&gt;&gt; @cache(manager, key_prefix=\"user:\")     &gt;&gt;&gt; def get_user(user_id: int):     ...     return db.query(User).get(user_id)     &gt;&gt;&gt;     &gt;&gt;&gt; @cache_invalidate(manager, key_prefix=\"user:\")     &gt;&gt;&gt; def update_user(user_id: int, **updates):     ...     db.query(User).filter_by(id=user_id).update(updates)     ...     db.commit()     &gt;&gt;&gt;     &gt;&gt;&gt; get_user(123)  # \u7f13\u5b58\u7ed3\u679c     &gt;&gt;&gt; update_user(123, name=\"Bob\")  # \u6e05\u9664\u7f13\u5b58     &gt;&gt;&gt; get_user(123)  # \u91cd\u65b0\u67e5\u8be2\u6570\u636e\u5e93</p> Source code in <code>src/symphra_cache/decorators.py</code> <pre><code>def cache_invalidate(\n    manager: CacheManager,\n    key_builder: Callable[[Callable[..., Any], tuple[Any, ...], dict[str, Any]], str] | None = None,\n    key_prefix: str = \"\",\n) -&gt; Callable[[F], F]:\n    \"\"\"\n    \u7f13\u5b58\u5931\u6548\u88c5\u9970\u5668\n\n    \u5728\u51fd\u6570\u6267\u884c\u540e\uff0c\u5220\u9664\u5bf9\u5e94\u7684\u7f13\u5b58\u3002\n    \u5e38\u7528\u4e8e\u66f4\u65b0\u64cd\u4f5c\uff08\u5982 update_user \u540e\u6e05\u9664 get_user \u7f13\u5b58\uff09\u3002\n\n    Args:\n        manager: \u7f13\u5b58\u7ba1\u7406\u5668\n        key_builder: \u952e\u751f\u6210\u51fd\u6570\uff08\u9700\u4e0e @cache \u4e00\u81f4\uff09\n        key_prefix: \u952e\u524d\u7f00\n\n    Returns:\n        \u88c5\u9970\u540e\u7684\u51fd\u6570\n\n    \u793a\u4f8b\uff1a\n        &gt;&gt;&gt; @cache(manager, key_prefix=\"user:\")\n        &gt;&gt;&gt; def get_user(user_id: int):\n        ...     return db.query(User).get(user_id)\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; @cache_invalidate(manager, key_prefix=\"user:\")\n        &gt;&gt;&gt; def update_user(user_id: int, **updates):\n        ...     db.query(User).filter_by(id=user_id).update(updates)\n        ...     db.commit()\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; get_user(123)  # \u7f13\u5b58\u7ed3\u679c\n        &gt;&gt;&gt; update_user(123, name=\"Bob\")  # \u6e05\u9664\u7f13\u5b58\n        &gt;&gt;&gt; get_user(123)  # \u91cd\u65b0\u67e5\u8be2\u6570\u636e\u5e93\n    \"\"\"\n\n    def decorator(func: F) -&gt; F:\n        nonlocal key_builder\n        if key_builder is None:\n            key_builder = default_key_builder\n\n        @functools.wraps(func)\n        def wrapper(*args: Any, **kwargs: Any) -&gt; Any:\n            # \u5148\u6267\u884c\u51fd\u6570\n            result = func(*args, **kwargs)\n\n            # \u751f\u6210\u7f13\u5b58\u952e\u5e76\u5220\u9664\n            cache_key = key_prefix + key_builder(func, args, kwargs)\n            manager.delete(cache_key)\n\n            return result\n\n        return cast(\"F\", wrapper)\n\n    return decorator\n</code></pre> <p>\u7f13\u5b58\u5c5e\u6027\u88c5\u9970\u5668</p> <p>\u7c7b\u4f3c\u4e8e functools.cached_property\uff0c\u4f46\u4f7f\u7528\u5916\u90e8\u7f13\u5b58\u540e\u7aef\u3002 \u9002\u7528\u4e8e\u9700\u8981\u5728\u591a\u4e2a\u5b9e\u4f8b\u95f4\u5171\u4eab\u7f13\u5b58\u7684\u573a\u666f\u3002</p> <p>\u793a\u4f8b\uff1a     &gt;&gt;&gt; class User:     ...     def init(self, user_id):     ...         self.user_id = user_id     ...     ...     @CachedProperty(manager, ttl=600)     ...     def profile(self):     ...         # \u6570\u636e\u5e93\u67e5\u8be2     ...         return db.query(Profile).get(self.user_id)     &gt;&gt;&gt;     &gt;&gt;&gt; user = User(123)     &gt;&gt;&gt; profile = user.profile  # \u7b2c\u4e00\u6b21\uff1a\u67e5\u8be2\u6570\u636e\u5e93     &gt;&gt;&gt; profile = user.profile  # \u7b2c\u4e8c\u6b21\uff1a\u4ece\u7f13\u5b58\u83b7\u53d6</p> Source code in <code>src/symphra_cache/decorators.py</code> <pre><code>class CachedProperty:\n    \"\"\"\n    \u7f13\u5b58\u5c5e\u6027\u88c5\u9970\u5668\n\n    \u7c7b\u4f3c\u4e8e functools.cached_property\uff0c\u4f46\u4f7f\u7528\u5916\u90e8\u7f13\u5b58\u540e\u7aef\u3002\n    \u9002\u7528\u4e8e\u9700\u8981\u5728\u591a\u4e2a\u5b9e\u4f8b\u95f4\u5171\u4eab\u7f13\u5b58\u7684\u573a\u666f\u3002\n\n    \u793a\u4f8b\uff1a\n        &gt;&gt;&gt; class User:\n        ...     def __init__(self, user_id):\n        ...         self.user_id = user_id\n        ...\n        ...     @CachedProperty(manager, ttl=600)\n        ...     def profile(self):\n        ...         # \u6570\u636e\u5e93\u67e5\u8be2\n        ...         return db.query(Profile).get(self.user_id)\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; user = User(123)\n        &gt;&gt;&gt; profile = user.profile  # \u7b2c\u4e00\u6b21\uff1a\u67e5\u8be2\u6570\u636e\u5e93\n        &gt;&gt;&gt; profile = user.profile  # \u7b2c\u4e8c\u6b21\uff1a\u4ece\u7f13\u5b58\u83b7\u53d6\n    \"\"\"\n\n    def __init__(\n        self,\n        manager: CacheManager,\n        ttl: int | None = None,\n        key_prefix: str = \"\",\n    ) -&gt; None:\n        \"\"\"\n        \u521d\u59cb\u5316\u7f13\u5b58\u5c5e\u6027\n\n        Args:\n            manager: \u7f13\u5b58\u7ba1\u7406\u5668\n            ttl: \u7f13\u5b58\u8fc7\u671f\u65f6\u95f4\n            key_prefix: \u952e\u524d\u7f00\n        \"\"\"\n        self.manager = manager\n        self.ttl = ttl\n        self.key_prefix = key_prefix\n        self.func: Callable[[Any], Any] | None = None\n\n    def __call__(self, func: Callable[[Any], Any]) -&gt; CachedProperty:\n        \"\"\"\u8bbe\u7f6e\u88ab\u88c5\u9970\u7684\u65b9\u6cd5\"\"\"\n        self.func = func\n        return self\n\n    def __get__(self, instance: Any, owner: type | None = None) -&gt; Any:\n        \"\"\"\u63cf\u8ff0\u5668\u534f\u8bae\uff1a\u83b7\u53d6\u5c5e\u6027\u503c\"\"\"\n        if instance is None:\n            return self\n\n        if self.func is None:\n            msg = \"CachedProperty \u672a\u6b63\u786e\u521d\u59cb\u5316\"\n            raise RuntimeError(msg)\n\n        # \u751f\u6210\u7f13\u5b58\u952e\uff08\u57fa\u4e8e\u7c7b\u540d\u3001\u65b9\u6cd5\u540d\u3001\u5b9e\u4f8b ID\uff09\n        cache_key = f\"{self.key_prefix}{owner.__name__}.{self.func.__name__}:{id(instance)}\"\n\n        # \u5c1d\u8bd5\u4ece\u7f13\u5b58\u83b7\u53d6\n        cached_value = self.manager.get(cache_key)\n        if cached_value is not None:\n            return cached_value\n\n        # \u7f13\u5b58\u672a\u547d\u4e2d\uff0c\u8c03\u7528\u65b9\u6cd5\n        result = self.func(instance)\n\n        # \u5b58\u5165\u7f13\u5b58\n        if result is not None:\n            self.manager.set(cache_key, result, ttl=self.ttl)\n\n        return result\n</code></pre>"},{"location":"en/api/decorators/#symphra_cache.decorators.CachedProperty.__call__","title":"<code>__call__(func)</code>","text":"<p>\u8bbe\u7f6e\u88ab\u88c5\u9970\u7684\u65b9\u6cd5</p> Source code in <code>src/symphra_cache/decorators.py</code> <pre><code>def __call__(self, func: Callable[[Any], Any]) -&gt; CachedProperty:\n    \"\"\"\u8bbe\u7f6e\u88ab\u88c5\u9970\u7684\u65b9\u6cd5\"\"\"\n    self.func = func\n    return self\n</code></pre>"},{"location":"en/api/decorators/#symphra_cache.decorators.CachedProperty.__get__","title":"<code>__get__(instance, owner=None)</code>","text":"<p>\u63cf\u8ff0\u5668\u534f\u8bae\uff1a\u83b7\u53d6\u5c5e\u6027\u503c</p> Source code in <code>src/symphra_cache/decorators.py</code> <pre><code>def __get__(self, instance: Any, owner: type | None = None) -&gt; Any:\n    \"\"\"\u63cf\u8ff0\u5668\u534f\u8bae\uff1a\u83b7\u53d6\u5c5e\u6027\u503c\"\"\"\n    if instance is None:\n        return self\n\n    if self.func is None:\n        msg = \"CachedProperty \u672a\u6b63\u786e\u521d\u59cb\u5316\"\n        raise RuntimeError(msg)\n\n    # \u751f\u6210\u7f13\u5b58\u952e\uff08\u57fa\u4e8e\u7c7b\u540d\u3001\u65b9\u6cd5\u540d\u3001\u5b9e\u4f8b ID\uff09\n    cache_key = f\"{self.key_prefix}{owner.__name__}.{self.func.__name__}:{id(instance)}\"\n\n    # \u5c1d\u8bd5\u4ece\u7f13\u5b58\u83b7\u53d6\n    cached_value = self.manager.get(cache_key)\n    if cached_value is not None:\n        return cached_value\n\n    # \u7f13\u5b58\u672a\u547d\u4e2d\uff0c\u8c03\u7528\u65b9\u6cd5\n    result = self.func(instance)\n\n    # \u5b58\u5165\u7f13\u5b58\n    if result is not None:\n        self.manager.set(cache_key, result, ttl=self.ttl)\n\n    return result\n</code></pre>"},{"location":"en/api/decorators/#symphra_cache.decorators.CachedProperty.__init__","title":"<code>__init__(manager, ttl=None, key_prefix='')</code>","text":"<p>\u521d\u59cb\u5316\u7f13\u5b58\u5c5e\u6027</p> <p>Parameters:</p> Name Type Description Default <code>manager</code> <code>CacheManager</code> <p>\u7f13\u5b58\u7ba1\u7406\u5668</p> required <code>ttl</code> <code>int | None</code> <p>\u7f13\u5b58\u8fc7\u671f\u65f6\u95f4</p> <code>None</code> <code>key_prefix</code> <code>str</code> <p>\u952e\u524d\u7f00</p> <code>''</code> Source code in <code>src/symphra_cache/decorators.py</code> <pre><code>def __init__(\n    self,\n    manager: CacheManager,\n    ttl: int | None = None,\n    key_prefix: str = \"\",\n) -&gt; None:\n    \"\"\"\n    \u521d\u59cb\u5316\u7f13\u5b58\u5c5e\u6027\n\n    Args:\n        manager: \u7f13\u5b58\u7ba1\u7406\u5668\n        ttl: \u7f13\u5b58\u8fc7\u671f\u65f6\u95f4\n        key_prefix: \u952e\u524d\u7f00\n    \"\"\"\n    self.manager = manager\n    self.ttl = ttl\n    self.key_prefix = key_prefix\n    self.func: Callable[[Any], Any] | None = None\n</code></pre>"},{"location":"en/api/invalidation/","title":"Invalidation","text":"<p>Cache invalidation utilities and groups.</p> <p>\u7f13\u5b58\u5931\u6548\u5668</p> <p>\u63d0\u4f9b\u591a\u79cd\u7f13\u5b58\u5931\u6548\u7b56\u7565\uff0c\u786e\u4fdd\u6570\u636e\u4e00\u81f4\u6027\u548c\u7f13\u5b58\u66f4\u65b0\u3002</p> <p>\u5931\u6548\u7b56\u7565\uff1a - \u4e3b\u52a8\u5931\u6548\uff1a\u624b\u52a8\u6307\u5b9a\u8981\u5931\u6548\u7684\u952e - \u6a21\u5f0f\u5339\u914d\u5931\u6548\uff1a\u57fa\u4e8e\u901a\u914d\u7b26\u6a21\u5f0f\u5931\u6548 - \u6279\u91cf\u5931\u6548\uff1a\u6e05\u7a7a\u6240\u6709\u6216\u7279\u5b9a\u7c7b\u578b\u7684\u6570\u636e - \u6761\u4ef6\u5931\u6548\uff1a\u57fa\u4e8e\u6761\u4ef6\u8868\u8fbe\u5f0f\u5931\u6548 - \u5206\u5e03\u5f0f\u5931\u6548\uff1a\u8de8\u591a\u4e2a\u7f13\u5b58\u5b9e\u4f8b\u5931\u6548</p> <p>\u4f7f\u7528\u793a\u4f8b\uff1a     &gt;&gt;&gt; invalidator = CacheInvalidator(cache)     &gt;&gt;&gt; await invalidator.invalidate_keys([\"key1\", \"key2\"])     &gt;&gt;&gt; await invalidator.invalidate_pattern(\"user:*\")</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>class CacheInvalidator:\n    \"\"\"\n    \u7f13\u5b58\u5931\u6548\u5668\n\n    \u63d0\u4f9b\u591a\u79cd\u7f13\u5b58\u5931\u6548\u7b56\u7565\uff0c\u786e\u4fdd\u6570\u636e\u4e00\u81f4\u6027\u548c\u7f13\u5b58\u66f4\u65b0\u3002\n\n    \u5931\u6548\u7b56\u7565\uff1a\n    - \u4e3b\u52a8\u5931\u6548\uff1a\u624b\u52a8\u6307\u5b9a\u8981\u5931\u6548\u7684\u952e\n    - \u6a21\u5f0f\u5339\u914d\u5931\u6548\uff1a\u57fa\u4e8e\u901a\u914d\u7b26\u6a21\u5f0f\u5931\u6548\n    - \u6279\u91cf\u5931\u6548\uff1a\u6e05\u7a7a\u6240\u6709\u6216\u7279\u5b9a\u7c7b\u578b\u7684\u6570\u636e\n    - \u6761\u4ef6\u5931\u6548\uff1a\u57fa\u4e8e\u6761\u4ef6\u8868\u8fbe\u5f0f\u5931\u6548\n    - \u5206\u5e03\u5f0f\u5931\u6548\uff1a\u8de8\u591a\u4e2a\u7f13\u5b58\u5b9e\u4f8b\u5931\u6548\n\n    \u4f7f\u7528\u793a\u4f8b\uff1a\n        &gt;&gt;&gt; invalidator = CacheInvalidator(cache)\n        &gt;&gt;&gt; await invalidator.invalidate_keys([\"key1\", \"key2\"])\n        &gt;&gt;&gt; await invalidator.invalidate_pattern(\"user:*\")\n    \"\"\"\n\n    def __init__(\n        self,\n        cache: CacheManager,\n        batch_size: int = 100,\n        enable_distributed: bool = False,\n    ) -&gt; None:\n        \"\"\"\n        \u521d\u59cb\u5316\u7f13\u5b58\u5931\u6548\u5668\n\n        Args:\n            cache: \u7f13\u5b58\u7ba1\u7406\u5668\u5b9e\u4f8b\n            batch_size: \u6279\u91cf\u64cd\u4f5c\u5927\u5c0f\n            enable_distributed: \u662f\u5426\u542f\u7528\u5206\u5e03\u5f0f\u5931\u6548\n        \"\"\"\n        self.cache = cache\n        self.batch_size = batch_size\n        self.enable_distributed = enable_distributed\n        self._invalidation_log: list[dict[str, Any]] = []\n        self._last_invalidation_time = time.time()\n\n    async def invalidate_keys(\n        self,\n        keys: list[CacheKey],\n        batch_size: int | None = None,\n    ) -&gt; int:\n        \"\"\"\n        \u5931\u6548\u6307\u5b9a\u7684\u952e\n\n        Args:\n            keys: \u8981\u5931\u6548\u7684\u952e\u5217\u8868\n            batch_size: \u6279\u91cf\u5927\u5c0f\n\n        Returns:\n            \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n        \"\"\"\n        if not keys:\n            return 0\n\n        batch_size = batch_size if batch_size is not None else self.batch_size\n        total_invalidated = 0\n\n        # \u6279\u91cf\u5931\u6548\uff0c\u907f\u514d\u4e00\u6b21\u6027\u64cd\u4f5c\u8fc7\u591a\u6570\u636e\n        for i in range(0, len(keys), batch_size):\n            batch_keys = keys[i : i + batch_size]\n\n            # \u6279\u91cf\u5220\u9664\n            count = await self.cache.adelete_many(batch_keys)\n            total_invalidated += count\n\n            # \u8bb0\u5f55\u5931\u6548\u65e5\u5fd7\n            self._log_invalidation(\"keys\", batch_keys, count)\n\n            # \u77ed\u6682\u4f11\u7720\u907f\u514d\u963b\u585e\n            if i + batch_size &lt; len(keys):\n                await asyncio.sleep(0.01)\n\n        self._last_invalidation_time = time.time()\n        return total_invalidated\n\n    async def invalidate_pattern(\n        self,\n        pattern: str,\n        max_keys: int | None = None,\n    ) -&gt; int:\n        \"\"\"\n        \u57fa\u4e8e\u6a21\u5f0f\u5339\u914d\u5931\u6548\u952e\n\n        \u652f\u6301\u901a\u914d\u7b26\u6a21\u5f0f\uff08* \u548c ?\uff09\u3002\n\n        Args:\n            pattern: \u5339\u914d\u6a21\u5f0f\uff08\u5982 \"user:*\", \"session:??\"\uff09\n            max_keys: \u6700\u5927\u5931\u6548\u952e\u6570\u91cf\uff0cNone \u8868\u793a\u65e0\u9650\u5236\n\n        Returns:\n            \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n        \"\"\"\n        # \u626b\u63cf\u5339\u914d\u7684\u952e\n        all_keys: list[CacheKey] = []\n        cursor = 0\n\n        while True:\n            page = await self.cache.akeys(pattern=pattern, cursor=cursor, count=100)\n            all_keys.extend(page.keys)\n\n            if not page.has_more or (max_keys and len(all_keys) &gt;= max_keys):\n                break\n            cursor = page.cursor\n\n        # \u9650\u5236\u6570\u91cf\n        if max_keys:\n            all_keys = all_keys[:max_keys]\n\n        # \u5931\u6548\u5339\u914d\u7684\u952e\n        invalidated_count = await self.invalidate_keys(all_keys)\n\n        self._log_invalidation(\n            \"pattern\", {\"pattern\": pattern, \"matched_keys\": len(all_keys)}, invalidated_count\n        )\n        return invalidated_count\n\n    async def invalidate_prefix(self, prefix: str) -&gt; int:\n        \"\"\"\n        \u5931\u6548\u6307\u5b9a\u524d\u7f00\u7684\u6240\u6709\u952e\n\n        Args:\n            prefix: \u952e\u524d\u7f00\n\n        Returns:\n            \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n        \"\"\"\n        return await self.invalidate_pattern(f\"{prefix}*\", max_keys=None)\n\n    async def invalidate_all(self) -&gt; int:\n        \"\"\"\n        \u5931\u6548\u6240\u6709\u7f13\u5b58\n\n        Returns:\n            \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n        \"\"\"\n        try:\n            # \u4f7f\u7528\u7f13\u5b58\u7684 keys \u65b9\u6cd5\u83b7\u53d6\u6240\u6709\u952e\n            all_keys: list[CacheKey] = []\n            cursor = 0\n\n            while True:\n                page = await self.cache.akeys(cursor=cursor, count=100)\n                all_keys.extend(page.keys)\n\n                if not page.has_more:\n                    break\n                cursor = page.cursor\n\n            # \u6279\u91cf\u5931\u6548\n            invalidated_count = await self.invalidate_keys(all_keys)\n\n            self._log_invalidation(\"all\", {\"total_keys\": len(all_keys)}, invalidated_count)\n            return invalidated_count\n\n        except Exception:\n            # \u5982\u679c\u626b\u63cf\u5931\u8d25\uff0c\u4f7f\u7528 clear \u65b9\u6cd5\n            await self.cache.aclear()\n            self._log_invalidation(\"all\", {\"method\": \"clear\"}, len(all_keys) if all_keys else 0)\n            return len(all_keys) if all_keys else 0\n\n    async def invalidate_by_condition(\n        self,\n        condition: Callable[[CacheKey, Any], bool],\n        max_keys: int | None = None,\n    ) -&gt; int:\n        \"\"\"\n        \u57fa\u4e8e\u6761\u4ef6\u5931\u6548\u952e\n\n        Args:\n            condition: \u5931\u6548\u6761\u4ef6\u51fd\u6570\uff0c\u63a5\u6536 (key, value) \u8fd4\u56de\u662f\u5426\u5931\u6548\n            max_keys: \u6700\u5927\u5931\u6548\u952e\u6570\u91cf\n\n        Returns:\n            \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n        \"\"\"\n        # \u626b\u63cf\u6240\u6709\u952e\u5e76\u68c0\u67e5\u6761\u4ef6\n        all_keys_to_invalidate: list[CacheKey] = []\n        cursor = 0\n        total_scanned = 0\n\n        while True:\n            page = await self.cache.akeys(cursor=cursor, count=100)\n\n            for key in page.keys:\n                total_scanned += 1\n\n                # \u83b7\u53d6\u952e\u503c\u5e76\u68c0\u67e5\u6761\u4ef6\n                try:\n                    value = await self.cache.aget(key)\n                    if value is not None and condition(key, value):\n                        all_keys_to_invalidate.append(key)\n\n                        # \u68c0\u67e5\u662f\u5426\u8fbe\u5230\u4e0a\u9650\n                        if max_keys and len(all_keys_to_invalidate) &gt;= max_keys:\n                            break\n\n                except Exception:\n                    # \u5ffd\u7565\u83b7\u53d6\u5931\u8d25\u7684\u952e\n                    continue\n\n            if not page.has_more or (max_keys and len(all_keys_to_invalidate) &gt;= max_keys):\n                break\n            cursor = page.cursor\n\n        # \u5931\u6548\u7b26\u5408\u6761\u4ef6\u7684\u952e\n        invalidated_count = await self.invalidate_keys(all_keys_to_invalidate)\n\n        self._log_invalidation(\n            \"condition\",\n            {\n                \"condition_func\": condition.__name__\n                if hasattr(condition, \"__name__\")\n                else str(condition),\n                \"total_scanned\": total_scanned,\n                \"matched_keys\": len(all_keys_to_invalidate),\n            },\n            invalidated_count,\n        )\n        return invalidated_count\n\n    async def invalidate_with_dependencies(\n        self,\n        keys: list[CacheKey],\n        dependency_resolver: Callable[[list[CacheKey]], list[CacheKey]],\n    ) -&gt; int:\n        \"\"\"\n        \u5931\u6548\u952e\u53ca\u5176\u4f9d\u8d56\u9879\n\n        Args:\n            keys: \u4e3b\u952e\u5217\u8868\n            dependency_resolver: \u4f9d\u8d56\u89e3\u6790\u51fd\u6570\uff0c\u8fd4\u56de\u76f8\u5173\u7684\u4f9d\u8d56\u952e\n\n        Returns:\n            \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n        \"\"\"\n        # \u83b7\u53d6\u4e3b\u952e\n        all_keys_to_invalidate = set(keys)\n\n        # \u89e3\u6790\u4f9d\u8d56\u952e\n        try:\n            dependency_keys = await asyncio.to_thread(dependency_resolver, keys)\n            all_keys_to_invalidate.update(dependency_keys)\n        except Exception as e:\n            print(f\"\u4f9d\u8d56\u89e3\u6790\u5931\u8d25: {e}\")\n\n        # \u5931\u6548\u6240\u6709\u952e\n        invalidated_count = await self.invalidate_keys(list(all_keys_to_invalidate))\n\n        self._log_invalidation(\n            \"dependencies\",\n            {\"primary_keys\": len(keys), \"dependency_keys\": len(all_keys_to_invalidate) - len(keys)},\n            invalidated_count,\n        )\n        return invalidated_count\n\n    def _log_invalidation(\n        self,\n        method: str,\n        details: dict[str, Any],\n        count: int,\n    ) -&gt; None:\n        \"\"\"\n        \u8bb0\u5f55\u5931\u6548\u64cd\u4f5c\u65e5\u5fd7\n\n        Args:\n            method: \u5931\u6548\u65b9\u6cd5\n            details: \u5931\u6548\u8be6\u60c5\n            count: \u5931\u6548\u952e\u6570\u91cf\n        \"\"\"\n        log_entry = {\n            \"timestamp\": time.time(),\n            \"method\": method,\n            \"details\": details,\n            \"invalidated_count\": count,\n        }\n        self._invalidation_log.append(log_entry)\n\n        # \u4fdd\u7559\u6700\u8fd1100\u6761\u65e5\u5fd7\n        if len(self._invalidation_log) &gt; 100:\n            self._invalidation_log.pop(0)\n\n    def get_invalidation_stats(self) -&gt; dict[str, Any]:\n        \"\"\"\n        \u83b7\u53d6\u5931\u6548\u7edf\u8ba1\u4fe1\u606f\n\n        Returns:\n            \u7edf\u8ba1\u4fe1\u606f\u5b57\u5178\n        \"\"\"\n        total_invalidated = sum(entry[\"invalidated_count\"] for entry in self._invalidation_log)\n        last_operation = self._invalidation_log[-1] if self._invalidation_log else None\n\n        return {\n            \"total_operations\": len(self._invalidation_log),\n            \"total_invalidated_keys\": total_invalidated,\n            \"last_invalidation_time\": self._last_invalidation_time,\n            \"last_operation\": last_operation,\n            \"batch_size\": self.batch_size,\n            \"enable_distributed\": self.enable_distributed,\n        }\n\n    def get_invalidation_history(self, limit: int = 10) -&gt; list[dict[str, Any]]:\n        \"\"\"\n        \u83b7\u53d6\u5931\u6548\u5386\u53f2\u8bb0\u5f55\n\n        Args:\n            limit: \u8fd4\u56de\u8bb0\u5f55\u6570\u91cf\n\n        Returns:\n            \u5931\u6548\u5386\u53f2\u5217\u8868\uff08\u6309\u65f6\u95f4\u5012\u5e8f\uff09\n        \"\"\"\n        return self._invalidation_log[-limit:][::-1]\n\n    async def schedule_invalidation(\n        self,\n        keys: list[CacheKey],\n        delay: float,\n    ) -&gt; asyncio.Task[int]:\n        \"\"\"\n        \u5ef6\u8fdf\u5931\u6548\n\n        Args:\n            keys: \u8981\u5931\u6548\u7684\u952e\n            delay: \u5ef6\u8fdf\u65f6\u95f4\uff08\u79d2\uff09\n\n        Returns:\n            \u5f02\u6b65\u4efb\u52a1\u5bf9\u8c61\n        \"\"\"\n\n        async def _delayed_invalidation() -&gt; int:\n            await asyncio.sleep(delay)\n            return await self.invalidate_keys(keys)\n\n        task = asyncio.create_task(_delayed_invalidation())\n        return task\n\n    async def conditional_invalidation(\n        self,\n        condition: Callable[[], bool],\n        keys: list[CacheKey],\n        check_interval: float = 1.0,\n    ) -&gt; asyncio.Task[int]:\n        \"\"\"\n        \u6761\u4ef6\u5931\u6548\n\n        \u5f53\u6761\u4ef6\u6ee1\u8db3\u65f6\u624d\u5931\u6548\u7f13\u5b58\u3002\n\n        Args:\n            condition: \u5931\u6548\u6761\u4ef6\u51fd\u6570\n            keys: \u8981\u5931\u6548\u7684\u952e\n            check_interval: \u6761\u4ef6\u68c0\u67e5\u95f4\u9694\uff08\u79d2\uff09\n\n        Returns:\n            \u5f02\u6b65\u4efb\u52a1\u5bf9\u8c61\n        \"\"\"\n\n        async def _conditional_invalidation() -&gt; int:\n            while True:\n                if condition():\n                    return await self.invalidate_keys(keys)\n                await asyncio.sleep(check_interval)\n\n        task = asyncio.create_task(_conditional_invalidation())\n        return task\n\n    def create_cache_group_invalidator(self, group_prefix: str) -&gt; CacheGroupInvalidator:\n        \"\"\"\n        \u521b\u5efa\u7f13\u5b58\u7ec4\u5931\u6548\u5668\n\n        \u4e13\u95e8\u7528\u4e8e\u7ba1\u7406\u5177\u6709\u76f8\u540c\u524d\u7f00\u7684\u7f13\u5b58\u952e\u3002\n\n        Args:\n            group_prefix: \u7ec4\u524d\u7f00\n\n        Returns:\n            \u7f13\u5b58\u7ec4\u5931\u6548\u5668\n        \"\"\"\n        return CacheGroupInvalidator(self, group_prefix)\n\n    async def close(self) -&gt; None:\n        \"\"\"\n        \u5173\u95ed\u5931\u6548\u5668\n        \"\"\"\n        # \u6e05\u7406\u8d44\u6e90\n        self._invalidation_log.clear()\n</code></pre> <p>\u7f13\u5b58\u7ec4\u5931\u6548\u5668</p> <p>\u4e13\u95e8\u7ba1\u7406\u5177\u6709\u76f8\u540c\u524d\u7f00\u7684\u7f13\u5b58\u952e\u7684\u5931\u6548\u3002</p> <p>\u4f7f\u7528\u793a\u4f8b\uff1a     &gt;&gt;&gt; group_invalidator = invalidator.create_cache_group_invalidator(\"user:\")     &gt;&gt;&gt; await group_invalidator.invalidate_all()     &gt;&gt;&gt; await group_invalidator.invalidate_pattern(\"*:profile\")</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>class CacheGroupInvalidator:\n    \"\"\"\n    \u7f13\u5b58\u7ec4\u5931\u6548\u5668\n\n    \u4e13\u95e8\u7ba1\u7406\u5177\u6709\u76f8\u540c\u524d\u7f00\u7684\u7f13\u5b58\u952e\u7684\u5931\u6548\u3002\n\n    \u4f7f\u7528\u793a\u4f8b\uff1a\n        &gt;&gt;&gt; group_invalidator = invalidator.create_cache_group_invalidator(\"user:\")\n        &gt;&gt;&gt; await group_invalidator.invalidate_all()\n        &gt;&gt;&gt; await group_invalidator.invalidate_pattern(\"*:profile\")\n    \"\"\"\n\n    def __init__(self, parent: CacheInvalidator, group_prefix: str) -&gt; None:\n        \"\"\"\n        \u521d\u59cb\u5316\u7f13\u5b58\u7ec4\u5931\u6548\u5668\n\n        Args:\n            parent: \u7236\u5931\u6548\u5668\n            group_prefix: \u7ec4\u524d\u7f00\n        \"\"\"\n        self.parent = parent\n        self.group_prefix = group_prefix\n\n    async def invalidate_all(self) -&gt; int:\n        \"\"\"\n        \u5931\u6548\u6574\u4e2a\u7ec4\u7684\u6240\u6709\u952e\n\n        Returns:\n            \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n        \"\"\"\n        return await self.parent.invalidate_prefix(self.group_prefix)\n\n    async def invalidate_pattern(self, pattern: str) -&gt; int:\n        \"\"\"\n        \u5931\u6548\u7ec4\u5185\u5339\u914d\u6a21\u5f0f\u7684\u952e\n\n        Args:\n            pattern: \u76f8\u5bf9\u4e8e\u7ec4\u524d\u7f00\u7684\u6a21\u5f0f\n\n        Returns:\n            \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n        \"\"\"\n        full_pattern = f\"{self.group_prefix}{pattern}\"\n        return await self.parent.invalidate_pattern(full_pattern)\n\n    async def invalidate_keys(self, relative_keys: list[str]) -&gt; int:\n        \"\"\"\n        \u5931\u6548\u7ec4\u5185\u7684\u6307\u5b9a\u952e\n\n        Args:\n            relative_keys: \u76f8\u5bf9\u4e8e\u7ec4\u524d\u7f00\u7684\u952e\u540d\u5217\u8868\n\n        Returns:\n            \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n        \"\"\"\n        from typing import cast\n\n        full_keys = cast(\"list[CacheKey]\", [f\"{self.group_prefix}{key}\" for key in relative_keys])\n        return await self.parent.invalidate_keys(full_keys)\n\n    def get_stats(self) -&gt; dict[str, Any]:\n        \"\"\"\n        \u83b7\u53d6\u7ec4\u5931\u6548\u7edf\u8ba1\n\n        Returns:\n            \u7edf\u8ba1\u4fe1\u606f\n        \"\"\"\n        return {\n            \"group_prefix\": self.group_prefix,\n            \"parent_stats\": self.parent.get_invalidation_stats(),\n        }\n</code></pre> <p>\u521b\u5efa\u7f13\u5b58\u5931\u6548\u5668\u5de5\u5382\u51fd\u6570</p> <p>Parameters:</p> Name Type Description Default <code>cache</code> <code>CacheManager</code> <p>\u7f13\u5b58\u7ba1\u7406\u5668</p> required <code>strategy</code> <code>str</code> <p>\u5931\u6548\u7b56\u7565</p> <code>'default'</code> <code>**kwargs</code> <code>Any</code> <p>\u5176\u4ed6\u53c2\u6570</p> <code>{}</code> <p>Returns:</p> Type Description <code>CacheInvalidator</code> <p>\u7f13\u5b58\u5931\u6548\u5668\u5b9e\u4f8b</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>def create_invalidator(\n    cache: CacheManager,\n    strategy: str = \"default\",\n    **kwargs: Any,\n) -&gt; CacheInvalidator:\n    \"\"\"\n    \u521b\u5efa\u7f13\u5b58\u5931\u6548\u5668\u5de5\u5382\u51fd\u6570\n\n    Args:\n        cache: \u7f13\u5b58\u7ba1\u7406\u5668\n        strategy: \u5931\u6548\u7b56\u7565\n        **kwargs: \u5176\u4ed6\u53c2\u6570\n\n    Returns:\n        \u7f13\u5b58\u5931\u6548\u5668\u5b9e\u4f8b\n    \"\"\"\n    return CacheInvalidator(cache, **kwargs)\n</code></pre>"},{"location":"en/api/invalidation/#symphra_cache.invalidation.CacheInvalidator.__init__","title":"<code>__init__(cache, batch_size=100, enable_distributed=False)</code>","text":"<p>\u521d\u59cb\u5316\u7f13\u5b58\u5931\u6548\u5668</p> <p>Parameters:</p> Name Type Description Default <code>cache</code> <code>CacheManager</code> <p>\u7f13\u5b58\u7ba1\u7406\u5668\u5b9e\u4f8b</p> required <code>batch_size</code> <code>int</code> <p>\u6279\u91cf\u64cd\u4f5c\u5927\u5c0f</p> <code>100</code> <code>enable_distributed</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528\u5206\u5e03\u5f0f\u5931\u6548</p> <code>False</code> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>def __init__(\n    self,\n    cache: CacheManager,\n    batch_size: int = 100,\n    enable_distributed: bool = False,\n) -&gt; None:\n    \"\"\"\n    \u521d\u59cb\u5316\u7f13\u5b58\u5931\u6548\u5668\n\n    Args:\n        cache: \u7f13\u5b58\u7ba1\u7406\u5668\u5b9e\u4f8b\n        batch_size: \u6279\u91cf\u64cd\u4f5c\u5927\u5c0f\n        enable_distributed: \u662f\u5426\u542f\u7528\u5206\u5e03\u5f0f\u5931\u6548\n    \"\"\"\n    self.cache = cache\n    self.batch_size = batch_size\n    self.enable_distributed = enable_distributed\n    self._invalidation_log: list[dict[str, Any]] = []\n    self._last_invalidation_time = time.time()\n</code></pre>"},{"location":"en/api/invalidation/#symphra_cache.invalidation.CacheInvalidator.close","title":"<code>close()</code>  <code>async</code>","text":"<p>\u5173\u95ed\u5931\u6548\u5668</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>async def close(self) -&gt; None:\n    \"\"\"\n    \u5173\u95ed\u5931\u6548\u5668\n    \"\"\"\n    # \u6e05\u7406\u8d44\u6e90\n    self._invalidation_log.clear()\n</code></pre>"},{"location":"en/api/invalidation/#symphra_cache.invalidation.CacheInvalidator.conditional_invalidation","title":"<code>conditional_invalidation(condition, keys, check_interval=1.0)</code>  <code>async</code>","text":"<p>\u6761\u4ef6\u5931\u6548</p> <p>\u5f53\u6761\u4ef6\u6ee1\u8db3\u65f6\u624d\u5931\u6548\u7f13\u5b58\u3002</p> <p>Parameters:</p> Name Type Description Default <code>condition</code> <code>Callable[[], bool]</code> <p>\u5931\u6548\u6761\u4ef6\u51fd\u6570</p> required <code>keys</code> <code>list[CacheKey]</code> <p>\u8981\u5931\u6548\u7684\u952e</p> required <code>check_interval</code> <code>float</code> <p>\u6761\u4ef6\u68c0\u67e5\u95f4\u9694\uff08\u79d2\uff09</p> <code>1.0</code> <p>Returns:</p> Type Description <code>Task[int]</code> <p>\u5f02\u6b65\u4efb\u52a1\u5bf9\u8c61</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>async def conditional_invalidation(\n    self,\n    condition: Callable[[], bool],\n    keys: list[CacheKey],\n    check_interval: float = 1.0,\n) -&gt; asyncio.Task[int]:\n    \"\"\"\n    \u6761\u4ef6\u5931\u6548\n\n    \u5f53\u6761\u4ef6\u6ee1\u8db3\u65f6\u624d\u5931\u6548\u7f13\u5b58\u3002\n\n    Args:\n        condition: \u5931\u6548\u6761\u4ef6\u51fd\u6570\n        keys: \u8981\u5931\u6548\u7684\u952e\n        check_interval: \u6761\u4ef6\u68c0\u67e5\u95f4\u9694\uff08\u79d2\uff09\n\n    Returns:\n        \u5f02\u6b65\u4efb\u52a1\u5bf9\u8c61\n    \"\"\"\n\n    async def _conditional_invalidation() -&gt; int:\n        while True:\n            if condition():\n                return await self.invalidate_keys(keys)\n            await asyncio.sleep(check_interval)\n\n    task = asyncio.create_task(_conditional_invalidation())\n    return task\n</code></pre>"},{"location":"en/api/invalidation/#symphra_cache.invalidation.CacheInvalidator.create_cache_group_invalidator","title":"<code>create_cache_group_invalidator(group_prefix)</code>","text":"<p>\u521b\u5efa\u7f13\u5b58\u7ec4\u5931\u6548\u5668</p> <p>\u4e13\u95e8\u7528\u4e8e\u7ba1\u7406\u5177\u6709\u76f8\u540c\u524d\u7f00\u7684\u7f13\u5b58\u952e\u3002</p> <p>Parameters:</p> Name Type Description Default <code>group_prefix</code> <code>str</code> <p>\u7ec4\u524d\u7f00</p> required <p>Returns:</p> Type Description <code>CacheGroupInvalidator</code> <p>\u7f13\u5b58\u7ec4\u5931\u6548\u5668</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>def create_cache_group_invalidator(self, group_prefix: str) -&gt; CacheGroupInvalidator:\n    \"\"\"\n    \u521b\u5efa\u7f13\u5b58\u7ec4\u5931\u6548\u5668\n\n    \u4e13\u95e8\u7528\u4e8e\u7ba1\u7406\u5177\u6709\u76f8\u540c\u524d\u7f00\u7684\u7f13\u5b58\u952e\u3002\n\n    Args:\n        group_prefix: \u7ec4\u524d\u7f00\n\n    Returns:\n        \u7f13\u5b58\u7ec4\u5931\u6548\u5668\n    \"\"\"\n    return CacheGroupInvalidator(self, group_prefix)\n</code></pre>"},{"location":"en/api/invalidation/#symphra_cache.invalidation.CacheInvalidator.get_invalidation_history","title":"<code>get_invalidation_history(limit=10)</code>","text":"<p>\u83b7\u53d6\u5931\u6548\u5386\u53f2\u8bb0\u5f55</p> <p>Parameters:</p> Name Type Description Default <code>limit</code> <code>int</code> <p>\u8fd4\u56de\u8bb0\u5f55\u6570\u91cf</p> <code>10</code> <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>\u5931\u6548\u5386\u53f2\u5217\u8868\uff08\u6309\u65f6\u95f4\u5012\u5e8f\uff09</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>def get_invalidation_history(self, limit: int = 10) -&gt; list[dict[str, Any]]:\n    \"\"\"\n    \u83b7\u53d6\u5931\u6548\u5386\u53f2\u8bb0\u5f55\n\n    Args:\n        limit: \u8fd4\u56de\u8bb0\u5f55\u6570\u91cf\n\n    Returns:\n        \u5931\u6548\u5386\u53f2\u5217\u8868\uff08\u6309\u65f6\u95f4\u5012\u5e8f\uff09\n    \"\"\"\n    return self._invalidation_log[-limit:][::-1]\n</code></pre>"},{"location":"en/api/invalidation/#symphra_cache.invalidation.CacheInvalidator.get_invalidation_stats","title":"<code>get_invalidation_stats()</code>","text":"<p>\u83b7\u53d6\u5931\u6548\u7edf\u8ba1\u4fe1\u606f</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>\u7edf\u8ba1\u4fe1\u606f\u5b57\u5178</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>def get_invalidation_stats(self) -&gt; dict[str, Any]:\n    \"\"\"\n    \u83b7\u53d6\u5931\u6548\u7edf\u8ba1\u4fe1\u606f\n\n    Returns:\n        \u7edf\u8ba1\u4fe1\u606f\u5b57\u5178\n    \"\"\"\n    total_invalidated = sum(entry[\"invalidated_count\"] for entry in self._invalidation_log)\n    last_operation = self._invalidation_log[-1] if self._invalidation_log else None\n\n    return {\n        \"total_operations\": len(self._invalidation_log),\n        \"total_invalidated_keys\": total_invalidated,\n        \"last_invalidation_time\": self._last_invalidation_time,\n        \"last_operation\": last_operation,\n        \"batch_size\": self.batch_size,\n        \"enable_distributed\": self.enable_distributed,\n    }\n</code></pre>"},{"location":"en/api/invalidation/#symphra_cache.invalidation.CacheInvalidator.invalidate_all","title":"<code>invalidate_all()</code>  <code>async</code>","text":"<p>\u5931\u6548\u6240\u6709\u7f13\u5b58</p> <p>Returns:</p> Type Description <code>int</code> <p>\u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>async def invalidate_all(self) -&gt; int:\n    \"\"\"\n    \u5931\u6548\u6240\u6709\u7f13\u5b58\n\n    Returns:\n        \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n    \"\"\"\n    try:\n        # \u4f7f\u7528\u7f13\u5b58\u7684 keys \u65b9\u6cd5\u83b7\u53d6\u6240\u6709\u952e\n        all_keys: list[CacheKey] = []\n        cursor = 0\n\n        while True:\n            page = await self.cache.akeys(cursor=cursor, count=100)\n            all_keys.extend(page.keys)\n\n            if not page.has_more:\n                break\n            cursor = page.cursor\n\n        # \u6279\u91cf\u5931\u6548\n        invalidated_count = await self.invalidate_keys(all_keys)\n\n        self._log_invalidation(\"all\", {\"total_keys\": len(all_keys)}, invalidated_count)\n        return invalidated_count\n\n    except Exception:\n        # \u5982\u679c\u626b\u63cf\u5931\u8d25\uff0c\u4f7f\u7528 clear \u65b9\u6cd5\n        await self.cache.aclear()\n        self._log_invalidation(\"all\", {\"method\": \"clear\"}, len(all_keys) if all_keys else 0)\n        return len(all_keys) if all_keys else 0\n</code></pre>"},{"location":"en/api/invalidation/#symphra_cache.invalidation.CacheInvalidator.invalidate_by_condition","title":"<code>invalidate_by_condition(condition, max_keys=None)</code>  <code>async</code>","text":"<p>\u57fa\u4e8e\u6761\u4ef6\u5931\u6548\u952e</p> <p>Parameters:</p> Name Type Description Default <code>condition</code> <code>Callable[[CacheKey, Any], bool]</code> <p>\u5931\u6548\u6761\u4ef6\u51fd\u6570\uff0c\u63a5\u6536 (key, value) \u8fd4\u56de\u662f\u5426\u5931\u6548</p> required <code>max_keys</code> <code>int | None</code> <p>\u6700\u5927\u5931\u6548\u952e\u6570\u91cf</p> <code>None</code> <p>Returns:</p> Type Description <code>int</code> <p>\u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>async def invalidate_by_condition(\n    self,\n    condition: Callable[[CacheKey, Any], bool],\n    max_keys: int | None = None,\n) -&gt; int:\n    \"\"\"\n    \u57fa\u4e8e\u6761\u4ef6\u5931\u6548\u952e\n\n    Args:\n        condition: \u5931\u6548\u6761\u4ef6\u51fd\u6570\uff0c\u63a5\u6536 (key, value) \u8fd4\u56de\u662f\u5426\u5931\u6548\n        max_keys: \u6700\u5927\u5931\u6548\u952e\u6570\u91cf\n\n    Returns:\n        \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n    \"\"\"\n    # \u626b\u63cf\u6240\u6709\u952e\u5e76\u68c0\u67e5\u6761\u4ef6\n    all_keys_to_invalidate: list[CacheKey] = []\n    cursor = 0\n    total_scanned = 0\n\n    while True:\n        page = await self.cache.akeys(cursor=cursor, count=100)\n\n        for key in page.keys:\n            total_scanned += 1\n\n            # \u83b7\u53d6\u952e\u503c\u5e76\u68c0\u67e5\u6761\u4ef6\n            try:\n                value = await self.cache.aget(key)\n                if value is not None and condition(key, value):\n                    all_keys_to_invalidate.append(key)\n\n                    # \u68c0\u67e5\u662f\u5426\u8fbe\u5230\u4e0a\u9650\n                    if max_keys and len(all_keys_to_invalidate) &gt;= max_keys:\n                        break\n\n            except Exception:\n                # \u5ffd\u7565\u83b7\u53d6\u5931\u8d25\u7684\u952e\n                continue\n\n        if not page.has_more or (max_keys and len(all_keys_to_invalidate) &gt;= max_keys):\n            break\n        cursor = page.cursor\n\n    # \u5931\u6548\u7b26\u5408\u6761\u4ef6\u7684\u952e\n    invalidated_count = await self.invalidate_keys(all_keys_to_invalidate)\n\n    self._log_invalidation(\n        \"condition\",\n        {\n            \"condition_func\": condition.__name__\n            if hasattr(condition, \"__name__\")\n            else str(condition),\n            \"total_scanned\": total_scanned,\n            \"matched_keys\": len(all_keys_to_invalidate),\n        },\n        invalidated_count,\n    )\n    return invalidated_count\n</code></pre>"},{"location":"en/api/invalidation/#symphra_cache.invalidation.CacheInvalidator.invalidate_keys","title":"<code>invalidate_keys(keys, batch_size=None)</code>  <code>async</code>","text":"<p>\u5931\u6548\u6307\u5b9a\u7684\u952e</p> <p>Parameters:</p> Name Type Description Default <code>keys</code> <code>list[CacheKey]</code> <p>\u8981\u5931\u6548\u7684\u952e\u5217\u8868</p> required <code>batch_size</code> <code>int | None</code> <p>\u6279\u91cf\u5927\u5c0f</p> <code>None</code> <p>Returns:</p> Type Description <code>int</code> <p>\u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>async def invalidate_keys(\n    self,\n    keys: list[CacheKey],\n    batch_size: int | None = None,\n) -&gt; int:\n    \"\"\"\n    \u5931\u6548\u6307\u5b9a\u7684\u952e\n\n    Args:\n        keys: \u8981\u5931\u6548\u7684\u952e\u5217\u8868\n        batch_size: \u6279\u91cf\u5927\u5c0f\n\n    Returns:\n        \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n    \"\"\"\n    if not keys:\n        return 0\n\n    batch_size = batch_size if batch_size is not None else self.batch_size\n    total_invalidated = 0\n\n    # \u6279\u91cf\u5931\u6548\uff0c\u907f\u514d\u4e00\u6b21\u6027\u64cd\u4f5c\u8fc7\u591a\u6570\u636e\n    for i in range(0, len(keys), batch_size):\n        batch_keys = keys[i : i + batch_size]\n\n        # \u6279\u91cf\u5220\u9664\n        count = await self.cache.adelete_many(batch_keys)\n        total_invalidated += count\n\n        # \u8bb0\u5f55\u5931\u6548\u65e5\u5fd7\n        self._log_invalidation(\"keys\", batch_keys, count)\n\n        # \u77ed\u6682\u4f11\u7720\u907f\u514d\u963b\u585e\n        if i + batch_size &lt; len(keys):\n            await asyncio.sleep(0.01)\n\n    self._last_invalidation_time = time.time()\n    return total_invalidated\n</code></pre>"},{"location":"en/api/invalidation/#symphra_cache.invalidation.CacheInvalidator.invalidate_pattern","title":"<code>invalidate_pattern(pattern, max_keys=None)</code>  <code>async</code>","text":"<p>\u57fa\u4e8e\u6a21\u5f0f\u5339\u914d\u5931\u6548\u952e</p> <p>\u652f\u6301\u901a\u914d\u7b26\u6a21\u5f0f\uff08* \u548c ?\uff09\u3002</p> <p>Parameters:</p> Name Type Description Default <code>pattern</code> <code>str</code> <p>\u5339\u914d\u6a21\u5f0f\uff08\u5982 \"user:*\", \"session:??\"\uff09</p> required <code>max_keys</code> <code>int | None</code> <p>\u6700\u5927\u5931\u6548\u952e\u6570\u91cf\uff0cNone \u8868\u793a\u65e0\u9650\u5236</p> <code>None</code> <p>Returns:</p> Type Description <code>int</code> <p>\u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>async def invalidate_pattern(\n    self,\n    pattern: str,\n    max_keys: int | None = None,\n) -&gt; int:\n    \"\"\"\n    \u57fa\u4e8e\u6a21\u5f0f\u5339\u914d\u5931\u6548\u952e\n\n    \u652f\u6301\u901a\u914d\u7b26\u6a21\u5f0f\uff08* \u548c ?\uff09\u3002\n\n    Args:\n        pattern: \u5339\u914d\u6a21\u5f0f\uff08\u5982 \"user:*\", \"session:??\"\uff09\n        max_keys: \u6700\u5927\u5931\u6548\u952e\u6570\u91cf\uff0cNone \u8868\u793a\u65e0\u9650\u5236\n\n    Returns:\n        \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n    \"\"\"\n    # \u626b\u63cf\u5339\u914d\u7684\u952e\n    all_keys: list[CacheKey] = []\n    cursor = 0\n\n    while True:\n        page = await self.cache.akeys(pattern=pattern, cursor=cursor, count=100)\n        all_keys.extend(page.keys)\n\n        if not page.has_more or (max_keys and len(all_keys) &gt;= max_keys):\n            break\n        cursor = page.cursor\n\n    # \u9650\u5236\u6570\u91cf\n    if max_keys:\n        all_keys = all_keys[:max_keys]\n\n    # \u5931\u6548\u5339\u914d\u7684\u952e\n    invalidated_count = await self.invalidate_keys(all_keys)\n\n    self._log_invalidation(\n        \"pattern\", {\"pattern\": pattern, \"matched_keys\": len(all_keys)}, invalidated_count\n    )\n    return invalidated_count\n</code></pre>"},{"location":"en/api/invalidation/#symphra_cache.invalidation.CacheInvalidator.invalidate_prefix","title":"<code>invalidate_prefix(prefix)</code>  <code>async</code>","text":"<p>\u5931\u6548\u6307\u5b9a\u524d\u7f00\u7684\u6240\u6709\u952e</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>\u952e\u524d\u7f00</p> required <p>Returns:</p> Type Description <code>int</code> <p>\u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>async def invalidate_prefix(self, prefix: str) -&gt; int:\n    \"\"\"\n    \u5931\u6548\u6307\u5b9a\u524d\u7f00\u7684\u6240\u6709\u952e\n\n    Args:\n        prefix: \u952e\u524d\u7f00\n\n    Returns:\n        \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n    \"\"\"\n    return await self.invalidate_pattern(f\"{prefix}*\", max_keys=None)\n</code></pre>"},{"location":"en/api/invalidation/#symphra_cache.invalidation.CacheInvalidator.invalidate_with_dependencies","title":"<code>invalidate_with_dependencies(keys, dependency_resolver)</code>  <code>async</code>","text":"<p>\u5931\u6548\u952e\u53ca\u5176\u4f9d\u8d56\u9879</p> <p>Parameters:</p> Name Type Description Default <code>keys</code> <code>list[CacheKey]</code> <p>\u4e3b\u952e\u5217\u8868</p> required <code>dependency_resolver</code> <code>Callable[[list[CacheKey]], list[CacheKey]]</code> <p>\u4f9d\u8d56\u89e3\u6790\u51fd\u6570\uff0c\u8fd4\u56de\u76f8\u5173\u7684\u4f9d\u8d56\u952e</p> required <p>Returns:</p> Type Description <code>int</code> <p>\u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>async def invalidate_with_dependencies(\n    self,\n    keys: list[CacheKey],\n    dependency_resolver: Callable[[list[CacheKey]], list[CacheKey]],\n) -&gt; int:\n    \"\"\"\n    \u5931\u6548\u952e\u53ca\u5176\u4f9d\u8d56\u9879\n\n    Args:\n        keys: \u4e3b\u952e\u5217\u8868\n        dependency_resolver: \u4f9d\u8d56\u89e3\u6790\u51fd\u6570\uff0c\u8fd4\u56de\u76f8\u5173\u7684\u4f9d\u8d56\u952e\n\n    Returns:\n        \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n    \"\"\"\n    # \u83b7\u53d6\u4e3b\u952e\n    all_keys_to_invalidate = set(keys)\n\n    # \u89e3\u6790\u4f9d\u8d56\u952e\n    try:\n        dependency_keys = await asyncio.to_thread(dependency_resolver, keys)\n        all_keys_to_invalidate.update(dependency_keys)\n    except Exception as e:\n        print(f\"\u4f9d\u8d56\u89e3\u6790\u5931\u8d25: {e}\")\n\n    # \u5931\u6548\u6240\u6709\u952e\n    invalidated_count = await self.invalidate_keys(list(all_keys_to_invalidate))\n\n    self._log_invalidation(\n        \"dependencies\",\n        {\"primary_keys\": len(keys), \"dependency_keys\": len(all_keys_to_invalidate) - len(keys)},\n        invalidated_count,\n    )\n    return invalidated_count\n</code></pre>"},{"location":"en/api/invalidation/#symphra_cache.invalidation.CacheInvalidator.schedule_invalidation","title":"<code>schedule_invalidation(keys, delay)</code>  <code>async</code>","text":"<p>\u5ef6\u8fdf\u5931\u6548</p> <p>Parameters:</p> Name Type Description Default <code>keys</code> <code>list[CacheKey]</code> <p>\u8981\u5931\u6548\u7684\u952e</p> required <code>delay</code> <code>float</code> <p>\u5ef6\u8fdf\u65f6\u95f4\uff08\u79d2\uff09</p> required <p>Returns:</p> Type Description <code>Task[int]</code> <p>\u5f02\u6b65\u4efb\u52a1\u5bf9\u8c61</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>async def schedule_invalidation(\n    self,\n    keys: list[CacheKey],\n    delay: float,\n) -&gt; asyncio.Task[int]:\n    \"\"\"\n    \u5ef6\u8fdf\u5931\u6548\n\n    Args:\n        keys: \u8981\u5931\u6548\u7684\u952e\n        delay: \u5ef6\u8fdf\u65f6\u95f4\uff08\u79d2\uff09\n\n    Returns:\n        \u5f02\u6b65\u4efb\u52a1\u5bf9\u8c61\n    \"\"\"\n\n    async def _delayed_invalidation() -&gt; int:\n        await asyncio.sleep(delay)\n        return await self.invalidate_keys(keys)\n\n    task = asyncio.create_task(_delayed_invalidation())\n    return task\n</code></pre>"},{"location":"en/api/invalidation/#symphra_cache.invalidation.CacheGroupInvalidator.__init__","title":"<code>__init__(parent, group_prefix)</code>","text":"<p>\u521d\u59cb\u5316\u7f13\u5b58\u7ec4\u5931\u6548\u5668</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>CacheInvalidator</code> <p>\u7236\u5931\u6548\u5668</p> required <code>group_prefix</code> <code>str</code> <p>\u7ec4\u524d\u7f00</p> required Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>def __init__(self, parent: CacheInvalidator, group_prefix: str) -&gt; None:\n    \"\"\"\n    \u521d\u59cb\u5316\u7f13\u5b58\u7ec4\u5931\u6548\u5668\n\n    Args:\n        parent: \u7236\u5931\u6548\u5668\n        group_prefix: \u7ec4\u524d\u7f00\n    \"\"\"\n    self.parent = parent\n    self.group_prefix = group_prefix\n</code></pre>"},{"location":"en/api/invalidation/#symphra_cache.invalidation.CacheGroupInvalidator.get_stats","title":"<code>get_stats()</code>","text":"<p>\u83b7\u53d6\u7ec4\u5931\u6548\u7edf\u8ba1</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>\u7edf\u8ba1\u4fe1\u606f</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>def get_stats(self) -&gt; dict[str, Any]:\n    \"\"\"\n    \u83b7\u53d6\u7ec4\u5931\u6548\u7edf\u8ba1\n\n    Returns:\n        \u7edf\u8ba1\u4fe1\u606f\n    \"\"\"\n    return {\n        \"group_prefix\": self.group_prefix,\n        \"parent_stats\": self.parent.get_invalidation_stats(),\n    }\n</code></pre>"},{"location":"en/api/invalidation/#symphra_cache.invalidation.CacheGroupInvalidator.invalidate_all","title":"<code>invalidate_all()</code>  <code>async</code>","text":"<p>\u5931\u6548\u6574\u4e2a\u7ec4\u7684\u6240\u6709\u952e</p> <p>Returns:</p> Type Description <code>int</code> <p>\u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>async def invalidate_all(self) -&gt; int:\n    \"\"\"\n    \u5931\u6548\u6574\u4e2a\u7ec4\u7684\u6240\u6709\u952e\n\n    Returns:\n        \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n    \"\"\"\n    return await self.parent.invalidate_prefix(self.group_prefix)\n</code></pre>"},{"location":"en/api/invalidation/#symphra_cache.invalidation.CacheGroupInvalidator.invalidate_keys","title":"<code>invalidate_keys(relative_keys)</code>  <code>async</code>","text":"<p>\u5931\u6548\u7ec4\u5185\u7684\u6307\u5b9a\u952e</p> <p>Parameters:</p> Name Type Description Default <code>relative_keys</code> <code>list[str]</code> <p>\u76f8\u5bf9\u4e8e\u7ec4\u524d\u7f00\u7684\u952e\u540d\u5217\u8868</p> required <p>Returns:</p> Type Description <code>int</code> <p>\u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>async def invalidate_keys(self, relative_keys: list[str]) -&gt; int:\n    \"\"\"\n    \u5931\u6548\u7ec4\u5185\u7684\u6307\u5b9a\u952e\n\n    Args:\n        relative_keys: \u76f8\u5bf9\u4e8e\u7ec4\u524d\u7f00\u7684\u952e\u540d\u5217\u8868\n\n    Returns:\n        \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n    \"\"\"\n    from typing import cast\n\n    full_keys = cast(\"list[CacheKey]\", [f\"{self.group_prefix}{key}\" for key in relative_keys])\n    return await self.parent.invalidate_keys(full_keys)\n</code></pre>"},{"location":"en/api/invalidation/#symphra_cache.invalidation.CacheGroupInvalidator.invalidate_pattern","title":"<code>invalidate_pattern(pattern)</code>  <code>async</code>","text":"<p>\u5931\u6548\u7ec4\u5185\u5339\u914d\u6a21\u5f0f\u7684\u952e</p> <p>Parameters:</p> Name Type Description Default <code>pattern</code> <code>str</code> <p>\u76f8\u5bf9\u4e8e\u7ec4\u524d\u7f00\u7684\u6a21\u5f0f</p> required <p>Returns:</p> Type Description <code>int</code> <p>\u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>async def invalidate_pattern(self, pattern: str) -&gt; int:\n    \"\"\"\n    \u5931\u6548\u7ec4\u5185\u5339\u914d\u6a21\u5f0f\u7684\u952e\n\n    Args:\n        pattern: \u76f8\u5bf9\u4e8e\u7ec4\u524d\u7f00\u7684\u6a21\u5f0f\n\n    Returns:\n        \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n    \"\"\"\n    full_pattern = f\"{self.group_prefix}{pattern}\"\n    return await self.parent.invalidate_pattern(full_pattern)\n</code></pre>"},{"location":"en/api/locks/","title":"DistributedLock","text":"<p>Helper for distributed locking using the configured backend.</p> <p>\u5206\u5e03\u5f0f\u9501</p> <p>\u57fa\u4e8e\u7f13\u5b58\u540e\u7aef\u7684\u5206\u5e03\u5f0f\u9501\u5b9e\u73b0\uff0c\u652f\u6301\u8d85\u65f6\u548c\u81ea\u52a8\u91ca\u653e\u3002</p> <p>\u4f7f\u7528\u793a\u4f8b\uff1a     &gt;&gt;&gt; lock = DistributedLock(manager, \"resource:123\", timeout=10)     &gt;&gt;&gt; if lock.acquire():     ...     try:     ...         # \u5904\u7406\u8d44\u6e90     ...         pass     ...     finally:     ...         lock.release()</p> Source code in <code>src/symphra_cache/locks.py</code> <pre><code>class DistributedLock:\n    \"\"\"\n    \u5206\u5e03\u5f0f\u9501\n\n    \u57fa\u4e8e\u7f13\u5b58\u540e\u7aef\u7684\u5206\u5e03\u5f0f\u9501\u5b9e\u73b0\uff0c\u652f\u6301\u8d85\u65f6\u548c\u81ea\u52a8\u91ca\u653e\u3002\n\n    \u4f7f\u7528\u793a\u4f8b\uff1a\n        &gt;&gt;&gt; lock = DistributedLock(manager, \"resource:123\", timeout=10)\n        &gt;&gt;&gt; if lock.acquire():\n        ...     try:\n        ...         # \u5904\u7406\u8d44\u6e90\n        ...         pass\n        ...     finally:\n        ...         lock.release()\n    \"\"\"\n\n    def __init__(\n        self,\n        manager: CacheManager,\n        name: str,\n        timeout: int = 10,\n        blocking: bool = True,\n        blocking_timeout: float | None = None,\n    ) -&gt; None:\n        \"\"\"\n        \u521d\u59cb\u5316\u5206\u5e03\u5f0f\u9501\n\n        Args:\n            manager: \u7f13\u5b58\u7ba1\u7406\u5668\n            name: \u9501\u540d\u79f0\n            timeout: \u9501\u8d85\u65f6\u65f6\u95f4\uff08\u79d2\uff09\n            blocking: \u662f\u5426\u963b\u585e\u7b49\u5f85\n            blocking_timeout: \u963b\u585e\u8d85\u65f6\uff08\u79d2\uff09\n        \"\"\"\n        self.manager = manager\n        self.name = f\"lock:{name}\"\n        self.timeout = timeout\n        self.blocking = blocking\n        self.blocking_timeout = blocking_timeout\n        self.identifier = str(uuid.uuid4())  # \u552f\u4e00\u6807\u8bc6\u7b26\n        self._locked = False\n\n    def acquire(self) -&gt; bool:\n        \"\"\"\n        \u83b7\u53d6\u9501\n\n        Returns:\n            \u662f\u5426\u6210\u529f\u83b7\u53d6\u9501\n        \"\"\"\n        start_time = time.time()\n\n        while True:\n            # \u5c1d\u8bd5\u8bbe\u7f6e\u9501\uff08\u4f7f\u7528 TTL \u9632\u6b62\u6b7b\u9501\uff09\n            existing = self.manager.get(self.name)\n\n            if existing is None:\n                # \u9501\u4e0d\u5b58\u5728\uff0c\u5c1d\u8bd5\u83b7\u53d6\n                self.manager.set(self.name, self.identifier, ttl=self.timeout)\n                self._locked = True\n                return True\n\n            if not self.blocking:\n                return False\n\n            # \u68c0\u67e5\u963b\u585e\u8d85\u65f6\n            if (\n                self.blocking_timeout is not None\n                and time.time() - start_time &gt;= self.blocking_timeout\n            ):\n                return False\n\n            # \u77ed\u6682\u4f11\u7720\u540e\u91cd\u8bd5\n            time.sleep(0.01)\n\n    def release(self) -&gt; None:\n        \"\"\"\u91ca\u653e\u9501\"\"\"\n        if not self._locked:\n            return\n\n        # \u9a8c\u8bc1\u662f\u5426\u662f\u81ea\u5df1\u7684\u9501\n        current_value = self.manager.get(self.name)\n        if current_value == self.identifier:\n            self.manager.delete(self.name)\n            self._locked = False\n\n    def __enter__(self) -&gt; DistributedLock:\n        \"\"\"\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff1a\u8fdb\u5165\"\"\"\n        self.acquire()\n        return self\n\n    def __exit__(self, exc_type: object, exc_val: object, exc_tb: object) -&gt; None:\n        \"\"\"\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff1a\u9000\u51fa\"\"\"\n        self.release()\n</code></pre>"},{"location":"en/api/locks/#symphra_cache.locks.DistributedLock.__enter__","title":"<code>__enter__()</code>","text":"<p>\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff1a\u8fdb\u5165</p> Source code in <code>src/symphra_cache/locks.py</code> <pre><code>def __enter__(self) -&gt; DistributedLock:\n    \"\"\"\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff1a\u8fdb\u5165\"\"\"\n    self.acquire()\n    return self\n</code></pre>"},{"location":"en/api/locks/#symphra_cache.locks.DistributedLock.__exit__","title":"<code>__exit__(exc_type, exc_val, exc_tb)</code>","text":"<p>\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff1a\u9000\u51fa</p> Source code in <code>src/symphra_cache/locks.py</code> <pre><code>def __exit__(self, exc_type: object, exc_val: object, exc_tb: object) -&gt; None:\n    \"\"\"\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff1a\u9000\u51fa\"\"\"\n    self.release()\n</code></pre>"},{"location":"en/api/locks/#symphra_cache.locks.DistributedLock.__init__","title":"<code>__init__(manager, name, timeout=10, blocking=True, blocking_timeout=None)</code>","text":"<p>\u521d\u59cb\u5316\u5206\u5e03\u5f0f\u9501</p> <p>Parameters:</p> Name Type Description Default <code>manager</code> <code>CacheManager</code> <p>\u7f13\u5b58\u7ba1\u7406\u5668</p> required <code>name</code> <code>str</code> <p>\u9501\u540d\u79f0</p> required <code>timeout</code> <code>int</code> <p>\u9501\u8d85\u65f6\u65f6\u95f4\uff08\u79d2\uff09</p> <code>10</code> <code>blocking</code> <code>bool</code> <p>\u662f\u5426\u963b\u585e\u7b49\u5f85</p> <code>True</code> <code>blocking_timeout</code> <code>float | None</code> <p>\u963b\u585e\u8d85\u65f6\uff08\u79d2\uff09</p> <code>None</code> Source code in <code>src/symphra_cache/locks.py</code> <pre><code>def __init__(\n    self,\n    manager: CacheManager,\n    name: str,\n    timeout: int = 10,\n    blocking: bool = True,\n    blocking_timeout: float | None = None,\n) -&gt; None:\n    \"\"\"\n    \u521d\u59cb\u5316\u5206\u5e03\u5f0f\u9501\n\n    Args:\n        manager: \u7f13\u5b58\u7ba1\u7406\u5668\n        name: \u9501\u540d\u79f0\n        timeout: \u9501\u8d85\u65f6\u65f6\u95f4\uff08\u79d2\uff09\n        blocking: \u662f\u5426\u963b\u585e\u7b49\u5f85\n        blocking_timeout: \u963b\u585e\u8d85\u65f6\uff08\u79d2\uff09\n    \"\"\"\n    self.manager = manager\n    self.name = f\"lock:{name}\"\n    self.timeout = timeout\n    self.blocking = blocking\n    self.blocking_timeout = blocking_timeout\n    self.identifier = str(uuid.uuid4())  # \u552f\u4e00\u6807\u8bc6\u7b26\n    self._locked = False\n</code></pre>"},{"location":"en/api/locks/#symphra_cache.locks.DistributedLock.acquire","title":"<code>acquire()</code>","text":"<p>\u83b7\u53d6\u9501</p> <p>Returns:</p> Type Description <code>bool</code> <p>\u662f\u5426\u6210\u529f\u83b7\u53d6\u9501</p> Source code in <code>src/symphra_cache/locks.py</code> <pre><code>def acquire(self) -&gt; bool:\n    \"\"\"\n    \u83b7\u53d6\u9501\n\n    Returns:\n        \u662f\u5426\u6210\u529f\u83b7\u53d6\u9501\n    \"\"\"\n    start_time = time.time()\n\n    while True:\n        # \u5c1d\u8bd5\u8bbe\u7f6e\u9501\uff08\u4f7f\u7528 TTL \u9632\u6b62\u6b7b\u9501\uff09\n        existing = self.manager.get(self.name)\n\n        if existing is None:\n            # \u9501\u4e0d\u5b58\u5728\uff0c\u5c1d\u8bd5\u83b7\u53d6\n            self.manager.set(self.name, self.identifier, ttl=self.timeout)\n            self._locked = True\n            return True\n\n        if not self.blocking:\n            return False\n\n        # \u68c0\u67e5\u963b\u585e\u8d85\u65f6\n        if (\n            self.blocking_timeout is not None\n            and time.time() - start_time &gt;= self.blocking_timeout\n        ):\n            return False\n\n        # \u77ed\u6682\u4f11\u7720\u540e\u91cd\u8bd5\n        time.sleep(0.01)\n</code></pre>"},{"location":"en/api/locks/#symphra_cache.locks.DistributedLock.release","title":"<code>release()</code>","text":"<p>\u91ca\u653e\u9501</p> Source code in <code>src/symphra_cache/locks.py</code> <pre><code>def release(self) -&gt; None:\n    \"\"\"\u91ca\u653e\u9501\"\"\"\n    if not self._locked:\n        return\n\n    # \u9a8c\u8bc1\u662f\u5426\u662f\u81ea\u5df1\u7684\u9501\n    current_value = self.manager.get(self.name)\n    if current_value == self.identifier:\n        self.manager.delete(self.name)\n        self._locked = False\n</code></pre>"},{"location":"en/api/manager/","title":"CacheManager","text":"<p>High-level facade managing cache operations across backends.</p> <pre><code>from symphra_cache import CacheManager\nfrom symphra_cache.backends import MemoryBackend\n\ncache = CacheManager(backend=MemoryBackend())\ncache.set(\"k\", \"v\", ttl=60)\nassert cache.get(\"k\") == \"v\"\n</code></pre> <p>\u7f13\u5b58\u7ba1\u7406\u5668</p> <p>\u63d0\u4f9b\u7edf\u4e00\u7684\u7f13\u5b58\u64cd\u4f5c\u63a5\u53e3\uff0c\u5c4f\u853d\u5e95\u5c42\u540e\u7aef\u5dee\u5f02\u3002 \u652f\u6301\u540e\u7aef\u52a8\u6001\u5207\u6362\u548c\u914d\u7f6e\u7ba1\u7406\u3002</p> <p>\u6838\u5fc3\u529f\u80fd\uff1a - \u7edf\u4e00\u7684\u540c\u6b65/\u5f02\u6b65 API - \u540e\u7aef\u52a8\u6001\u5207\u6362 - \u6279\u91cf\u64cd\u4f5c\u652f\u6301 - \u7c7b\u578b\u5b89\u5168\uff08\u5b8c\u6574\u7c7b\u578b\u6ce8\u89e3\uff09</p> <p>\u4f7f\u7528\u793a\u4f8b\uff1a     &gt;&gt;&gt; from symphra_cache import CacheManager     &gt;&gt;&gt; from symphra_cache.backends import MemoryBackend     &gt;&gt;&gt;     &gt;&gt;&gt; # \u521b\u5efa\u7f13\u5b58\u7ba1\u7406\u5668     &gt;&gt;&gt; cache = CacheManager(backend=MemoryBackend())     &gt;&gt;&gt;     &gt;&gt;&gt; # \u57fa\u7840\u64cd\u4f5c     &gt;&gt;&gt; cache.set(\"user:123\", {\"name\": \"Alice\"}, ttl=3600)     &gt;&gt;&gt; user = cache.get(\"user:123\")     &gt;&gt;&gt;     &gt;&gt;&gt; # \u5f02\u6b65\u64cd\u4f5c     &gt;&gt;&gt; await cache.aset(\"product:456\", {\"name\": \"Laptop\"})     &gt;&gt;&gt; product = await cache.aget(\"product:456\")     &gt;&gt;&gt;     &gt;&gt;&gt; # \u6279\u91cf\u64cd\u4f5c     &gt;&gt;&gt; cache.set_many({\"key1\": \"value1\", \"key2\": \"value2\"}, ttl=300)     &gt;&gt;&gt; results = cache.get_many([\"key1\", \"key2\"])</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>class CacheManager:\n    \"\"\"\n    \u7f13\u5b58\u7ba1\u7406\u5668\n\n    \u63d0\u4f9b\u7edf\u4e00\u7684\u7f13\u5b58\u64cd\u4f5c\u63a5\u53e3\uff0c\u5c4f\u853d\u5e95\u5c42\u540e\u7aef\u5dee\u5f02\u3002\n    \u652f\u6301\u540e\u7aef\u52a8\u6001\u5207\u6362\u548c\u914d\u7f6e\u7ba1\u7406\u3002\n\n    \u6838\u5fc3\u529f\u80fd\uff1a\n    - \u7edf\u4e00\u7684\u540c\u6b65/\u5f02\u6b65 API\n    - \u540e\u7aef\u52a8\u6001\u5207\u6362\n    - \u6279\u91cf\u64cd\u4f5c\u652f\u6301\n    - \u7c7b\u578b\u5b89\u5168\uff08\u5b8c\u6574\u7c7b\u578b\u6ce8\u89e3\uff09\n\n    \u4f7f\u7528\u793a\u4f8b\uff1a\n        &gt;&gt;&gt; from symphra_cache import CacheManager\n        &gt;&gt;&gt; from symphra_cache.backends import MemoryBackend\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; # \u521b\u5efa\u7f13\u5b58\u7ba1\u7406\u5668\n        &gt;&gt;&gt; cache = CacheManager(backend=MemoryBackend())\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; # \u57fa\u7840\u64cd\u4f5c\n        &gt;&gt;&gt; cache.set(\"user:123\", {\"name\": \"Alice\"}, ttl=3600)\n        &gt;&gt;&gt; user = cache.get(\"user:123\")\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; # \u5f02\u6b65\u64cd\u4f5c\n        &gt;&gt;&gt; await cache.aset(\"product:456\", {\"name\": \"Laptop\"})\n        &gt;&gt;&gt; product = await cache.aget(\"product:456\")\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; # \u6279\u91cf\u64cd\u4f5c\n        &gt;&gt;&gt; cache.set_many({\"key1\": \"value1\", \"key2\": \"value2\"}, ttl=300)\n        &gt;&gt;&gt; results = cache.get_many([\"key1\", \"key2\"])\n    \"\"\"\n\n    def __init__(self, backend: BaseBackend) -&gt; None:\n        \"\"\"\n        \u521d\u59cb\u5316\u7f13\u5b58\u7ba1\u7406\u5668\n\n        Args:\n            backend: \u7f13\u5b58\u540e\u7aef\u5b9e\u4f8b\uff08Memory/File/Redis\uff09\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; backend = MemoryBackend(max_size=10000)\n            &gt;&gt;&gt; cache = CacheManager(backend=backend)\n        \"\"\"\n        self._backend = backend\n\n    # ========== \u540c\u6b65\u57fa\u7840\u64cd\u4f5c ==========\n\n    def get(self, key: CacheKey) -&gt; CacheValue | None:\n        \"\"\"\n        \u83b7\u53d6\u7f13\u5b58\u503c\uff08\u540c\u6b65\uff09\n\n        Args:\n            key: \u7f13\u5b58\u952e\n\n        Returns:\n            \u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u5219\u8fd4\u56de None\n\n        Raises:\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; user = cache.get(\"user:123\")\n            &gt;&gt;&gt; if user is None:\n            ...     print(\"\u7f13\u5b58\u672a\u547d\u4e2d\")\n        \"\"\"\n        return self._backend.get(key)\n\n    def set(\n        self,\n        key: CacheKey,\n        value: CacheValue,\n        ttl: int | None = None,\n        ex: bool = False,\n        nx: bool = False,\n    ) -&gt; bool:\n        \"\"\"\n        \u8bbe\u7f6e\u7f13\u5b58\u503c(\u540c\u6b65)\n\n        Args:\n            key: \u7f13\u5b58\u952e\n            value: \u7f13\u5b58\u503c\n            ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2),None \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n            ex: \u5982\u679c\u4e3a True,ttl \u8868\u793a\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4;False \u8868\u793a\u7edd\u5bf9\u65f6\u95f4\u6233\n            nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n        Returns:\n            \u662f\u5426\u8bbe\u7f6e\u6210\u529f(nx=True \u65f6\u53ef\u80fd\u5931\u8d25)\n\n        Raises:\n            CacheSerializationError: \u5e8f\u5217\u5316\u5931\u8d25\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; # \u8bbe\u7f6e 1 \u5c0f\u65f6\u8fc7\u671f\n            &gt;&gt;&gt; cache.set(\"session:xyz\", {\"user_id\": 123}, ttl=3600)\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; # \u4ec5\u5f53\u4e0d\u5b58\u5728\u65f6\u8bbe\u7f6e(\u7c7b\u4f3c Redis SETNX)\n            &gt;&gt;&gt; success = cache.set(\"lock:resource\", \"owner_id\", ttl=10, nx=True)\n        \"\"\"\n        return self._backend.set(key, value, ttl=ttl, ex=ex, nx=nx)\n\n    def delete(self, key: CacheKey) -&gt; bool:\n        \"\"\"\n        \u5220\u9664\u7f13\u5b58\uff08\u540c\u6b65\uff09\n\n        Args:\n            key: \u7f13\u5b58\u952e\n\n        Returns:\n            \u5982\u679c\u952e\u5b58\u5728\u5e76\u6210\u529f\u5220\u9664\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\n\n        Raises:\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; if cache.delete(\"user:123\"):\n            ...     print(\"\u7f13\u5b58\u5df2\u5220\u9664\")\n        \"\"\"\n        return self._backend.delete(key)\n\n    def exists(self, key: CacheKey) -&gt; bool:\n        \"\"\"\n        \u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728\uff08\u540c\u6b65\uff09\n\n        Args:\n            key: \u7f13\u5b58\u952e\n\n        Returns:\n            \u5982\u679c\u952e\u5b58\u5728\u4e14\u672a\u8fc7\u671f\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\n\n        Raises:\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; if cache.exists(\"user:123\"):\n            ...     print(\"\u7f13\u5b58\u5b58\u5728\")\n        \"\"\"\n        return self._backend.exists(key)\n\n    def clear(self) -&gt; None:\n        \"\"\"\n        \u6e05\u7a7a\u6240\u6709\u7f13\u5b58\uff08\u540c\u6b65\uff09\n\n        \u8b66\u544a:\n            \u6b64\u64cd\u4f5c\u4e0d\u53ef\u9006\uff0c\u4f1a\u5220\u9664\u6240\u6709\u7f13\u5b58\u6570\u636e\n\n        Raises:\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; cache.clear()  # \u5220\u9664\u6240\u6709\u7f13\u5b58\n        \"\"\"\n        self._backend.clear()\n\n    async def aclear(self) -&gt; None:\n        \"\"\"\n        \u6e05\u7a7a\u6240\u6709\u7f13\u5b58\uff08\u5f02\u6b65\uff09\n\n        \u8b66\u544a:\n            \u6b64\u64cd\u4f5c\u4e0d\u53ef\u9006\uff0c\u4f1a\u5220\u9664\u6240\u6709\u7f13\u5b58\u6570\u636e\n\n        Raises:\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; await cache.aclear()  # \u5f02\u6b65\u5220\u9664\u6240\u6709\u7f13\u5b58\n        \"\"\"\n        await self._backend.aclear()\n\n    # ========== \u5f02\u6b65\u57fa\u7840\u64cd\u4f5c ==========\n\n    async def aget(self, key: CacheKey) -&gt; CacheValue | None:\n        \"\"\"\n        \u83b7\u53d6\u7f13\u5b58\u503c\uff08\u5f02\u6b65\uff09\n\n        Args:\n            key: \u7f13\u5b58\u952e\n\n        Returns:\n            \u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u5219\u8fd4\u56de None\n\n        Raises:\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; user = await cache.aget(\"user:123\")\n        \"\"\"\n        return await self._backend.aget(key)\n\n    async def aset(\n        self,\n        key: CacheKey,\n        value: CacheValue,\n        ttl: int | None = None,\n        ex: bool = False,\n        nx: bool = False,\n    ) -&gt; bool:\n        \"\"\"\n        \u8bbe\u7f6e\u7f13\u5b58\u503c(\u5f02\u6b65)\n\n        Args:\n            key: \u7f13\u5b58\u952e\n            value: \u7f13\u5b58\u503c\n            ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2),None \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n            ex: \u5982\u679c\u4e3a True,ttl \u8868\u793a\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4\n            nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n        Returns:\n            \u662f\u5426\u8bbe\u7f6e\u6210\u529f\n\n        Raises:\n            CacheSerializationError: \u5e8f\u5217\u5316\u5931\u8d25\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; await cache.aset(\"product:456\", {\"name\": \"Laptop\"}, ttl=1800)\n        \"\"\"\n        return await self._backend.aset(key, value, ttl=ttl, ex=ex, nx=nx)\n\n    async def adelete(self, key: CacheKey) -&gt; bool:\n        \"\"\"\n        \u5220\u9664\u7f13\u5b58\uff08\u5f02\u6b65\uff09\n\n        Args:\n            key: \u7f13\u5b58\u952e\n\n        Returns:\n            \u5982\u679c\u952e\u5b58\u5728\u5e76\u6210\u529f\u5220\u9664\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\n\n        Raises:\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; deleted = await cache.adelete(\"user:123\")\n        \"\"\"\n        return await self._backend.adelete(key)\n\n    # ========== \u6279\u91cf\u64cd\u4f5c ==========\n\n    def get_many(self, keys: list[CacheKey]) -&gt; dict[CacheKey, CacheValue]:\n        \"\"\"\n        \u6279\u91cf\u83b7\u53d6\u7f13\u5b58\u503c\uff08\u540c\u6b65\uff09\n\n        Args:\n            keys: \u7f13\u5b58\u952e\u5217\u8868\n\n        Returns:\n            \u952e\u503c\u5bf9\u5b57\u5178\uff0c\u4e0d\u5b58\u5728\u7684\u952e\u4e0d\u5305\u542b\u5728\u7ed3\u679c\u4e2d\n\n        Raises:\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; results = cache.get_many([\"user:1\", \"user:2\", \"user:3\"])\n            &gt;&gt;&gt; for key, value in results.items():\n            ...     print(f\"{key}: {value}\")\n        \"\"\"\n        return self._backend.get_many(keys)\n\n    async def aget_many(self, keys: list[CacheKey]) -&gt; dict[CacheKey, CacheValue]:\n        \"\"\"\n        \u6279\u91cf\u83b7\u53d6\u7f13\u5b58\u503c\uff08\u5f02\u6b65\uff09\n\n        Args:\n            keys: \u7f13\u5b58\u952e\u5217\u8868\n\n        Returns:\n            \u952e\u503c\u5bf9\u5b57\u5178\uff0c\u4e0d\u5b58\u5728\u7684\u952e\u4e0d\u5305\u542b\u5728\u7ed3\u679c\u4e2d\n\n        Raises:\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; results = await cache.aget_many([\"user:1\", \"user:2\"])\n        \"\"\"\n        return await self._backend.aget_many(keys)\n\n    def set_many(\n        self,\n        mapping: dict[CacheKey, CacheValue],\n        ttl: int | None = None,\n    ) -&gt; None:\n        \"\"\"\n        \u6279\u91cf\u8bbe\u7f6e\u7f13\u5b58\u503c\uff08\u540c\u6b65\uff09\n\n        Args:\n            mapping: \u952e\u503c\u5bf9\u5b57\u5178\n            ttl: \u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n\n        Raises:\n            CacheSerializationError: \u5e8f\u5217\u5316\u5931\u8d25\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; cache.set_many(\n            ...     {\n            ...         \"user:1\": {\"name\": \"Alice\"},\n            ...         \"user:2\": {\"name\": \"Bob\"},\n            ...     },\n            ...     ttl=600,\n            ... )\n        \"\"\"\n        self._backend.set_many(mapping, ttl=ttl)\n\n    async def aset_many(\n        self,\n        mapping: dict[CacheKey, CacheValue],\n        ttl: int | None = None,\n    ) -&gt; None:\n        \"\"\"\n        \u6279\u91cf\u8bbe\u7f6e\u7f13\u5b58\u503c\uff08\u5f02\u6b65\uff09\n\n        Args:\n            mapping: \u952e\u503c\u5bf9\u5b57\u5178\n            ttl: \u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n\n        Raises:\n            CacheSerializationError: \u5e8f\u5217\u5316\u5931\u8d25\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; await cache.aset_many(\n            ...     {\n            ...         \"product:1\": {\"name\": \"Phone\"},\n            ...         \"product:2\": {\"name\": \"Tablet\"},\n            ...     }\n            ... )\n        \"\"\"\n        await self._backend.aset_many(mapping, ttl=ttl)\n\n    def delete_many(self, keys: list[CacheKey]) -&gt; int:\n        \"\"\"\n        \u6279\u91cf\u5220\u9664\u7f13\u5b58\uff08\u540c\u6b65\uff09\n\n        Args:\n            keys: \u7f13\u5b58\u952e\u5217\u8868\n\n        Returns:\n            \u6210\u529f\u5220\u9664\u7684\u952e\u6570\u91cf\n\n        Raises:\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; count = cache.delete_many([\"user:1\", \"user:2\", \"user:3\"])\n            &gt;&gt;&gt; print(f\"\u5220\u9664\u4e86 {count} \u4e2a\u952e\")\n        \"\"\"\n        return self._backend.delete_many(keys)\n\n    async def adelete_many(self, keys: list[CacheKey]) -&gt; int:\n        \"\"\"\n        \u6279\u91cf\u5220\u9664\u7f13\u5b58\uff08\u5f02\u6b65\uff09\n\n        Args:\n            keys: \u7f13\u5b58\u952e\u5217\u8868\n\n        Returns:\n            \u6210\u529f\u5220\u9664\u7684\u952e\u6570\u91cf\n\n        Raises:\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; count = await cache.adelete_many([\"user:1\", \"user:2\"])\n        \"\"\"\n        return await self._backend.adelete_many(keys)\n\n    # ========== \u540e\u7aef\u7ba1\u7406 ==========\n\n    @property\n    def backend(self) -&gt; BaseBackend:\n        \"\"\"\n        \u83b7\u53d6\u5f53\u524d\u540e\u7aef\u5b9e\u4f8b\n\n        Returns:\n            \u5f53\u524d\u4f7f\u7528\u7684\u540e\u7aef\u5b9e\u4f8b\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; backend = cache.backend\n            &gt;&gt;&gt; print(type(backend).__name__)  # \"MemoryBackend\"\n        \"\"\"\n        return self._backend\n\n    def switch_backend(self, backend: BaseBackend) -&gt; None:\n        \"\"\"\n        \u5207\u6362\u7f13\u5b58\u540e\u7aef\n\n        \u6ce8\u610f:\n            \u5207\u6362\u540e\u7aef\u4e0d\u4f1a\u8fc1\u79fb\u73b0\u6709\u6570\u636e\uff0c\u65b0\u540e\u7aef\u4ece\u7a7a\u767d\u72b6\u6001\u5f00\u59cb\n\n        Args:\n            backend: \u65b0\u7684\u540e\u7aef\u5b9e\u4f8b\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; # \u4ece\u5185\u5b58\u540e\u7aef\u5207\u6362\u5230 Redis \u540e\u7aef\n            &gt;&gt;&gt; from symphra_cache.backends import RedisBackend\n            &gt;&gt;&gt; cache.switch_backend(RedisBackend())\n        \"\"\"\n        self._backend = backend\n\n    # ========== \u9ad8\u7ea7\u529f\u80fd ==========\n\n    def get_or_set(\n        self,\n        key: CacheKey,\n        default_factory: Callable[[], CacheValue],\n        ttl: int | None = None,\n        ex: bool = False,\n        nx: bool = False,\n    ) -&gt; CacheValue:\n        \"\"\"\n        \u83b7\u53d6\u7f13\u5b58\u503c,\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8c03\u7528 default_factory \u8ba1\u7b97\u5e76\u7f13\u5b58\n\n        \u8fd9\u662f\u9632\u6b62\u7f13\u5b58\u7a7f\u900f\u7684\u63a8\u8350\u6a21\u5f0f\u3002\n\n        Args:\n            key: \u7f13\u5b58\u952e\n            default_factory: \u4e0d\u5b58\u5728\u65f6\u8c03\u7528\u7684\u5de5\u5382\u51fd\u6570\n            ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2),None \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n            ex: \u5982\u679c\u4e3a True,ttl \u8868\u793a\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4\n            nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n        Returns:\n            \u7f13\u5b58\u503c\u6216\u8ba1\u7b97\u7684\u65b0\u503c\n\n        Raises:\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; def expensive_compute():\n            ...     return sum(range(1000000))\n            &gt;&gt;&gt; result = cache.get_or_set(\"sum\", expensive_compute, ttl=300)\n        \"\"\"\n        value = self._backend.get(key)\n        if value is not None:\n            return value\n\n        # \u7f13\u5b58\u672a\u547d\u4e2d,\u8ba1\u7b97\u65b0\u503c\n        value = default_factory()\n        self._backend.set(key, value, ttl=ttl, ex=ex, nx=nx)\n        return value\n\n    async def aget_or_set(\n        self,\n        key: CacheKey,\n        default_factory: Callable[[], CacheValue],\n        ttl: int | None = None,\n        ex: bool = False,\n        nx: bool = False,\n    ) -&gt; CacheValue:\n        \"\"\"\n        \u83b7\u53d6\u7f13\u5b58\u503c,\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8c03\u7528 default_factory \u8ba1\u7b97\u5e76\u7f13\u5b58(\u5f02\u6b65)\n\n        Args:\n            key: \u7f13\u5b58\u952e\n            default_factory: \u4e0d\u5b58\u5728\u65f6\u8c03\u7528\u7684\u5de5\u5382\u51fd\u6570\n            ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2),None \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n            ex: \u5982\u679c\u4e3a True,ttl \u8868\u793a\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4\n            nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n        Returns:\n            \u7f13\u5b58\u503c\u6216\u8ba1\u7b97\u7684\u65b0\u503c\n\n        Raises:\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; async def fetch_data():\n            ...     return await client.get(\"/api/data\")\n            &gt;&gt;&gt; result = await cache.aget_or_set(\"data\", fetch_data)\n        \"\"\"\n        value = await self._backend.aget(key)\n        if value is not None:\n            return value\n\n        # \u7f13\u5b58\u672a\u547d\u4e2d,\u8ba1\u7b97\u65b0\u503c\n        value = default_factory()\n        await self._backend.aset(key, value, ttl=ttl, ex=ex, nx=nx)\n        return value\n\n    def increment(self, key: CacheKey, delta: int = 1) -&gt; int:\n        \"\"\"\n        \u539f\u5b50\u9012\u589e\u8ba1\u6570\u5668(\u540c\u6b65)\n\n        Args:\n            key: \u7f13\u5b58\u952e\n            delta: \u589e\u91cf,\u9ed8\u8ba4\u4e3a 1\n\n        Returns:\n            \u9012\u589e\u540e\u7684\u503c\n\n        Raises:\n            ValueError: \u5f53\u524d\u503c\u4e0d\u662f\u6574\u6570\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; cache.set(\"counter\", 10)\n            &gt;&gt;&gt; new_value = cache.increment(\"counter\", 5)\n            &gt;&gt;&gt; print(new_value)  # 15\n        \"\"\"\n        current = self._backend.get(key)\n        if current is None:\n            current = 0\n\n        if not isinstance(current, int):\n            msg = f\"\u952e {key} \u7684\u503c\u4e0d\u662f\u6574\u6570\u7c7b\u578b: {type(current)}\"\n            raise ValueError(msg)\n\n        new_value = current + delta\n        self._backend.set(key, new_value)\n        return new_value\n\n    async def aincrement(self, key: CacheKey, delta: int = 1) -&gt; int:\n        \"\"\"\n        \u539f\u5b50\u9012\u589e\u8ba1\u6570\u5668(\u5f02\u6b65)\n\n        Args:\n            key: \u7f13\u5b58\u952e\n            delta: \u589e\u91cf,\u9ed8\u8ba4\u4e3a 1\n\n        Returns:\n            \u9012\u589e\u540e\u7684\u503c\n\n        Raises:\n            ValueError: \u5f53\u524d\u503c\u4e0d\u662f\u6574\u6570\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; await cache.aset(\"counter\", 10)\n            &gt;&gt;&gt; new_value = await cache.aincrement(\"counter\", 5)\n        \"\"\"\n        current = await self._backend.aget(key)\n        if current is None:\n            current = 0\n\n        if not isinstance(current, int):\n            msg = f\"\u952e {key} \u7684\u503c\u4e0d\u662f\u6574\u6570\u7c7b\u578b: {type(current)}\"\n            raise ValueError(msg)\n\n        new_value = current + delta\n        await self._backend.aset(key, new_value)\n        return new_value\n\n    def decrement(self, key: CacheKey, delta: int = 1) -&gt; int:\n        \"\"\"\n        \u539f\u5b50\u9012\u51cf\u8ba1\u6570\u5668(\u540c\u6b65)\n\n        Args:\n            key: \u7f13\u5b58\u952e\n            delta: \u51cf\u91cf,\u9ed8\u8ba4\u4e3a 1\n\n        Returns:\n            \u9012\u51cf\u540e\u7684\u503c\n\n        Raises:\n            ValueError: \u5f53\u524d\u503c\u4e0d\u662f\u6574\u6570\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; cache.set(\"counter\", 10)\n            &gt;&gt;&gt; new_value = cache.decrement(\"counter\", 3)\n            &gt;&gt;&gt; print(new_value)  # 7\n        \"\"\"\n        return self.increment(key, -delta)\n\n    async def adecrement(self, key: CacheKey, delta: int = 1) -&gt; int:\n        \"\"\"\n        \u539f\u5b50\u9012\u51cf\u8ba1\u6570\u5668(\u5f02\u6b65)\n\n        Args:\n            key: \u7f13\u5b58\u952e\n            delta: \u51cf\u91cf,\u9ed8\u8ba4\u4e3a 1\n\n        Returns:\n            \u9012\u51cf\u540e\u7684\u503c\n\n        Raises:\n            ValueError: \u5f53\u524d\u503c\u4e0d\u662f\u6574\u6570\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; new_value = await cache.adecrement(\"counter\", 3)\n        \"\"\"\n        return await self.aincrement(key, -delta)\n\n    def ttl(self, key: CacheKey) -&gt; int | None:\n        \"\"\"\n        \u83b7\u53d6\u952e\u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4(\u540c\u6b65)\n\n        Args:\n            key: \u7f13\u5b58\u952e\n\n        Returns:\n            \u5269\u4f59\u79d2\u6570,\u5982\u679c\u952e\u4e0d\u5b58\u5728\u6216\u6c38\u4e0d\u8fc7\u671f\u8fd4\u56de None\n\n        Raises:\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u6ce8\u610f:\n            \u4e0d\u540c\u540e\u7aef\u7684\u5b9e\u73b0\u7cbe\u5ea6\u53ef\u80fd\u4e0d\u540c\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; cache.set(\"temp\", \"value\", ttl=60)\n            &gt;&gt;&gt; remaining = cache.ttl(\"temp\")\n            &gt;&gt;&gt; print(f\"\u5269\u4f59 {remaining} \u79d2\")\n        \"\"\"\n        # \u9ed8\u8ba4\u5b9e\u73b0:\u68c0\u67e5\u662f\u5426\u5b58\u5728,\u4f46\u65e0\u6cd5\u83b7\u53d6\u7cbe\u786e TTL\n        # \u5b50\u7c7b\u53ef\u4ee5\u91cd\u5199\u6b64\u65b9\u6cd5\u63d0\u4f9b\u66f4\u7cbe\u786e\u7684\u5b9e\u73b0\n        if not self._backend.exists(key):\n            return None\n\n        # \u5bf9\u4e8e MemoryBackend,\u53ef\u4ee5\u8bbf\u95ee\u5185\u90e8\u6570\u636e\n        if hasattr(self._backend, \"_cache\"):\n            cache_data = self._backend._cache.get(key)\n            if cache_data is None:\n                return None\n            _, expires_at = cache_data\n            if expires_at is None:\n                return None\n            remaining = int(expires_at - time.time())\n            return remaining if remaining &gt; 0 else None\n\n        # \u5176\u4ed6\u540e\u7aef\u65e0\u6cd5\u7cbe\u786e\u83b7\u53d6,\u8fd4\u56de None\n        return None\n\n    # ========== \u4fbf\u6377\u522b\u540d ==========\n\n    def mget(self, keys: list[CacheKey]) -&gt; dict[CacheKey, CacheValue]:\n        \"\"\"\n        \u6279\u91cf\u83b7\u53d6(get_many \u7684\u522b\u540d)\n\n        Args:\n            keys: \u7f13\u5b58\u952e\u5217\u8868\n\n        Returns:\n            \u952e\u503c\u5bf9\u5b57\u5178\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; results = cache.mget([\"key1\", \"key2\", \"key3\"])\n        \"\"\"\n        return self.get_many(keys)\n\n    async def amget(self, keys: list[CacheKey]) -&gt; dict[CacheKey, CacheValue]:\n        \"\"\"\n        \u6279\u91cf\u83b7\u53d6(aget_many \u7684\u522b\u540d)(\u5f02\u6b65)\n\n        Args:\n            keys: \u7f13\u5b58\u952e\u5217\u8868\n\n        Returns:\n            \u952e\u503c\u5bf9\u5b57\u5178\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; results = await cache.amget([\"key1\", \"key2\"])\n        \"\"\"\n        return await self.aget_many(keys)\n\n    def mset(\n        self,\n        mapping: dict[CacheKey, CacheValue],\n        ttl: int | None = None,\n    ) -&gt; None:\n        \"\"\"\n        \u6279\u91cf\u8bbe\u7f6e(set_many \u7684\u522b\u540d)\n\n        Args:\n            mapping: \u952e\u503c\u5bf9\u5b57\u5178\n            ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2)\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; cache.mset({\"key1\": \"val1\", \"key2\": \"val2\"}, ttl=300)\n        \"\"\"\n        self.set_many(mapping, ttl=ttl)\n\n    async def amset(\n        self,\n        mapping: dict[CacheKey, CacheValue],\n        ttl: int | None = None,\n    ) -&gt; None:\n        \"\"\"\n        \u6279\u91cf\u8bbe\u7f6e(aset_many \u7684\u522b\u540d)(\u5f02\u6b65)\n\n        Args:\n            mapping: \u952e\u503c\u5bf9\u5b57\u5178\n            ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2)\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; await cache.amset({\"key1\": \"val1\", \"key2\": \"val2\"})\n        \"\"\"\n        await self.aset_many(mapping, ttl=ttl)\n\n    # ========== \u7edf\u8ba1\u4e0e\u5065\u5eb7\u68c0\u67e5 ==========\n\n    def __len__(self) -&gt; int:\n        \"\"\"\n        \u83b7\u53d6\u7f13\u5b58\u6761\u76ee\u6570\u91cf\n\n        Returns:\n            \u7f13\u5b58\u4e2d\u7684\u952e\u6570\u91cf\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; print(f\"\u7f13\u5b58\u4e2d\u6709 {len(cache)} \u4e2a\u6761\u76ee\")\n        \"\"\"\n        if hasattr(self._backend, \"_cache\"):\n            return len(self._backend._cache)\n        return 0\n\n    def check_health(self) -&gt; bool:\n        \"\"\"\n        \u68c0\u67e5\u540e\u7aef\u5065\u5eb7\u72b6\u6001\n\n        Returns:\n            True \u8868\u793a\u5065\u5eb7,False \u8868\u793a\u5f02\u5e38\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; if cache.check_health():\n            ...     print(\"\u7f13\u5b58\u670d\u52a1\u6b63\u5e38\")\n        \"\"\"\n        try:\n            # \u5c1d\u8bd5\u8bbe\u7f6e\u548c\u83b7\u53d6\u6d4b\u8bd5\u952e\n            test_key = \"__health_check__\"\n            test_value = \"ok\"\n            self._backend.set(test_key, test_value, ttl=1)\n            result = self._backend.get(test_key)\n            self._backend.delete(test_key)\n            return result == test_value\n        except Exception:\n            return False\n\n    async def acheck_health(self) -&gt; bool:\n        \"\"\"\n        \u68c0\u67e5\u540e\u7aef\u5065\u5eb7\u72b6\u6001(\u5f02\u6b65)\n\n        Returns:\n            True \u8868\u793a\u5065\u5eb7,False \u8868\u793a\u5f02\u5e38\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; is_healthy = await cache.acheck_health()\n        \"\"\"\n        try:\n            test_key = \"__health_check__\"\n            test_value = \"ok\"\n            await self._backend.aset(test_key, test_value, ttl=1)\n            result = await self._backend.aget(test_key)\n            await self._backend.adelete(test_key)\n            return result == test_value\n        except Exception:\n            return False\n\n    def keys(\n        self,\n        pattern: str = \"*\",\n        cursor: int = 0,\n        count: int = 100,\n        max_keys: int | None = None,\n    ) -&gt; KeysPage:\n        \"\"\"\n        \u626b\u63cf\u7f13\u5b58\u952e(\u540c\u6b65)\n\n        \u652f\u6301\u6a21\u5f0f\u5339\u914d\u548c\u5206\u9875\u3002\n\n        Args:\n            pattern: \u5339\u914d\u6a21\u5f0f(\u652f\u6301\u901a\u914d\u7b26 * \u548c ?)\n            cursor: \u6e38\u6807\u4f4d\u7f6e(0 \u8868\u793a\u5f00\u59cb)\n            count: \u6bcf\u9875\u8fd4\u56de\u7684\u952e\u6570\u91cf\n            max_keys: \u6700\u591a\u8fd4\u56de\u7684\u952e\u6570\u91cf\n\n        Returns:\n            KeysPage \u5bf9\u8c61\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; page = cache.keys(pattern=\"user:*\", count=100)\n            &gt;&gt;&gt; print(f\"\u627e\u5230 {len(page.keys)} \u4e2a\u952e\")\n            &gt;&gt;&gt; if page.has_more:\n            ...     next_page = cache.keys(cursor=page.cursor)\n        \"\"\"\n\n        return self._backend.keys(pattern=pattern, cursor=cursor, count=count, max_keys=max_keys)\n\n    async def akeys(\n        self,\n        pattern: str = \"*\",\n        cursor: int = 0,\n        count: int = 100,\n        max_keys: int | None = None,\n    ) -&gt; KeysPage:\n        \"\"\"\n        \u626b\u63cf\u7f13\u5b58\u952e(\u5f02\u6b65)\n\n        Args:\n            pattern: \u5339\u914d\u6a21\u5f0f\n            cursor: \u6e38\u6807\u4f4d\u7f6e\n            count: \u6bcf\u9875\u8fd4\u56de\u7684\u952e\u6570\u91cf\n            max_keys: \u6700\u591a\u8fd4\u56de\u7684\u952e\u6570\u91cf\n\n        Returns:\n            KeysPage \u5bf9\u8c61\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; page = await cache.akeys(pattern=\"session:*\")\n        \"\"\"\n        return await self._backend.akeys(\n            pattern=pattern, cursor=cursor, count=count, max_keys=max_keys\n        )\n\n    def close(self) -&gt; None:\n        \"\"\"\n        \u5173\u95ed\u540e\u7aef\u8fde\u63a5(\u540c\u6b65)\n\n        \u91ca\u653e\u6240\u6709\u8d44\u6e90,\u5173\u95ed\u7f51\u7edc\u8fde\u63a5\u7b49\u3002\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; cache.close()\n        \"\"\"\n        self._backend.close()\n\n    async def aclose(self) -&gt; None:\n        \"\"\"\n        \u5173\u95ed\u540e\u7aef\u8fde\u63a5(\u5f02\u6b65)\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; await cache.aclose()\n        \"\"\"\n        await self._backend.aclose()\n\n    # ========== \u5de5\u5382\u65b9\u6cd5 ==========\n\n    # ========== \u88c5\u9970\u5668\u65b9\u6cd5 ==========\n\n    def cache(\n        self,\n        ttl: int | None = None,\n        key_builder: KeyBuilder | None = None,\n        key_prefix: str = \"\",\n    ) -&gt; Callable[[Callable[..., Any]], Callable[..., Any]]:\n        \"\"\"\n        \u7f13\u5b58\u88c5\u9970\u5668\uff08\u7ed1\u5b9a\u5230\u6b64\u7ba1\u7406\u5668\u5b9e\u4f8b\uff09\n\n        \u63d0\u4f9b\u66f4\u4fbf\u5229\u7684\u88c5\u9970\u5668\u65b9\u5f0f\uff0c\u65e0\u9700\u6bcf\u6b21\u90fd\u4f20\u5165 manager \u53c2\u6570\u3002\n\n        Args:\n            ttl: \u7f13\u5b58\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n            key_builder: \u81ea\u5b9a\u4e49\u952e\u751f\u6210\u51fd\u6570\n            key_prefix: \u952e\u524d\u7f00\uff08\u7528\u4e8e\u547d\u540d\u7a7a\u95f4\u9694\u79bb\uff09\n\n        Returns:\n            \u88c5\u9970\u5668\u51fd\u6570\n\n        \u793a\u4f8b\uff1a\n            &gt;&gt;&gt; cache = CacheManager(backend=MemoryBackend())\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; @cache.cache(ttl=3600, key_prefix=\"user:\")\n            &gt;&gt;&gt; def get_user(user_id: int):\n            ...     return db.query(User).get(user_id)\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; user = get_user(123)  # \u7f13\u5b58 1 \u5c0f\u65f6\n        \"\"\"\n        from .decorators import cache as cache_decorator\n\n        def decorator(func: Callable[..., Any]) -&gt; Callable[..., Any]:\n            return cache_decorator(\n                self,\n                ttl=ttl,\n                key_builder=key_builder,\n                key_prefix=key_prefix,\n            )(func)\n\n        return decorator\n\n    def acache(\n        self,\n        ttl: int | None = None,\n        key_builder: KeyBuilder | None = None,\n        key_prefix: str = \"\",\n    ) -&gt; Callable[[Callable[..., Any]], Callable[..., Any]]:\n        \"\"\"\n        \u5f02\u6b65\u7f13\u5b58\u88c5\u9970\u5668\uff08\u7ed1\u5b9a\u5230\u6b64\u7ba1\u7406\u5668\u5b9e\u4f8b\uff09\n\n        \u63d0\u4f9b\u66f4\u4fbf\u5229\u7684\u88c5\u9970\u5668\u65b9\u5f0f\uff0c\u65e0\u9700\u6bcf\u6b21\u90fd\u4f20\u5165 manager \u53c2\u6570\u3002\n\n        Args:\n            ttl: \u7f13\u5b58\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n            key_builder: \u81ea\u5b9a\u4e49\u952e\u751f\u6210\u51fd\u6570\n            key_prefix: \u952e\u524d\u7f00\n\n        Returns:\n            \u88c5\u9970\u5668\u51fd\u6570\n\n        \u793a\u4f8b\uff1a\n            &gt;&gt;&gt; cache = CacheManager(backend=MemoryBackend())\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; @cache.acache(ttl=600)\n            &gt;&gt;&gt; async def fetch_data(api_url: str):\n            ...     async with httpx.AsyncClient() as client:\n            ...         response = await client.get(api_url)\n            ...         return response.json()\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; data = await fetch_data(\"https://api.example.com/users\")\n        \"\"\"\n        from .decorators import acache as acache_decorator\n\n        def decorator(func: Callable[..., Any]) -&gt; Callable[..., Any]:\n            return acache_decorator(\n                self,\n                ttl=ttl,\n                key_builder=key_builder,\n                key_prefix=key_prefix,\n            )(func)\n\n        return decorator\n\n    def cache_invalidate(\n        self,\n        key_builder: KeyBuilder | None = None,\n        key_prefix: str = \"\",\n    ) -&gt; Callable[[Callable[..., Any]], Callable[..., Any]]:\n        \"\"\"\n        \u7f13\u5b58\u5931\u6548\u88c5\u9970\u5668\uff08\u7ed1\u5b9a\u5230\u6b64\u7ba1\u7406\u5668\u5b9e\u4f8b\uff09\n\n        \u5728\u51fd\u6570\u6267\u884c\u540e\uff0c\u5220\u9664\u5bf9\u5e94\u7684\u7f13\u5b58\u3002\n        \u5e38\u7528\u4e8e\u66f4\u65b0\u64cd\u4f5c\uff08\u5982 update_user \u540e\u6e05\u9664 get_user \u7f13\u5b58\uff09\u3002\n\n        Args:\n            key_builder: \u952e\u751f\u6210\u51fd\u6570\uff08\u9700\u4e0e @cache \u4e00\u81f4\uff09\n            key_prefix: \u952e\u524d\u7f00\n\n        Returns:\n            \u88c5\u9970\u5668\u51fd\u6570\n\n        \u793a\u4f8b\uff1a\n            &gt;&gt;&gt; cache = CacheManager(backend=MemoryBackend())\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; @cache.cache(key_prefix=\"user:\")\n            &gt;&gt;&gt; def get_user(user_id: int):\n            ...     return db.query(User).get(user_id)\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; @cache.cache_invalidate(key_prefix=\"user:\")\n            &gt;&gt;&gt; def update_user(user_id: int, **updates):\n            ...     db.query(User).filter_by(id=user_id).update(updates)\n            ...     db.commit()\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; get_user(123)  # \u7f13\u5b58\u7ed3\u679c\n            &gt;&gt;&gt; update_user(123, name=\"Bob\")  # \u6e05\u9664\u7f13\u5b58\n            &gt;&gt;&gt; get_user(123)  # \u91cd\u65b0\u67e5\u8be2\u6570\u636e\u5e93\n        \"\"\"\n        from .decorators import cache_invalidate as cache_invalidate_decorator\n\n        def decorator(func: Callable[..., Any]) -&gt; Callable[..., Any]:\n            return cache_invalidate_decorator(\n                self,\n                key_builder=key_builder,\n                key_prefix=key_prefix,\n            )(func)\n\n        return decorator\n\n    @classmethod\n    def from_config(cls, config: CacheConfig | dict[str, Any] | str | Path) -&gt; CacheManager:\n        \"\"\"\n        \u4ece\u914d\u7f6e\u521b\u5efa\u7f13\u5b58\u7ba1\u7406\u5668\n\n        \u652f\u6301\u591a\u79cd\u8f93\u5165\u7c7b\u578b:\n        - CacheConfig \u5bf9\u8c61\n        - dict \u914d\u7f6e\u5b57\u5178\n        - str/Path \u914d\u7f6e\u6587\u4ef6\u8def\u5f84\n\n        Args:\n            config: \u914d\u7f6e\u5bf9\u8c61\u3001\u5b57\u5178\u6216\u6587\u4ef6\u8def\u5f84\n\n        Returns:\n            \u914d\u7f6e\u597d\u7684 CacheManager \u5b9e\u4f8b\n\n        Raises:\n            CacheConfigError: \u914d\u7f6e\u9a8c\u8bc1\u5931\u8d25\n            ImportError: \u7f3a\u5c11\u5fc5\u9700\u7684\u4f9d\u8d56\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; # \u4ece\u5b57\u5178\u521b\u5efa\n            &gt;&gt;&gt; cache = CacheManager.from_config({\"backend\": \"memory\"})\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; # \u4ece\u6587\u4ef6\u521b\u5efa\n            &gt;&gt;&gt; cache = CacheManager.from_config(\"config/cache.yaml\")\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; # \u4ece CacheConfig \u5bf9\u8c61\u521b\u5efa\n            &gt;&gt;&gt; config = CacheConfig.from_file(\"cache.toml\")\n            &gt;&gt;&gt; cache = CacheManager.from_config(config)\n        \"\"\"\n        from .config import CacheConfig\n\n        # \u7edf\u4e00\u8f6c\u6362\u4e3a CacheConfig \u5bf9\u8c61\n        if isinstance(config, dict):\n            config_obj = CacheConfig(**config)\n        elif isinstance(config, str | Path):\n            config_obj = CacheConfig.from_file(config)\n        elif isinstance(config, CacheConfig):\n            config_obj = config\n        else:\n            msg = f\"\u4e0d\u652f\u6301\u7684\u914d\u7f6e\u7c7b\u578b: {type(config)}\"\n            raise TypeError(msg)\n\n        # \u521b\u5efa\u540e\u7aef\n        backend = config_obj.create_backend()\n\n        # \u521b\u5efa\u7ba1\u7406\u5668\n        return cls(backend=backend)\n\n    @classmethod\n    def from_env(cls, prefix: str = \"SYMPHRA_CACHE_\") -&gt; CacheManager:\n        \"\"\"\n        \u4ece\u73af\u5883\u53d8\u91cf\u521b\u5efa\u7f13\u5b58\u7ba1\u7406\u5668\n\n        \u73af\u5883\u53d8\u91cf\u547d\u540d\u89c4\u5219:\n        - SYMPHRA_CACHE_BACKEND=memory\n        - SYMPHRA_CACHE_MAX_SIZE=10000\n        - SYMPHRA_CACHE_REDIS_HOST=localhost\n        - SYMPHRA_CACHE_REDIS_PORT=6379\n\n        Args:\n            prefix: \u73af\u5883\u53d8\u91cf\u524d\u7f00,\u9ed8\u8ba4\u4e3a \"SYMPHRA_CACHE_\"\n\n        Returns:\n            \u914d\u7f6e\u597d\u7684 CacheManager \u5b9e\u4f8b\n\n        Raises:\n            CacheConfigError: \u914d\u7f6e\u9a8c\u8bc1\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; # \u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\n            &gt;&gt;&gt; os.environ[\"SYMPHRA_CACHE_BACKEND\"] = \"redis\"\n            &gt;&gt;&gt; os.environ[\"SYMPHRA_CACHE_REDIS_HOST\"] = \"localhost\"\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; # \u4ece\u73af\u5883\u53d8\u91cf\u521b\u5efa\n            &gt;&gt;&gt; cache = CacheManager.from_env()\n        \"\"\"\n        from .config import CacheConfig\n\n        config = CacheConfig.from_env(prefix=prefix)\n        backend = config.create_backend()\n        return cls(backend=backend)\n\n    @classmethod\n    def from_file(cls, file_path: str | Path) -&gt; CacheManager:\n        \"\"\"\n        \u4ece\u914d\u7f6e\u6587\u4ef6\u521b\u5efa\u7f13\u5b58\u7ba1\u7406\u5668\n\n        \u652f\u6301\u7684\u683c\u5f0f:\n        - YAML (.yaml, .yml)\n        - TOML (.toml)\n        - JSON (.json)\n\n        Args:\n            file_path: \u914d\u7f6e\u6587\u4ef6\u8def\u5f84\n\n        Returns:\n            \u914d\u7f6e\u597d\u7684 CacheManager \u5b9e\u4f8b\n\n        Raises:\n            CacheConfigError: \u6587\u4ef6\u8bfb\u53d6\u6216\u89e3\u6790\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; # \u4ece YAML \u6587\u4ef6\u521b\u5efa\n            &gt;&gt;&gt; cache = CacheManager.from_file(\"config/cache.yaml\")\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; # \u4ece TOML \u6587\u4ef6\u521b\u5efa\n            &gt;&gt;&gt; cache = CacheManager.from_file(\"config/cache.toml\")\n        \"\"\"\n        from .config import CacheConfig\n\n        config = CacheConfig.from_file(file_path)\n        backend = config.create_backend()\n        return cls(backend=backend)\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.backend","title":"<code>backend</code>  <code>property</code>","text":"<p>\u83b7\u53d6\u5f53\u524d\u540e\u7aef\u5b9e\u4f8b</p> <p>Returns:</p> Type Description <code>BaseBackend</code> <p>\u5f53\u524d\u4f7f\u7528\u7684\u540e\u7aef\u5b9e\u4f8b</p> \u793a\u4f8b <p>backend = cache.backend print(type(backend).name)  # \"MemoryBackend\"</p>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.__init__","title":"<code>__init__(backend)</code>","text":"<p>\u521d\u59cb\u5316\u7f13\u5b58\u7ba1\u7406\u5668</p> <p>Parameters:</p> Name Type Description Default <code>backend</code> <code>BaseBackend</code> <p>\u7f13\u5b58\u540e\u7aef\u5b9e\u4f8b\uff08Memory/File/Redis\uff09</p> required \u793a\u4f8b <p>backend = MemoryBackend(max_size=10000) cache = CacheManager(backend=backend)</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def __init__(self, backend: BaseBackend) -&gt; None:\n    \"\"\"\n    \u521d\u59cb\u5316\u7f13\u5b58\u7ba1\u7406\u5668\n\n    Args:\n        backend: \u7f13\u5b58\u540e\u7aef\u5b9e\u4f8b\uff08Memory/File/Redis\uff09\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; backend = MemoryBackend(max_size=10000)\n        &gt;&gt;&gt; cache = CacheManager(backend=backend)\n    \"\"\"\n    self._backend = backend\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.__len__","title":"<code>__len__()</code>","text":"<p>\u83b7\u53d6\u7f13\u5b58\u6761\u76ee\u6570\u91cf</p> <p>Returns:</p> Type Description <code>int</code> <p>\u7f13\u5b58\u4e2d\u7684\u952e\u6570\u91cf</p> \u793a\u4f8b <p>print(f\"\u7f13\u5b58\u4e2d\u6709 {len(cache)} \u4e2a\u6761\u76ee\")</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def __len__(self) -&gt; int:\n    \"\"\"\n    \u83b7\u53d6\u7f13\u5b58\u6761\u76ee\u6570\u91cf\n\n    Returns:\n        \u7f13\u5b58\u4e2d\u7684\u952e\u6570\u91cf\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; print(f\"\u7f13\u5b58\u4e2d\u6709 {len(cache)} \u4e2a\u6761\u76ee\")\n    \"\"\"\n    if hasattr(self._backend, \"_cache\"):\n        return len(self._backend._cache)\n    return 0\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.acache","title":"<code>acache(ttl=None, key_builder=None, key_prefix='')</code>","text":"<p>\u5f02\u6b65\u7f13\u5b58\u88c5\u9970\u5668\uff08\u7ed1\u5b9a\u5230\u6b64\u7ba1\u7406\u5668\u5b9e\u4f8b\uff09</p> <p>\u63d0\u4f9b\u66f4\u4fbf\u5229\u7684\u88c5\u9970\u5668\u65b9\u5f0f\uff0c\u65e0\u9700\u6bcf\u6b21\u90fd\u4f20\u5165 manager \u53c2\u6570\u3002</p> <p>Parameters:</p> Name Type Description Default <code>ttl</code> <code>int | None</code> <p>\u7f13\u5b58\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u8868\u793a\u6c38\u4e0d\u8fc7\u671f</p> <code>None</code> <code>key_builder</code> <code>KeyBuilder | None</code> <p>\u81ea\u5b9a\u4e49\u952e\u751f\u6210\u51fd\u6570</p> <code>None</code> <code>key_prefix</code> <code>str</code> <p>\u952e\u524d\u7f00</p> <code>''</code> <p>Returns:</p> Type Description <code>Callable[[Callable[..., Any]], Callable[..., Any]]</code> <p>\u88c5\u9970\u5668\u51fd\u6570</p> <p>\u793a\u4f8b\uff1a     &gt;&gt;&gt; cache = CacheManager(backend=MemoryBackend())     &gt;&gt;&gt;     &gt;&gt;&gt; @cache.acache(ttl=600)     &gt;&gt;&gt; async def fetch_data(api_url: str):     ...     async with httpx.AsyncClient() as client:     ...         response = await client.get(api_url)     ...         return response.json()     &gt;&gt;&gt;     &gt;&gt;&gt; data = await fetch_data(\"https://api.example.com/users\")</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def acache(\n    self,\n    ttl: int | None = None,\n    key_builder: KeyBuilder | None = None,\n    key_prefix: str = \"\",\n) -&gt; Callable[[Callable[..., Any]], Callable[..., Any]]:\n    \"\"\"\n    \u5f02\u6b65\u7f13\u5b58\u88c5\u9970\u5668\uff08\u7ed1\u5b9a\u5230\u6b64\u7ba1\u7406\u5668\u5b9e\u4f8b\uff09\n\n    \u63d0\u4f9b\u66f4\u4fbf\u5229\u7684\u88c5\u9970\u5668\u65b9\u5f0f\uff0c\u65e0\u9700\u6bcf\u6b21\u90fd\u4f20\u5165 manager \u53c2\u6570\u3002\n\n    Args:\n        ttl: \u7f13\u5b58\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n        key_builder: \u81ea\u5b9a\u4e49\u952e\u751f\u6210\u51fd\u6570\n        key_prefix: \u952e\u524d\u7f00\n\n    Returns:\n        \u88c5\u9970\u5668\u51fd\u6570\n\n    \u793a\u4f8b\uff1a\n        &gt;&gt;&gt; cache = CacheManager(backend=MemoryBackend())\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; @cache.acache(ttl=600)\n        &gt;&gt;&gt; async def fetch_data(api_url: str):\n        ...     async with httpx.AsyncClient() as client:\n        ...         response = await client.get(api_url)\n        ...         return response.json()\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; data = await fetch_data(\"https://api.example.com/users\")\n    \"\"\"\n    from .decorators import acache as acache_decorator\n\n    def decorator(func: Callable[..., Any]) -&gt; Callable[..., Any]:\n        return acache_decorator(\n            self,\n            ttl=ttl,\n            key_builder=key_builder,\n            key_prefix=key_prefix,\n        )(func)\n\n    return decorator\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.acheck_health","title":"<code>acheck_health()</code>  <code>async</code>","text":"<p>\u68c0\u67e5\u540e\u7aef\u5065\u5eb7\u72b6\u6001(\u5f02\u6b65)</p> <p>Returns:</p> Type Description <code>bool</code> <p>True \u8868\u793a\u5065\u5eb7,False \u8868\u793a\u5f02\u5e38</p> \u793a\u4f8b <p>is_healthy = await cache.acheck_health()</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>async def acheck_health(self) -&gt; bool:\n    \"\"\"\n    \u68c0\u67e5\u540e\u7aef\u5065\u5eb7\u72b6\u6001(\u5f02\u6b65)\n\n    Returns:\n        True \u8868\u793a\u5065\u5eb7,False \u8868\u793a\u5f02\u5e38\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; is_healthy = await cache.acheck_health()\n    \"\"\"\n    try:\n        test_key = \"__health_check__\"\n        test_value = \"ok\"\n        await self._backend.aset(test_key, test_value, ttl=1)\n        result = await self._backend.aget(test_key)\n        await self._backend.adelete(test_key)\n        return result == test_value\n    except Exception:\n        return False\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.aclear","title":"<code>aclear()</code>  <code>async</code>","text":"<p>\u6e05\u7a7a\u6240\u6709\u7f13\u5b58\uff08\u5f02\u6b65\uff09</p> \u8b66\u544a <p>\u6b64\u64cd\u4f5c\u4e0d\u53ef\u9006\uff0c\u4f1a\u5220\u9664\u6240\u6709\u7f13\u5b58\u6570\u636e</p> <p>Raises:</p> Type Description <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>await cache.aclear()  # \u5f02\u6b65\u5220\u9664\u6240\u6709\u7f13\u5b58</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>async def aclear(self) -&gt; None:\n    \"\"\"\n    \u6e05\u7a7a\u6240\u6709\u7f13\u5b58\uff08\u5f02\u6b65\uff09\n\n    \u8b66\u544a:\n        \u6b64\u64cd\u4f5c\u4e0d\u53ef\u9006\uff0c\u4f1a\u5220\u9664\u6240\u6709\u7f13\u5b58\u6570\u636e\n\n    Raises:\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; await cache.aclear()  # \u5f02\u6b65\u5220\u9664\u6240\u6709\u7f13\u5b58\n    \"\"\"\n    await self._backend.aclear()\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.aclose","title":"<code>aclose()</code>  <code>async</code>","text":"<p>\u5173\u95ed\u540e\u7aef\u8fde\u63a5(\u5f02\u6b65)</p> \u793a\u4f8b <p>await cache.aclose()</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>async def aclose(self) -&gt; None:\n    \"\"\"\n    \u5173\u95ed\u540e\u7aef\u8fde\u63a5(\u5f02\u6b65)\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; await cache.aclose()\n    \"\"\"\n    await self._backend.aclose()\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.adecrement","title":"<code>adecrement(key, delta=1)</code>  <code>async</code>","text":"<p>\u539f\u5b50\u9012\u51cf\u8ba1\u6570\u5668(\u5f02\u6b65)</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <code>delta</code> <code>int</code> <p>\u51cf\u91cf,\u9ed8\u8ba4\u4e3a 1</p> <code>1</code> <p>Returns:</p> Type Description <code>int</code> <p>\u9012\u51cf\u540e\u7684\u503c</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5f53\u524d\u503c\u4e0d\u662f\u6574\u6570</p> <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>new_value = await cache.adecrement(\"counter\", 3)</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>async def adecrement(self, key: CacheKey, delta: int = 1) -&gt; int:\n    \"\"\"\n    \u539f\u5b50\u9012\u51cf\u8ba1\u6570\u5668(\u5f02\u6b65)\n\n    Args:\n        key: \u7f13\u5b58\u952e\n        delta: \u51cf\u91cf,\u9ed8\u8ba4\u4e3a 1\n\n    Returns:\n        \u9012\u51cf\u540e\u7684\u503c\n\n    Raises:\n        ValueError: \u5f53\u524d\u503c\u4e0d\u662f\u6574\u6570\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; new_value = await cache.adecrement(\"counter\", 3)\n    \"\"\"\n    return await self.aincrement(key, -delta)\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.adelete","title":"<code>adelete(key)</code>  <code>async</code>","text":"<p>\u5220\u9664\u7f13\u5b58\uff08\u5f02\u6b65\uff09</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <p>Returns:</p> Type Description <code>bool</code> <p>\u5982\u679c\u952e\u5b58\u5728\u5e76\u6210\u529f\u5220\u9664\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False</p> <p>Raises:</p> Type Description <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>deleted = await cache.adelete(\"user:123\")</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>async def adelete(self, key: CacheKey) -&gt; bool:\n    \"\"\"\n    \u5220\u9664\u7f13\u5b58\uff08\u5f02\u6b65\uff09\n\n    Args:\n        key: \u7f13\u5b58\u952e\n\n    Returns:\n        \u5982\u679c\u952e\u5b58\u5728\u5e76\u6210\u529f\u5220\u9664\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\n\n    Raises:\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; deleted = await cache.adelete(\"user:123\")\n    \"\"\"\n    return await self._backend.adelete(key)\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.adelete_many","title":"<code>adelete_many(keys)</code>  <code>async</code>","text":"<p>\u6279\u91cf\u5220\u9664\u7f13\u5b58\uff08\u5f02\u6b65\uff09</p> <p>Parameters:</p> Name Type Description Default <code>keys</code> <code>list[CacheKey]</code> <p>\u7f13\u5b58\u952e\u5217\u8868</p> required <p>Returns:</p> Type Description <code>int</code> <p>\u6210\u529f\u5220\u9664\u7684\u952e\u6570\u91cf</p> <p>Raises:</p> Type Description <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>count = await cache.adelete_many([\"user:1\", \"user:2\"])</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>async def adelete_many(self, keys: list[CacheKey]) -&gt; int:\n    \"\"\"\n    \u6279\u91cf\u5220\u9664\u7f13\u5b58\uff08\u5f02\u6b65\uff09\n\n    Args:\n        keys: \u7f13\u5b58\u952e\u5217\u8868\n\n    Returns:\n        \u6210\u529f\u5220\u9664\u7684\u952e\u6570\u91cf\n\n    Raises:\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; count = await cache.adelete_many([\"user:1\", \"user:2\"])\n    \"\"\"\n    return await self._backend.adelete_many(keys)\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.aget","title":"<code>aget(key)</code>  <code>async</code>","text":"<p>\u83b7\u53d6\u7f13\u5b58\u503c\uff08\u5f02\u6b65\uff09</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <p>Returns:</p> Type Description <code>CacheValue | None</code> <p>\u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u5219\u8fd4\u56de None</p> <p>Raises:</p> Type Description <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>user = await cache.aget(\"user:123\")</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>async def aget(self, key: CacheKey) -&gt; CacheValue | None:\n    \"\"\"\n    \u83b7\u53d6\u7f13\u5b58\u503c\uff08\u5f02\u6b65\uff09\n\n    Args:\n        key: \u7f13\u5b58\u952e\n\n    Returns:\n        \u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u5219\u8fd4\u56de None\n\n    Raises:\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; user = await cache.aget(\"user:123\")\n    \"\"\"\n    return await self._backend.aget(key)\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.aget_many","title":"<code>aget_many(keys)</code>  <code>async</code>","text":"<p>\u6279\u91cf\u83b7\u53d6\u7f13\u5b58\u503c\uff08\u5f02\u6b65\uff09</p> <p>Parameters:</p> Name Type Description Default <code>keys</code> <code>list[CacheKey]</code> <p>\u7f13\u5b58\u952e\u5217\u8868</p> required <p>Returns:</p> Type Description <code>dict[CacheKey, CacheValue]</code> <p>\u952e\u503c\u5bf9\u5b57\u5178\uff0c\u4e0d\u5b58\u5728\u7684\u952e\u4e0d\u5305\u542b\u5728\u7ed3\u679c\u4e2d</p> <p>Raises:</p> Type Description <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>results = await cache.aget_many([\"user:1\", \"user:2\"])</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>async def aget_many(self, keys: list[CacheKey]) -&gt; dict[CacheKey, CacheValue]:\n    \"\"\"\n    \u6279\u91cf\u83b7\u53d6\u7f13\u5b58\u503c\uff08\u5f02\u6b65\uff09\n\n    Args:\n        keys: \u7f13\u5b58\u952e\u5217\u8868\n\n    Returns:\n        \u952e\u503c\u5bf9\u5b57\u5178\uff0c\u4e0d\u5b58\u5728\u7684\u952e\u4e0d\u5305\u542b\u5728\u7ed3\u679c\u4e2d\n\n    Raises:\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; results = await cache.aget_many([\"user:1\", \"user:2\"])\n    \"\"\"\n    return await self._backend.aget_many(keys)\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.aget_or_set","title":"<code>aget_or_set(key, default_factory, ttl=None, ex=False, nx=False)</code>  <code>async</code>","text":"<p>\u83b7\u53d6\u7f13\u5b58\u503c,\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8c03\u7528 default_factory \u8ba1\u7b97\u5e76\u7f13\u5b58(\u5f02\u6b65)</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <code>default_factory</code> <code>Callable[[], CacheValue]</code> <p>\u4e0d\u5b58\u5728\u65f6\u8c03\u7528\u7684\u5de5\u5382\u51fd\u6570</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4(\u79d2),None \u8868\u793a\u6c38\u4e0d\u8fc7\u671f</p> <code>None</code> <code>ex</code> <code>bool</code> <p>\u5982\u679c\u4e3a True,ttl \u8868\u793a\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4</p> <code>False</code> <code>nx</code> <code>bool</code> <p>\u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e</p> <code>False</code> <p>Returns:</p> Type Description <code>CacheValue</code> <p>\u7f13\u5b58\u503c\u6216\u8ba1\u7b97\u7684\u65b0\u503c</p> <p>Raises:</p> Type Description <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>async def fetch_data(): ...     return await client.get(\"/api/data\") result = await cache.aget_or_set(\"data\", fetch_data)</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>async def aget_or_set(\n    self,\n    key: CacheKey,\n    default_factory: Callable[[], CacheValue],\n    ttl: int | None = None,\n    ex: bool = False,\n    nx: bool = False,\n) -&gt; CacheValue:\n    \"\"\"\n    \u83b7\u53d6\u7f13\u5b58\u503c,\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8c03\u7528 default_factory \u8ba1\u7b97\u5e76\u7f13\u5b58(\u5f02\u6b65)\n\n    Args:\n        key: \u7f13\u5b58\u952e\n        default_factory: \u4e0d\u5b58\u5728\u65f6\u8c03\u7528\u7684\u5de5\u5382\u51fd\u6570\n        ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2),None \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n        ex: \u5982\u679c\u4e3a True,ttl \u8868\u793a\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4\n        nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n    Returns:\n        \u7f13\u5b58\u503c\u6216\u8ba1\u7b97\u7684\u65b0\u503c\n\n    Raises:\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; async def fetch_data():\n        ...     return await client.get(\"/api/data\")\n        &gt;&gt;&gt; result = await cache.aget_or_set(\"data\", fetch_data)\n    \"\"\"\n    value = await self._backend.aget(key)\n    if value is not None:\n        return value\n\n    # \u7f13\u5b58\u672a\u547d\u4e2d,\u8ba1\u7b97\u65b0\u503c\n    value = default_factory()\n    await self._backend.aset(key, value, ttl=ttl, ex=ex, nx=nx)\n    return value\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.aincrement","title":"<code>aincrement(key, delta=1)</code>  <code>async</code>","text":"<p>\u539f\u5b50\u9012\u589e\u8ba1\u6570\u5668(\u5f02\u6b65)</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <code>delta</code> <code>int</code> <p>\u589e\u91cf,\u9ed8\u8ba4\u4e3a 1</p> <code>1</code> <p>Returns:</p> Type Description <code>int</code> <p>\u9012\u589e\u540e\u7684\u503c</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5f53\u524d\u503c\u4e0d\u662f\u6574\u6570</p> <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>await cache.aset(\"counter\", 10) new_value = await cache.aincrement(\"counter\", 5)</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>async def aincrement(self, key: CacheKey, delta: int = 1) -&gt; int:\n    \"\"\"\n    \u539f\u5b50\u9012\u589e\u8ba1\u6570\u5668(\u5f02\u6b65)\n\n    Args:\n        key: \u7f13\u5b58\u952e\n        delta: \u589e\u91cf,\u9ed8\u8ba4\u4e3a 1\n\n    Returns:\n        \u9012\u589e\u540e\u7684\u503c\n\n    Raises:\n        ValueError: \u5f53\u524d\u503c\u4e0d\u662f\u6574\u6570\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; await cache.aset(\"counter\", 10)\n        &gt;&gt;&gt; new_value = await cache.aincrement(\"counter\", 5)\n    \"\"\"\n    current = await self._backend.aget(key)\n    if current is None:\n        current = 0\n\n    if not isinstance(current, int):\n        msg = f\"\u952e {key} \u7684\u503c\u4e0d\u662f\u6574\u6570\u7c7b\u578b: {type(current)}\"\n        raise ValueError(msg)\n\n    new_value = current + delta\n    await self._backend.aset(key, new_value)\n    return new_value\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.akeys","title":"<code>akeys(pattern='*', cursor=0, count=100, max_keys=None)</code>  <code>async</code>","text":"<p>\u626b\u63cf\u7f13\u5b58\u952e(\u5f02\u6b65)</p> <p>Parameters:</p> Name Type Description Default <code>pattern</code> <code>str</code> <p>\u5339\u914d\u6a21\u5f0f</p> <code>'*'</code> <code>cursor</code> <code>int</code> <p>\u6e38\u6807\u4f4d\u7f6e</p> <code>0</code> <code>count</code> <code>int</code> <p>\u6bcf\u9875\u8fd4\u56de\u7684\u952e\u6570\u91cf</p> <code>100</code> <code>max_keys</code> <code>int | None</code> <p>\u6700\u591a\u8fd4\u56de\u7684\u952e\u6570\u91cf</p> <code>None</code> <p>Returns:</p> Type Description <code>KeysPage</code> <p>KeysPage \u5bf9\u8c61</p> \u793a\u4f8b <p>page = await cache.akeys(pattern=\"session:*\")</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>async def akeys(\n    self,\n    pattern: str = \"*\",\n    cursor: int = 0,\n    count: int = 100,\n    max_keys: int | None = None,\n) -&gt; KeysPage:\n    \"\"\"\n    \u626b\u63cf\u7f13\u5b58\u952e(\u5f02\u6b65)\n\n    Args:\n        pattern: \u5339\u914d\u6a21\u5f0f\n        cursor: \u6e38\u6807\u4f4d\u7f6e\n        count: \u6bcf\u9875\u8fd4\u56de\u7684\u952e\u6570\u91cf\n        max_keys: \u6700\u591a\u8fd4\u56de\u7684\u952e\u6570\u91cf\n\n    Returns:\n        KeysPage \u5bf9\u8c61\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; page = await cache.akeys(pattern=\"session:*\")\n    \"\"\"\n    return await self._backend.akeys(\n        pattern=pattern, cursor=cursor, count=count, max_keys=max_keys\n    )\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.amget","title":"<code>amget(keys)</code>  <code>async</code>","text":"<p>\u6279\u91cf\u83b7\u53d6(aget_many \u7684\u522b\u540d)(\u5f02\u6b65)</p> <p>Parameters:</p> Name Type Description Default <code>keys</code> <code>list[CacheKey]</code> <p>\u7f13\u5b58\u952e\u5217\u8868</p> required <p>Returns:</p> Type Description <code>dict[CacheKey, CacheValue]</code> <p>\u952e\u503c\u5bf9\u5b57\u5178</p> \u793a\u4f8b <p>results = await cache.amget([\"key1\", \"key2\"])</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>async def amget(self, keys: list[CacheKey]) -&gt; dict[CacheKey, CacheValue]:\n    \"\"\"\n    \u6279\u91cf\u83b7\u53d6(aget_many \u7684\u522b\u540d)(\u5f02\u6b65)\n\n    Args:\n        keys: \u7f13\u5b58\u952e\u5217\u8868\n\n    Returns:\n        \u952e\u503c\u5bf9\u5b57\u5178\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; results = await cache.amget([\"key1\", \"key2\"])\n    \"\"\"\n    return await self.aget_many(keys)\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.amset","title":"<code>amset(mapping, ttl=None)</code>  <code>async</code>","text":"<p>\u6279\u91cf\u8bbe\u7f6e(aset_many \u7684\u522b\u540d)(\u5f02\u6b65)</p> <p>Parameters:</p> Name Type Description Default <code>mapping</code> <code>dict[CacheKey, CacheValue]</code> <p>\u952e\u503c\u5bf9\u5b57\u5178</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4(\u79d2)</p> <code>None</code> \u793a\u4f8b <p>await cache.amset({\"key1\": \"val1\", \"key2\": \"val2\"})</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>async def amset(\n    self,\n    mapping: dict[CacheKey, CacheValue],\n    ttl: int | None = None,\n) -&gt; None:\n    \"\"\"\n    \u6279\u91cf\u8bbe\u7f6e(aset_many \u7684\u522b\u540d)(\u5f02\u6b65)\n\n    Args:\n        mapping: \u952e\u503c\u5bf9\u5b57\u5178\n        ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2)\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; await cache.amset({\"key1\": \"val1\", \"key2\": \"val2\"})\n    \"\"\"\n    await self.aset_many(mapping, ttl=ttl)\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.aset","title":"<code>aset(key, value, ttl=None, ex=False, nx=False)</code>  <code>async</code>","text":"<p>\u8bbe\u7f6e\u7f13\u5b58\u503c(\u5f02\u6b65)</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <code>value</code> <code>CacheValue</code> <p>\u7f13\u5b58\u503c</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4(\u79d2),None \u8868\u793a\u6c38\u4e0d\u8fc7\u671f</p> <code>None</code> <code>ex</code> <code>bool</code> <p>\u5982\u679c\u4e3a True,ttl \u8868\u793a\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4</p> <code>False</code> <code>nx</code> <code>bool</code> <p>\u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>\u662f\u5426\u8bbe\u7f6e\u6210\u529f</p> <p>Raises:</p> Type Description <code>CacheSerializationError</code> <p>\u5e8f\u5217\u5316\u5931\u8d25</p> <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>await cache.aset(\"product:456\", {\"name\": \"Laptop\"}, ttl=1800)</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>async def aset(\n    self,\n    key: CacheKey,\n    value: CacheValue,\n    ttl: int | None = None,\n    ex: bool = False,\n    nx: bool = False,\n) -&gt; bool:\n    \"\"\"\n    \u8bbe\u7f6e\u7f13\u5b58\u503c(\u5f02\u6b65)\n\n    Args:\n        key: \u7f13\u5b58\u952e\n        value: \u7f13\u5b58\u503c\n        ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2),None \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n        ex: \u5982\u679c\u4e3a True,ttl \u8868\u793a\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4\n        nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n    Returns:\n        \u662f\u5426\u8bbe\u7f6e\u6210\u529f\n\n    Raises:\n        CacheSerializationError: \u5e8f\u5217\u5316\u5931\u8d25\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; await cache.aset(\"product:456\", {\"name\": \"Laptop\"}, ttl=1800)\n    \"\"\"\n    return await self._backend.aset(key, value, ttl=ttl, ex=ex, nx=nx)\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.aset_many","title":"<code>aset_many(mapping, ttl=None)</code>  <code>async</code>","text":"<p>\u6279\u91cf\u8bbe\u7f6e\u7f13\u5b58\u503c\uff08\u5f02\u6b65\uff09</p> <p>Parameters:</p> Name Type Description Default <code>mapping</code> <code>dict[CacheKey, CacheValue]</code> <p>\u952e\u503c\u5bf9\u5b57\u5178</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u8868\u793a\u6c38\u4e0d\u8fc7\u671f</p> <code>None</code> <p>Raises:</p> Type Description <code>CacheSerializationError</code> <p>\u5e8f\u5217\u5316\u5931\u8d25</p> <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>await cache.aset_many( ...     { ...         \"product:1\": {\"name\": \"Phone\"}, ...         \"product:2\": {\"name\": \"Tablet\"}, ...     } ... )</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>async def aset_many(\n    self,\n    mapping: dict[CacheKey, CacheValue],\n    ttl: int | None = None,\n) -&gt; None:\n    \"\"\"\n    \u6279\u91cf\u8bbe\u7f6e\u7f13\u5b58\u503c\uff08\u5f02\u6b65\uff09\n\n    Args:\n        mapping: \u952e\u503c\u5bf9\u5b57\u5178\n        ttl: \u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n\n    Raises:\n        CacheSerializationError: \u5e8f\u5217\u5316\u5931\u8d25\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; await cache.aset_many(\n        ...     {\n        ...         \"product:1\": {\"name\": \"Phone\"},\n        ...         \"product:2\": {\"name\": \"Tablet\"},\n        ...     }\n        ... )\n    \"\"\"\n    await self._backend.aset_many(mapping, ttl=ttl)\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.cache","title":"<code>cache(ttl=None, key_builder=None, key_prefix='')</code>","text":"<p>\u7f13\u5b58\u88c5\u9970\u5668\uff08\u7ed1\u5b9a\u5230\u6b64\u7ba1\u7406\u5668\u5b9e\u4f8b\uff09</p> <p>\u63d0\u4f9b\u66f4\u4fbf\u5229\u7684\u88c5\u9970\u5668\u65b9\u5f0f\uff0c\u65e0\u9700\u6bcf\u6b21\u90fd\u4f20\u5165 manager \u53c2\u6570\u3002</p> <p>Parameters:</p> Name Type Description Default <code>ttl</code> <code>int | None</code> <p>\u7f13\u5b58\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u8868\u793a\u6c38\u4e0d\u8fc7\u671f</p> <code>None</code> <code>key_builder</code> <code>KeyBuilder | None</code> <p>\u81ea\u5b9a\u4e49\u952e\u751f\u6210\u51fd\u6570</p> <code>None</code> <code>key_prefix</code> <code>str</code> <p>\u952e\u524d\u7f00\uff08\u7528\u4e8e\u547d\u540d\u7a7a\u95f4\u9694\u79bb\uff09</p> <code>''</code> <p>Returns:</p> Type Description <code>Callable[[Callable[..., Any]], Callable[..., Any]]</code> <p>\u88c5\u9970\u5668\u51fd\u6570</p> <p>\u793a\u4f8b\uff1a     &gt;&gt;&gt; cache = CacheManager(backend=MemoryBackend())     &gt;&gt;&gt;     &gt;&gt;&gt; @cache.cache(ttl=3600, key_prefix=\"user:\")     &gt;&gt;&gt; def get_user(user_id: int):     ...     return db.query(User).get(user_id)     &gt;&gt;&gt;     &gt;&gt;&gt; user = get_user(123)  # \u7f13\u5b58 1 \u5c0f\u65f6</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def cache(\n    self,\n    ttl: int | None = None,\n    key_builder: KeyBuilder | None = None,\n    key_prefix: str = \"\",\n) -&gt; Callable[[Callable[..., Any]], Callable[..., Any]]:\n    \"\"\"\n    \u7f13\u5b58\u88c5\u9970\u5668\uff08\u7ed1\u5b9a\u5230\u6b64\u7ba1\u7406\u5668\u5b9e\u4f8b\uff09\n\n    \u63d0\u4f9b\u66f4\u4fbf\u5229\u7684\u88c5\u9970\u5668\u65b9\u5f0f\uff0c\u65e0\u9700\u6bcf\u6b21\u90fd\u4f20\u5165 manager \u53c2\u6570\u3002\n\n    Args:\n        ttl: \u7f13\u5b58\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n        key_builder: \u81ea\u5b9a\u4e49\u952e\u751f\u6210\u51fd\u6570\n        key_prefix: \u952e\u524d\u7f00\uff08\u7528\u4e8e\u547d\u540d\u7a7a\u95f4\u9694\u79bb\uff09\n\n    Returns:\n        \u88c5\u9970\u5668\u51fd\u6570\n\n    \u793a\u4f8b\uff1a\n        &gt;&gt;&gt; cache = CacheManager(backend=MemoryBackend())\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; @cache.cache(ttl=3600, key_prefix=\"user:\")\n        &gt;&gt;&gt; def get_user(user_id: int):\n        ...     return db.query(User).get(user_id)\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; user = get_user(123)  # \u7f13\u5b58 1 \u5c0f\u65f6\n    \"\"\"\n    from .decorators import cache as cache_decorator\n\n    def decorator(func: Callable[..., Any]) -&gt; Callable[..., Any]:\n        return cache_decorator(\n            self,\n            ttl=ttl,\n            key_builder=key_builder,\n            key_prefix=key_prefix,\n        )(func)\n\n    return decorator\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.cache_invalidate","title":"<code>cache_invalidate(key_builder=None, key_prefix='')</code>","text":"<p>\u7f13\u5b58\u5931\u6548\u88c5\u9970\u5668\uff08\u7ed1\u5b9a\u5230\u6b64\u7ba1\u7406\u5668\u5b9e\u4f8b\uff09</p> <p>\u5728\u51fd\u6570\u6267\u884c\u540e\uff0c\u5220\u9664\u5bf9\u5e94\u7684\u7f13\u5b58\u3002 \u5e38\u7528\u4e8e\u66f4\u65b0\u64cd\u4f5c\uff08\u5982 update_user \u540e\u6e05\u9664 get_user \u7f13\u5b58\uff09\u3002</p> <p>Parameters:</p> Name Type Description Default <code>key_builder</code> <code>KeyBuilder | None</code> <p>\u952e\u751f\u6210\u51fd\u6570\uff08\u9700\u4e0e @cache \u4e00\u81f4\uff09</p> <code>None</code> <code>key_prefix</code> <code>str</code> <p>\u952e\u524d\u7f00</p> <code>''</code> <p>Returns:</p> Type Description <code>Callable[[Callable[..., Any]], Callable[..., Any]]</code> <p>\u88c5\u9970\u5668\u51fd\u6570</p> <p>\u793a\u4f8b\uff1a     &gt;&gt;&gt; cache = CacheManager(backend=MemoryBackend())     &gt;&gt;&gt;     &gt;&gt;&gt; @cache.cache(key_prefix=\"user:\")     &gt;&gt;&gt; def get_user(user_id: int):     ...     return db.query(User).get(user_id)     &gt;&gt;&gt;     &gt;&gt;&gt; @cache.cache_invalidate(key_prefix=\"user:\")     &gt;&gt;&gt; def update_user(user_id: int, **updates):     ...     db.query(User).filter_by(id=user_id).update(updates)     ...     db.commit()     &gt;&gt;&gt;     &gt;&gt;&gt; get_user(123)  # \u7f13\u5b58\u7ed3\u679c     &gt;&gt;&gt; update_user(123, name=\"Bob\")  # \u6e05\u9664\u7f13\u5b58     &gt;&gt;&gt; get_user(123)  # \u91cd\u65b0\u67e5\u8be2\u6570\u636e\u5e93</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def cache_invalidate(\n    self,\n    key_builder: KeyBuilder | None = None,\n    key_prefix: str = \"\",\n) -&gt; Callable[[Callable[..., Any]], Callable[..., Any]]:\n    \"\"\"\n    \u7f13\u5b58\u5931\u6548\u88c5\u9970\u5668\uff08\u7ed1\u5b9a\u5230\u6b64\u7ba1\u7406\u5668\u5b9e\u4f8b\uff09\n\n    \u5728\u51fd\u6570\u6267\u884c\u540e\uff0c\u5220\u9664\u5bf9\u5e94\u7684\u7f13\u5b58\u3002\n    \u5e38\u7528\u4e8e\u66f4\u65b0\u64cd\u4f5c\uff08\u5982 update_user \u540e\u6e05\u9664 get_user \u7f13\u5b58\uff09\u3002\n\n    Args:\n        key_builder: \u952e\u751f\u6210\u51fd\u6570\uff08\u9700\u4e0e @cache \u4e00\u81f4\uff09\n        key_prefix: \u952e\u524d\u7f00\n\n    Returns:\n        \u88c5\u9970\u5668\u51fd\u6570\n\n    \u793a\u4f8b\uff1a\n        &gt;&gt;&gt; cache = CacheManager(backend=MemoryBackend())\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; @cache.cache(key_prefix=\"user:\")\n        &gt;&gt;&gt; def get_user(user_id: int):\n        ...     return db.query(User).get(user_id)\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; @cache.cache_invalidate(key_prefix=\"user:\")\n        &gt;&gt;&gt; def update_user(user_id: int, **updates):\n        ...     db.query(User).filter_by(id=user_id).update(updates)\n        ...     db.commit()\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; get_user(123)  # \u7f13\u5b58\u7ed3\u679c\n        &gt;&gt;&gt; update_user(123, name=\"Bob\")  # \u6e05\u9664\u7f13\u5b58\n        &gt;&gt;&gt; get_user(123)  # \u91cd\u65b0\u67e5\u8be2\u6570\u636e\u5e93\n    \"\"\"\n    from .decorators import cache_invalidate as cache_invalidate_decorator\n\n    def decorator(func: Callable[..., Any]) -&gt; Callable[..., Any]:\n        return cache_invalidate_decorator(\n            self,\n            key_builder=key_builder,\n            key_prefix=key_prefix,\n        )(func)\n\n    return decorator\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.check_health","title":"<code>check_health()</code>","text":"<p>\u68c0\u67e5\u540e\u7aef\u5065\u5eb7\u72b6\u6001</p> <p>Returns:</p> Type Description <code>bool</code> <p>True \u8868\u793a\u5065\u5eb7,False \u8868\u793a\u5f02\u5e38</p> \u793a\u4f8b <p>if cache.check_health(): ...     print(\"\u7f13\u5b58\u670d\u52a1\u6b63\u5e38\")</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def check_health(self) -&gt; bool:\n    \"\"\"\n    \u68c0\u67e5\u540e\u7aef\u5065\u5eb7\u72b6\u6001\n\n    Returns:\n        True \u8868\u793a\u5065\u5eb7,False \u8868\u793a\u5f02\u5e38\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; if cache.check_health():\n        ...     print(\"\u7f13\u5b58\u670d\u52a1\u6b63\u5e38\")\n    \"\"\"\n    try:\n        # \u5c1d\u8bd5\u8bbe\u7f6e\u548c\u83b7\u53d6\u6d4b\u8bd5\u952e\n        test_key = \"__health_check__\"\n        test_value = \"ok\"\n        self._backend.set(test_key, test_value, ttl=1)\n        result = self._backend.get(test_key)\n        self._backend.delete(test_key)\n        return result == test_value\n    except Exception:\n        return False\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.clear","title":"<code>clear()</code>","text":"<p>\u6e05\u7a7a\u6240\u6709\u7f13\u5b58\uff08\u540c\u6b65\uff09</p> \u8b66\u544a <p>\u6b64\u64cd\u4f5c\u4e0d\u53ef\u9006\uff0c\u4f1a\u5220\u9664\u6240\u6709\u7f13\u5b58\u6570\u636e</p> <p>Raises:</p> Type Description <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>cache.clear()  # \u5220\u9664\u6240\u6709\u7f13\u5b58</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def clear(self) -&gt; None:\n    \"\"\"\n    \u6e05\u7a7a\u6240\u6709\u7f13\u5b58\uff08\u540c\u6b65\uff09\n\n    \u8b66\u544a:\n        \u6b64\u64cd\u4f5c\u4e0d\u53ef\u9006\uff0c\u4f1a\u5220\u9664\u6240\u6709\u7f13\u5b58\u6570\u636e\n\n    Raises:\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; cache.clear()  # \u5220\u9664\u6240\u6709\u7f13\u5b58\n    \"\"\"\n    self._backend.clear()\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.close","title":"<code>close()</code>","text":"<p>\u5173\u95ed\u540e\u7aef\u8fde\u63a5(\u540c\u6b65)</p> <p>\u91ca\u653e\u6240\u6709\u8d44\u6e90,\u5173\u95ed\u7f51\u7edc\u8fde\u63a5\u7b49\u3002</p> \u793a\u4f8b <p>cache.close()</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def close(self) -&gt; None:\n    \"\"\"\n    \u5173\u95ed\u540e\u7aef\u8fde\u63a5(\u540c\u6b65)\n\n    \u91ca\u653e\u6240\u6709\u8d44\u6e90,\u5173\u95ed\u7f51\u7edc\u8fde\u63a5\u7b49\u3002\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; cache.close()\n    \"\"\"\n    self._backend.close()\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.decrement","title":"<code>decrement(key, delta=1)</code>","text":"<p>\u539f\u5b50\u9012\u51cf\u8ba1\u6570\u5668(\u540c\u6b65)</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <code>delta</code> <code>int</code> <p>\u51cf\u91cf,\u9ed8\u8ba4\u4e3a 1</p> <code>1</code> <p>Returns:</p> Type Description <code>int</code> <p>\u9012\u51cf\u540e\u7684\u503c</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5f53\u524d\u503c\u4e0d\u662f\u6574\u6570</p> <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>cache.set(\"counter\", 10) new_value = cache.decrement(\"counter\", 3) print(new_value)  # 7</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def decrement(self, key: CacheKey, delta: int = 1) -&gt; int:\n    \"\"\"\n    \u539f\u5b50\u9012\u51cf\u8ba1\u6570\u5668(\u540c\u6b65)\n\n    Args:\n        key: \u7f13\u5b58\u952e\n        delta: \u51cf\u91cf,\u9ed8\u8ba4\u4e3a 1\n\n    Returns:\n        \u9012\u51cf\u540e\u7684\u503c\n\n    Raises:\n        ValueError: \u5f53\u524d\u503c\u4e0d\u662f\u6574\u6570\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; cache.set(\"counter\", 10)\n        &gt;&gt;&gt; new_value = cache.decrement(\"counter\", 3)\n        &gt;&gt;&gt; print(new_value)  # 7\n    \"\"\"\n    return self.increment(key, -delta)\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.delete","title":"<code>delete(key)</code>","text":"<p>\u5220\u9664\u7f13\u5b58\uff08\u540c\u6b65\uff09</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <p>Returns:</p> Type Description <code>bool</code> <p>\u5982\u679c\u952e\u5b58\u5728\u5e76\u6210\u529f\u5220\u9664\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False</p> <p>Raises:</p> Type Description <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>if cache.delete(\"user:123\"): ...     print(\"\u7f13\u5b58\u5df2\u5220\u9664\")</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def delete(self, key: CacheKey) -&gt; bool:\n    \"\"\"\n    \u5220\u9664\u7f13\u5b58\uff08\u540c\u6b65\uff09\n\n    Args:\n        key: \u7f13\u5b58\u952e\n\n    Returns:\n        \u5982\u679c\u952e\u5b58\u5728\u5e76\u6210\u529f\u5220\u9664\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\n\n    Raises:\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; if cache.delete(\"user:123\"):\n        ...     print(\"\u7f13\u5b58\u5df2\u5220\u9664\")\n    \"\"\"\n    return self._backend.delete(key)\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.delete_many","title":"<code>delete_many(keys)</code>","text":"<p>\u6279\u91cf\u5220\u9664\u7f13\u5b58\uff08\u540c\u6b65\uff09</p> <p>Parameters:</p> Name Type Description Default <code>keys</code> <code>list[CacheKey]</code> <p>\u7f13\u5b58\u952e\u5217\u8868</p> required <p>Returns:</p> Type Description <code>int</code> <p>\u6210\u529f\u5220\u9664\u7684\u952e\u6570\u91cf</p> <p>Raises:</p> Type Description <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>count = cache.delete_many([\"user:1\", \"user:2\", \"user:3\"]) print(f\"\u5220\u9664\u4e86 {count} \u4e2a\u952e\")</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def delete_many(self, keys: list[CacheKey]) -&gt; int:\n    \"\"\"\n    \u6279\u91cf\u5220\u9664\u7f13\u5b58\uff08\u540c\u6b65\uff09\n\n    Args:\n        keys: \u7f13\u5b58\u952e\u5217\u8868\n\n    Returns:\n        \u6210\u529f\u5220\u9664\u7684\u952e\u6570\u91cf\n\n    Raises:\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; count = cache.delete_many([\"user:1\", \"user:2\", \"user:3\"])\n        &gt;&gt;&gt; print(f\"\u5220\u9664\u4e86 {count} \u4e2a\u952e\")\n    \"\"\"\n    return self._backend.delete_many(keys)\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.exists","title":"<code>exists(key)</code>","text":"<p>\u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728\uff08\u540c\u6b65\uff09</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <p>Returns:</p> Type Description <code>bool</code> <p>\u5982\u679c\u952e\u5b58\u5728\u4e14\u672a\u8fc7\u671f\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False</p> <p>Raises:</p> Type Description <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>if cache.exists(\"user:123\"): ...     print(\"\u7f13\u5b58\u5b58\u5728\")</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def exists(self, key: CacheKey) -&gt; bool:\n    \"\"\"\n    \u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728\uff08\u540c\u6b65\uff09\n\n    Args:\n        key: \u7f13\u5b58\u952e\n\n    Returns:\n        \u5982\u679c\u952e\u5b58\u5728\u4e14\u672a\u8fc7\u671f\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\n\n    Raises:\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; if cache.exists(\"user:123\"):\n        ...     print(\"\u7f13\u5b58\u5b58\u5728\")\n    \"\"\"\n    return self._backend.exists(key)\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.from_config","title":"<code>from_config(config)</code>  <code>classmethod</code>","text":"<p>\u4ece\u914d\u7f6e\u521b\u5efa\u7f13\u5b58\u7ba1\u7406\u5668</p> <p>\u652f\u6301\u591a\u79cd\u8f93\u5165\u7c7b\u578b: - CacheConfig \u5bf9\u8c61 - dict \u914d\u7f6e\u5b57\u5178 - str/Path \u914d\u7f6e\u6587\u4ef6\u8def\u5f84</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>CacheConfig | dict[str, Any] | str | Path</code> <p>\u914d\u7f6e\u5bf9\u8c61\u3001\u5b57\u5178\u6216\u6587\u4ef6\u8def\u5f84</p> required <p>Returns:</p> Type Description <code>CacheManager</code> <p>\u914d\u7f6e\u597d\u7684 CacheManager \u5b9e\u4f8b</p> <p>Raises:</p> Type Description <code>CacheConfigError</code> <p>\u914d\u7f6e\u9a8c\u8bc1\u5931\u8d25</p> <code>ImportError</code> <p>\u7f3a\u5c11\u5fc5\u9700\u7684\u4f9d\u8d56</p> \u793a\u4f8b Source code in <code>src/symphra_cache/manager.py</code> <pre><code>@classmethod\ndef from_config(cls, config: CacheConfig | dict[str, Any] | str | Path) -&gt; CacheManager:\n    \"\"\"\n    \u4ece\u914d\u7f6e\u521b\u5efa\u7f13\u5b58\u7ba1\u7406\u5668\n\n    \u652f\u6301\u591a\u79cd\u8f93\u5165\u7c7b\u578b:\n    - CacheConfig \u5bf9\u8c61\n    - dict \u914d\u7f6e\u5b57\u5178\n    - str/Path \u914d\u7f6e\u6587\u4ef6\u8def\u5f84\n\n    Args:\n        config: \u914d\u7f6e\u5bf9\u8c61\u3001\u5b57\u5178\u6216\u6587\u4ef6\u8def\u5f84\n\n    Returns:\n        \u914d\u7f6e\u597d\u7684 CacheManager \u5b9e\u4f8b\n\n    Raises:\n        CacheConfigError: \u914d\u7f6e\u9a8c\u8bc1\u5931\u8d25\n        ImportError: \u7f3a\u5c11\u5fc5\u9700\u7684\u4f9d\u8d56\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; # \u4ece\u5b57\u5178\u521b\u5efa\n        &gt;&gt;&gt; cache = CacheManager.from_config({\"backend\": \"memory\"})\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; # \u4ece\u6587\u4ef6\u521b\u5efa\n        &gt;&gt;&gt; cache = CacheManager.from_config(\"config/cache.yaml\")\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; # \u4ece CacheConfig \u5bf9\u8c61\u521b\u5efa\n        &gt;&gt;&gt; config = CacheConfig.from_file(\"cache.toml\")\n        &gt;&gt;&gt; cache = CacheManager.from_config(config)\n    \"\"\"\n    from .config import CacheConfig\n\n    # \u7edf\u4e00\u8f6c\u6362\u4e3a CacheConfig \u5bf9\u8c61\n    if isinstance(config, dict):\n        config_obj = CacheConfig(**config)\n    elif isinstance(config, str | Path):\n        config_obj = CacheConfig.from_file(config)\n    elif isinstance(config, CacheConfig):\n        config_obj = config\n    else:\n        msg = f\"\u4e0d\u652f\u6301\u7684\u914d\u7f6e\u7c7b\u578b: {type(config)}\"\n        raise TypeError(msg)\n\n    # \u521b\u5efa\u540e\u7aef\n    backend = config_obj.create_backend()\n\n    # \u521b\u5efa\u7ba1\u7406\u5668\n    return cls(backend=backend)\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.from_config--_1","title":"\u4ece\u5b57\u5178\u521b\u5efa","text":"<p>cache = CacheManager.from_config({\"backend\": \"memory\"})</p>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.from_config--_2","title":"\u4ece\u6587\u4ef6\u521b\u5efa","text":"<p>cache = CacheManager.from_config(\"config/cache.yaml\")</p>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.from_config--cacheconfig","title":"\u4ece CacheConfig \u5bf9\u8c61\u521b\u5efa","text":"<p>config = CacheConfig.from_file(\"cache.toml\") cache = CacheManager.from_config(config)</p>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.from_env","title":"<code>from_env(prefix='SYMPHRA_CACHE_')</code>  <code>classmethod</code>","text":"<p>\u4ece\u73af\u5883\u53d8\u91cf\u521b\u5efa\u7f13\u5b58\u7ba1\u7406\u5668</p> <p>\u73af\u5883\u53d8\u91cf\u547d\u540d\u89c4\u5219: - SYMPHRA_CACHE_BACKEND=memory - SYMPHRA_CACHE_MAX_SIZE=10000 - SYMPHRA_CACHE_REDIS_HOST=localhost - SYMPHRA_CACHE_REDIS_PORT=6379</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>\u73af\u5883\u53d8\u91cf\u524d\u7f00,\u9ed8\u8ba4\u4e3a \"SYMPHRA_CACHE_\"</p> <code>'SYMPHRA_CACHE_'</code> <p>Returns:</p> Type Description <code>CacheManager</code> <p>\u914d\u7f6e\u597d\u7684 CacheManager \u5b9e\u4f8b</p> <p>Raises:</p> Type Description <code>CacheConfigError</code> <p>\u914d\u7f6e\u9a8c\u8bc1\u5931\u8d25</p> \u793a\u4f8b Source code in <code>src/symphra_cache/manager.py</code> <pre><code>@classmethod\ndef from_env(cls, prefix: str = \"SYMPHRA_CACHE_\") -&gt; CacheManager:\n    \"\"\"\n    \u4ece\u73af\u5883\u53d8\u91cf\u521b\u5efa\u7f13\u5b58\u7ba1\u7406\u5668\n\n    \u73af\u5883\u53d8\u91cf\u547d\u540d\u89c4\u5219:\n    - SYMPHRA_CACHE_BACKEND=memory\n    - SYMPHRA_CACHE_MAX_SIZE=10000\n    - SYMPHRA_CACHE_REDIS_HOST=localhost\n    - SYMPHRA_CACHE_REDIS_PORT=6379\n\n    Args:\n        prefix: \u73af\u5883\u53d8\u91cf\u524d\u7f00,\u9ed8\u8ba4\u4e3a \"SYMPHRA_CACHE_\"\n\n    Returns:\n        \u914d\u7f6e\u597d\u7684 CacheManager \u5b9e\u4f8b\n\n    Raises:\n        CacheConfigError: \u914d\u7f6e\u9a8c\u8bc1\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; # \u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\n        &gt;&gt;&gt; os.environ[\"SYMPHRA_CACHE_BACKEND\"] = \"redis\"\n        &gt;&gt;&gt; os.environ[\"SYMPHRA_CACHE_REDIS_HOST\"] = \"localhost\"\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; # \u4ece\u73af\u5883\u53d8\u91cf\u521b\u5efa\n        &gt;&gt;&gt; cache = CacheManager.from_env()\n    \"\"\"\n    from .config import CacheConfig\n\n    config = CacheConfig.from_env(prefix=prefix)\n    backend = config.create_backend()\n    return cls(backend=backend)\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.from_env--_1","title":"\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf","text":"<p>os.environ[\"SYMPHRA_CACHE_BACKEND\"] = \"redis\" os.environ[\"SYMPHRA_CACHE_REDIS_HOST\"] = \"localhost\"</p>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.from_env--_2","title":"\u4ece\u73af\u5883\u53d8\u91cf\u521b\u5efa","text":"<p>cache = CacheManager.from_env()</p>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.from_file","title":"<code>from_file(file_path)</code>  <code>classmethod</code>","text":"<p>\u4ece\u914d\u7f6e\u6587\u4ef6\u521b\u5efa\u7f13\u5b58\u7ba1\u7406\u5668</p> <p>\u652f\u6301\u7684\u683c\u5f0f: - YAML (.yaml, .yml) - TOML (.toml) - JSON (.json)</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str | Path</code> <p>\u914d\u7f6e\u6587\u4ef6\u8def\u5f84</p> required <p>Returns:</p> Type Description <code>CacheManager</code> <p>\u914d\u7f6e\u597d\u7684 CacheManager \u5b9e\u4f8b</p> <p>Raises:</p> Type Description <code>CacheConfigError</code> <p>\u6587\u4ef6\u8bfb\u53d6\u6216\u89e3\u6790\u5931\u8d25</p> \u793a\u4f8b Source code in <code>src/symphra_cache/manager.py</code> <pre><code>@classmethod\ndef from_file(cls, file_path: str | Path) -&gt; CacheManager:\n    \"\"\"\n    \u4ece\u914d\u7f6e\u6587\u4ef6\u521b\u5efa\u7f13\u5b58\u7ba1\u7406\u5668\n\n    \u652f\u6301\u7684\u683c\u5f0f:\n    - YAML (.yaml, .yml)\n    - TOML (.toml)\n    - JSON (.json)\n\n    Args:\n        file_path: \u914d\u7f6e\u6587\u4ef6\u8def\u5f84\n\n    Returns:\n        \u914d\u7f6e\u597d\u7684 CacheManager \u5b9e\u4f8b\n\n    Raises:\n        CacheConfigError: \u6587\u4ef6\u8bfb\u53d6\u6216\u89e3\u6790\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; # \u4ece YAML \u6587\u4ef6\u521b\u5efa\n        &gt;&gt;&gt; cache = CacheManager.from_file(\"config/cache.yaml\")\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; # \u4ece TOML \u6587\u4ef6\u521b\u5efa\n        &gt;&gt;&gt; cache = CacheManager.from_file(\"config/cache.toml\")\n    \"\"\"\n    from .config import CacheConfig\n\n    config = CacheConfig.from_file(file_path)\n    backend = config.create_backend()\n    return cls(backend=backend)\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.from_file--yaml","title":"\u4ece YAML \u6587\u4ef6\u521b\u5efa","text":"<p>cache = CacheManager.from_file(\"config/cache.yaml\")</p>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.from_file--toml","title":"\u4ece TOML \u6587\u4ef6\u521b\u5efa","text":"<p>cache = CacheManager.from_file(\"config/cache.toml\")</p>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.get","title":"<code>get(key)</code>","text":"<p>\u83b7\u53d6\u7f13\u5b58\u503c\uff08\u540c\u6b65\uff09</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <p>Returns:</p> Type Description <code>CacheValue | None</code> <p>\u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u5219\u8fd4\u56de None</p> <p>Raises:</p> Type Description <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>user = cache.get(\"user:123\") if user is None: ...     print(\"\u7f13\u5b58\u672a\u547d\u4e2d\")</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def get(self, key: CacheKey) -&gt; CacheValue | None:\n    \"\"\"\n    \u83b7\u53d6\u7f13\u5b58\u503c\uff08\u540c\u6b65\uff09\n\n    Args:\n        key: \u7f13\u5b58\u952e\n\n    Returns:\n        \u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u5219\u8fd4\u56de None\n\n    Raises:\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; user = cache.get(\"user:123\")\n        &gt;&gt;&gt; if user is None:\n        ...     print(\"\u7f13\u5b58\u672a\u547d\u4e2d\")\n    \"\"\"\n    return self._backend.get(key)\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.get_many","title":"<code>get_many(keys)</code>","text":"<p>\u6279\u91cf\u83b7\u53d6\u7f13\u5b58\u503c\uff08\u540c\u6b65\uff09</p> <p>Parameters:</p> Name Type Description Default <code>keys</code> <code>list[CacheKey]</code> <p>\u7f13\u5b58\u952e\u5217\u8868</p> required <p>Returns:</p> Type Description <code>dict[CacheKey, CacheValue]</code> <p>\u952e\u503c\u5bf9\u5b57\u5178\uff0c\u4e0d\u5b58\u5728\u7684\u952e\u4e0d\u5305\u542b\u5728\u7ed3\u679c\u4e2d</p> <p>Raises:</p> Type Description <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>results = cache.get_many([\"user:1\", \"user:2\", \"user:3\"]) for key, value in results.items(): ...     print(f\"{key}: {value}\")</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def get_many(self, keys: list[CacheKey]) -&gt; dict[CacheKey, CacheValue]:\n    \"\"\"\n    \u6279\u91cf\u83b7\u53d6\u7f13\u5b58\u503c\uff08\u540c\u6b65\uff09\n\n    Args:\n        keys: \u7f13\u5b58\u952e\u5217\u8868\n\n    Returns:\n        \u952e\u503c\u5bf9\u5b57\u5178\uff0c\u4e0d\u5b58\u5728\u7684\u952e\u4e0d\u5305\u542b\u5728\u7ed3\u679c\u4e2d\n\n    Raises:\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; results = cache.get_many([\"user:1\", \"user:2\", \"user:3\"])\n        &gt;&gt;&gt; for key, value in results.items():\n        ...     print(f\"{key}: {value}\")\n    \"\"\"\n    return self._backend.get_many(keys)\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.get_or_set","title":"<code>get_or_set(key, default_factory, ttl=None, ex=False, nx=False)</code>","text":"<p>\u83b7\u53d6\u7f13\u5b58\u503c,\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8c03\u7528 default_factory \u8ba1\u7b97\u5e76\u7f13\u5b58</p> <p>\u8fd9\u662f\u9632\u6b62\u7f13\u5b58\u7a7f\u900f\u7684\u63a8\u8350\u6a21\u5f0f\u3002</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <code>default_factory</code> <code>Callable[[], CacheValue]</code> <p>\u4e0d\u5b58\u5728\u65f6\u8c03\u7528\u7684\u5de5\u5382\u51fd\u6570</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4(\u79d2),None \u8868\u793a\u6c38\u4e0d\u8fc7\u671f</p> <code>None</code> <code>ex</code> <code>bool</code> <p>\u5982\u679c\u4e3a True,ttl \u8868\u793a\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4</p> <code>False</code> <code>nx</code> <code>bool</code> <p>\u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e</p> <code>False</code> <p>Returns:</p> Type Description <code>CacheValue</code> <p>\u7f13\u5b58\u503c\u6216\u8ba1\u7b97\u7684\u65b0\u503c</p> <p>Raises:</p> Type Description <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>def expensive_compute(): ...     return sum(range(1000000)) result = cache.get_or_set(\"sum\", expensive_compute, ttl=300)</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def get_or_set(\n    self,\n    key: CacheKey,\n    default_factory: Callable[[], CacheValue],\n    ttl: int | None = None,\n    ex: bool = False,\n    nx: bool = False,\n) -&gt; CacheValue:\n    \"\"\"\n    \u83b7\u53d6\u7f13\u5b58\u503c,\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8c03\u7528 default_factory \u8ba1\u7b97\u5e76\u7f13\u5b58\n\n    \u8fd9\u662f\u9632\u6b62\u7f13\u5b58\u7a7f\u900f\u7684\u63a8\u8350\u6a21\u5f0f\u3002\n\n    Args:\n        key: \u7f13\u5b58\u952e\n        default_factory: \u4e0d\u5b58\u5728\u65f6\u8c03\u7528\u7684\u5de5\u5382\u51fd\u6570\n        ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2),None \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n        ex: \u5982\u679c\u4e3a True,ttl \u8868\u793a\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4\n        nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n    Returns:\n        \u7f13\u5b58\u503c\u6216\u8ba1\u7b97\u7684\u65b0\u503c\n\n    Raises:\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; def expensive_compute():\n        ...     return sum(range(1000000))\n        &gt;&gt;&gt; result = cache.get_or_set(\"sum\", expensive_compute, ttl=300)\n    \"\"\"\n    value = self._backend.get(key)\n    if value is not None:\n        return value\n\n    # \u7f13\u5b58\u672a\u547d\u4e2d,\u8ba1\u7b97\u65b0\u503c\n    value = default_factory()\n    self._backend.set(key, value, ttl=ttl, ex=ex, nx=nx)\n    return value\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.increment","title":"<code>increment(key, delta=1)</code>","text":"<p>\u539f\u5b50\u9012\u589e\u8ba1\u6570\u5668(\u540c\u6b65)</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <code>delta</code> <code>int</code> <p>\u589e\u91cf,\u9ed8\u8ba4\u4e3a 1</p> <code>1</code> <p>Returns:</p> Type Description <code>int</code> <p>\u9012\u589e\u540e\u7684\u503c</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5f53\u524d\u503c\u4e0d\u662f\u6574\u6570</p> <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>cache.set(\"counter\", 10) new_value = cache.increment(\"counter\", 5) print(new_value)  # 15</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def increment(self, key: CacheKey, delta: int = 1) -&gt; int:\n    \"\"\"\n    \u539f\u5b50\u9012\u589e\u8ba1\u6570\u5668(\u540c\u6b65)\n\n    Args:\n        key: \u7f13\u5b58\u952e\n        delta: \u589e\u91cf,\u9ed8\u8ba4\u4e3a 1\n\n    Returns:\n        \u9012\u589e\u540e\u7684\u503c\n\n    Raises:\n        ValueError: \u5f53\u524d\u503c\u4e0d\u662f\u6574\u6570\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; cache.set(\"counter\", 10)\n        &gt;&gt;&gt; new_value = cache.increment(\"counter\", 5)\n        &gt;&gt;&gt; print(new_value)  # 15\n    \"\"\"\n    current = self._backend.get(key)\n    if current is None:\n        current = 0\n\n    if not isinstance(current, int):\n        msg = f\"\u952e {key} \u7684\u503c\u4e0d\u662f\u6574\u6570\u7c7b\u578b: {type(current)}\"\n        raise ValueError(msg)\n\n    new_value = current + delta\n    self._backend.set(key, new_value)\n    return new_value\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.keys","title":"<code>keys(pattern='*', cursor=0, count=100, max_keys=None)</code>","text":"<p>\u626b\u63cf\u7f13\u5b58\u952e(\u540c\u6b65)</p> <p>\u652f\u6301\u6a21\u5f0f\u5339\u914d\u548c\u5206\u9875\u3002</p> <p>Parameters:</p> Name Type Description Default <code>pattern</code> <code>str</code> <p>\u5339\u914d\u6a21\u5f0f(\u652f\u6301\u901a\u914d\u7b26 * \u548c ?)</p> <code>'*'</code> <code>cursor</code> <code>int</code> <p>\u6e38\u6807\u4f4d\u7f6e(0 \u8868\u793a\u5f00\u59cb)</p> <code>0</code> <code>count</code> <code>int</code> <p>\u6bcf\u9875\u8fd4\u56de\u7684\u952e\u6570\u91cf</p> <code>100</code> <code>max_keys</code> <code>int | None</code> <p>\u6700\u591a\u8fd4\u56de\u7684\u952e\u6570\u91cf</p> <code>None</code> <p>Returns:</p> Type Description <code>KeysPage</code> <p>KeysPage \u5bf9\u8c61</p> \u793a\u4f8b <p>page = cache.keys(pattern=\"user:*\", count=100) print(f\"\u627e\u5230 {len(page.keys)} \u4e2a\u952e\") if page.has_more: ...     next_page = cache.keys(cursor=page.cursor)</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def keys(\n    self,\n    pattern: str = \"*\",\n    cursor: int = 0,\n    count: int = 100,\n    max_keys: int | None = None,\n) -&gt; KeysPage:\n    \"\"\"\n    \u626b\u63cf\u7f13\u5b58\u952e(\u540c\u6b65)\n\n    \u652f\u6301\u6a21\u5f0f\u5339\u914d\u548c\u5206\u9875\u3002\n\n    Args:\n        pattern: \u5339\u914d\u6a21\u5f0f(\u652f\u6301\u901a\u914d\u7b26 * \u548c ?)\n        cursor: \u6e38\u6807\u4f4d\u7f6e(0 \u8868\u793a\u5f00\u59cb)\n        count: \u6bcf\u9875\u8fd4\u56de\u7684\u952e\u6570\u91cf\n        max_keys: \u6700\u591a\u8fd4\u56de\u7684\u952e\u6570\u91cf\n\n    Returns:\n        KeysPage \u5bf9\u8c61\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; page = cache.keys(pattern=\"user:*\", count=100)\n        &gt;&gt;&gt; print(f\"\u627e\u5230 {len(page.keys)} \u4e2a\u952e\")\n        &gt;&gt;&gt; if page.has_more:\n        ...     next_page = cache.keys(cursor=page.cursor)\n    \"\"\"\n\n    return self._backend.keys(pattern=pattern, cursor=cursor, count=count, max_keys=max_keys)\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.mget","title":"<code>mget(keys)</code>","text":"<p>\u6279\u91cf\u83b7\u53d6(get_many \u7684\u522b\u540d)</p> <p>Parameters:</p> Name Type Description Default <code>keys</code> <code>list[CacheKey]</code> <p>\u7f13\u5b58\u952e\u5217\u8868</p> required <p>Returns:</p> Type Description <code>dict[CacheKey, CacheValue]</code> <p>\u952e\u503c\u5bf9\u5b57\u5178</p> \u793a\u4f8b <p>results = cache.mget([\"key1\", \"key2\", \"key3\"])</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def mget(self, keys: list[CacheKey]) -&gt; dict[CacheKey, CacheValue]:\n    \"\"\"\n    \u6279\u91cf\u83b7\u53d6(get_many \u7684\u522b\u540d)\n\n    Args:\n        keys: \u7f13\u5b58\u952e\u5217\u8868\n\n    Returns:\n        \u952e\u503c\u5bf9\u5b57\u5178\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; results = cache.mget([\"key1\", \"key2\", \"key3\"])\n    \"\"\"\n    return self.get_many(keys)\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.mset","title":"<code>mset(mapping, ttl=None)</code>","text":"<p>\u6279\u91cf\u8bbe\u7f6e(set_many \u7684\u522b\u540d)</p> <p>Parameters:</p> Name Type Description Default <code>mapping</code> <code>dict[CacheKey, CacheValue]</code> <p>\u952e\u503c\u5bf9\u5b57\u5178</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4(\u79d2)</p> <code>None</code> \u793a\u4f8b <p>cache.mset({\"key1\": \"val1\", \"key2\": \"val2\"}, ttl=300)</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def mset(\n    self,\n    mapping: dict[CacheKey, CacheValue],\n    ttl: int | None = None,\n) -&gt; None:\n    \"\"\"\n    \u6279\u91cf\u8bbe\u7f6e(set_many \u7684\u522b\u540d)\n\n    Args:\n        mapping: \u952e\u503c\u5bf9\u5b57\u5178\n        ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2)\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; cache.mset({\"key1\": \"val1\", \"key2\": \"val2\"}, ttl=300)\n    \"\"\"\n    self.set_many(mapping, ttl=ttl)\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.set","title":"<code>set(key, value, ttl=None, ex=False, nx=False)</code>","text":"<p>\u8bbe\u7f6e\u7f13\u5b58\u503c(\u540c\u6b65)</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <code>value</code> <code>CacheValue</code> <p>\u7f13\u5b58\u503c</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4(\u79d2),None \u8868\u793a\u6c38\u4e0d\u8fc7\u671f</p> <code>None</code> <code>ex</code> <code>bool</code> <p>\u5982\u679c\u4e3a True,ttl \u8868\u793a\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4;False \u8868\u793a\u7edd\u5bf9\u65f6\u95f4\u6233</p> <code>False</code> <code>nx</code> <code>bool</code> <p>\u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>\u662f\u5426\u8bbe\u7f6e\u6210\u529f(nx=True \u65f6\u53ef\u80fd\u5931\u8d25)</p> <p>Raises:</p> Type Description <code>CacheSerializationError</code> <p>\u5e8f\u5217\u5316\u5931\u8d25</p> <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def set(\n    self,\n    key: CacheKey,\n    value: CacheValue,\n    ttl: int | None = None,\n    ex: bool = False,\n    nx: bool = False,\n) -&gt; bool:\n    \"\"\"\n    \u8bbe\u7f6e\u7f13\u5b58\u503c(\u540c\u6b65)\n\n    Args:\n        key: \u7f13\u5b58\u952e\n        value: \u7f13\u5b58\u503c\n        ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2),None \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n        ex: \u5982\u679c\u4e3a True,ttl \u8868\u793a\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4;False \u8868\u793a\u7edd\u5bf9\u65f6\u95f4\u6233\n        nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n    Returns:\n        \u662f\u5426\u8bbe\u7f6e\u6210\u529f(nx=True \u65f6\u53ef\u80fd\u5931\u8d25)\n\n    Raises:\n        CacheSerializationError: \u5e8f\u5217\u5316\u5931\u8d25\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; # \u8bbe\u7f6e 1 \u5c0f\u65f6\u8fc7\u671f\n        &gt;&gt;&gt; cache.set(\"session:xyz\", {\"user_id\": 123}, ttl=3600)\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; # \u4ec5\u5f53\u4e0d\u5b58\u5728\u65f6\u8bbe\u7f6e(\u7c7b\u4f3c Redis SETNX)\n        &gt;&gt;&gt; success = cache.set(\"lock:resource\", \"owner_id\", ttl=10, nx=True)\n    \"\"\"\n    return self._backend.set(key, value, ttl=ttl, ex=ex, nx=nx)\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.set--1","title":"\u8bbe\u7f6e 1 \u5c0f\u65f6\u8fc7\u671f","text":"<p>cache.set(\"session:xyz\", {\"user_id\": 123}, ttl=3600)</p>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.set--redis-setnx","title":"\u4ec5\u5f53\u4e0d\u5b58\u5728\u65f6\u8bbe\u7f6e(\u7c7b\u4f3c Redis SETNX)","text":"<p>success = cache.set(\"lock:resource\", \"owner_id\", ttl=10, nx=True)</p>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.set_many","title":"<code>set_many(mapping, ttl=None)</code>","text":"<p>\u6279\u91cf\u8bbe\u7f6e\u7f13\u5b58\u503c\uff08\u540c\u6b65\uff09</p> <p>Parameters:</p> Name Type Description Default <code>mapping</code> <code>dict[CacheKey, CacheValue]</code> <p>\u952e\u503c\u5bf9\u5b57\u5178</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u8868\u793a\u6c38\u4e0d\u8fc7\u671f</p> <code>None</code> <p>Raises:</p> Type Description <code>CacheSerializationError</code> <p>\u5e8f\u5217\u5316\u5931\u8d25</p> <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>cache.set_many( ...     { ...         \"user:1\": {\"name\": \"Alice\"}, ...         \"user:2\": {\"name\": \"Bob\"}, ...     }, ...     ttl=600, ... )</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def set_many(\n    self,\n    mapping: dict[CacheKey, CacheValue],\n    ttl: int | None = None,\n) -&gt; None:\n    \"\"\"\n    \u6279\u91cf\u8bbe\u7f6e\u7f13\u5b58\u503c\uff08\u540c\u6b65\uff09\n\n    Args:\n        mapping: \u952e\u503c\u5bf9\u5b57\u5178\n        ttl: \u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n\n    Raises:\n        CacheSerializationError: \u5e8f\u5217\u5316\u5931\u8d25\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; cache.set_many(\n        ...     {\n        ...         \"user:1\": {\"name\": \"Alice\"},\n        ...         \"user:2\": {\"name\": \"Bob\"},\n        ...     },\n        ...     ttl=600,\n        ... )\n    \"\"\"\n    self._backend.set_many(mapping, ttl=ttl)\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.switch_backend","title":"<code>switch_backend(backend)</code>","text":"<p>\u5207\u6362\u7f13\u5b58\u540e\u7aef</p> \u6ce8\u610f <p>\u5207\u6362\u540e\u7aef\u4e0d\u4f1a\u8fc1\u79fb\u73b0\u6709\u6570\u636e\uff0c\u65b0\u540e\u7aef\u4ece\u7a7a\u767d\u72b6\u6001\u5f00\u59cb</p> <p>Parameters:</p> Name Type Description Default <code>backend</code> <code>BaseBackend</code> <p>\u65b0\u7684\u540e\u7aef\u5b9e\u4f8b</p> required \u793a\u4f8b Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def switch_backend(self, backend: BaseBackend) -&gt; None:\n    \"\"\"\n    \u5207\u6362\u7f13\u5b58\u540e\u7aef\n\n    \u6ce8\u610f:\n        \u5207\u6362\u540e\u7aef\u4e0d\u4f1a\u8fc1\u79fb\u73b0\u6709\u6570\u636e\uff0c\u65b0\u540e\u7aef\u4ece\u7a7a\u767d\u72b6\u6001\u5f00\u59cb\n\n    Args:\n        backend: \u65b0\u7684\u540e\u7aef\u5b9e\u4f8b\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; # \u4ece\u5185\u5b58\u540e\u7aef\u5207\u6362\u5230 Redis \u540e\u7aef\n        &gt;&gt;&gt; from symphra_cache.backends import RedisBackend\n        &gt;&gt;&gt; cache.switch_backend(RedisBackend())\n    \"\"\"\n    self._backend = backend\n</code></pre>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.switch_backend--redis","title":"\u4ece\u5185\u5b58\u540e\u7aef\u5207\u6362\u5230 Redis \u540e\u7aef","text":"<p>from symphra_cache.backends import RedisBackend cache.switch_backend(RedisBackend())</p>"},{"location":"en/api/manager/#symphra_cache.manager.CacheManager.ttl","title":"<code>ttl(key)</code>","text":"<p>\u83b7\u53d6\u952e\u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4(\u540c\u6b65)</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <p>Returns:</p> Type Description <code>int | None</code> <p>\u5269\u4f59\u79d2\u6570,\u5982\u679c\u952e\u4e0d\u5b58\u5728\u6216\u6c38\u4e0d\u8fc7\u671f\u8fd4\u56de None</p> <p>Raises:</p> Type Description <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u6ce8\u610f <p>\u4e0d\u540c\u540e\u7aef\u7684\u5b9e\u73b0\u7cbe\u5ea6\u53ef\u80fd\u4e0d\u540c</p> \u793a\u4f8b <p>cache.set(\"temp\", \"value\", ttl=60) remaining = cache.ttl(\"temp\") print(f\"\u5269\u4f59 {remaining} \u79d2\")</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def ttl(self, key: CacheKey) -&gt; int | None:\n    \"\"\"\n    \u83b7\u53d6\u952e\u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4(\u540c\u6b65)\n\n    Args:\n        key: \u7f13\u5b58\u952e\n\n    Returns:\n        \u5269\u4f59\u79d2\u6570,\u5982\u679c\u952e\u4e0d\u5b58\u5728\u6216\u6c38\u4e0d\u8fc7\u671f\u8fd4\u56de None\n\n    Raises:\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u6ce8\u610f:\n        \u4e0d\u540c\u540e\u7aef\u7684\u5b9e\u73b0\u7cbe\u5ea6\u53ef\u80fd\u4e0d\u540c\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; cache.set(\"temp\", \"value\", ttl=60)\n        &gt;&gt;&gt; remaining = cache.ttl(\"temp\")\n        &gt;&gt;&gt; print(f\"\u5269\u4f59 {remaining} \u79d2\")\n    \"\"\"\n    # \u9ed8\u8ba4\u5b9e\u73b0:\u68c0\u67e5\u662f\u5426\u5b58\u5728,\u4f46\u65e0\u6cd5\u83b7\u53d6\u7cbe\u786e TTL\n    # \u5b50\u7c7b\u53ef\u4ee5\u91cd\u5199\u6b64\u65b9\u6cd5\u63d0\u4f9b\u66f4\u7cbe\u786e\u7684\u5b9e\u73b0\n    if not self._backend.exists(key):\n        return None\n\n    # \u5bf9\u4e8e MemoryBackend,\u53ef\u4ee5\u8bbf\u95ee\u5185\u90e8\u6570\u636e\n    if hasattr(self._backend, \"_cache\"):\n        cache_data = self._backend._cache.get(key)\n        if cache_data is None:\n            return None\n        _, expires_at = cache_data\n        if expires_at is None:\n            return None\n        remaining = int(expires_at - time.time())\n        return remaining if remaining &gt; 0 else None\n\n    # \u5176\u4ed6\u540e\u7aef\u65e0\u6cd5\u7cbe\u786e\u83b7\u53d6,\u8fd4\u56de None\n    return None\n</code></pre>"},{"location":"en/api/monitoring/","title":"Monitoring","text":"<p>Metrics collection and exporter integrations.</p>"},{"location":"en/api/monitoring/#usage","title":"Usage","text":"<pre><code>from symphra_cache import CacheManager, CacheMonitor\nfrom symphra_cache.monitoring.prometheus import PrometheusExporter\nfrom symphra_cache.monitoring.statsd import StatsDExporter\n\n# Create cache and monitor\ncache = CacheManager.from_config({\"backend\": \"memory\"})\nmonitor = CacheMonitor(cache)\n\n# Do some operations\ncache.set(\"user:1\", {\"name\": \"Alice\"})\ncache.get(\"user:1\")\n\n# Unified metrics interface\nmetrics = monitor.metrics\nprint(metrics.get_latency_stats(\"get\"))  # {\"min\": ..., \"max\": ..., \"avg\": ...}\n\n# Prometheus exporter (text format)\nprom = PrometheusExporter(monitor, namespace=\"myapp\", subsystem=\"cache\")\nprint(prom.generate_metrics())\n\n# StatsD exporter (send to server)\n# Note: requires a reachable StatsD server if you call send_metrics()\nstatsd = StatsDExporter(monitor, prefix=\"myapp.cache\")\n# await statsd.send_metrics()  # in an async context\n</code></pre>"},{"location":"en/api/monitoring/#metrics-interface","title":"Metrics Interface","text":"<ul> <li><code>CacheMonitor.is_enabled()</code> toggles monitoring overhead on/off.</li> <li><code>CacheMonitor.metrics</code> provides adapter fields: <code>get_count</code>, <code>set_count</code>, <code>delete_count</code>, <code>hit_count</code>, <code>miss_count</code>.</li> <li><code>get_hit_rate()</code> and <code>get_total_operations()</code> return hit rate and total operations.</li> <li><code>get_average_latency(operation)</code> returns average latency in milliseconds for <code>get</code>/<code>set</code>.</li> <li><code>get_latency_stats(operation)</code> returns <code>{min, max, avg}</code> in milliseconds for <code>get</code>/<code>set</code>.</li> </ul> <p>\u7f13\u5b58\u76d1\u63a7\u5668</p> <p>\u63d0\u4f9b\u7f13\u5b58\u7edf\u8ba1\u3001\u76d1\u63a7\u548c\u5065\u5eb7\u68c0\u67e5\u529f\u80fd\u3002 \u7ebf\u7a0b\u5b89\u5168\u3002</p> <p>\u4f7f\u7528\u793a\u4f8b\uff1a     &gt;&gt;&gt; cache = CacheManager.from_config({\"backend\": \"memory\"})     &gt;&gt;&gt; monitor = CacheMonitor(cache)     &gt;&gt;&gt;     &gt;&gt;&gt; # \u6267\u884c\u7f13\u5b58\u64cd\u4f5c     &gt;&gt;&gt; cache.set(\"key\", \"value\")     &gt;&gt;&gt; cache.get(\"key\")     &gt;&gt;&gt;     &gt;&gt;&gt; # \u67e5\u770b\u7edf\u8ba1     &gt;&gt;&gt; stats = monitor.get_stats()     &gt;&gt;&gt; print(f\"\u547d\u4e2d\u7387: {stats.hit_rate:.2%}\")</p> Source code in <code>src/symphra_cache/monitor.py</code> <pre><code>class CacheMonitor:\n    \"\"\"\n    \u7f13\u5b58\u76d1\u63a7\u5668\n\n    \u63d0\u4f9b\u7f13\u5b58\u7edf\u8ba1\u3001\u76d1\u63a7\u548c\u5065\u5eb7\u68c0\u67e5\u529f\u80fd\u3002\n    \u7ebf\u7a0b\u5b89\u5168\u3002\n\n    \u4f7f\u7528\u793a\u4f8b\uff1a\n        &gt;&gt;&gt; cache = CacheManager.from_config({\"backend\": \"memory\"})\n        &gt;&gt;&gt; monitor = CacheMonitor(cache)\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; # \u6267\u884c\u7f13\u5b58\u64cd\u4f5c\n        &gt;&gt;&gt; cache.set(\"key\", \"value\")\n        &gt;&gt;&gt; cache.get(\"key\")\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; # \u67e5\u770b\u7edf\u8ba1\n        &gt;&gt;&gt; stats = monitor.get_stats()\n        &gt;&gt;&gt; print(f\"\u547d\u4e2d\u7387: {stats.hit_rate:.2%}\")\n    \"\"\"\n\n    def __init__(self, cache_manager: CacheManager, *, enabled: bool = True) -&gt; None:\n        \"\"\"\n        \u521d\u59cb\u5316\u76d1\u63a7\u5668\n\n        Args:\n            cache_manager: \u7f13\u5b58\u7ba1\u7406\u5668\u5b9e\u4f8b\n            enabled: \u662f\u5426\u542f\u7528\u76d1\u63a7\uff08\u7981\u7528\u65f6\u6027\u80fd\u5f00\u9500\u4e3a\u96f6\uff09\n        \"\"\"\n        self._cache = cache_manager\n        # \u4e3a\u517c\u5bb9\u5bfc\u51fa\u5668\uff0c\u516c\u5f00 cache \u5c5e\u6027\n        self.cache = cache_manager\n\n        self._enabled = enabled\n        self._stats = CacheStats()\n        self._lock = threading.RLock()\n\n        # \u8bb0\u5f55\u5ef6\u8fdf\u7684 min/max\uff08\u6beb\u79d2\uff09\u4ee5\u4f9b\u5bfc\u51fa\u5668\u4f7f\u7528\n        self._latency_min: dict[str, float] = {}\n        self._latency_max: dict[str, float] = {}\n\n        # \u5982\u679c\u542f\u7528\uff0c\u66ff\u6362\u7f13\u5b58\u7ba1\u7406\u5668\u7684\u65b9\u6cd5\n        if self._enabled:\n            self._wrap_cache_methods()\n\n    def is_enabled(self) -&gt; bool:\n        \"\"\"\u662f\u5426\u542f\u7528\u76d1\u63a7\uff08\u4e3a\u5bfc\u51fa\u5668\u517c\u5bb9\u63d0\u4f9b\uff09\"\"\"\n        return self._enabled\n\n    @property\n    def metrics(self) -&gt; CacheMetricsAdapter:\n        \"\"\"\u63d0\u4f9b\u4e0e\u5bfc\u51fa\u5668\u517c\u5bb9\u7684\u6307\u6807\u63a5\u53e3\"\"\"\n        return CacheMetricsAdapter(self._stats, self)\n\n    def _wrap_cache_methods(self) -&gt; None:\n        \"\"\"\u5305\u88c5\u7f13\u5b58\u7ba1\u7406\u5668\u65b9\u6cd5\u4ee5\u6536\u96c6\u7edf\u8ba1\u4fe1\u606f\"\"\"\n        original_get = self._cache.get\n        original_set = self._cache.set\n        original_delete = self._cache.delete\n\n        def monitored_get(key):\n            start = time.perf_counter()\n            try:\n                result = original_get(key)\n                elapsed_s = time.perf_counter() - start\n                latency_ms = elapsed_s * 1000.0\n                with self._lock:\n                    self._stats.gets += 1\n                    self._stats.total_get_time += elapsed_s\n                    # \u66f4\u65b0 min/max\uff08\u6beb\u79d2\uff09\n                    prev_min = self._latency_min.get(\"get\")\n                    prev_max = self._latency_max.get(\"get\")\n                    if prev_min is None or latency_ms &lt; prev_min:\n                        self._latency_min[\"get\"] = latency_ms\n                    if prev_max is None or latency_ms &gt; prev_max:\n                        self._latency_max[\"get\"] = latency_ms\n                    if result is not None:\n                        self._stats.hits += 1\n                    else:\n                        self._stats.misses += 1\n                return result\n            except Exception as e:\n                with self._lock:\n                    self._stats.errors += 1\n                raise e\n\n        def monitored_set(key, value, ttl=None, ex=False, nx=False):\n            start = time.perf_counter()\n            try:\n                result = original_set(key, value, ttl, ex, nx)\n                elapsed_s = time.perf_counter() - start\n                latency_ms = elapsed_s * 1000.0\n                with self._lock:\n                    self._stats.sets += 1\n                    self._stats.total_set_time += elapsed_s\n                    # \u66f4\u65b0 min/max\uff08\u6beb\u79d2\uff09\n                    prev_min = self._latency_min.get(\"set\")\n                    prev_max = self._latency_max.get(\"set\")\n                    if prev_min is None or latency_ms &lt; prev_min:\n                        self._latency_min[\"set\"] = latency_ms\n                    if prev_max is None or latency_ms &gt; prev_max:\n                        self._latency_max[\"set\"] = latency_ms\n                return result\n            except Exception as e:\n                with self._lock:\n                    self._stats.errors += 1\n                raise e\n\n        def monitored_delete(key):\n            try:\n                result = original_delete(key)\n                with self._lock:\n                    self._stats.deletes += 1\n                return result\n            except Exception as e:\n                with self._lock:\n                    self._stats.errors += 1\n                raise e\n\n        # \u66ff\u6362\u65b9\u6cd5\n        self._cache.get = monitored_get\n        self._cache.set = monitored_set\n        self._cache.delete = monitored_delete\n\n    def get_stats(self) -&gt; CacheStats:\n        \"\"\"\n        \u83b7\u53d6\u7edf\u8ba1\u4fe1\u606f\n\n        Returns:\n            CacheStats \u5bf9\u8c61\uff08\u526f\u672c\uff09\n\n        \u793a\u4f8b\uff1a\n            &gt;&gt;&gt; stats = monitor.get_stats()\n            &gt;&gt;&gt; print(f\"\u547d\u4e2d\u7387: {stats.hit_rate:.2%}\")\n            &gt;&gt;&gt; print(f\"\u5e73\u5747\u54cd\u5e94\u65f6\u95f4: {stats.avg_get_time:.2f}ms\")\n        \"\"\"\n        with self._lock:\n            # \u8fd4\u56de\u526f\u672c\n            return CacheStats(\n                hits=self._stats.hits,\n                misses=self._stats.misses,\n                gets=self._stats.gets,\n                sets=self._stats.sets,\n                deletes=self._stats.deletes,\n                errors=self._stats.errors,\n                total_get_time=self._stats.total_get_time,\n                total_set_time=self._stats.total_set_time,\n                start_time=self._stats.start_time,\n                last_reset=self._stats.last_reset,\n            )\n\n    def reset_stats(self) -&gt; None:\n        \"\"\"\n        \u91cd\u7f6e\u7edf\u8ba1\u4fe1\u606f\n\n        \u4fdd\u7559 start_time\uff0c\u66f4\u65b0 last_reset\u3002\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; monitor.reset_stats()  # \u91cd\u65b0\u5f00\u59cb\u7edf\u8ba1\n        \"\"\"\n        with self._lock:\n            start_time = self._stats.start_time\n            self._stats = CacheStats(start_time=start_time)\n            # \u6e05\u7406\u5ef6\u8fdf\u7edf\u8ba1\n            self._latency_min.clear()\n            self._latency_max.clear()\n\n    def check_health(self) -&gt; dict:\n        \"\"\"\n        \u6267\u884c\u5065\u5eb7\u68c0\u67e5\n\n        Returns:\n            \u5065\u5eb7\u68c0\u67e5\u7ed3\u679c\u5b57\u5178\n\n        \u793a\u4f8b\uff1a\n            &gt;&gt;&gt; health = monitor.check_health()\n            &gt;&gt;&gt; if health[\"healthy\"]:\n            ...     print(\"\u7f13\u5b58\u5065\u5eb7\")\n        \"\"\"\n        try:\n            # \u6d4b\u8bd5\u57fa\u672c\u64cd\u4f5c\n            test_key = \"__health_check__\"\n            test_value = f\"health_check_{time.time()}\"\n\n            # \u6d4b\u8bd5\u5199\u5165\n            self._cache.set(test_key, test_value, ttl=1)\n\n            # \u6d4b\u8bd5\u8bfb\u53d6\n            result = self._cache.get(test_key)\n            read_ok = result == test_value\n\n            # \u6e05\u7406\n            self._cache.delete(test_key)\n\n            # \u83b7\u53d6\u540e\u7aef\u5065\u5eb7\u72b6\u6001\n            backend_healthy = self._cache.backend.check_health()\n\n            return {\n                \"healthy\": read_ok and backend_healthy,\n                \"backend_healthy\": backend_healthy,\n                \"test_passed\": read_ok,\n                \"timestamp\": time.time(),\n            }\n        except Exception as e:\n            return {\n                \"healthy\": False,\n                \"backend_healthy\": False,\n                \"test_passed\": False,\n                \"error\": str(e),\n                \"timestamp\": time.time(),\n            }\n\n    def get_summary(self) -&gt; dict:\n        \"\"\"\n        \u83b7\u53d6\u76d1\u63a7\u6458\u8981\n\n        \u8fd4\u56de\u7edf\u8ba1\u4fe1\u606f\u548c\u5065\u5eb7\u72b6\u6001\u7684\u6c47\u603b\u3002\n\n        Returns:\n            \u6458\u8981\u5b57\u5178\n\n        \u793a\u4f8b\uff1a\n            &gt;&gt;&gt; summary = monitor.get_summary()\n            &gt;&gt;&gt; print(summary)\n        \"\"\"\n        stats = self.get_stats()\n        health = self.check_health()\n\n        return {\n            \"stats\": stats.to_dict(),\n            \"health\": health,\n        }\n\n    def __repr__(self) -&gt; str:\n        \"\"\"\u5b57\u7b26\u4e32\u8868\u793a\"\"\"\n        stats = self.get_stats()\n        return (\n            f\"CacheMonitor(enabled={self._enabled}, \"\n            f\"hit_rate={stats.hit_rate:.2%}, \"\n            f\"operations={stats.gets + stats.sets + stats.deletes}, \"\n            f\"errors={stats.errors})\"\n        )\n</code></pre> <p>\u7f13\u5b58\u7edf\u8ba1\u4fe1\u606f</p> <p>\u6240\u6709\u8ba1\u6570\u5668\u90fd\u662f\u7d2f\u79ef\u503c\uff0c\u53ef\u901a\u8fc7 reset() \u91cd\u7f6e\u3002</p> Source code in <code>src/symphra_cache/monitor.py</code> <pre><code>@dataclass\nclass CacheStats:\n    \"\"\"\n    \u7f13\u5b58\u7edf\u8ba1\u4fe1\u606f\n\n    \u6240\u6709\u8ba1\u6570\u5668\u90fd\u662f\u7d2f\u79ef\u503c\uff0c\u53ef\u901a\u8fc7 reset() \u91cd\u7f6e\u3002\n    \"\"\"\n\n    # \u547d\u4e2d\u7edf\u8ba1\n    hits: int = 0  # \u7f13\u5b58\u547d\u4e2d\u6b21\u6570\n    misses: int = 0  # \u7f13\u5b58\u672a\u547d\u4e2d\u6b21\u6570\n\n    # \u64cd\u4f5c\u7edf\u8ba1\n    gets: int = 0  # get \u64cd\u4f5c\u6b21\u6570\n    sets: int = 0  # set \u64cd\u4f5c\u6b21\u6570\n    deletes: int = 0  # delete \u64cd\u4f5c\u6b21\u6570\n\n    # \u9519\u8bef\u7edf\u8ba1\n    errors: int = 0  # \u9519\u8bef\u6b21\u6570\n\n    # \u6027\u80fd\u7edf\u8ba1\n    total_get_time: float = 0.0  # get \u64cd\u4f5c\u603b\u8017\u65f6\uff08\u79d2\uff09\n    total_set_time: float = 0.0  # set \u64cd\u4f5c\u603b\u8017\u65f6\uff08\u79d2\uff09\n\n    # \u65f6\u95f4\u6233\n    start_time: float = field(default_factory=time.time)  # \u7edf\u8ba1\u5f00\u59cb\u65f6\u95f4\n    last_reset: float = field(default_factory=time.time)  # \u4e0a\u6b21\u91cd\u7f6e\u65f6\u95f4\n\n    @property\n    def hit_rate(self) -&gt; float:\n        \"\"\"\u547d\u4e2d\u7387\uff080-1\uff09\"\"\"\n        total = self.hits + self.misses\n        return self.hits / total if total &gt; 0 else 0.0\n\n    @property\n    def miss_rate(self) -&gt; float:\n        \"\"\"\u672a\u547d\u4e2d\u7387(0-1)\"\"\"\n        total = self.hits + self.misses\n        return self.misses / total if total &gt; 0 else 0.0\n\n    @property\n    def avg_get_time(self) -&gt; float:\n        \"\"\"\u5e73\u5747 get \u64cd\u4f5c\u8017\u65f6\uff08\u6beb\u79d2\uff09\"\"\"\n        return (self.total_get_time / self.gets * 1000) if self.gets &gt; 0 else 0.0\n\n    @property\n    def avg_set_time(self) -&gt; float:\n        \"\"\"\u5e73\u5747 set \u64cd\u4f5c\u8017\u65f6\uff08\u6beb\u79d2\uff09\"\"\"\n        return (self.total_set_time / self.sets * 1000) if self.sets &gt; 0 else 0.0\n\n    @property\n    def uptime(self) -&gt; float:\n        \"\"\"\u8fd0\u884c\u65f6\u95f4\uff08\u79d2\uff09\"\"\"\n        return time.time() - self.start_time\n\n    def to_dict(self) -&gt; dict:\n        \"\"\"\u8f6c\u6362\u4e3a\u5b57\u5178\"\"\"\n        return {\n            \"hits\": self.hits,\n            \"misses\": self.misses,\n            \"hit_rate\": self.hit_rate,\n            \"miss_rate\": self.miss_rate,\n            \"gets\": self.gets,\n            \"sets\": self.sets,\n            \"deletes\": self.deletes,\n            \"errors\": self.errors,\n            \"avg_get_time_ms\": self.avg_get_time,\n            \"avg_set_time_ms\": self.avg_set_time,\n            \"uptime_seconds\": self.uptime,\n            \"start_time\": self.start_time,\n            \"last_reset\": self.last_reset,\n        }\n</code></pre> <p>Prometheus \u6307\u6807\u5bfc\u51fa\u5668</p> <p>\u5c06\u7f13\u5b58\u76d1\u63a7\u6307\u6807\u8f6c\u6362\u4e3a Prometheus \u683c\u5f0f\u3002</p> <p>\u652f\u6301\u7684\u6307\u6807\u7c7b\u578b\uff1a - Counter: \u7d2f\u79ef\u8ba1\u6570\u5668\uff08\u64cd\u4f5c\u6b21\u6570\uff09 - Gauge: \u77ac\u65f6\u503c\uff08\u7f13\u5b58\u5927\u5c0f\u3001\u547d\u4e2d\u7387\uff09 - Histogram: \u5206\u5e03\u7edf\u8ba1\uff08\u5ef6\u8fdf\u5206\u5e03\uff09</p> <p>\u4f7f\u7528\u793a\u4f8b\uff1a     &gt;&gt;&gt; exporter = PrometheusExporter(monitor)     &gt;&gt;&gt; metrics_text = exporter.generate_metrics()</p> Source code in <code>src/symphra_cache/monitoring/prometheus.py</code> <pre><code>class PrometheusExporter:\n    \"\"\"\n    Prometheus \u6307\u6807\u5bfc\u51fa\u5668\n\n    \u5c06\u7f13\u5b58\u76d1\u63a7\u6307\u6807\u8f6c\u6362\u4e3a Prometheus \u683c\u5f0f\u3002\n\n    \u652f\u6301\u7684\u6307\u6807\u7c7b\u578b\uff1a\n    - Counter: \u7d2f\u79ef\u8ba1\u6570\u5668\uff08\u64cd\u4f5c\u6b21\u6570\uff09\n    - Gauge: \u77ac\u65f6\u503c\uff08\u7f13\u5b58\u5927\u5c0f\u3001\u547d\u4e2d\u7387\uff09\n    - Histogram: \u5206\u5e03\u7edf\u8ba1\uff08\u5ef6\u8fdf\u5206\u5e03\uff09\n\n    \u4f7f\u7528\u793a\u4f8b\uff1a\n        &gt;&gt;&gt; exporter = PrometheusExporter(monitor)\n        &gt;&gt;&gt; metrics_text = exporter.generate_metrics()\n    \"\"\"\n\n    def __init__(\n        self,\n        monitor: CacheMonitor,\n        namespace: str = \"symphra_cache\",\n        subsystem: str = \"cache\",\n        labels: dict[str, str] | None = None,\n    ) -&gt; None:\n        \"\"\"\n        \u521d\u59cb\u5316 Prometheus \u5bfc\u51fa\u5668\n\n        Args:\n            monitor: \u7f13\u5b58\u76d1\u63a7\u5668\n            namespace: \u6307\u6807\u547d\u540d\u7a7a\u95f4\n            subsystem: \u5b50\u7cfb\u7edf\u540d\u79f0\n            labels: \u5168\u5c40\u6807\u7b7e\n        \"\"\"\n        self.monitor = monitor\n        self.namespace = namespace\n        self.subsystem = subsystem\n        self.labels = labels or {}\n        self._start_time = time.time()\n\n    def _format_labels(self, extra_labels: dict[str, str] | None = None) -&gt; str:\n        \"\"\"\n        \u683c\u5f0f\u5316\u6807\u7b7e\n\n        Args:\n            extra_labels: \u989d\u5916\u6807\u7b7e\n\n        Returns:\n            \u683c\u5f0f\u5316\u7684\u6807\u7b7e\u5b57\u7b26\u4e32\n        \"\"\"\n        all_labels = self.labels.copy()\n        if extra_labels:\n            all_labels.update(extra_labels)\n\n        if not all_labels:\n            return \"\"\n\n        label_strs = []\n        for key, value in all_labels.items():\n            # \u8f6c\u4e49\u7279\u6b8a\u5b57\u7b26\n            escaped_value = str(value).replace('\"', '\\\\\"').replace(\"\\n\", \"\\\\n\")\n            label_strs.append(f'{key}=\"{escaped_value}\"')\n\n        return \"{\" + \",\".join(label_strs) + \"}\"\n\n    def _generate_counter_metrics(self) -&gt; str:\n        \"\"\"\n        \u751f\u6210 Counter \u6307\u6807\n\n        Returns:\n            Counter \u6307\u6807\u6587\u672c\n        \"\"\"\n        metrics = self.monitor.metrics\n        lines = []\n\n        # \u64cd\u4f5c\u8ba1\u6570\u5668\n        lines.append(f\"# HELP {self._metric_name('operations_total')} Total cache operations\")\n        lines.append(f\"# TYPE {self._metric_name('operations_total')} counter\")\n\n        operations = [\n            (\"get\", metrics.get_count),\n            (\"set\", metrics.set_count),\n            (\"delete\", metrics.delete_count),\n            (\"hit\", metrics.hit_count),\n            (\"miss\", metrics.miss_count),\n        ]\n\n        for operation, count in operations:\n            if count &gt; 0:\n                labels = self._format_labels({\"operation\": operation})\n                lines.append(f\"{self._metric_name('operations_total')}{labels} {count}\")\n\n        return \"\\n\".join(lines)\n\n    def _generate_gauge_metrics(self) -&gt; str:\n        \"\"\"\n        \u751f\u6210 Gauge \u6307\u6807\n\n        Returns:\n            Gauge \u6307\u6807\u6587\u672c\n        \"\"\"\n        metrics = self.monitor.metrics\n        lines = []\n\n        # \u7f13\u5b58\u5927\u5c0f\n        lines.append(f\"# HELP {self._metric_name('size')} Current cache size\")\n        lines.append(f\"# TYPE {self._metric_name('size')} gauge\")\n        try:\n            cache_size = len(self.monitor.cache)\n            lines.append(f\"{self._metric_name('size')}{self._format_labels()} {cache_size}\")\n        except Exception:\n            lines.append(f\"{self._metric_name('size')}{self._format_labels()} 0\")\n\n        # \u547d\u4e2d\u7387\n        lines.append(f\"# HELP {self._metric_name('hit_rate')} Cache hit rate\")\n        lines.append(f\"# TYPE {self._metric_name('hit_rate')} gauge\")\n        hit_rate = metrics.get_hit_rate()\n        lines.append(f\"{self._metric_name('hit_rate')}{self._format_labels()} {hit_rate}\")\n\n        # \u8fd0\u884c\u65f6\u95f4\n        lines.append(f\"# HELP {self._metric_name('uptime_seconds')} Cache uptime in seconds\")\n        lines.append(f\"# TYPE {self._metric_name('uptime_seconds')} gauge\")\n        uptime = time.time() - self._start_time\n        lines.append(f\"{self._metric_name('uptime_seconds')}{self._format_labels()} {uptime}\")\n\n        return \"\\n\".join(lines)\n\n    def _generate_histogram_metrics(self) -&gt; str:\n        \"\"\"\n        \u751f\u6210 Histogram \u6307\u6807\n\n        Returns:\n            Histogram \u6307\u6807\u6587\u672c\n        \"\"\"\n        metrics = self.monitor.metrics\n        lines = []\n\n        # GET \u64cd\u4f5c\u5ef6\u8fdf\u5206\u5e03\n        lines.append(\n            f\"# HELP {self._metric_name('get_duration_seconds')} Time spent on GET operations\"\n        )\n        lines.append(f\"# TYPE {self._metric_name('get_duration_seconds')} histogram\")\n\n        # Prometheus histogram buckets (\u79d2)\n        buckets = [0.001, 0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1.0, 2.5, 5.0, 10.0]\n\n        get_count = metrics.get_count\n        if get_count &gt; 0:\n            avg_latency = metrics.get_average_latency(\"get\") / 1000  # \u8f6c\u6362\u4e3a\u79d2\n\n            # \u751f\u6210 bucket \u8ba1\u6570\uff08\u7b80\u5316\u5b9e\u73b0\uff09\n            for bucket in buckets:\n                # \u5047\u8bbe\u6b63\u6001\u5206\u5e03\uff0c\u8ba1\u7b97 bucket \u5185\u7684\u8bf7\u6c42\u6570\n                bucket_count = int(\n                    get_count * self._normal_cdf(bucket, avg_latency, avg_latency * 0.5)\n                )\n                labels = self._format_labels({\"le\": str(bucket)})\n                lines.append(\n                    f\"{self._metric_name('get_duration_seconds')}_bucket{labels} {bucket_count}\"\n                )\n\n            # \u603b\u8ba1\u6570\u548c\u603b\u548c\n            lines.append(\n                f\"{self._metric_name('get_duration_seconds')}_count{self._format_labels()} {get_count}\"\n            )\n            lines.append(\n                f\"{self._metric_name('get_duration_seconds')}_sum{self._format_labels()} {avg_latency * get_count}\"\n            )\n\n        # SET \u64cd\u4f5c\u5ef6\u8fdf\u5206\u5e03\n        lines.append(\n            f\"# HELP {self._metric_name('set_duration_seconds')} Time spent on SET operations\"\n        )\n        lines.append(f\"# TYPE {self._metric_name('set_duration_seconds')} histogram\")\n\n        set_count = metrics.set_count\n        if set_count &gt; 0:\n            avg_latency = metrics.get_average_latency(\"set\") / 1000\n\n            for bucket in buckets:\n                bucket_count = int(\n                    set_count * self._normal_cdf(bucket, avg_latency, avg_latency * 0.5)\n                )\n                labels = self._format_labels({\"le\": str(bucket)})\n                lines.append(\n                    f\"{self._metric_name('set_duration_seconds')}_bucket{labels} {bucket_count}\"\n                )\n\n            lines.append(\n                f\"{self._metric_name('set_duration_seconds')}_count{self._format_labels()} {set_count}\"\n            )\n            lines.append(\n                f\"{self._metric_name('set_duration_seconds')}_sum{self._format_labels()} {avg_latency * set_count}\"\n            )\n\n        return \"\\n\".join(lines)\n\n    def _normal_cdf(self, x: float, mean: float, std: float) -&gt; float:\n        \"\"\"\n        \u6b63\u6001\u5206\u5e03\u7d2f\u79ef\u5206\u5e03\u51fd\u6570\uff08\u7b80\u5316\u5b9e\u73b0\uff09\n\n        Args:\n            x: \u8f93\u5165\u503c\n            mean: \u5747\u503c\n            std: \u6807\u51c6\u5dee\n\n        Returns:\n            CDF \u503c\n        \"\"\"\n        import math\n\n        return 0.5 * (1 + math.erf((x - mean) / (std * math.sqrt(2))))\n\n    def _metric_name(self, name: str) -&gt; str:\n        \"\"\"\n        \u751f\u6210\u5b8c\u6574\u7684\u6307\u6807\u540d\u79f0\n\n        Args:\n            name: \u6307\u6807\u540d\u79f0\n\n        Returns:\n            \u5b8c\u6574\u7684\u6307\u6807\u540d\u79f0\n        \"\"\"\n        parts = []\n        if self.namespace:\n            parts.append(self.namespace)\n        if self.subsystem:\n            parts.append(self.subsystem)\n        parts.append(name)\n        return \"_\".join(parts)\n\n    def generate_metrics(self) -&gt; str:\n        \"\"\"\n        \u751f\u6210 Prometheus \u683c\u5f0f\u7684\u6307\u6807\u6587\u672c\n\n        Returns:\n            Prometheus \u6307\u6807\u6587\u672c\n        \"\"\"\n        if not self.monitor.is_enabled():\n            return \"# Cache monitoring is disabled\"\n\n        lines = []\n\n        # \u6dfb\u52a0\u5143\u4fe1\u606f\n        lines.append(f\"# Symphra Cache Metrics - {time.strftime('%Y-%m-%d %H:%M:%S')}\")\n        lines.append(\"# Generated by PrometheusExporter\")\n        lines.append(\"\")\n\n        # \u751f\u6210\u4e0d\u540c\u7c7b\u578b\u7684\u6307\u6807\n        lines.append(self._generate_counter_metrics())\n        lines.append(\"\")\n        lines.append(self._generate_gauge_metrics())\n        lines.append(\"\")\n        lines.append(self._generate_histogram_metrics())\n\n        return \"\\n\".join(lines)\n\n    def get_metrics_handler(self) -&gt; Callable[[], str]:\n        \"\"\"\n        \u83b7\u53d6\u6307\u6807\u5904\u7406\u5668\u51fd\u6570\n\n        Returns:\n            \u8fd4\u56de\u6307\u6807\u6587\u672c\u7684\u51fd\u6570\n        \"\"\"\n        return self.generate_metrics\n\n    def create_pushgateway_client(\n        self,\n        gateway_url: str,\n        job_name: str,\n        instance: str = \"\",\n    ) -&gt; PrometheusPushgatewayClient:\n        \"\"\"\n        \u521b\u5efa Pushgateway \u5ba2\u6237\u7aef\n\n        Args:\n            gateway_url: Pushgateway URL\n            job_name: \u4f5c\u4e1a\u540d\u79f0\n            instance: \u5b9e\u4f8b\u6807\u8bc6\u7b26\n\n        Returns:\n            Pushgateway \u5ba2\u6237\u7aef\n        \"\"\"\n        return PrometheusPushgatewayClient(\n            exporter=self,\n            gateway_url=gateway_url,\n            job_name=job_name,\n            instance=instance or self._get_default_instance(),\n        )\n\n    def _get_default_instance(self) -&gt; str:\n        \"\"\"\n        \u83b7\u53d6\u9ed8\u8ba4\u5b9e\u4f8b\u6807\u8bc6\u7b26\n\n        Returns:\n            \u5b9e\u4f8b\u6807\u8bc6\u7b26\n        \"\"\"\n        import os\n        import socket\n\n        hostname = socket.gethostname()\n        pid = os.getpid()\n        return f\"{hostname}:{pid}\"\n\n    def update_labels(self, labels: dict[str, str]) -&gt; None:\n        \"\"\"\n        \u66f4\u65b0\u5168\u5c40\u6807\u7b7e\n\n        Args:\n            labels: \u65b0\u7684\u6807\u7b7e\u5b57\u5178\n        \"\"\"\n        self.labels.update(labels)\n</code></pre> <p>StatsD \u6307\u6807\u5bfc\u51fa\u5668</p> <p>\u5c06\u7f13\u5b58\u76d1\u63a7\u6307\u6807\u8f6c\u6362\u4e3a StatsD \u683c\u5f0f\u5e76\u901a\u8fc7 UDP \u53d1\u9001\u3002</p> <p>\u652f\u6301\u7684\u6307\u6807\u7c7b\u578b\uff1a - Counter: \u8ba1\u6570\u5668\uff08\u64cd\u4f5c\u6b21\u6570\uff09 - Timer: \u8ba1\u65f6\u5668\uff08\u5ef6\u8fdf\uff09 - Gauge: \u77ac\u65f6\u503c\uff08\u7f13\u5b58\u5927\u5c0f\u3001\u547d\u4e2d\u7387\uff09</p> <p>\u4f7f\u7528\u793a\u4f8b\uff1a     &gt;&gt;&gt; exporter = StatsDExporter(monitor, host=\"localhost\", port=8125)     &gt;&gt;&gt; await exporter.send_metrics()</p> Source code in <code>src/symphra_cache/monitoring/statsd.py</code> <pre><code>class StatsDExporter:\n    \"\"\"\n    StatsD \u6307\u6807\u5bfc\u51fa\u5668\n\n    \u5c06\u7f13\u5b58\u76d1\u63a7\u6307\u6807\u8f6c\u6362\u4e3a StatsD \u683c\u5f0f\u5e76\u901a\u8fc7 UDP \u53d1\u9001\u3002\n\n    \u652f\u6301\u7684\u6307\u6807\u7c7b\u578b\uff1a\n    - Counter: \u8ba1\u6570\u5668\uff08\u64cd\u4f5c\u6b21\u6570\uff09\n    - Timer: \u8ba1\u65f6\u5668\uff08\u5ef6\u8fdf\uff09\n    - Gauge: \u77ac\u65f6\u503c\uff08\u7f13\u5b58\u5927\u5c0f\u3001\u547d\u4e2d\u7387\uff09\n\n    \u4f7f\u7528\u793a\u4f8b\uff1a\n        &gt;&gt;&gt; exporter = StatsDExporter(monitor, host=\"localhost\", port=8125)\n        &gt;&gt;&gt; await exporter.send_metrics()\n    \"\"\"\n\n    def __init__(\n        self,\n        monitor: CacheMonitor,\n        host: str = \"localhost\",\n        port: int = 8125,\n        prefix: str = \"symphra.cache\",\n        sample_rate: float = 1.0,\n        protocol: str = \"udp\",\n        batch_size: int = 10,\n    ) -&gt; None:\n        \"\"\"\n        \u521d\u59cb\u5316 StatsD \u5bfc\u51fa\u5668\n\n        Args:\n            monitor: \u7f13\u5b58\u76d1\u63a7\u5668\n            host: StatsD \u670d\u52a1\u5668\u4e3b\u673a\n            port: StatsD \u670d\u52a1\u5668\u7aef\u53e3\n            prefix: \u6307\u6807\u524d\u7f00\n            sample_rate: \u91c7\u6837\u7387 (0.0-1.0)\n            protocol: \u4f20\u8f93\u534f\u8bae (\"udp\", \"tcp\")\n            batch_size: \u6279\u91cf\u53d1\u9001\u5927\u5c0f\n        \"\"\"\n        self.monitor = monitor\n        self.host = host\n        self.port = port\n        self.prefix = prefix\n        self.sample_rate = max(0.0, min(1.0, sample_rate))  # \u786e\u4fdd\u5728\u6709\u6548\u8303\u56f4\u5185\n        self.protocol = protocol.lower()\n        self.batch_size = batch_size\n        self._socket: socket.socket | None = None\n        self._tcp_writer: asyncio.StreamWriter | None = None\n        self._tcp_reader: asyncio.StreamReader | None = None\n        self._is_connected = False\n        self._pending_metrics: list[str] = []\n        self._lock = asyncio.Lock()\n\n    async def connect(self) -&gt; None:\n        \"\"\"\n        \u5efa\u7acb\u5230 StatsD \u670d\u52a1\u5668\u7684\u8fde\u63a5\n        \"\"\"\n        if self._is_connected:\n            return\n\n        try:\n            if self.protocol == \"udp\":\n                self._socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n                self._socket.setblocking(False)\n            elif self.protocol == \"tcp\":\n                reader, writer = await asyncio.open_connection(self.host, self.port)\n                self._tcp_reader = reader\n                self._tcp_writer = writer\n            else:\n                raise ValueError(f\"\u4e0d\u652f\u6301\u7684\u534f\u8bae: {self.protocol}\")\n\n            self._is_connected = True\n\n        except Exception as e:\n            print(f\"\u8fde\u63a5 StatsD \u670d\u52a1\u5668\u5931\u8d25: {e}\")\n            self._is_connected = False\n\n    async def disconnect(self) -&gt; None:\n        \"\"\"\n        \u65ad\u5f00\u8fde\u63a5\n        \"\"\"\n        if self.protocol == \"udp\" and self._socket:\n            self._socket.close()\n        elif self.protocol == \"tcp\" and self._tcp_writer:\n            self._tcp_writer.close()\n            await self._tcp_writer.wait_closed()\n\n        self._is_connected = False\n        self._socket = None\n        self._tcp_writer = None\n        self._tcp_reader = None\n\n    def _format_metric_name(self, name: str) -&gt; str:\n        \"\"\"\n        \u683c\u5f0f\u5316\u6307\u6807\u540d\u79f0\n\n        Args:\n            name: \u539f\u59cb\u6307\u6807\u540d\u79f0\n\n        Returns:\n            \u683c\u5f0f\u5316\u7684\u6307\u6807\u540d\u79f0\n        \"\"\"\n        return f\"{self.prefix}.{name}\"\n\n    def _generate_counter_metrics(self) -&gt; list[str]:\n        \"\"\"\n        \u751f\u6210\u8ba1\u6570\u5668\u6307\u6807\n\n        Returns:\n            \u8ba1\u6570\u5668\u6307\u6807\u5217\u8868\n        \"\"\"\n        metrics = self.monitor.metrics\n        metric_lines = []\n\n        # \u64cd\u4f5c\u8ba1\u6570\u5668\n        operations = [\n            (\"get\", metrics.get_count),\n            (\"set\", metrics.set_count),\n            (\"delete\", metrics.delete_count),\n            (\"hit\", metrics.hit_count),\n            (\"miss\", metrics.miss_count),\n        ]\n\n        for operation, count in operations:\n            if count &gt; 0:\n                metric_name = self._format_metric_name(f\"operations.{operation}\")\n                metric_lines.append(f\"{metric_name}:{count}|c\")\n\n        return metric_lines\n\n    def _generate_timer_metrics(self) -&gt; list[str]:\n        \"\"\"\n        \u751f\u6210\u8ba1\u65f6\u5668\u6307\u6807\n\n        Returns:\n            \u8ba1\u65f6\u5668\u6307\u6807\u5217\u8868\n        \"\"\"\n        metrics = self.monitor.metrics\n        metric_lines = []\n\n        # GET \u64cd\u4f5c\u5ef6\u8fdf\n        if metrics.get_count &gt; 0:\n            avg_latency = metrics.get_average_latency(\"get\")\n            min_latency = metrics.get_latency_stats(\"get\")[\"min\"]\n            max_latency = metrics.get_latency_stats(\"get\")[\"max\"]\n\n            metric_lines.extend(\n                [\n                    f\"{self._format_metric_name('get.latency.avg')}:{avg_latency:.3f}|ms\",\n                    f\"{self._format_metric_name('get.latency.min')}:{min_latency:.3f}|ms\",\n                    f\"{self._format_metric_name('get.latency.max')}:{max_latency:.3f}|ms\",\n                ]\n            )\n\n        # SET \u64cd\u4f5c\u5ef6\u8fdf\n        if metrics.set_count &gt; 0:\n            avg_latency = metrics.get_average_latency(\"set\")\n            min_latency = metrics.get_latency_stats(\"set\")[\"min\"]\n            max_latency = metrics.get_latency_stats(\"set\")[\"max\"]\n\n            metric_lines.extend(\n                [\n                    f\"{self._format_metric_name('set.latency.avg')}:{avg_latency:.3f}|ms\",\n                    f\"{self._format_metric_name('set.latency.min')}:{min_latency:.3f}|ms\",\n                    f\"{self._format_metric_name('set.latency.max')}:{max_latency:.3f}|ms\",\n                ]\n            )\n\n        return metric_lines\n\n    def _generate_gauge_metrics(self) -&gt; list[str]:\n        \"\"\"\n        \u751f\u6210 Gauge \u6307\u6807\n\n        Returns:\n            Gauge \u6307\u6807\u5217\u8868\n        \"\"\"\n        metrics = self.monitor.metrics\n        metric_lines = []\n\n        # \u7f13\u5b58\u5927\u5c0f\n        try:\n            cache_size = len(self.monitor.cache)\n            metric_lines.append(f\"{self._format_metric_name('size')}:{cache_size}|g\")\n        except Exception:\n            metric_lines.append(f\"{self._format_metric_name('size')}:0|g\")\n\n        # \u547d\u4e2d\u7387\n        hit_rate = metrics.get_hit_rate()\n        metric_lines.append(f\"{self._format_metric_name('hit_rate')}:{hit_rate:.3f}|g\")\n\n        # \u603b\u64cd\u4f5c\u6570\n        total_ops = metrics.get_total_operations()\n        metric_lines.append(f\"{self._format_metric_name('operations.total')}:{total_ops}|g\")\n\n        return metric_lines\n\n    async def _send_udp_metrics(self, metric_lines: list[str]) -&gt; bool:\n        \"\"\"\n        \u901a\u8fc7 UDP \u53d1\u9001\u6307\u6807\n\n        Args:\n            metric_lines: \u6307\u6807\u884c\u5217\u8868\n\n        Returns:\n            \u53d1\u9001\u662f\u5426\u6210\u529f\n        \"\"\"\n        if not self._socket or not self._is_connected:\n            return False\n\n        try:\n            # \u5408\u5e76\u6307\u6807\u4e3a\u5355\u4e2a\u6570\u636e\u62a5\uff08\u6ce8\u610f UDP \u6570\u636e\u62a5\u5927\u5c0f\u9650\u5236\uff09\n            for i in range(0, len(metric_lines), 10):  # \u6bcf10\u4e2a\u6307\u6807\u4e00\u4e2a\u6570\u636e\u62a5\n                batch = metric_lines[i : i + 10]\n                if not batch:\n                    continue\n\n                message = \"\\n\".join(batch).encode(\"utf-8\")\n\n                # \u68c0\u67e5\u6570\u636e\u62a5\u5927\u5c0f\uff08\u901a\u5e38\u9650\u5236\u4e3a 1500 \u5b57\u8282\uff09\n                if len(message) &gt; 1400:  # \u7559\u4e00\u4e9b\u4f59\u91cf\n                    # \u5206\u5272\u5927\u6570\u636e\u62a5\n                    for line in batch:\n                        if len(line.encode(\"utf-8\")) &lt;= 1400:\n                            await asyncio.get_event_loop().sock_sendto(\n                                self._socket, line.encode(\"utf-8\"), (self.host, self.port)\n                            )\n                else:\n                    await asyncio.get_event_loop().sock_sendto(\n                        self._socket, message, (self.host, self.port)\n                    )\n\n            return True\n\n        except Exception as e:\n            print(f\"UDP \u53d1\u9001\u5931\u8d25: {e}\")\n            return False\n\n    async def _send_tcp_metrics(self, metric_lines: list[str]) -&gt; bool:\n        \"\"\"\n        \u901a\u8fc7 TCP \u53d1\u9001\u6307\u6807\n\n        Args:\n            metric_lines: \u6307\u6807\u884c\u5217\u8868\n\n        Returns:\n            \u53d1\u9001\u662f\u5426\u6210\u529f\n        \"\"\"\n        if not self._tcp_writer or not self._is_connected:\n            return False\n\n        try:\n            # \u5408\u5e76\u6307\u6807\u4e3a\u5355\u4e2a\u6d88\u606f\n            message = \"\\n\".join(metric_lines).encode(\"utf-8\") + b\"\\n\"\n            self._tcp_writer.write(message)\n            await self._tcp_writer.drain()\n            return True\n\n        except Exception as e:\n            print(f\"TCP \u53d1\u9001\u5931\u8d25: {e}\")\n            return False\n\n    async def send_metrics(self, metric_lines: list[str] | None = None) -&gt; bool:\n        \"\"\"\n        \u53d1\u9001\u6307\u6807\u5230 StatsD \u670d\u52a1\u5668\n\n        Args:\n            metric_lines: \u8981\u53d1\u9001\u7684\u6307\u6807\u884c\u5217\u8868\uff0cNone \u8868\u793a\u53d1\u9001\u6240\u6709\u6307\u6807\n\n        Returns:\n            \u53d1\u9001\u662f\u5426\u6210\u529f\n        \"\"\"\n        if not self.monitor.is_enabled():\n            return True\n\n        if metric_lines is None:\n            metric_lines = self.generate_all_metrics()\n\n        if not metric_lines:\n            return True\n\n        # \u5efa\u7acb\u8fde\u63a5\n        if not self._is_connected:\n            await self.connect()\n            if not self._is_connected:\n                return False\n\n        # \u5e94\u7528\u91c7\u6837\u7387\n        if self.sample_rate &lt; 1.0:\n            import random\n\n            metric_lines = [line for line in metric_lines if random.random() &lt; self.sample_rate]\n\n        try:\n            if self.protocol == \"udp\":\n                return await self._send_udp_metrics(metric_lines)\n            else:\n                return await self._send_tcp_metrics(metric_lines)\n\n        except Exception as e:\n            print(f\"\u53d1\u9001\u6307\u6807\u5931\u8d25: {e}\")\n            await self.disconnect()\n            return False\n\n    def generate_all_metrics(self) -&gt; list[str]:\n        \"\"\"\n        \u751f\u6210\u6240\u6709\u6307\u6807\n\n        Returns:\n            \u6307\u6807\u884c\u5217\u8868\n        \"\"\"\n        all_metrics = []\n        all_metrics.extend(self._generate_counter_metrics())\n        all_metrics.extend(self._generate_timer_metrics())\n        all_metrics.extend(self._generate_gauge_metrics())\n        return all_metrics\n\n    async def schedule_periodic_send(self, interval: float = 30.0) -&gt; None:\n        \"\"\"\n        \u5b89\u6392\u5468\u671f\u6027\u53d1\u9001\u6307\u6807\n\n        Args:\n            interval: \u53d1\u9001\u95f4\u9694\uff08\u79d2\uff09\n        \"\"\"\n        while True:\n            try:\n                await asyncio.sleep(interval)\n                await self.send_metrics()\n            except asyncio.CancelledError:\n                break\n            except Exception as e:\n                print(f\"\u5468\u671f\u6027\u53d1\u9001\u5931\u8d25: {e}\")\n\n    def add_custom_metric(self, name: str, value: float, metric_type: str = \"g\") -&gt; None:\n        \"\"\"\n        \u6dfb\u52a0\u81ea\u5b9a\u4e49\u6307\u6807\n\n        Args:\n            name: \u6307\u6807\u540d\u79f0\n            value: \u6307\u6807\u503c\n            metric_type: \u6307\u6807\u7c7b\u578b (\"c\", \"g\", \"ms\")\n        \"\"\"\n        metric_line = f\"{self._format_metric_name(name)}:{value}|{metric_type}\"\n        self._pending_metrics.append(metric_line)\n\n    async def flush_pending_metrics(self) -&gt; bool:\n        \"\"\"\n        \u5237\u65b0\u5f85\u53d1\u9001\u7684\u6307\u6807\n\n        Returns:\n            \u5237\u65b0\u662f\u5426\u6210\u529f\n        \"\"\"\n        if not self._pending_metrics:\n            return True\n\n        success = await self.send_metrics(self._pending_metrics)\n        if success:\n            self._pending_metrics.clear()\n\n        return success\n\n    def get_connection_status(self) -&gt; dict[str, Any]:\n        \"\"\"\n        \u83b7\u53d6\u8fde\u63a5\u72b6\u6001\n\n        Returns:\n            \u8fde\u63a5\u72b6\u6001\u4fe1\u606f\n        \"\"\"\n        return {\n            \"connected\": self._is_connected,\n            \"protocol\": self.protocol,\n            \"host\": self.host,\n            \"port\": self.port,\n            \"pending_metrics\": len(self._pending_metrics),\n        }\n\n    async def __aenter__(self) -&gt; StatsDExporter:\n        \"\"\"\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5165\u53e3\"\"\"\n        await self.connect()\n        return self\n\n    async def __aexit__(\n        self,\n        exc_type: type[BaseException] | None,\n        exc_val: BaseException | None,\n        exc_tb: Any | None,\n    ) -&gt; None:\n        \"\"\"\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u51fa\u53e3\"\"\"\n        await self.disconnect()\n\n    def __del__(self) -&gt; None:\n        \"\"\"\u6790\u6784\u51fd\u6570\"\"\"\n        if self._socket:\n            self._socket.close()\n</code></pre>"},{"location":"en/api/monitoring/#symphra_cache.monitor.CacheMonitor.metrics","title":"<code>metrics</code>  <code>property</code>","text":"<p>\u63d0\u4f9b\u4e0e\u5bfc\u51fa\u5668\u517c\u5bb9\u7684\u6307\u6807\u63a5\u53e3</p>"},{"location":"en/api/monitoring/#symphra_cache.monitor.CacheMonitor.__init__","title":"<code>__init__(cache_manager, *, enabled=True)</code>","text":"<p>\u521d\u59cb\u5316\u76d1\u63a7\u5668</p> <p>Parameters:</p> Name Type Description Default <code>cache_manager</code> <code>CacheManager</code> <p>\u7f13\u5b58\u7ba1\u7406\u5668\u5b9e\u4f8b</p> required <code>enabled</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528\u76d1\u63a7\uff08\u7981\u7528\u65f6\u6027\u80fd\u5f00\u9500\u4e3a\u96f6\uff09</p> <code>True</code> Source code in <code>src/symphra_cache/monitor.py</code> <pre><code>def __init__(self, cache_manager: CacheManager, *, enabled: bool = True) -&gt; None:\n    \"\"\"\n    \u521d\u59cb\u5316\u76d1\u63a7\u5668\n\n    Args:\n        cache_manager: \u7f13\u5b58\u7ba1\u7406\u5668\u5b9e\u4f8b\n        enabled: \u662f\u5426\u542f\u7528\u76d1\u63a7\uff08\u7981\u7528\u65f6\u6027\u80fd\u5f00\u9500\u4e3a\u96f6\uff09\n    \"\"\"\n    self._cache = cache_manager\n    # \u4e3a\u517c\u5bb9\u5bfc\u51fa\u5668\uff0c\u516c\u5f00 cache \u5c5e\u6027\n    self.cache = cache_manager\n\n    self._enabled = enabled\n    self._stats = CacheStats()\n    self._lock = threading.RLock()\n\n    # \u8bb0\u5f55\u5ef6\u8fdf\u7684 min/max\uff08\u6beb\u79d2\uff09\u4ee5\u4f9b\u5bfc\u51fa\u5668\u4f7f\u7528\n    self._latency_min: dict[str, float] = {}\n    self._latency_max: dict[str, float] = {}\n\n    # \u5982\u679c\u542f\u7528\uff0c\u66ff\u6362\u7f13\u5b58\u7ba1\u7406\u5668\u7684\u65b9\u6cd5\n    if self._enabled:\n        self._wrap_cache_methods()\n</code></pre>"},{"location":"en/api/monitoring/#symphra_cache.monitor.CacheMonitor.__repr__","title":"<code>__repr__()</code>","text":"<p>\u5b57\u7b26\u4e32\u8868\u793a</p> Source code in <code>src/symphra_cache/monitor.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"\u5b57\u7b26\u4e32\u8868\u793a\"\"\"\n    stats = self.get_stats()\n    return (\n        f\"CacheMonitor(enabled={self._enabled}, \"\n        f\"hit_rate={stats.hit_rate:.2%}, \"\n        f\"operations={stats.gets + stats.sets + stats.deletes}, \"\n        f\"errors={stats.errors})\"\n    )\n</code></pre>"},{"location":"en/api/monitoring/#symphra_cache.monitor.CacheMonitor.check_health","title":"<code>check_health()</code>","text":"<p>\u6267\u884c\u5065\u5eb7\u68c0\u67e5</p> <p>Returns:</p> Type Description <code>dict</code> <p>\u5065\u5eb7\u68c0\u67e5\u7ed3\u679c\u5b57\u5178</p> <p>\u793a\u4f8b\uff1a     &gt;&gt;&gt; health = monitor.check_health()     &gt;&gt;&gt; if health[\"healthy\"]:     ...     print(\"\u7f13\u5b58\u5065\u5eb7\")</p> Source code in <code>src/symphra_cache/monitor.py</code> <pre><code>def check_health(self) -&gt; dict:\n    \"\"\"\n    \u6267\u884c\u5065\u5eb7\u68c0\u67e5\n\n    Returns:\n        \u5065\u5eb7\u68c0\u67e5\u7ed3\u679c\u5b57\u5178\n\n    \u793a\u4f8b\uff1a\n        &gt;&gt;&gt; health = monitor.check_health()\n        &gt;&gt;&gt; if health[\"healthy\"]:\n        ...     print(\"\u7f13\u5b58\u5065\u5eb7\")\n    \"\"\"\n    try:\n        # \u6d4b\u8bd5\u57fa\u672c\u64cd\u4f5c\n        test_key = \"__health_check__\"\n        test_value = f\"health_check_{time.time()}\"\n\n        # \u6d4b\u8bd5\u5199\u5165\n        self._cache.set(test_key, test_value, ttl=1)\n\n        # \u6d4b\u8bd5\u8bfb\u53d6\n        result = self._cache.get(test_key)\n        read_ok = result == test_value\n\n        # \u6e05\u7406\n        self._cache.delete(test_key)\n\n        # \u83b7\u53d6\u540e\u7aef\u5065\u5eb7\u72b6\u6001\n        backend_healthy = self._cache.backend.check_health()\n\n        return {\n            \"healthy\": read_ok and backend_healthy,\n            \"backend_healthy\": backend_healthy,\n            \"test_passed\": read_ok,\n            \"timestamp\": time.time(),\n        }\n    except Exception as e:\n        return {\n            \"healthy\": False,\n            \"backend_healthy\": False,\n            \"test_passed\": False,\n            \"error\": str(e),\n            \"timestamp\": time.time(),\n        }\n</code></pre>"},{"location":"en/api/monitoring/#symphra_cache.monitor.CacheMonitor.get_stats","title":"<code>get_stats()</code>","text":"<p>\u83b7\u53d6\u7edf\u8ba1\u4fe1\u606f</p> <p>Returns:</p> Type Description <code>CacheStats</code> <p>CacheStats \u5bf9\u8c61\uff08\u526f\u672c\uff09</p> <p>\u793a\u4f8b\uff1a     &gt;&gt;&gt; stats = monitor.get_stats()     &gt;&gt;&gt; print(f\"\u547d\u4e2d\u7387: {stats.hit_rate:.2%}\")     &gt;&gt;&gt; print(f\"\u5e73\u5747\u54cd\u5e94\u65f6\u95f4: {stats.avg_get_time:.2f}ms\")</p> Source code in <code>src/symphra_cache/monitor.py</code> <pre><code>def get_stats(self) -&gt; CacheStats:\n    \"\"\"\n    \u83b7\u53d6\u7edf\u8ba1\u4fe1\u606f\n\n    Returns:\n        CacheStats \u5bf9\u8c61\uff08\u526f\u672c\uff09\n\n    \u793a\u4f8b\uff1a\n        &gt;&gt;&gt; stats = monitor.get_stats()\n        &gt;&gt;&gt; print(f\"\u547d\u4e2d\u7387: {stats.hit_rate:.2%}\")\n        &gt;&gt;&gt; print(f\"\u5e73\u5747\u54cd\u5e94\u65f6\u95f4: {stats.avg_get_time:.2f}ms\")\n    \"\"\"\n    with self._lock:\n        # \u8fd4\u56de\u526f\u672c\n        return CacheStats(\n            hits=self._stats.hits,\n            misses=self._stats.misses,\n            gets=self._stats.gets,\n            sets=self._stats.sets,\n            deletes=self._stats.deletes,\n            errors=self._stats.errors,\n            total_get_time=self._stats.total_get_time,\n            total_set_time=self._stats.total_set_time,\n            start_time=self._stats.start_time,\n            last_reset=self._stats.last_reset,\n        )\n</code></pre>"},{"location":"en/api/monitoring/#symphra_cache.monitor.CacheMonitor.get_summary","title":"<code>get_summary()</code>","text":"<p>\u83b7\u53d6\u76d1\u63a7\u6458\u8981</p> <p>\u8fd4\u56de\u7edf\u8ba1\u4fe1\u606f\u548c\u5065\u5eb7\u72b6\u6001\u7684\u6c47\u603b\u3002</p> <p>Returns:</p> Type Description <code>dict</code> <p>\u6458\u8981\u5b57\u5178</p> <p>\u793a\u4f8b\uff1a     &gt;&gt;&gt; summary = monitor.get_summary()     &gt;&gt;&gt; print(summary)</p> Source code in <code>src/symphra_cache/monitor.py</code> <pre><code>def get_summary(self) -&gt; dict:\n    \"\"\"\n    \u83b7\u53d6\u76d1\u63a7\u6458\u8981\n\n    \u8fd4\u56de\u7edf\u8ba1\u4fe1\u606f\u548c\u5065\u5eb7\u72b6\u6001\u7684\u6c47\u603b\u3002\n\n    Returns:\n        \u6458\u8981\u5b57\u5178\n\n    \u793a\u4f8b\uff1a\n        &gt;&gt;&gt; summary = monitor.get_summary()\n        &gt;&gt;&gt; print(summary)\n    \"\"\"\n    stats = self.get_stats()\n    health = self.check_health()\n\n    return {\n        \"stats\": stats.to_dict(),\n        \"health\": health,\n    }\n</code></pre>"},{"location":"en/api/monitoring/#symphra_cache.monitor.CacheMonitor.is_enabled","title":"<code>is_enabled()</code>","text":"<p>\u662f\u5426\u542f\u7528\u76d1\u63a7\uff08\u4e3a\u5bfc\u51fa\u5668\u517c\u5bb9\u63d0\u4f9b\uff09</p> Source code in <code>src/symphra_cache/monitor.py</code> <pre><code>def is_enabled(self) -&gt; bool:\n    \"\"\"\u662f\u5426\u542f\u7528\u76d1\u63a7\uff08\u4e3a\u5bfc\u51fa\u5668\u517c\u5bb9\u63d0\u4f9b\uff09\"\"\"\n    return self._enabled\n</code></pre>"},{"location":"en/api/monitoring/#symphra_cache.monitor.CacheMonitor.reset_stats","title":"<code>reset_stats()</code>","text":"<p>\u91cd\u7f6e\u7edf\u8ba1\u4fe1\u606f</p> <p>\u4fdd\u7559 start_time\uff0c\u66f4\u65b0 last_reset\u3002</p> \u793a\u4f8b <p>monitor.reset_stats()  # \u91cd\u65b0\u5f00\u59cb\u7edf\u8ba1</p> Source code in <code>src/symphra_cache/monitor.py</code> <pre><code>def reset_stats(self) -&gt; None:\n    \"\"\"\n    \u91cd\u7f6e\u7edf\u8ba1\u4fe1\u606f\n\n    \u4fdd\u7559 start_time\uff0c\u66f4\u65b0 last_reset\u3002\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; monitor.reset_stats()  # \u91cd\u65b0\u5f00\u59cb\u7edf\u8ba1\n    \"\"\"\n    with self._lock:\n        start_time = self._stats.start_time\n        self._stats = CacheStats(start_time=start_time)\n        # \u6e05\u7406\u5ef6\u8fdf\u7edf\u8ba1\n        self._latency_min.clear()\n        self._latency_max.clear()\n</code></pre>"},{"location":"en/api/monitoring/#symphra_cache.monitor.CacheStats.avg_get_time","title":"<code>avg_get_time</code>  <code>property</code>","text":"<p>\u5e73\u5747 get \u64cd\u4f5c\u8017\u65f6\uff08\u6beb\u79d2\uff09</p>"},{"location":"en/api/monitoring/#symphra_cache.monitor.CacheStats.avg_set_time","title":"<code>avg_set_time</code>  <code>property</code>","text":"<p>\u5e73\u5747 set \u64cd\u4f5c\u8017\u65f6\uff08\u6beb\u79d2\uff09</p>"},{"location":"en/api/monitoring/#symphra_cache.monitor.CacheStats.hit_rate","title":"<code>hit_rate</code>  <code>property</code>","text":"<p>\u547d\u4e2d\u7387\uff080-1\uff09</p>"},{"location":"en/api/monitoring/#symphra_cache.monitor.CacheStats.miss_rate","title":"<code>miss_rate</code>  <code>property</code>","text":"<p>\u672a\u547d\u4e2d\u7387(0-1)</p>"},{"location":"en/api/monitoring/#symphra_cache.monitor.CacheStats.uptime","title":"<code>uptime</code>  <code>property</code>","text":"<p>\u8fd0\u884c\u65f6\u95f4\uff08\u79d2\uff09</p>"},{"location":"en/api/monitoring/#symphra_cache.monitor.CacheStats.to_dict","title":"<code>to_dict()</code>","text":"<p>\u8f6c\u6362\u4e3a\u5b57\u5178</p> Source code in <code>src/symphra_cache/monitor.py</code> <pre><code>def to_dict(self) -&gt; dict:\n    \"\"\"\u8f6c\u6362\u4e3a\u5b57\u5178\"\"\"\n    return {\n        \"hits\": self.hits,\n        \"misses\": self.misses,\n        \"hit_rate\": self.hit_rate,\n        \"miss_rate\": self.miss_rate,\n        \"gets\": self.gets,\n        \"sets\": self.sets,\n        \"deletes\": self.deletes,\n        \"errors\": self.errors,\n        \"avg_get_time_ms\": self.avg_get_time,\n        \"avg_set_time_ms\": self.avg_set_time,\n        \"uptime_seconds\": self.uptime,\n        \"start_time\": self.start_time,\n        \"last_reset\": self.last_reset,\n    }\n</code></pre>"},{"location":"en/api/monitoring/#symphra_cache.monitoring.prometheus.PrometheusExporter.__init__","title":"<code>__init__(monitor, namespace='symphra_cache', subsystem='cache', labels=None)</code>","text":"<p>\u521d\u59cb\u5316 Prometheus \u5bfc\u51fa\u5668</p> <p>Parameters:</p> Name Type Description Default <code>monitor</code> <code>CacheMonitor</code> <p>\u7f13\u5b58\u76d1\u63a7\u5668</p> required <code>namespace</code> <code>str</code> <p>\u6307\u6807\u547d\u540d\u7a7a\u95f4</p> <code>'symphra_cache'</code> <code>subsystem</code> <code>str</code> <p>\u5b50\u7cfb\u7edf\u540d\u79f0</p> <code>'cache'</code> <code>labels</code> <code>dict[str, str] | None</code> <p>\u5168\u5c40\u6807\u7b7e</p> <code>None</code> Source code in <code>src/symphra_cache/monitoring/prometheus.py</code> <pre><code>def __init__(\n    self,\n    monitor: CacheMonitor,\n    namespace: str = \"symphra_cache\",\n    subsystem: str = \"cache\",\n    labels: dict[str, str] | None = None,\n) -&gt; None:\n    \"\"\"\n    \u521d\u59cb\u5316 Prometheus \u5bfc\u51fa\u5668\n\n    Args:\n        monitor: \u7f13\u5b58\u76d1\u63a7\u5668\n        namespace: \u6307\u6807\u547d\u540d\u7a7a\u95f4\n        subsystem: \u5b50\u7cfb\u7edf\u540d\u79f0\n        labels: \u5168\u5c40\u6807\u7b7e\n    \"\"\"\n    self.monitor = monitor\n    self.namespace = namespace\n    self.subsystem = subsystem\n    self.labels = labels or {}\n    self._start_time = time.time()\n</code></pre>"},{"location":"en/api/monitoring/#symphra_cache.monitoring.prometheus.PrometheusExporter.create_pushgateway_client","title":"<code>create_pushgateway_client(gateway_url, job_name, instance='')</code>","text":"<p>\u521b\u5efa Pushgateway \u5ba2\u6237\u7aef</p> <p>Parameters:</p> Name Type Description Default <code>gateway_url</code> <code>str</code> <p>Pushgateway URL</p> required <code>job_name</code> <code>str</code> <p>\u4f5c\u4e1a\u540d\u79f0</p> required <code>instance</code> <code>str</code> <p>\u5b9e\u4f8b\u6807\u8bc6\u7b26</p> <code>''</code> <p>Returns:</p> Type Description <code>PrometheusPushgatewayClient</code> <p>Pushgateway \u5ba2\u6237\u7aef</p> Source code in <code>src/symphra_cache/monitoring/prometheus.py</code> <pre><code>def create_pushgateway_client(\n    self,\n    gateway_url: str,\n    job_name: str,\n    instance: str = \"\",\n) -&gt; PrometheusPushgatewayClient:\n    \"\"\"\n    \u521b\u5efa Pushgateway \u5ba2\u6237\u7aef\n\n    Args:\n        gateway_url: Pushgateway URL\n        job_name: \u4f5c\u4e1a\u540d\u79f0\n        instance: \u5b9e\u4f8b\u6807\u8bc6\u7b26\n\n    Returns:\n        Pushgateway \u5ba2\u6237\u7aef\n    \"\"\"\n    return PrometheusPushgatewayClient(\n        exporter=self,\n        gateway_url=gateway_url,\n        job_name=job_name,\n        instance=instance or self._get_default_instance(),\n    )\n</code></pre>"},{"location":"en/api/monitoring/#symphra_cache.monitoring.prometheus.PrometheusExporter.generate_metrics","title":"<code>generate_metrics()</code>","text":"<p>\u751f\u6210 Prometheus \u683c\u5f0f\u7684\u6307\u6807\u6587\u672c</p> <p>Returns:</p> Type Description <code>str</code> <p>Prometheus \u6307\u6807\u6587\u672c</p> Source code in <code>src/symphra_cache/monitoring/prometheus.py</code> <pre><code>def generate_metrics(self) -&gt; str:\n    \"\"\"\n    \u751f\u6210 Prometheus \u683c\u5f0f\u7684\u6307\u6807\u6587\u672c\n\n    Returns:\n        Prometheus \u6307\u6807\u6587\u672c\n    \"\"\"\n    if not self.monitor.is_enabled():\n        return \"# Cache monitoring is disabled\"\n\n    lines = []\n\n    # \u6dfb\u52a0\u5143\u4fe1\u606f\n    lines.append(f\"# Symphra Cache Metrics - {time.strftime('%Y-%m-%d %H:%M:%S')}\")\n    lines.append(\"# Generated by PrometheusExporter\")\n    lines.append(\"\")\n\n    # \u751f\u6210\u4e0d\u540c\u7c7b\u578b\u7684\u6307\u6807\n    lines.append(self._generate_counter_metrics())\n    lines.append(\"\")\n    lines.append(self._generate_gauge_metrics())\n    lines.append(\"\")\n    lines.append(self._generate_histogram_metrics())\n\n    return \"\\n\".join(lines)\n</code></pre>"},{"location":"en/api/monitoring/#symphra_cache.monitoring.prometheus.PrometheusExporter.get_metrics_handler","title":"<code>get_metrics_handler()</code>","text":"<p>\u83b7\u53d6\u6307\u6807\u5904\u7406\u5668\u51fd\u6570</p> <p>Returns:</p> Type Description <code>Callable[[], str]</code> <p>\u8fd4\u56de\u6307\u6807\u6587\u672c\u7684\u51fd\u6570</p> Source code in <code>src/symphra_cache/monitoring/prometheus.py</code> <pre><code>def get_metrics_handler(self) -&gt; Callable[[], str]:\n    \"\"\"\n    \u83b7\u53d6\u6307\u6807\u5904\u7406\u5668\u51fd\u6570\n\n    Returns:\n        \u8fd4\u56de\u6307\u6807\u6587\u672c\u7684\u51fd\u6570\n    \"\"\"\n    return self.generate_metrics\n</code></pre>"},{"location":"en/api/monitoring/#symphra_cache.monitoring.prometheus.PrometheusExporter.update_labels","title":"<code>update_labels(labels)</code>","text":"<p>\u66f4\u65b0\u5168\u5c40\u6807\u7b7e</p> <p>Parameters:</p> Name Type Description Default <code>labels</code> <code>dict[str, str]</code> <p>\u65b0\u7684\u6807\u7b7e\u5b57\u5178</p> required Source code in <code>src/symphra_cache/monitoring/prometheus.py</code> <pre><code>def update_labels(self, labels: dict[str, str]) -&gt; None:\n    \"\"\"\n    \u66f4\u65b0\u5168\u5c40\u6807\u7b7e\n\n    Args:\n        labels: \u65b0\u7684\u6807\u7b7e\u5b57\u5178\n    \"\"\"\n    self.labels.update(labels)\n</code></pre>"},{"location":"en/api/monitoring/#symphra_cache.monitoring.statsd.StatsDExporter.__aenter__","title":"<code>__aenter__()</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5165\u53e3</p> Source code in <code>src/symphra_cache/monitoring/statsd.py</code> <pre><code>async def __aenter__(self) -&gt; StatsDExporter:\n    \"\"\"\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5165\u53e3\"\"\"\n    await self.connect()\n    return self\n</code></pre>"},{"location":"en/api/monitoring/#symphra_cache.monitoring.statsd.StatsDExporter.__aexit__","title":"<code>__aexit__(exc_type, exc_val, exc_tb)</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u51fa\u53e3</p> Source code in <code>src/symphra_cache/monitoring/statsd.py</code> <pre><code>async def __aexit__(\n    self,\n    exc_type: type[BaseException] | None,\n    exc_val: BaseException | None,\n    exc_tb: Any | None,\n) -&gt; None:\n    \"\"\"\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u51fa\u53e3\"\"\"\n    await self.disconnect()\n</code></pre>"},{"location":"en/api/monitoring/#symphra_cache.monitoring.statsd.StatsDExporter.__del__","title":"<code>__del__()</code>","text":"<p>\u6790\u6784\u51fd\u6570</p> Source code in <code>src/symphra_cache/monitoring/statsd.py</code> <pre><code>def __del__(self) -&gt; None:\n    \"\"\"\u6790\u6784\u51fd\u6570\"\"\"\n    if self._socket:\n        self._socket.close()\n</code></pre>"},{"location":"en/api/monitoring/#symphra_cache.monitoring.statsd.StatsDExporter.__init__","title":"<code>__init__(monitor, host='localhost', port=8125, prefix='symphra.cache', sample_rate=1.0, protocol='udp', batch_size=10)</code>","text":"<p>\u521d\u59cb\u5316 StatsD \u5bfc\u51fa\u5668</p> <p>Parameters:</p> Name Type Description Default <code>monitor</code> <code>CacheMonitor</code> <p>\u7f13\u5b58\u76d1\u63a7\u5668</p> required <code>host</code> <code>str</code> <p>StatsD \u670d\u52a1\u5668\u4e3b\u673a</p> <code>'localhost'</code> <code>port</code> <code>int</code> <p>StatsD \u670d\u52a1\u5668\u7aef\u53e3</p> <code>8125</code> <code>prefix</code> <code>str</code> <p>\u6307\u6807\u524d\u7f00</p> <code>'symphra.cache'</code> <code>sample_rate</code> <code>float</code> <p>\u91c7\u6837\u7387 (0.0-1.0)</p> <code>1.0</code> <code>protocol</code> <code>str</code> <p>\u4f20\u8f93\u534f\u8bae (\"udp\", \"tcp\")</p> <code>'udp'</code> <code>batch_size</code> <code>int</code> <p>\u6279\u91cf\u53d1\u9001\u5927\u5c0f</p> <code>10</code> Source code in <code>src/symphra_cache/monitoring/statsd.py</code> <pre><code>def __init__(\n    self,\n    monitor: CacheMonitor,\n    host: str = \"localhost\",\n    port: int = 8125,\n    prefix: str = \"symphra.cache\",\n    sample_rate: float = 1.0,\n    protocol: str = \"udp\",\n    batch_size: int = 10,\n) -&gt; None:\n    \"\"\"\n    \u521d\u59cb\u5316 StatsD \u5bfc\u51fa\u5668\n\n    Args:\n        monitor: \u7f13\u5b58\u76d1\u63a7\u5668\n        host: StatsD \u670d\u52a1\u5668\u4e3b\u673a\n        port: StatsD \u670d\u52a1\u5668\u7aef\u53e3\n        prefix: \u6307\u6807\u524d\u7f00\n        sample_rate: \u91c7\u6837\u7387 (0.0-1.0)\n        protocol: \u4f20\u8f93\u534f\u8bae (\"udp\", \"tcp\")\n        batch_size: \u6279\u91cf\u53d1\u9001\u5927\u5c0f\n    \"\"\"\n    self.monitor = monitor\n    self.host = host\n    self.port = port\n    self.prefix = prefix\n    self.sample_rate = max(0.0, min(1.0, sample_rate))  # \u786e\u4fdd\u5728\u6709\u6548\u8303\u56f4\u5185\n    self.protocol = protocol.lower()\n    self.batch_size = batch_size\n    self._socket: socket.socket | None = None\n    self._tcp_writer: asyncio.StreamWriter | None = None\n    self._tcp_reader: asyncio.StreamReader | None = None\n    self._is_connected = False\n    self._pending_metrics: list[str] = []\n    self._lock = asyncio.Lock()\n</code></pre>"},{"location":"en/api/monitoring/#symphra_cache.monitoring.statsd.StatsDExporter.add_custom_metric","title":"<code>add_custom_metric(name, value, metric_type='g')</code>","text":"<p>\u6dfb\u52a0\u81ea\u5b9a\u4e49\u6307\u6807</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u6307\u6807\u540d\u79f0</p> required <code>value</code> <code>float</code> <p>\u6307\u6807\u503c</p> required <code>metric_type</code> <code>str</code> <p>\u6307\u6807\u7c7b\u578b (\"c\", \"g\", \"ms\")</p> <code>'g'</code> Source code in <code>src/symphra_cache/monitoring/statsd.py</code> <pre><code>def add_custom_metric(self, name: str, value: float, metric_type: str = \"g\") -&gt; None:\n    \"\"\"\n    \u6dfb\u52a0\u81ea\u5b9a\u4e49\u6307\u6807\n\n    Args:\n        name: \u6307\u6807\u540d\u79f0\n        value: \u6307\u6807\u503c\n        metric_type: \u6307\u6807\u7c7b\u578b (\"c\", \"g\", \"ms\")\n    \"\"\"\n    metric_line = f\"{self._format_metric_name(name)}:{value}|{metric_type}\"\n    self._pending_metrics.append(metric_line)\n</code></pre>"},{"location":"en/api/monitoring/#symphra_cache.monitoring.statsd.StatsDExporter.connect","title":"<code>connect()</code>  <code>async</code>","text":"<p>\u5efa\u7acb\u5230 StatsD \u670d\u52a1\u5668\u7684\u8fde\u63a5</p> Source code in <code>src/symphra_cache/monitoring/statsd.py</code> <pre><code>async def connect(self) -&gt; None:\n    \"\"\"\n    \u5efa\u7acb\u5230 StatsD \u670d\u52a1\u5668\u7684\u8fde\u63a5\n    \"\"\"\n    if self._is_connected:\n        return\n\n    try:\n        if self.protocol == \"udp\":\n            self._socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n            self._socket.setblocking(False)\n        elif self.protocol == \"tcp\":\n            reader, writer = await asyncio.open_connection(self.host, self.port)\n            self._tcp_reader = reader\n            self._tcp_writer = writer\n        else:\n            raise ValueError(f\"\u4e0d\u652f\u6301\u7684\u534f\u8bae: {self.protocol}\")\n\n        self._is_connected = True\n\n    except Exception as e:\n        print(f\"\u8fde\u63a5 StatsD \u670d\u52a1\u5668\u5931\u8d25: {e}\")\n        self._is_connected = False\n</code></pre>"},{"location":"en/api/monitoring/#symphra_cache.monitoring.statsd.StatsDExporter.disconnect","title":"<code>disconnect()</code>  <code>async</code>","text":"<p>\u65ad\u5f00\u8fde\u63a5</p> Source code in <code>src/symphra_cache/monitoring/statsd.py</code> <pre><code>async def disconnect(self) -&gt; None:\n    \"\"\"\n    \u65ad\u5f00\u8fde\u63a5\n    \"\"\"\n    if self.protocol == \"udp\" and self._socket:\n        self._socket.close()\n    elif self.protocol == \"tcp\" and self._tcp_writer:\n        self._tcp_writer.close()\n        await self._tcp_writer.wait_closed()\n\n    self._is_connected = False\n    self._socket = None\n    self._tcp_writer = None\n    self._tcp_reader = None\n</code></pre>"},{"location":"en/api/monitoring/#symphra_cache.monitoring.statsd.StatsDExporter.flush_pending_metrics","title":"<code>flush_pending_metrics()</code>  <code>async</code>","text":"<p>\u5237\u65b0\u5f85\u53d1\u9001\u7684\u6307\u6807</p> <p>Returns:</p> Type Description <code>bool</code> <p>\u5237\u65b0\u662f\u5426\u6210\u529f</p> Source code in <code>src/symphra_cache/monitoring/statsd.py</code> <pre><code>async def flush_pending_metrics(self) -&gt; bool:\n    \"\"\"\n    \u5237\u65b0\u5f85\u53d1\u9001\u7684\u6307\u6807\n\n    Returns:\n        \u5237\u65b0\u662f\u5426\u6210\u529f\n    \"\"\"\n    if not self._pending_metrics:\n        return True\n\n    success = await self.send_metrics(self._pending_metrics)\n    if success:\n        self._pending_metrics.clear()\n\n    return success\n</code></pre>"},{"location":"en/api/monitoring/#symphra_cache.monitoring.statsd.StatsDExporter.generate_all_metrics","title":"<code>generate_all_metrics()</code>","text":"<p>\u751f\u6210\u6240\u6709\u6307\u6807</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>\u6307\u6807\u884c\u5217\u8868</p> Source code in <code>src/symphra_cache/monitoring/statsd.py</code> <pre><code>def generate_all_metrics(self) -&gt; list[str]:\n    \"\"\"\n    \u751f\u6210\u6240\u6709\u6307\u6807\n\n    Returns:\n        \u6307\u6807\u884c\u5217\u8868\n    \"\"\"\n    all_metrics = []\n    all_metrics.extend(self._generate_counter_metrics())\n    all_metrics.extend(self._generate_timer_metrics())\n    all_metrics.extend(self._generate_gauge_metrics())\n    return all_metrics\n</code></pre>"},{"location":"en/api/monitoring/#symphra_cache.monitoring.statsd.StatsDExporter.get_connection_status","title":"<code>get_connection_status()</code>","text":"<p>\u83b7\u53d6\u8fde\u63a5\u72b6\u6001</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>\u8fde\u63a5\u72b6\u6001\u4fe1\u606f</p> Source code in <code>src/symphra_cache/monitoring/statsd.py</code> <pre><code>def get_connection_status(self) -&gt; dict[str, Any]:\n    \"\"\"\n    \u83b7\u53d6\u8fde\u63a5\u72b6\u6001\n\n    Returns:\n        \u8fde\u63a5\u72b6\u6001\u4fe1\u606f\n    \"\"\"\n    return {\n        \"connected\": self._is_connected,\n        \"protocol\": self.protocol,\n        \"host\": self.host,\n        \"port\": self.port,\n        \"pending_metrics\": len(self._pending_metrics),\n    }\n</code></pre>"},{"location":"en/api/monitoring/#symphra_cache.monitoring.statsd.StatsDExporter.schedule_periodic_send","title":"<code>schedule_periodic_send(interval=30.0)</code>  <code>async</code>","text":"<p>\u5b89\u6392\u5468\u671f\u6027\u53d1\u9001\u6307\u6807</p> <p>Parameters:</p> Name Type Description Default <code>interval</code> <code>float</code> <p>\u53d1\u9001\u95f4\u9694\uff08\u79d2\uff09</p> <code>30.0</code> Source code in <code>src/symphra_cache/monitoring/statsd.py</code> <pre><code>async def schedule_periodic_send(self, interval: float = 30.0) -&gt; None:\n    \"\"\"\n    \u5b89\u6392\u5468\u671f\u6027\u53d1\u9001\u6307\u6807\n\n    Args:\n        interval: \u53d1\u9001\u95f4\u9694\uff08\u79d2\uff09\n    \"\"\"\n    while True:\n        try:\n            await asyncio.sleep(interval)\n            await self.send_metrics()\n        except asyncio.CancelledError:\n            break\n        except Exception as e:\n            print(f\"\u5468\u671f\u6027\u53d1\u9001\u5931\u8d25: {e}\")\n</code></pre>"},{"location":"en/api/monitoring/#symphra_cache.monitoring.statsd.StatsDExporter.send_metrics","title":"<code>send_metrics(metric_lines=None)</code>  <code>async</code>","text":"<p>\u53d1\u9001\u6307\u6807\u5230 StatsD \u670d\u52a1\u5668</p> <p>Parameters:</p> Name Type Description Default <code>metric_lines</code> <code>list[str] | None</code> <p>\u8981\u53d1\u9001\u7684\u6307\u6807\u884c\u5217\u8868\uff0cNone \u8868\u793a\u53d1\u9001\u6240\u6709\u6307\u6807</p> <code>None</code> <p>Returns:</p> Type Description <code>bool</code> <p>\u53d1\u9001\u662f\u5426\u6210\u529f</p> Source code in <code>src/symphra_cache/monitoring/statsd.py</code> <pre><code>async def send_metrics(self, metric_lines: list[str] | None = None) -&gt; bool:\n    \"\"\"\n    \u53d1\u9001\u6307\u6807\u5230 StatsD \u670d\u52a1\u5668\n\n    Args:\n        metric_lines: \u8981\u53d1\u9001\u7684\u6307\u6807\u884c\u5217\u8868\uff0cNone \u8868\u793a\u53d1\u9001\u6240\u6709\u6307\u6807\n\n    Returns:\n        \u53d1\u9001\u662f\u5426\u6210\u529f\n    \"\"\"\n    if not self.monitor.is_enabled():\n        return True\n\n    if metric_lines is None:\n        metric_lines = self.generate_all_metrics()\n\n    if not metric_lines:\n        return True\n\n    # \u5efa\u7acb\u8fde\u63a5\n    if not self._is_connected:\n        await self.connect()\n        if not self._is_connected:\n            return False\n\n    # \u5e94\u7528\u91c7\u6837\u7387\n    if self.sample_rate &lt; 1.0:\n        import random\n\n        metric_lines = [line for line in metric_lines if random.random() &lt; self.sample_rate]\n\n    try:\n        if self.protocol == \"udp\":\n            return await self._send_udp_metrics(metric_lines)\n        else:\n            return await self._send_tcp_metrics(metric_lines)\n\n    except Exception as e:\n        print(f\"\u53d1\u9001\u6307\u6807\u5931\u8d25: {e}\")\n        await self.disconnect()\n        return False\n</code></pre>"},{"location":"en/api/serializers/","title":"Serializers","text":"<p>Built-in serializer implementations and helper to select serializer.</p> <p>               Bases: <code>ABC</code></p> <p>\u5e8f\u5217\u5316\u5668\u62bd\u8c61\u57fa\u7c7b</p> <p>\u5b9a\u4e49\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u63a5\u53e3\u3002</p> Source code in <code>src/symphra_cache/serializers.py</code> <pre><code>class BaseSerializer(ABC):\n    \"\"\"\n    \u5e8f\u5217\u5316\u5668\u62bd\u8c61\u57fa\u7c7b\n\n    \u5b9a\u4e49\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u63a5\u53e3\u3002\n    \"\"\"\n\n    @abstractmethod\n    def serialize(self, value: CacheValue) -&gt; bytes:\n        \"\"\"\n        \u5e8f\u5217\u5316\u503c\u4e3a\u5b57\u8282\n\n        Args:\n            value: \u8981\u5e8f\u5217\u5316\u7684\u503c\n\n        Returns:\n            \u5e8f\u5217\u5316\u540e\u7684\u5b57\u8282\u6570\u636e\n\n        Raises:\n            CacheSerializationError: \u5e8f\u5217\u5316\u5931\u8d25\n        \"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    def deserialize(self, data: bytes) -&gt; CacheValue:\n        \"\"\"\n        \u53cd\u5e8f\u5217\u5316\u5b57\u8282\u4e3a\u503c\n\n        Args:\n            data: \u8981\u53cd\u5e8f\u5217\u5316\u7684\u5b57\u8282\u6570\u636e\n\n        Returns:\n            \u53cd\u5e8f\u5217\u5316\u540e\u7684\u503c\n\n        Raises:\n            CacheSerializationError: \u53cd\u5e8f\u5217\u5316\u5931\u8d25\n        \"\"\"\n        raise NotImplementedError\n</code></pre> <p>               Bases: <code>BaseSerializer</code></p> <p>JSON \u5e8f\u5217\u5316\u5668</p> <p>\u4f18\u70b9\uff1a - \u53ef\u8bfb\u6027\u597d - \u8de8\u8bed\u8a00\u517c\u5bb9 - \u9002\u5408\u7b80\u5355\u6570\u636e\u7ed3\u6784</p> <p>\u7f3a\u70b9\uff1a - \u4e0d\u652f\u6301\u590d\u6742 Python \u5bf9\u8c61\uff08\u5982 datetime\u3001bytes\uff09 - \u6027\u80fd\u76f8\u5bf9\u8f83\u4f4e</p> <p>\u793a\u4f8b\uff1a     &gt;&gt;&gt; serializer = JSONSerializer()     &gt;&gt;&gt; data = {\"key\": \"value\", \"count\": 123}     &gt;&gt;&gt; bytes_data = serializer.serialize(data)     &gt;&gt;&gt; original = serializer.deserialize(bytes_data)</p> Source code in <code>src/symphra_cache/serializers.py</code> <pre><code>class JSONSerializer(BaseSerializer):\n    \"\"\"\n    JSON \u5e8f\u5217\u5316\u5668\n\n    \u4f18\u70b9\uff1a\n    - \u53ef\u8bfb\u6027\u597d\n    - \u8de8\u8bed\u8a00\u517c\u5bb9\n    - \u9002\u5408\u7b80\u5355\u6570\u636e\u7ed3\u6784\n\n    \u7f3a\u70b9\uff1a\n    - \u4e0d\u652f\u6301\u590d\u6742 Python \u5bf9\u8c61\uff08\u5982 datetime\u3001bytes\uff09\n    - \u6027\u80fd\u76f8\u5bf9\u8f83\u4f4e\n\n    \u793a\u4f8b\uff1a\n        &gt;&gt;&gt; serializer = JSONSerializer()\n        &gt;&gt;&gt; data = {\"key\": \"value\", \"count\": 123}\n        &gt;&gt;&gt; bytes_data = serializer.serialize(data)\n        &gt;&gt;&gt; original = serializer.deserialize(bytes_data)\n    \"\"\"\n\n    def serialize(self, value: CacheValue) -&gt; bytes:\n        \"\"\"\u5c06\u503c\u5e8f\u5217\u5316\u4e3a JSON \u5b57\u8282\"\"\"\n        try:\n            # \u4f7f\u7528 ensure_ascii=False \u652f\u6301\u4e2d\u6587\u7b49 Unicode \u5b57\u7b26\n            json_str = json.dumps(value, ensure_ascii=False)\n            return json_str.encode(\"utf-8\")\n        except (TypeError, ValueError) as e:\n            msg = f\"JSON \u5e8f\u5217\u5316\u5931\u8d25: {e}\"\n            raise CacheSerializationError(msg) from e\n\n    def deserialize(self, data: bytes) -&gt; CacheValue:\n        \"\"\"\u4ece JSON \u5b57\u8282\u53cd\u5e8f\u5217\u5316\u503c\"\"\"\n        try:\n            json_str = data.decode(\"utf-8\")\n            return json.loads(json_str)\n        except (json.JSONDecodeError, UnicodeDecodeError) as e:\n            msg = f\"JSON \u53cd\u5e8f\u5217\u5316\u5931\u8d25: {e}\"\n            raise CacheSerializationError(msg) from e\n</code></pre> <p>               Bases: <code>BaseSerializer</code></p> <p>Pickle \u5e8f\u5217\u5316\u5668</p> <p>\u4f18\u70b9\uff1a - \u652f\u6301\u51e0\u4e4e\u6240\u6709 Python \u5bf9\u8c61 - \u6027\u80fd\u8f83\u597d - Python \u6807\u51c6\u5e93\u5185\u7f6e</p> <p>\u7f3a\u70b9\uff1a - \u4e0d\u8de8\u8bed\u8a00 - \u5b89\u5168\u98ce\u9669\uff08\u4e0d\u8981\u53cd\u5e8f\u5217\u5316\u4e0d\u53ef\u4fe1\u6570\u636e\uff09 - \u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u4e0d\u53ef\u8bfb</p> <p>\u8b66\u544a\uff1a     \u4ec5\u53cd\u5e8f\u5217\u5316\u53ef\u4fe1\u6765\u6e90\u7684\u6570\u636e\uff0c\u907f\u514d\u4ee3\u7801\u6ce8\u5165\u98ce\u9669</p> <p>\u793a\u4f8b\uff1a     &gt;&gt;&gt; serializer = PickleSerializer()     &gt;&gt;&gt; import datetime     &gt;&gt;&gt; data = {\"time\": datetime.datetime.now(), \"items\": [1, 2, 3]}     &gt;&gt;&gt; bytes_data = serializer.serialize(data)     &gt;&gt;&gt; original = serializer.deserialize(bytes_data)</p> Source code in <code>src/symphra_cache/serializers.py</code> <pre><code>class PickleSerializer(BaseSerializer):\n    \"\"\"\n    Pickle \u5e8f\u5217\u5316\u5668\n\n    \u4f18\u70b9\uff1a\n    - \u652f\u6301\u51e0\u4e4e\u6240\u6709 Python \u5bf9\u8c61\n    - \u6027\u80fd\u8f83\u597d\n    - Python \u6807\u51c6\u5e93\u5185\u7f6e\n\n    \u7f3a\u70b9\uff1a\n    - \u4e0d\u8de8\u8bed\u8a00\n    - \u5b89\u5168\u98ce\u9669\uff08\u4e0d\u8981\u53cd\u5e8f\u5217\u5316\u4e0d\u53ef\u4fe1\u6570\u636e\uff09\n    - \u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u4e0d\u53ef\u8bfb\n\n    \u8b66\u544a\uff1a\n        \u4ec5\u53cd\u5e8f\u5217\u5316\u53ef\u4fe1\u6765\u6e90\u7684\u6570\u636e\uff0c\u907f\u514d\u4ee3\u7801\u6ce8\u5165\u98ce\u9669\n\n    \u793a\u4f8b\uff1a\n        &gt;&gt;&gt; serializer = PickleSerializer()\n        &gt;&gt;&gt; import datetime\n        &gt;&gt;&gt; data = {\"time\": datetime.datetime.now(), \"items\": [1, 2, 3]}\n        &gt;&gt;&gt; bytes_data = serializer.serialize(data)\n        &gt;&gt;&gt; original = serializer.deserialize(bytes_data)\n    \"\"\"\n\n    def serialize(self, value: CacheValue) -&gt; bytes:\n        \"\"\"\u5c06\u503c\u5e8f\u5217\u5316\u4e3a Pickle \u5b57\u8282\"\"\"\n        try:\n            # \u4f7f\u7528\u534f\u8bae 5\uff08Python 3.8+\uff0c\u6027\u80fd\u6700\u4f18\uff09\n            return pickle.dumps(value, protocol=pickle.HIGHEST_PROTOCOL)\n        except (pickle.PicklingError, TypeError) as e:\n            msg = f\"Pickle \u5e8f\u5217\u5316\u5931\u8d25: {e}\"\n            raise CacheSerializationError(msg) from e\n\n    def deserialize(self, data: bytes) -&gt; CacheValue:\n        \"\"\"\u4ece Pickle \u5b57\u8282\u53cd\u5e8f\u5217\u5316\u503c\"\"\"\n        try:\n            return pickle.loads(data)  # noqa: S301\n        except (pickle.UnpicklingError, AttributeError, EOFError) as e:\n            msg = f\"Pickle \u53cd\u5e8f\u5217\u5316\u5931\u8d25: {e}\"\n            raise CacheSerializationError(msg) from e\n</code></pre> <p>               Bases: <code>BaseSerializer</code></p> <p>MessagePack \u5e8f\u5217\u5316\u5668</p> <p>\u4f18\u70b9\uff1a - \u9ad8\u6027\u80fd\uff08\u6bd4 JSON \u5feb 2-5 \u500d\uff09 - \u7d27\u51d1\u7684\u4e8c\u8fdb\u5236\u683c\u5f0f - \u8de8\u8bed\u8a00\u517c\u5bb9</p> <p>\u7f3a\u70b9\uff1a - \u9700\u8981\u989d\u5916\u4f9d\u8d56 msgpack - \u5bf9\u590d\u6742 Python \u5bf9\u8c61\u652f\u6301\u6709\u9650</p> <p>\u793a\u4f8b\uff1a     &gt;&gt;&gt; serializer = MessagePackSerializer()     &gt;&gt;&gt; data = {\"users\": [{\"id\": 1}, {\"id\": 2}], \"total\": 2}     &gt;&gt;&gt; bytes_data = serializer.serialize(data)     &gt;&gt;&gt; original = serializer.deserialize(bytes_data)</p> Source code in <code>src/symphra_cache/serializers.py</code> <pre><code>class MessagePackSerializer(BaseSerializer):\n    \"\"\"\n    MessagePack \u5e8f\u5217\u5316\u5668\n\n    \u4f18\u70b9\uff1a\n    - \u9ad8\u6027\u80fd\uff08\u6bd4 JSON \u5feb 2-5 \u500d\uff09\n    - \u7d27\u51d1\u7684\u4e8c\u8fdb\u5236\u683c\u5f0f\n    - \u8de8\u8bed\u8a00\u517c\u5bb9\n\n    \u7f3a\u70b9\uff1a\n    - \u9700\u8981\u989d\u5916\u4f9d\u8d56 msgpack\n    - \u5bf9\u590d\u6742 Python \u5bf9\u8c61\u652f\u6301\u6709\u9650\n\n    \u793a\u4f8b\uff1a\n        &gt;&gt;&gt; serializer = MessagePackSerializer()\n        &gt;&gt;&gt; data = {\"users\": [{\"id\": 1}, {\"id\": 2}], \"total\": 2}\n        &gt;&gt;&gt; bytes_data = serializer.serialize(data)\n        &gt;&gt;&gt; original = serializer.deserialize(bytes_data)\n    \"\"\"\n\n    def __init__(self) -&gt; None:\n        \"\"\"\u521d\u59cb\u5316 MessagePack \u5e8f\u5217\u5316\u5668\"\"\"\n        try:\n            import msgpack\n\n            self._msgpack = msgpack\n        except ImportError as e:\n            msg = \"MessagePack \u5e8f\u5217\u5316\u9700\u8981\u5b89\u88c5 msgpack: pip install msgpack\"\n            raise ImportError(msg) from e\n\n    def serialize(self, value: CacheValue) -&gt; bytes:\n        \"\"\"\u5c06\u503c\u5e8f\u5217\u5316\u4e3a MessagePack \u5b57\u8282\"\"\"\n        try:\n            return self._msgpack.packb(value, use_bin_type=True)\n        except (self._msgpack.PackException, TypeError) as e:\n            msg = f\"MessagePack \u5e8f\u5217\u5316\u5931\u8d25: {e}\"\n            raise CacheSerializationError(msg) from e\n\n    def deserialize(self, data: bytes) -&gt; CacheValue:\n        \"\"\"\u4ece MessagePack \u5b57\u8282\u53cd\u5e8f\u5217\u5316\u503c\"\"\"\n        try:\n            return self._msgpack.unpackb(data, raw=False)\n        except (self._msgpack.UnpackException, ValueError) as e:\n            msg = f\"MessagePack \u53cd\u5e8f\u5217\u5316\u5931\u8d25: {e}\"\n            raise CacheSerializationError(msg) from e\n</code></pre> <p>\u83b7\u53d6\u6307\u5b9a\u6a21\u5f0f\u7684\u5e8f\u5217\u5316\u5668\u5b9e\u4f8b</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>SerializationMode | str</code> <p>\u5e8f\u5217\u5316\u6a21\u5f0f\uff08SerializationMode \u679a\u4e3e\u6216\u5b57\u7b26\u4e32\uff09</p> required <p>Returns:</p> Type Description <code>BaseSerializer</code> <p>\u5e8f\u5217\u5316\u5668\u5b9e\u4f8b</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u4e0d\u652f\u6301\u7684\u5e8f\u5217\u5316\u6a21\u5f0f</p> \u793a\u4f8b <p>serializer = get_serializer(SerializationMode.JSON)</p> Source code in <code>src/symphra_cache/serializers.py</code> <pre><code>def get_serializer(mode: SerializationMode | str) -&gt; BaseSerializer:\n    \"\"\"\n    \u83b7\u53d6\u6307\u5b9a\u6a21\u5f0f\u7684\u5e8f\u5217\u5316\u5668\u5b9e\u4f8b\n\n    Args:\n        mode: \u5e8f\u5217\u5316\u6a21\u5f0f\uff08SerializationMode \u679a\u4e3e\u6216\u5b57\u7b26\u4e32\uff09\n\n    Returns:\n        \u5e8f\u5217\u5316\u5668\u5b9e\u4f8b\n\n    Raises:\n        ValueError: \u4e0d\u652f\u6301\u7684\u5e8f\u5217\u5316\u6a21\u5f0f\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; serializer = get_serializer(SerializationMode.JSON)\n        &gt;&gt;&gt; # \u6216\u4f7f\u7528\u5b57\u7b26\u4e32\n        &gt;&gt;&gt; serializer = get_serializer(\"json\")\n    \"\"\"\n    # \u652f\u6301\u5b57\u7b26\u4e32\u53c2\u6570\n    if isinstance(mode, str):\n        try:\n            mode = SerializationMode(mode)\n        except ValueError as e:\n            msg = f\"\u4e0d\u652f\u6301\u7684\u5e8f\u5217\u5316\u6a21\u5f0f: {mode}\"\n            raise ValueError(msg) from e\n\n    # \u83b7\u53d6\u5e8f\u5217\u5316\u5668\u7c7b\n    serializer_cls = _SERIALIZERS.get(mode)\n    if serializer_cls is None:\n        msg = f\"\u672a\u6ce8\u518c\u7684\u5e8f\u5217\u5316\u6a21\u5f0f: {mode}\"\n        raise ValueError(msg)\n\n    # \u8fd4\u56de\u5b9e\u4f8b\n    return serializer_cls()\n</code></pre>"},{"location":"en/api/serializers/#symphra_cache.serializers.BaseSerializer.deserialize","title":"<code>deserialize(data)</code>  <code>abstractmethod</code>","text":"<p>\u53cd\u5e8f\u5217\u5316\u5b57\u8282\u4e3a\u503c</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>bytes</code> <p>\u8981\u53cd\u5e8f\u5217\u5316\u7684\u5b57\u8282\u6570\u636e</p> required <p>Returns:</p> Type Description <code>CacheValue</code> <p>\u53cd\u5e8f\u5217\u5316\u540e\u7684\u503c</p> <p>Raises:</p> Type Description <code>CacheSerializationError</code> <p>\u53cd\u5e8f\u5217\u5316\u5931\u8d25</p> Source code in <code>src/symphra_cache/serializers.py</code> <pre><code>@abstractmethod\ndef deserialize(self, data: bytes) -&gt; CacheValue:\n    \"\"\"\n    \u53cd\u5e8f\u5217\u5316\u5b57\u8282\u4e3a\u503c\n\n    Args:\n        data: \u8981\u53cd\u5e8f\u5217\u5316\u7684\u5b57\u8282\u6570\u636e\n\n    Returns:\n        \u53cd\u5e8f\u5217\u5316\u540e\u7684\u503c\n\n    Raises:\n        CacheSerializationError: \u53cd\u5e8f\u5217\u5316\u5931\u8d25\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"en/api/serializers/#symphra_cache.serializers.BaseSerializer.serialize","title":"<code>serialize(value)</code>  <code>abstractmethod</code>","text":"<p>\u5e8f\u5217\u5316\u503c\u4e3a\u5b57\u8282</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>CacheValue</code> <p>\u8981\u5e8f\u5217\u5316\u7684\u503c</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>\u5e8f\u5217\u5316\u540e\u7684\u5b57\u8282\u6570\u636e</p> <p>Raises:</p> Type Description <code>CacheSerializationError</code> <p>\u5e8f\u5217\u5316\u5931\u8d25</p> Source code in <code>src/symphra_cache/serializers.py</code> <pre><code>@abstractmethod\ndef serialize(self, value: CacheValue) -&gt; bytes:\n    \"\"\"\n    \u5e8f\u5217\u5316\u503c\u4e3a\u5b57\u8282\n\n    Args:\n        value: \u8981\u5e8f\u5217\u5316\u7684\u503c\n\n    Returns:\n        \u5e8f\u5217\u5316\u540e\u7684\u5b57\u8282\u6570\u636e\n\n    Raises:\n        CacheSerializationError: \u5e8f\u5217\u5316\u5931\u8d25\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"en/api/serializers/#symphra_cache.serializers.JSONSerializer.deserialize","title":"<code>deserialize(data)</code>","text":"<p>\u4ece JSON \u5b57\u8282\u53cd\u5e8f\u5217\u5316\u503c</p> Source code in <code>src/symphra_cache/serializers.py</code> <pre><code>def deserialize(self, data: bytes) -&gt; CacheValue:\n    \"\"\"\u4ece JSON \u5b57\u8282\u53cd\u5e8f\u5217\u5316\u503c\"\"\"\n    try:\n        json_str = data.decode(\"utf-8\")\n        return json.loads(json_str)\n    except (json.JSONDecodeError, UnicodeDecodeError) as e:\n        msg = f\"JSON \u53cd\u5e8f\u5217\u5316\u5931\u8d25: {e}\"\n        raise CacheSerializationError(msg) from e\n</code></pre>"},{"location":"en/api/serializers/#symphra_cache.serializers.JSONSerializer.serialize","title":"<code>serialize(value)</code>","text":"<p>\u5c06\u503c\u5e8f\u5217\u5316\u4e3a JSON \u5b57\u8282</p> Source code in <code>src/symphra_cache/serializers.py</code> <pre><code>def serialize(self, value: CacheValue) -&gt; bytes:\n    \"\"\"\u5c06\u503c\u5e8f\u5217\u5316\u4e3a JSON \u5b57\u8282\"\"\"\n    try:\n        # \u4f7f\u7528 ensure_ascii=False \u652f\u6301\u4e2d\u6587\u7b49 Unicode \u5b57\u7b26\n        json_str = json.dumps(value, ensure_ascii=False)\n        return json_str.encode(\"utf-8\")\n    except (TypeError, ValueError) as e:\n        msg = f\"JSON \u5e8f\u5217\u5316\u5931\u8d25: {e}\"\n        raise CacheSerializationError(msg) from e\n</code></pre>"},{"location":"en/api/serializers/#symphra_cache.serializers.PickleSerializer.deserialize","title":"<code>deserialize(data)</code>","text":"<p>\u4ece Pickle \u5b57\u8282\u53cd\u5e8f\u5217\u5316\u503c</p> Source code in <code>src/symphra_cache/serializers.py</code> <pre><code>def deserialize(self, data: bytes) -&gt; CacheValue:\n    \"\"\"\u4ece Pickle \u5b57\u8282\u53cd\u5e8f\u5217\u5316\u503c\"\"\"\n    try:\n        return pickle.loads(data)  # noqa: S301\n    except (pickle.UnpicklingError, AttributeError, EOFError) as e:\n        msg = f\"Pickle \u53cd\u5e8f\u5217\u5316\u5931\u8d25: {e}\"\n        raise CacheSerializationError(msg) from e\n</code></pre>"},{"location":"en/api/serializers/#symphra_cache.serializers.PickleSerializer.serialize","title":"<code>serialize(value)</code>","text":"<p>\u5c06\u503c\u5e8f\u5217\u5316\u4e3a Pickle \u5b57\u8282</p> Source code in <code>src/symphra_cache/serializers.py</code> <pre><code>def serialize(self, value: CacheValue) -&gt; bytes:\n    \"\"\"\u5c06\u503c\u5e8f\u5217\u5316\u4e3a Pickle \u5b57\u8282\"\"\"\n    try:\n        # \u4f7f\u7528\u534f\u8bae 5\uff08Python 3.8+\uff0c\u6027\u80fd\u6700\u4f18\uff09\n        return pickle.dumps(value, protocol=pickle.HIGHEST_PROTOCOL)\n    except (pickle.PicklingError, TypeError) as e:\n        msg = f\"Pickle \u5e8f\u5217\u5316\u5931\u8d25: {e}\"\n        raise CacheSerializationError(msg) from e\n</code></pre>"},{"location":"en/api/serializers/#symphra_cache.serializers.MessagePackSerializer.__init__","title":"<code>__init__()</code>","text":"<p>\u521d\u59cb\u5316 MessagePack \u5e8f\u5217\u5316\u5668</p> Source code in <code>src/symphra_cache/serializers.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"\u521d\u59cb\u5316 MessagePack \u5e8f\u5217\u5316\u5668\"\"\"\n    try:\n        import msgpack\n\n        self._msgpack = msgpack\n    except ImportError as e:\n        msg = \"MessagePack \u5e8f\u5217\u5316\u9700\u8981\u5b89\u88c5 msgpack: pip install msgpack\"\n        raise ImportError(msg) from e\n</code></pre>"},{"location":"en/api/serializers/#symphra_cache.serializers.MessagePackSerializer.deserialize","title":"<code>deserialize(data)</code>","text":"<p>\u4ece MessagePack \u5b57\u8282\u53cd\u5e8f\u5217\u5316\u503c</p> Source code in <code>src/symphra_cache/serializers.py</code> <pre><code>def deserialize(self, data: bytes) -&gt; CacheValue:\n    \"\"\"\u4ece MessagePack \u5b57\u8282\u53cd\u5e8f\u5217\u5316\u503c\"\"\"\n    try:\n        return self._msgpack.unpackb(data, raw=False)\n    except (self._msgpack.UnpackException, ValueError) as e:\n        msg = f\"MessagePack \u53cd\u5e8f\u5217\u5316\u5931\u8d25: {e}\"\n        raise CacheSerializationError(msg) from e\n</code></pre>"},{"location":"en/api/serializers/#symphra_cache.serializers.MessagePackSerializer.serialize","title":"<code>serialize(value)</code>","text":"<p>\u5c06\u503c\u5e8f\u5217\u5316\u4e3a MessagePack \u5b57\u8282</p> Source code in <code>src/symphra_cache/serializers.py</code> <pre><code>def serialize(self, value: CacheValue) -&gt; bytes:\n    \"\"\"\u5c06\u503c\u5e8f\u5217\u5316\u4e3a MessagePack \u5b57\u8282\"\"\"\n    try:\n        return self._msgpack.packb(value, use_bin_type=True)\n    except (self._msgpack.PackException, TypeError) as e:\n        msg = f\"MessagePack \u5e8f\u5217\u5316\u5931\u8d25: {e}\"\n        raise CacheSerializationError(msg) from e\n</code></pre>"},{"location":"en/api/serializers/#symphra_cache.serializers.get_serializer--_1","title":"\u6216\u4f7f\u7528\u5b57\u7b26\u4e32","text":"<p>serializer = get_serializer(\"json\")</p>"},{"location":"en/api/types/","title":"Types and Enums","text":"<p>Core enums and type aliases used across the library.</p> <p>               Bases: <code>str</code>, <code>Enum</code></p> <p>\u5e8f\u5217\u5316\u6a21\u5f0f\u679a\u4e3e</p> <p>\u5b9a\u4e49\u7f13\u5b58\u503c\u7684\u5e8f\u5217\u5316\u65b9\u5f0f\uff1a - JSON: JSON \u5e8f\u5217\u5316\uff0c\u8de8\u8bed\u8a00\u517c\u5bb9\uff0c\u4f46\u7c7b\u578b\u652f\u6301\u6709\u9650 - PICKLE: Python \u539f\u751f\u5e8f\u5217\u5316\uff0c\u652f\u6301\u6240\u6709 Python \u5bf9\u8c61 - MSGPACK: MessagePack \u5e8f\u5217\u5316\uff0c\u7d27\u51d1\u9ad8\u6548</p> Source code in <code>src/symphra_cache/types.py</code> <pre><code>class SerializationMode(str, Enum):\n    \"\"\"\n    \u5e8f\u5217\u5316\u6a21\u5f0f\u679a\u4e3e\n\n    \u5b9a\u4e49\u7f13\u5b58\u503c\u7684\u5e8f\u5217\u5316\u65b9\u5f0f\uff1a\n    - JSON: JSON \u5e8f\u5217\u5316\uff0c\u8de8\u8bed\u8a00\u517c\u5bb9\uff0c\u4f46\u7c7b\u578b\u652f\u6301\u6709\u9650\n    - PICKLE: Python \u539f\u751f\u5e8f\u5217\u5316\uff0c\u652f\u6301\u6240\u6709 Python \u5bf9\u8c61\n    - MSGPACK: MessagePack \u5e8f\u5217\u5316\uff0c\u7d27\u51d1\u9ad8\u6548\n    \"\"\"\n\n    JSON = \"json\"  # JSON \u5e8f\u5217\u5316\n    PICKLE = \"pickle\"  # Pickle \u5e8f\u5217\u5316\n    MSGPACK = \"msgpack\"  # MessagePack \u5e8f\u5217\u5316\n</code></pre> <p>               Bases: <code>str</code>, <code>Enum</code></p> <p>\u7f13\u5b58\u6dd8\u6c70\u7b56\u7565\u679a\u4e3e</p> <p>\u5b9a\u4e49\u7f13\u5b58\u6ee1\u65f6\u7684\u6dd8\u6c70\u89c4\u5219\uff1a - LRU: Least Recently Used\uff08\u6700\u8fd1\u6700\u5c11\u4f7f\u7528\uff09\uff0c\u6dd8\u6c70\u6700\u4e45\u672a\u8bbf\u95ee\u7684\u9879 - LFU: Least Frequently Used\uff08\u6700\u4e0d\u7ecf\u5e38\u4f7f\u7528\uff09\uff0c\u6dd8\u6c70\u8bbf\u95ee\u6b21\u6570\u6700\u5c11\u7684\u9879 - FIFO: First In First Out\uff08\u5148\u8fdb\u5148\u51fa\uff09\uff0c\u6dd8\u6c70\u6700\u65e9\u63d2\u5165\u7684\u9879</p> Source code in <code>src/symphra_cache/types.py</code> <pre><code>class EvictionPolicy(str, Enum):\n    \"\"\"\n    \u7f13\u5b58\u6dd8\u6c70\u7b56\u7565\u679a\u4e3e\n\n    \u5b9a\u4e49\u7f13\u5b58\u6ee1\u65f6\u7684\u6dd8\u6c70\u89c4\u5219\uff1a\n    - LRU: Least Recently Used\uff08\u6700\u8fd1\u6700\u5c11\u4f7f\u7528\uff09\uff0c\u6dd8\u6c70\u6700\u4e45\u672a\u8bbf\u95ee\u7684\u9879\n    - LFU: Least Frequently Used\uff08\u6700\u4e0d\u7ecf\u5e38\u4f7f\u7528\uff09\uff0c\u6dd8\u6c70\u8bbf\u95ee\u6b21\u6570\u6700\u5c11\u7684\u9879\n    - FIFO: First In First Out\uff08\u5148\u8fdb\u5148\u51fa\uff09\uff0c\u6dd8\u6c70\u6700\u65e9\u63d2\u5165\u7684\u9879\n    \"\"\"\n\n    LRU = \"lru\"  # \u6700\u8fd1\u6700\u5c11\u4f7f\u7528\n    LFU = \"lfu\"  # \u6700\u4e0d\u7ecf\u5e38\u4f7f\u7528\n    FIFO = \"fifo\"  # \u5148\u8fdb\u5148\u51fa\n</code></pre> <p>               Bases: <code>str</code>, <code>Enum</code></p> <p>\u540e\u7aef\u7c7b\u578b\u679a\u4e3e</p> <p>\u5b9a\u4e49\u652f\u6301\u7684\u7f13\u5b58\u540e\u7aef\u7c7b\u578b\uff1a - MEMORY: \u5185\u5b58\u540e\u7aef\uff0c\u9ad8\u6027\u80fd\uff0c\u8fdb\u7a0b\u91cd\u542f\u6570\u636e\u4e22\u5931 - FILE: \u6587\u4ef6\u540e\u7aef\uff0c\u6301\u4e45\u5316\uff0c\u652f\u6301\u70ed\u91cd\u8f7d - REDIS: Redis \u540e\u7aef\uff0c\u5206\u5e03\u5f0f\uff0c\u9ad8\u53ef\u7528</p> Source code in <code>src/symphra_cache/types.py</code> <pre><code>class BackendType(str, Enum):\n    \"\"\"\n    \u540e\u7aef\u7c7b\u578b\u679a\u4e3e\n\n    \u5b9a\u4e49\u652f\u6301\u7684\u7f13\u5b58\u540e\u7aef\u7c7b\u578b\uff1a\n    - MEMORY: \u5185\u5b58\u540e\u7aef\uff0c\u9ad8\u6027\u80fd\uff0c\u8fdb\u7a0b\u91cd\u542f\u6570\u636e\u4e22\u5931\n    - FILE: \u6587\u4ef6\u540e\u7aef\uff0c\u6301\u4e45\u5316\uff0c\u652f\u6301\u70ed\u91cd\u8f7d\n    - REDIS: Redis \u540e\u7aef\uff0c\u5206\u5e03\u5f0f\uff0c\u9ad8\u53ef\u7528\n    \"\"\"\n\n    MEMORY = \"memory\"  # \u5185\u5b58\u540e\u7aef\n    FILE = \"file\"  # \u6587\u4ef6\u540e\u7aef\n    REDIS = \"redis\"  # Redis \u540e\u7aef\n</code></pre>"},{"location":"en/api/warming/","title":"Warming","text":"<p>Preload and smart warming strategies to avoid cold-start penalties.</p> <p>\u7f13\u5b58\u9884\u70ed\u5668</p> <p>\u63d0\u4f9b\u591a\u79cd\u7f13\u5b58\u9884\u70ed\u7b56\u7565\uff0c\u652f\u6301\u624b\u52a8\u548c\u81ea\u52a8\u9884\u70ed\u3002</p> <p>\u9884\u70ed\u7b56\u7565\uff1a - \u624b\u52a8\u9884\u70ed\uff1a\u76f4\u63a5\u6307\u5b9a\u952e\u503c\u5bf9\u8fdb\u884c\u9884\u70ed - \u81ea\u52a8\u9884\u70ed\uff1a\u57fa\u4e8e\u5386\u53f2\u8bbf\u95ee\u6570\u636e\u667a\u80fd\u9884\u70ed - \u589e\u91cf\u9884\u70ed\uff1a\u5b9a\u671f\u68c0\u67e5\u5e76\u9884\u70ed\u70ed\u70b9\u6570\u636e</p> <p>\u4f7f\u7528\u793a\u4f8b\uff1a     &gt;&gt;&gt; warmer = CacheWarmer(cache)     &gt;&gt;&gt; await warmer.warm_up({\"key1\": \"value1\", \"key2\": \"value2\"})     &gt;&gt;&gt; await warmer.auto_warm_up()</p> Source code in <code>src/symphra_cache/warming.py</code> <pre><code>class CacheWarmer:\n    \"\"\"\n    \u7f13\u5b58\u9884\u70ed\u5668\n\n    \u63d0\u4f9b\u591a\u79cd\u7f13\u5b58\u9884\u70ed\u7b56\u7565\uff0c\u652f\u6301\u624b\u52a8\u548c\u81ea\u52a8\u9884\u70ed\u3002\n\n    \u9884\u70ed\u7b56\u7565\uff1a\n    - \u624b\u52a8\u9884\u70ed\uff1a\u76f4\u63a5\u6307\u5b9a\u952e\u503c\u5bf9\u8fdb\u884c\u9884\u70ed\n    - \u81ea\u52a8\u9884\u70ed\uff1a\u57fa\u4e8e\u5386\u53f2\u8bbf\u95ee\u6570\u636e\u667a\u80fd\u9884\u70ed\n    - \u589e\u91cf\u9884\u70ed\uff1a\u5b9a\u671f\u68c0\u67e5\u5e76\u9884\u70ed\u70ed\u70b9\u6570\u636e\n\n    \u4f7f\u7528\u793a\u4f8b\uff1a\n        &gt;&gt;&gt; warmer = CacheWarmer(cache)\n        &gt;&gt;&gt; await warmer.warm_up({\"key1\": \"value1\", \"key2\": \"value2\"})\n        &gt;&gt;&gt; await warmer.auto_warm_up()\n    \"\"\"\n\n    def __init__(\n        self,\n        cache: CacheManager,\n        strategy: str = \"manual\",\n        batch_size: int = 100,\n        ttl: int | None = None,\n    ) -&gt; None:\n        \"\"\"\n        \u521d\u59cb\u5316\u7f13\u5b58\u9884\u70ed\u5668\n\n        Args:\n            cache: \u7f13\u5b58\u7ba1\u7406\u5668\u5b9e\u4f8b\n            strategy: \u9884\u70ed\u7b56\u7565 (\"manual\", \"auto\", \"incremental\")\n            batch_size: \u6279\u91cf\u64cd\u4f5c\u5927\u5c0f\n            ttl: \u9884\u70ed\u6570\u636e\u7684\u9ed8\u8ba4\u8fc7\u671f\u65f6\u95f4\n        \"\"\"\n        self.cache = cache\n        self.strategy = strategy\n        self.batch_size = batch_size\n        self.ttl = ttl\n        self._warming_tasks: list[asyncio.Task[Any]] = []\n        self._access_patterns: dict[CacheKey, dict[str, Any]] = {}\n        self._last_warm_up_time = time.time()\n\n    async def warm_up(\n        self,\n        data: dict[CacheKey, CacheValue],\n        ttl: int | None = None,\n        batch_size: int | None = None,\n    ) -&gt; None:\n        \"\"\"\n        \u624b\u52a8\u9884\u70ed\u7f13\u5b58\n\n        Args:\n            data: \u8981\u9884\u70ed\u7684\u952e\u503c\u5bf9\u6570\u636e\n            ttl: \u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u4f7f\u7528\u9ed8\u8ba4\u503c\n            batch_size: \u6279\u91cf\u5927\u5c0f\uff0cNone \u4f7f\u7528\u9ed8\u8ba4\u503c\n        \"\"\"\n        ttl = ttl if ttl is not None else self.ttl\n        batch_size = batch_size if batch_size is not None else self.batch_size\n\n        if not data:\n            return\n\n        # \u6279\u91cf\u9884\u70ed\uff0c\u907f\u514d\u4e00\u6b21\u6027\u64cd\u4f5c\u8fc7\u591a\u6570\u636e\n        keys = list(data.keys())\n        for i in range(0, len(keys), batch_size):\n            batch_keys = keys[i : i + batch_size]\n            batch_data = {key: data[key] for key in batch_keys}\n\n            # \u6279\u91cf\u8bbe\u7f6e\u7f13\u5b58\n            await self.cache.aset_many(batch_data, ttl=ttl)\n\n            # \u77ed\u6682\u4f11\u7720\u907f\u514d\u963b\u585e\n            if i + batch_size &lt; len(keys):\n                await asyncio.sleep(0.01)\n\n        self._last_warm_up_time = time.time()\n\n    async def auto_warm_up(\n        self,\n        data_source: Callable[[], dict[CacheKey, CacheValue]],\n        ttl: int | None = None,\n    ) -&gt; None:\n        \"\"\"\n        \u81ea\u52a8\u9884\u70ed\u7f13\u5b58\n\n        \u57fa\u4e8e\u6570\u636e\u6e90\u51fd\u6570\u81ea\u52a8\u9884\u70ed\u7f13\u5b58\u3002\n\n        Args:\n            data_source: \u6570\u636e\u6e90\u51fd\u6570\uff0c\u8fd4\u56de\u8981\u9884\u70ed\u7684\u6570\u636e\n            ttl: \u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\n        \"\"\"\n        try:\n            data = await asyncio.to_thread(data_source)\n            await self.warm_up(data, ttl=ttl)\n        except Exception as e:\n            # \u8bb0\u5f55\u9519\u8bef\u4f46\u4e0d\u4e2d\u65ad\u9884\u70ed\u8fc7\u7a0b\n            print(f\"\u81ea\u52a8\u9884\u70ed\u5931\u8d25: {e}\")\n\n    async def incremental_warm_up(\n        self,\n        hot_keys: list[CacheKey],\n        data_loader: Callable[[list[CacheKey]], dict[CacheKey, CacheValue]],\n        ttl: int | None = None,\n    ) -&gt; None:\n        \"\"\"\n        \u589e\u91cf\u9884\u70ed\n\n        \u9884\u70ed\u70ed\u70b9\u952e\uff0c\u9002\u7528\u4e8e\u5927\u6570\u636e\u96c6\u7684\u6e10\u8fdb\u5f0f\u9884\u70ed\u3002\n\n        Args:\n            hot_keys: \u70ed\u70b9\u952e\u5217\u8868\n            data_loader: \u6570\u636e\u52a0\u8f7d\u51fd\u6570\n            ttl: \u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\n        \"\"\"\n        if not hot_keys:\n            return\n\n        # \u5206\u6279\u5904\u7406\u70ed\u70b9\u952e\n        for i in range(0, len(hot_keys), self.batch_size):\n            batch_keys = hot_keys[i : i + self.batch_size]\n\n            try:\n                # \u52a0\u8f7d\u6570\u636e\n                data = await asyncio.to_thread(data_loader, batch_keys)\n\n                # \u9884\u70ed\u6570\u636e\n                await self.warm_up(data, ttl=ttl)\n\n                # \u8bb0\u5f55\u8bbf\u95ee\u6a21\u5f0f\n                for key in batch_keys:\n                    self._record_access_pattern(key)\n\n            except Exception as e:\n                print(f\"\u589e\u91cf\u9884\u70ed\u5931\u8d25 (\u6279\u6b21 {i // self.batch_size + 1}): {e}\")\n\n            # \u77ed\u6682\u4f11\u7720\n            if i + self.batch_size &lt; len(hot_keys):\n                await asyncio.sleep(0.1)\n\n    def _record_access_pattern(self, key: CacheKey) -&gt; None:\n        \"\"\"\n        \u8bb0\u5f55\u8bbf\u95ee\u6a21\u5f0f\n\n        Args:\n            key: \u88ab\u8bbf\u95ee\u7684\u7f13\u5b58\u952e\n        \"\"\"\n        current_time = time.time()\n        if key not in self._access_patterns:\n            self._access_patterns[key] = {\n                \"count\": 0,\n                \"first_access\": current_time,\n                \"last_access\": current_time,\n            }\n\n        pattern = self._access_patterns[key]\n        pattern[\"count\"] += 1\n        pattern[\"last_access\"] = current_time\n\n    def get_hot_keys(self, min_access_count: int = 5, hours: float = 1.0) -&gt; list[CacheKey]:\n        \"\"\"\n        \u83b7\u53d6\u70ed\u70b9\u952e\n\n        Args:\n            min_access_count: \u6700\u5c0f\u8bbf\u95ee\u6b21\u6570\n            hours: \u65f6\u95f4\u7a97\u53e3\uff08\u5c0f\u65f6\uff09\n\n        Returns:\n            \u70ed\u70b9\u952e\u5217\u8868\n        \"\"\"\n        current_time = time.time()\n        cutoff_time = current_time - (hours * 3600)\n\n        hot_keys = []\n        for key, pattern in self._access_patterns.items():\n            if pattern[\"count\"] &gt;= min_access_count and pattern[\"last_access\"] &gt;= cutoff_time:\n                hot_keys.append(key)\n\n        return hot_keys\n\n    async def start_background_warming(\n        self,\n        data_source: Callable[[], dict[CacheKey, CacheValue]],\n        interval: int = 3600,  # \u9ed8\u8ba41\u5c0f\u65f6\n    ) -&gt; None:\n        \"\"\"\n        \u542f\u52a8\u540e\u53f0\u9884\u70ed\u4efb\u52a1\n\n        Args:\n            data_source: \u6570\u636e\u6e90\u51fd\u6570\n            interval: \u9884\u70ed\u95f4\u9694\uff08\u79d2\uff09\n        \"\"\"\n\n        async def _background_warm_up() -&gt; None:\n            while True:\n                try:\n                    await self.auto_warm_up(data_source)\n                    await asyncio.sleep(interval)\n                except asyncio.CancelledError:\n                    break\n                except Exception as e:\n                    print(f\"\u540e\u53f0\u9884\u70ed\u4efb\u52a1\u5931\u8d25: {e}\")\n                    await asyncio.sleep(interval)\n\n        task = asyncio.create_task(_background_warm_up())\n        self._warming_tasks.append(task)\n\n    def stop_background_warming(self) -&gt; None:\n        \"\"\"\u505c\u6b62\u6240\u6709\u540e\u53f0\u9884\u70ed\u4efb\u52a1\"\"\"\n        for task in self._warming_tasks:\n            task.cancel()\n        self._warming_tasks.clear()\n\n    async def warm_up_from_file(\n        self,\n        file_path: str,\n        format: str = \"json\",\n        ttl: int | None = None,\n    ) -&gt; None:\n        \"\"\"\n        \u4ece\u6587\u4ef6\u9884\u70ed\u7f13\u5b58\n\n        \u652f\u6301 JSON\u3001CSV \u683c\u5f0f\u3002\n\n        Args:\n            file_path: \u6587\u4ef6\u8def\u5f84\n            format: \u6587\u4ef6\u683c\u5f0f (\"json\", \"csv\")\n            ttl: \u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\n        \"\"\"\n        import csv\n        import json\n\n        data: dict[CacheKey, CacheValue] = {}\n\n        try:\n            if format.lower() == \"json\":\n                with open(file_path, encoding=\"utf-8\") as f:\n                    file_data = json.load(f)\n                    data.update(file_data)\n\n            elif format.lower() == \"csv\":\n                with open(file_path, encoding=\"utf-8\") as f:\n                    reader = csv.DictReader(f)\n                    for row in reader:\n                        if \"key\" in row and \"value\" in row:\n                            data[row[\"key\"]] = row[\"value\"]\n\n            else:\n                raise ValueError(f\"\u4e0d\u652f\u6301\u7684\u6587\u4ef6\u683c\u5f0f: {format}\")\n\n            await self.warm_up(data, ttl=ttl)\n\n        except Exception as e:\n            raise RuntimeError(f\"\u4ece\u6587\u4ef6\u9884\u70ed\u5931\u8d25: {e}\") from e\n\n    async def warm_up_with_ttl_map(\n        self,\n        data: dict[CacheKey, CacheValue],\n        ttl_map: dict[CacheKey, int],\n    ) -&gt; None:\n        \"\"\"\n        \u4f7f\u7528 TTL \u6620\u5c04\u9884\u70ed\u7f13\u5b58\n\n        \u4e0d\u540c\u952e\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u8fc7\u671f\u65f6\u95f4\u3002\n\n        Args:\n            data: \u8981\u9884\u70ed\u7684\u6570\u636e\n            ttl_map: \u6bcf\u4e2a\u952e\u7684 TTL \u6620\u5c04\n        \"\"\"\n        if not data:\n            return\n\n        # \u6309 TTL \u5206\u7ec4\n        ttl_groups: dict[int, dict[CacheKey, CacheValue]] = {}\n        for key, value in data.items():\n            ttl = ttl_map.get(key, self.ttl)\n            if ttl not in ttl_groups:\n                ttl_groups[ttl] = {}\n            ttl_groups[ttl][key] = value\n\n        # \u5206\u7ec4\u9884\u70ed\n        for group_ttl, group_data in ttl_groups.items():\n            await self.warm_up(group_data, ttl=group_ttl)\n\n    def get_warming_stats(self) -&gt; dict[str, Any]:\n        \"\"\"\n        \u83b7\u53d6\u9884\u70ed\u7edf\u8ba1\u4fe1\u606f\n\n        Returns:\n            \u7edf\u8ba1\u4fe1\u606f\u5b57\u5178\n        \"\"\"\n        return {\n            \"strategy\": self.strategy,\n            \"batch_size\": self.batch_size,\n            \"last_warm_up_time\": self._last_warm_up_time,\n            \"total_keys_warmed\": len(self._access_patterns),\n            \"hot_keys_count\": len(self.get_hot_keys()),\n            \"background_tasks_count\": len(self._warming_tasks),\n        }\n\n    async def close(self) -&gt; None:\n        \"\"\"\n        \u5173\u95ed\u9884\u70ed\u5668\uff0c\u6e05\u7406\u8d44\u6e90\n        \"\"\"\n        self.stop_background_warming()\n\n        # \u7b49\u5f85\u6240\u6709\u4efb\u52a1\u5b8c\u6210\n        if self._warming_tasks:\n            await asyncio.gather(*self._warming_tasks, return_exceptions=True)\n\n    def __repr__(self) -&gt; str:\n        \"\"\"\n        \u5b57\u7b26\u4e32\u8868\u793a\n        \"\"\"\n        return f\"CacheWarmer(strategy={self.strategy!r}, cache={self.cache!r})\"\n</code></pre> <p>               Bases: <code>CacheWarmer</code></p> <p>\u667a\u80fd\u7f13\u5b58\u9884\u70ed\u5668</p> <p>\u57fa\u4e8e\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u9884\u6d4b\u70ed\u70b9\u6570\u636e\u8fdb\u884c\u9884\u70ed\u3002</p> <p>\u7279\u6027\uff1a - \u65f6\u95f4\u5e8f\u5217\u5206\u6790 - \u8bbf\u95ee\u6a21\u5f0f\u5b66\u4e60 - \u81ea\u9002\u5e94\u9884\u70ed\u7b56\u7565 - \u6027\u80fd\u76d1\u63a7\u548c\u4f18\u5316</p> Source code in <code>src/symphra_cache/warming.py</code> <pre><code>class SmartCacheWarmer(CacheWarmer):\n    \"\"\"\n    \u667a\u80fd\u7f13\u5b58\u9884\u70ed\u5668\n\n    \u57fa\u4e8e\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u9884\u6d4b\u70ed\u70b9\u6570\u636e\u8fdb\u884c\u9884\u70ed\u3002\n\n    \u7279\u6027\uff1a\n    - \u65f6\u95f4\u5e8f\u5217\u5206\u6790\n    - \u8bbf\u95ee\u6a21\u5f0f\u5b66\u4e60\n    - \u81ea\u9002\u5e94\u9884\u70ed\u7b56\u7565\n    - \u6027\u80fd\u76d1\u63a7\u548c\u4f18\u5316\n    \"\"\"\n\n    def __init__(\n        self,\n        cache: CacheManager,\n        prediction_window: int = 24,  # \u9884\u6d4b\u7a97\u53e3\uff08\u5c0f\u65f6\uff09\n        learning_rate: float = 0.1,\n    ) -&gt; None:\n        \"\"\"\n        \u521d\u59cb\u5316\u667a\u80fd\u9884\u70ed\u5668\n\n        Args:\n            cache: \u7f13\u5b58\u7ba1\u7406\u5668\n            prediction_window: \u9884\u6d4b\u65f6\u95f4\u7a97\u53e3\uff08\u5c0f\u65f6\uff09\n            learning_rate: \u5b66\u4e60\u7387\n        \"\"\"\n        super().__init__(cache, strategy=\"smart\")\n        self.prediction_window = prediction_window\n        self.learning_rate = learning_rate\n        self._historical_data: list[dict[str, Any]] = []\n\n    def _analyze_access_patterns(self) -&gt; dict[CacheKey, float]:\n        \"\"\"\n        \u5206\u6790\u8bbf\u95ee\u6a21\u5f0f\uff0c\u9884\u6d4b\u70ed\u70b9\u6570\u636e\n\n        Returns:\n            \u952e\u7684\u70ed\u5ea6\u8bc4\u5206\u5b57\u5178\n        \"\"\"\n        if not self._access_patterns:\n            return {}\n\n        # \u7b80\u5355\u7684\u70ed\u5ea6\u8ba1\u7b97\uff1a\u57fa\u4e8e\u8bbf\u95ee\u9891\u7387\u548c\u6700\u8fd1\u8bbf\u95ee\u65f6\u95f4\n        current_time = time.time()\n        heat_scores: dict[CacheKey, float] = {}\n\n        for key, pattern in self._access_patterns.items():\n            access_count = pattern[\"count\"]\n            last_access = pattern[\"last_access\"]\n\n            # \u65f6\u95f4\u8870\u51cf\u56e0\u5b50\n            time_diff = current_time - last_access\n            time_factor = max(0, 1 - (time_diff / (3600 * 24)))  # 24\u5c0f\u65f6\u8870\u51cf\n\n            # \u70ed\u5ea6\u8bc4\u5206\n            heat_score = access_count * time_factor\n            heat_scores[key] = heat_score\n\n        return heat_scores\n\n    async def smart_warm_up(\n        self,\n        data_source: Callable[[list[CacheKey]], dict[CacheKey, CacheValue]],\n        top_k: int = 100,\n    ) -&gt; None:\n        \"\"\"\n        \u667a\u80fd\u9884\u70ed\n\n        \u57fa\u4e8e\u70ed\u5ea6\u5206\u6790\u9884\u70ed\u6700\u70ed\u7684 K \u4e2a\u952e\u3002\n\n        Args:\n            data_source: \u6570\u636e\u52a0\u8f7d\u51fd\u6570\n            top_k: \u9884\u70ed\u524d K \u4e2a\u70ed\u70b9\u952e\n        \"\"\"\n        # \u5206\u6790\u8bbf\u95ee\u6a21\u5f0f\n        heat_scores = self._analyze_access_patterns()\n\n        # \u83b7\u53d6\u6700\u70ed\u7684\u952e\n        sorted_keys = sorted(heat_scores.items(), key=lambda x: x[1], reverse=True)[:top_k]\n\n        hot_keys = [key for key, _ in sorted_keys]\n\n        if hot_keys:\n            # \u667a\u80fd\u9884\u70ed\n            await self.incremental_warm_up(hot_keys, data_source)\n\n    def record_cache_miss(self, key: CacheKey) -&gt; None:\n        \"\"\"\n        \u8bb0\u5f55\u7f13\u5b58\u672a\u547d\u4e2d\n\n        \u7528\u4e8e\u5b66\u4e60\u54ea\u4e9b\u6570\u636e\u5e94\u8be5\u88ab\u9884\u70ed\u3002\n\n        Args:\n            key: \u672a\u547d\u4e2d\u7684\u7f13\u5b58\u952e\n        \"\"\"\n        self._record_access_pattern(key)\n\n    def get_prediction_accuracy(self) -&gt; float:\n        \"\"\"\n        \u83b7\u53d6\u9884\u6d4b\u51c6\u786e\u7387\n\n        Returns:\n            \u51c6\u786e\u7387\uff080-1\u4e4b\u95f4\uff09\n        \"\"\"\n        # \u7b80\u5355\u7684\u51c6\u786e\u7387\u8ba1\u7b97\uff1a\u57fa\u4e8e\u7f13\u5b58\u547d\u4e2d\u7387\u63d0\u5347\n        if not self._historical_data:\n            return 0.0\n\n        # \u8fd9\u91cc\u53ef\u4ee5\u5b9e\u73b0\u66f4\u590d\u6742\u7684\u51c6\u786e\u7387\u8ba1\u7b97\u903b\u8f91\n        # \u6682\u65f6\u8fd4\u56de\u4e00\u4e2a\u7b80\u5355\u7684\u4f30\u7b97\u503c\n        return min(1.0, len(self._access_patterns) / 1000)\n</code></pre> <p>\u521b\u5efa\u7f13\u5b58\u9884\u70ed\u5668\u5de5\u5382\u51fd\u6570</p> <p>Parameters:</p> Name Type Description Default <code>cache</code> <code>CacheManager</code> <p>\u7f13\u5b58\u7ba1\u7406\u5668</p> required <code>strategy</code> <code>str</code> <p>\u9884\u70ed\u7b56\u7565</p> <code>'manual'</code> <code>**kwargs</code> <code>Any</code> <p>\u5176\u4ed6\u53c2\u6570</p> <code>{}</code> <p>Returns:</p> Type Description <code>CacheWarmer</code> <p>\u7f13\u5b58\u9884\u70ed\u5668\u5b9e\u4f8b</p> Source code in <code>src/symphra_cache/warming.py</code> <pre><code>def create_warmer(\n    cache: CacheManager,\n    strategy: str = \"manual\",\n    **kwargs: Any,\n) -&gt; CacheWarmer:\n    \"\"\"\n    \u521b\u5efa\u7f13\u5b58\u9884\u70ed\u5668\u5de5\u5382\u51fd\u6570\n\n    Args:\n        cache: \u7f13\u5b58\u7ba1\u7406\u5668\n        strategy: \u9884\u70ed\u7b56\u7565\n        **kwargs: \u5176\u4ed6\u53c2\u6570\n\n    Returns:\n        \u7f13\u5b58\u9884\u70ed\u5668\u5b9e\u4f8b\n    \"\"\"\n    if strategy == \"smart\":\n        return SmartCacheWarmer(cache, **kwargs)\n    else:\n        return CacheWarmer(cache, strategy=strategy, **kwargs)\n</code></pre>"},{"location":"en/api/warming/#symphra_cache.warming.CacheWarmer.__init__","title":"<code>__init__(cache, strategy='manual', batch_size=100, ttl=None)</code>","text":"<p>\u521d\u59cb\u5316\u7f13\u5b58\u9884\u70ed\u5668</p> <p>Parameters:</p> Name Type Description Default <code>cache</code> <code>CacheManager</code> <p>\u7f13\u5b58\u7ba1\u7406\u5668\u5b9e\u4f8b</p> required <code>strategy</code> <code>str</code> <p>\u9884\u70ed\u7b56\u7565 (\"manual\", \"auto\", \"incremental\")</p> <code>'manual'</code> <code>batch_size</code> <code>int</code> <p>\u6279\u91cf\u64cd\u4f5c\u5927\u5c0f</p> <code>100</code> <code>ttl</code> <code>int | None</code> <p>\u9884\u70ed\u6570\u636e\u7684\u9ed8\u8ba4\u8fc7\u671f\u65f6\u95f4</p> <code>None</code> Source code in <code>src/symphra_cache/warming.py</code> <pre><code>def __init__(\n    self,\n    cache: CacheManager,\n    strategy: str = \"manual\",\n    batch_size: int = 100,\n    ttl: int | None = None,\n) -&gt; None:\n    \"\"\"\n    \u521d\u59cb\u5316\u7f13\u5b58\u9884\u70ed\u5668\n\n    Args:\n        cache: \u7f13\u5b58\u7ba1\u7406\u5668\u5b9e\u4f8b\n        strategy: \u9884\u70ed\u7b56\u7565 (\"manual\", \"auto\", \"incremental\")\n        batch_size: \u6279\u91cf\u64cd\u4f5c\u5927\u5c0f\n        ttl: \u9884\u70ed\u6570\u636e\u7684\u9ed8\u8ba4\u8fc7\u671f\u65f6\u95f4\n    \"\"\"\n    self.cache = cache\n    self.strategy = strategy\n    self.batch_size = batch_size\n    self.ttl = ttl\n    self._warming_tasks: list[asyncio.Task[Any]] = []\n    self._access_patterns: dict[CacheKey, dict[str, Any]] = {}\n    self._last_warm_up_time = time.time()\n</code></pre>"},{"location":"en/api/warming/#symphra_cache.warming.CacheWarmer.__repr__","title":"<code>__repr__()</code>","text":"<p>\u5b57\u7b26\u4e32\u8868\u793a</p> Source code in <code>src/symphra_cache/warming.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"\n    \u5b57\u7b26\u4e32\u8868\u793a\n    \"\"\"\n    return f\"CacheWarmer(strategy={self.strategy!r}, cache={self.cache!r})\"\n</code></pre>"},{"location":"en/api/warming/#symphra_cache.warming.CacheWarmer.auto_warm_up","title":"<code>auto_warm_up(data_source, ttl=None)</code>  <code>async</code>","text":"<p>\u81ea\u52a8\u9884\u70ed\u7f13\u5b58</p> <p>\u57fa\u4e8e\u6570\u636e\u6e90\u51fd\u6570\u81ea\u52a8\u9884\u70ed\u7f13\u5b58\u3002</p> <p>Parameters:</p> Name Type Description Default <code>data_source</code> <code>Callable[[], dict[CacheKey, CacheValue]]</code> <p>\u6570\u636e\u6e90\u51fd\u6570\uff0c\u8fd4\u56de\u8981\u9884\u70ed\u7684\u6570\u636e</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09</p> <code>None</code> Source code in <code>src/symphra_cache/warming.py</code> <pre><code>async def auto_warm_up(\n    self,\n    data_source: Callable[[], dict[CacheKey, CacheValue]],\n    ttl: int | None = None,\n) -&gt; None:\n    \"\"\"\n    \u81ea\u52a8\u9884\u70ed\u7f13\u5b58\n\n    \u57fa\u4e8e\u6570\u636e\u6e90\u51fd\u6570\u81ea\u52a8\u9884\u70ed\u7f13\u5b58\u3002\n\n    Args:\n        data_source: \u6570\u636e\u6e90\u51fd\u6570\uff0c\u8fd4\u56de\u8981\u9884\u70ed\u7684\u6570\u636e\n        ttl: \u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\n    \"\"\"\n    try:\n        data = await asyncio.to_thread(data_source)\n        await self.warm_up(data, ttl=ttl)\n    except Exception as e:\n        # \u8bb0\u5f55\u9519\u8bef\u4f46\u4e0d\u4e2d\u65ad\u9884\u70ed\u8fc7\u7a0b\n        print(f\"\u81ea\u52a8\u9884\u70ed\u5931\u8d25: {e}\")\n</code></pre>"},{"location":"en/api/warming/#symphra_cache.warming.CacheWarmer.close","title":"<code>close()</code>  <code>async</code>","text":"<p>\u5173\u95ed\u9884\u70ed\u5668\uff0c\u6e05\u7406\u8d44\u6e90</p> Source code in <code>src/symphra_cache/warming.py</code> <pre><code>async def close(self) -&gt; None:\n    \"\"\"\n    \u5173\u95ed\u9884\u70ed\u5668\uff0c\u6e05\u7406\u8d44\u6e90\n    \"\"\"\n    self.stop_background_warming()\n\n    # \u7b49\u5f85\u6240\u6709\u4efb\u52a1\u5b8c\u6210\n    if self._warming_tasks:\n        await asyncio.gather(*self._warming_tasks, return_exceptions=True)\n</code></pre>"},{"location":"en/api/warming/#symphra_cache.warming.CacheWarmer.get_hot_keys","title":"<code>get_hot_keys(min_access_count=5, hours=1.0)</code>","text":"<p>\u83b7\u53d6\u70ed\u70b9\u952e</p> <p>Parameters:</p> Name Type Description Default <code>min_access_count</code> <code>int</code> <p>\u6700\u5c0f\u8bbf\u95ee\u6b21\u6570</p> <code>5</code> <code>hours</code> <code>float</code> <p>\u65f6\u95f4\u7a97\u53e3\uff08\u5c0f\u65f6\uff09</p> <code>1.0</code> <p>Returns:</p> Type Description <code>list[CacheKey]</code> <p>\u70ed\u70b9\u952e\u5217\u8868</p> Source code in <code>src/symphra_cache/warming.py</code> <pre><code>def get_hot_keys(self, min_access_count: int = 5, hours: float = 1.0) -&gt; list[CacheKey]:\n    \"\"\"\n    \u83b7\u53d6\u70ed\u70b9\u952e\n\n    Args:\n        min_access_count: \u6700\u5c0f\u8bbf\u95ee\u6b21\u6570\n        hours: \u65f6\u95f4\u7a97\u53e3\uff08\u5c0f\u65f6\uff09\n\n    Returns:\n        \u70ed\u70b9\u952e\u5217\u8868\n    \"\"\"\n    current_time = time.time()\n    cutoff_time = current_time - (hours * 3600)\n\n    hot_keys = []\n    for key, pattern in self._access_patterns.items():\n        if pattern[\"count\"] &gt;= min_access_count and pattern[\"last_access\"] &gt;= cutoff_time:\n            hot_keys.append(key)\n\n    return hot_keys\n</code></pre>"},{"location":"en/api/warming/#symphra_cache.warming.CacheWarmer.get_warming_stats","title":"<code>get_warming_stats()</code>","text":"<p>\u83b7\u53d6\u9884\u70ed\u7edf\u8ba1\u4fe1\u606f</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>\u7edf\u8ba1\u4fe1\u606f\u5b57\u5178</p> Source code in <code>src/symphra_cache/warming.py</code> <pre><code>def get_warming_stats(self) -&gt; dict[str, Any]:\n    \"\"\"\n    \u83b7\u53d6\u9884\u70ed\u7edf\u8ba1\u4fe1\u606f\n\n    Returns:\n        \u7edf\u8ba1\u4fe1\u606f\u5b57\u5178\n    \"\"\"\n    return {\n        \"strategy\": self.strategy,\n        \"batch_size\": self.batch_size,\n        \"last_warm_up_time\": self._last_warm_up_time,\n        \"total_keys_warmed\": len(self._access_patterns),\n        \"hot_keys_count\": len(self.get_hot_keys()),\n        \"background_tasks_count\": len(self._warming_tasks),\n    }\n</code></pre>"},{"location":"en/api/warming/#symphra_cache.warming.CacheWarmer.incremental_warm_up","title":"<code>incremental_warm_up(hot_keys, data_loader, ttl=None)</code>  <code>async</code>","text":"<p>\u589e\u91cf\u9884\u70ed</p> <p>\u9884\u70ed\u70ed\u70b9\u952e\uff0c\u9002\u7528\u4e8e\u5927\u6570\u636e\u96c6\u7684\u6e10\u8fdb\u5f0f\u9884\u70ed\u3002</p> <p>Parameters:</p> Name Type Description Default <code>hot_keys</code> <code>list[CacheKey]</code> <p>\u70ed\u70b9\u952e\u5217\u8868</p> required <code>data_loader</code> <code>Callable[[list[CacheKey]], dict[CacheKey, CacheValue]]</code> <p>\u6570\u636e\u52a0\u8f7d\u51fd\u6570</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09</p> <code>None</code> Source code in <code>src/symphra_cache/warming.py</code> <pre><code>async def incremental_warm_up(\n    self,\n    hot_keys: list[CacheKey],\n    data_loader: Callable[[list[CacheKey]], dict[CacheKey, CacheValue]],\n    ttl: int | None = None,\n) -&gt; None:\n    \"\"\"\n    \u589e\u91cf\u9884\u70ed\n\n    \u9884\u70ed\u70ed\u70b9\u952e\uff0c\u9002\u7528\u4e8e\u5927\u6570\u636e\u96c6\u7684\u6e10\u8fdb\u5f0f\u9884\u70ed\u3002\n\n    Args:\n        hot_keys: \u70ed\u70b9\u952e\u5217\u8868\n        data_loader: \u6570\u636e\u52a0\u8f7d\u51fd\u6570\n        ttl: \u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\n    \"\"\"\n    if not hot_keys:\n        return\n\n    # \u5206\u6279\u5904\u7406\u70ed\u70b9\u952e\n    for i in range(0, len(hot_keys), self.batch_size):\n        batch_keys = hot_keys[i : i + self.batch_size]\n\n        try:\n            # \u52a0\u8f7d\u6570\u636e\n            data = await asyncio.to_thread(data_loader, batch_keys)\n\n            # \u9884\u70ed\u6570\u636e\n            await self.warm_up(data, ttl=ttl)\n\n            # \u8bb0\u5f55\u8bbf\u95ee\u6a21\u5f0f\n            for key in batch_keys:\n                self._record_access_pattern(key)\n\n        except Exception as e:\n            print(f\"\u589e\u91cf\u9884\u70ed\u5931\u8d25 (\u6279\u6b21 {i // self.batch_size + 1}): {e}\")\n\n        # \u77ed\u6682\u4f11\u7720\n        if i + self.batch_size &lt; len(hot_keys):\n            await asyncio.sleep(0.1)\n</code></pre>"},{"location":"en/api/warming/#symphra_cache.warming.CacheWarmer.start_background_warming","title":"<code>start_background_warming(data_source, interval=3600)</code>  <code>async</code>","text":"<p>\u542f\u52a8\u540e\u53f0\u9884\u70ed\u4efb\u52a1</p> <p>Parameters:</p> Name Type Description Default <code>data_source</code> <code>Callable[[], dict[CacheKey, CacheValue]]</code> <p>\u6570\u636e\u6e90\u51fd\u6570</p> required <code>interval</code> <code>int</code> <p>\u9884\u70ed\u95f4\u9694\uff08\u79d2\uff09</p> <code>3600</code> Source code in <code>src/symphra_cache/warming.py</code> <pre><code>async def start_background_warming(\n    self,\n    data_source: Callable[[], dict[CacheKey, CacheValue]],\n    interval: int = 3600,  # \u9ed8\u8ba41\u5c0f\u65f6\n) -&gt; None:\n    \"\"\"\n    \u542f\u52a8\u540e\u53f0\u9884\u70ed\u4efb\u52a1\n\n    Args:\n        data_source: \u6570\u636e\u6e90\u51fd\u6570\n        interval: \u9884\u70ed\u95f4\u9694\uff08\u79d2\uff09\n    \"\"\"\n\n    async def _background_warm_up() -&gt; None:\n        while True:\n            try:\n                await self.auto_warm_up(data_source)\n                await asyncio.sleep(interval)\n            except asyncio.CancelledError:\n                break\n            except Exception as e:\n                print(f\"\u540e\u53f0\u9884\u70ed\u4efb\u52a1\u5931\u8d25: {e}\")\n                await asyncio.sleep(interval)\n\n    task = asyncio.create_task(_background_warm_up())\n    self._warming_tasks.append(task)\n</code></pre>"},{"location":"en/api/warming/#symphra_cache.warming.CacheWarmer.stop_background_warming","title":"<code>stop_background_warming()</code>","text":"<p>\u505c\u6b62\u6240\u6709\u540e\u53f0\u9884\u70ed\u4efb\u52a1</p> Source code in <code>src/symphra_cache/warming.py</code> <pre><code>def stop_background_warming(self) -&gt; None:\n    \"\"\"\u505c\u6b62\u6240\u6709\u540e\u53f0\u9884\u70ed\u4efb\u52a1\"\"\"\n    for task in self._warming_tasks:\n        task.cancel()\n    self._warming_tasks.clear()\n</code></pre>"},{"location":"en/api/warming/#symphra_cache.warming.CacheWarmer.warm_up","title":"<code>warm_up(data, ttl=None, batch_size=None)</code>  <code>async</code>","text":"<p>\u624b\u52a8\u9884\u70ed\u7f13\u5b58</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict[CacheKey, CacheValue]</code> <p>\u8981\u9884\u70ed\u7684\u952e\u503c\u5bf9\u6570\u636e</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u4f7f\u7528\u9ed8\u8ba4\u503c</p> <code>None</code> <code>batch_size</code> <code>int | None</code> <p>\u6279\u91cf\u5927\u5c0f\uff0cNone \u4f7f\u7528\u9ed8\u8ba4\u503c</p> <code>None</code> Source code in <code>src/symphra_cache/warming.py</code> <pre><code>async def warm_up(\n    self,\n    data: dict[CacheKey, CacheValue],\n    ttl: int | None = None,\n    batch_size: int | None = None,\n) -&gt; None:\n    \"\"\"\n    \u624b\u52a8\u9884\u70ed\u7f13\u5b58\n\n    Args:\n        data: \u8981\u9884\u70ed\u7684\u952e\u503c\u5bf9\u6570\u636e\n        ttl: \u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u4f7f\u7528\u9ed8\u8ba4\u503c\n        batch_size: \u6279\u91cf\u5927\u5c0f\uff0cNone \u4f7f\u7528\u9ed8\u8ba4\u503c\n    \"\"\"\n    ttl = ttl if ttl is not None else self.ttl\n    batch_size = batch_size if batch_size is not None else self.batch_size\n\n    if not data:\n        return\n\n    # \u6279\u91cf\u9884\u70ed\uff0c\u907f\u514d\u4e00\u6b21\u6027\u64cd\u4f5c\u8fc7\u591a\u6570\u636e\n    keys = list(data.keys())\n    for i in range(0, len(keys), batch_size):\n        batch_keys = keys[i : i + batch_size]\n        batch_data = {key: data[key] for key in batch_keys}\n\n        # \u6279\u91cf\u8bbe\u7f6e\u7f13\u5b58\n        await self.cache.aset_many(batch_data, ttl=ttl)\n\n        # \u77ed\u6682\u4f11\u7720\u907f\u514d\u963b\u585e\n        if i + batch_size &lt; len(keys):\n            await asyncio.sleep(0.01)\n\n    self._last_warm_up_time = time.time()\n</code></pre>"},{"location":"en/api/warming/#symphra_cache.warming.CacheWarmer.warm_up_from_file","title":"<code>warm_up_from_file(file_path, format='json', ttl=None)</code>  <code>async</code>","text":"<p>\u4ece\u6587\u4ef6\u9884\u70ed\u7f13\u5b58</p> <p>\u652f\u6301 JSON\u3001CSV \u683c\u5f0f\u3002</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>\u6587\u4ef6\u8def\u5f84</p> required <code>format</code> <code>str</code> <p>\u6587\u4ef6\u683c\u5f0f (\"json\", \"csv\")</p> <code>'json'</code> <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09</p> <code>None</code> Source code in <code>src/symphra_cache/warming.py</code> <pre><code>async def warm_up_from_file(\n    self,\n    file_path: str,\n    format: str = \"json\",\n    ttl: int | None = None,\n) -&gt; None:\n    \"\"\"\n    \u4ece\u6587\u4ef6\u9884\u70ed\u7f13\u5b58\n\n    \u652f\u6301 JSON\u3001CSV \u683c\u5f0f\u3002\n\n    Args:\n        file_path: \u6587\u4ef6\u8def\u5f84\n        format: \u6587\u4ef6\u683c\u5f0f (\"json\", \"csv\")\n        ttl: \u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\n    \"\"\"\n    import csv\n    import json\n\n    data: dict[CacheKey, CacheValue] = {}\n\n    try:\n        if format.lower() == \"json\":\n            with open(file_path, encoding=\"utf-8\") as f:\n                file_data = json.load(f)\n                data.update(file_data)\n\n        elif format.lower() == \"csv\":\n            with open(file_path, encoding=\"utf-8\") as f:\n                reader = csv.DictReader(f)\n                for row in reader:\n                    if \"key\" in row and \"value\" in row:\n                        data[row[\"key\"]] = row[\"value\"]\n\n        else:\n            raise ValueError(f\"\u4e0d\u652f\u6301\u7684\u6587\u4ef6\u683c\u5f0f: {format}\")\n\n        await self.warm_up(data, ttl=ttl)\n\n    except Exception as e:\n        raise RuntimeError(f\"\u4ece\u6587\u4ef6\u9884\u70ed\u5931\u8d25: {e}\") from e\n</code></pre>"},{"location":"en/api/warming/#symphra_cache.warming.CacheWarmer.warm_up_with_ttl_map","title":"<code>warm_up_with_ttl_map(data, ttl_map)</code>  <code>async</code>","text":"<p>\u4f7f\u7528 TTL \u6620\u5c04\u9884\u70ed\u7f13\u5b58</p> <p>\u4e0d\u540c\u952e\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u8fc7\u671f\u65f6\u95f4\u3002</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict[CacheKey, CacheValue]</code> <p>\u8981\u9884\u70ed\u7684\u6570\u636e</p> required <code>ttl_map</code> <code>dict[CacheKey, int]</code> <p>\u6bcf\u4e2a\u952e\u7684 TTL \u6620\u5c04</p> required Source code in <code>src/symphra_cache/warming.py</code> <pre><code>async def warm_up_with_ttl_map(\n    self,\n    data: dict[CacheKey, CacheValue],\n    ttl_map: dict[CacheKey, int],\n) -&gt; None:\n    \"\"\"\n    \u4f7f\u7528 TTL \u6620\u5c04\u9884\u70ed\u7f13\u5b58\n\n    \u4e0d\u540c\u952e\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u8fc7\u671f\u65f6\u95f4\u3002\n\n    Args:\n        data: \u8981\u9884\u70ed\u7684\u6570\u636e\n        ttl_map: \u6bcf\u4e2a\u952e\u7684 TTL \u6620\u5c04\n    \"\"\"\n    if not data:\n        return\n\n    # \u6309 TTL \u5206\u7ec4\n    ttl_groups: dict[int, dict[CacheKey, CacheValue]] = {}\n    for key, value in data.items():\n        ttl = ttl_map.get(key, self.ttl)\n        if ttl not in ttl_groups:\n            ttl_groups[ttl] = {}\n        ttl_groups[ttl][key] = value\n\n    # \u5206\u7ec4\u9884\u70ed\n    for group_ttl, group_data in ttl_groups.items():\n        await self.warm_up(group_data, ttl=group_ttl)\n</code></pre>"},{"location":"en/api/warming/#symphra_cache.warming.SmartCacheWarmer.__init__","title":"<code>__init__(cache, prediction_window=24, learning_rate=0.1)</code>","text":"<p>\u521d\u59cb\u5316\u667a\u80fd\u9884\u70ed\u5668</p> <p>Parameters:</p> Name Type Description Default <code>cache</code> <code>CacheManager</code> <p>\u7f13\u5b58\u7ba1\u7406\u5668</p> required <code>prediction_window</code> <code>int</code> <p>\u9884\u6d4b\u65f6\u95f4\u7a97\u53e3\uff08\u5c0f\u65f6\uff09</p> <code>24</code> <code>learning_rate</code> <code>float</code> <p>\u5b66\u4e60\u7387</p> <code>0.1</code> Source code in <code>src/symphra_cache/warming.py</code> <pre><code>def __init__(\n    self,\n    cache: CacheManager,\n    prediction_window: int = 24,  # \u9884\u6d4b\u7a97\u53e3\uff08\u5c0f\u65f6\uff09\n    learning_rate: float = 0.1,\n) -&gt; None:\n    \"\"\"\n    \u521d\u59cb\u5316\u667a\u80fd\u9884\u70ed\u5668\n\n    Args:\n        cache: \u7f13\u5b58\u7ba1\u7406\u5668\n        prediction_window: \u9884\u6d4b\u65f6\u95f4\u7a97\u53e3\uff08\u5c0f\u65f6\uff09\n        learning_rate: \u5b66\u4e60\u7387\n    \"\"\"\n    super().__init__(cache, strategy=\"smart\")\n    self.prediction_window = prediction_window\n    self.learning_rate = learning_rate\n    self._historical_data: list[dict[str, Any]] = []\n</code></pre>"},{"location":"en/api/warming/#symphra_cache.warming.SmartCacheWarmer.get_prediction_accuracy","title":"<code>get_prediction_accuracy()</code>","text":"<p>\u83b7\u53d6\u9884\u6d4b\u51c6\u786e\u7387</p> <p>Returns:</p> Type Description <code>float</code> <p>\u51c6\u786e\u7387\uff080-1\u4e4b\u95f4\uff09</p> Source code in <code>src/symphra_cache/warming.py</code> <pre><code>def get_prediction_accuracy(self) -&gt; float:\n    \"\"\"\n    \u83b7\u53d6\u9884\u6d4b\u51c6\u786e\u7387\n\n    Returns:\n        \u51c6\u786e\u7387\uff080-1\u4e4b\u95f4\uff09\n    \"\"\"\n    # \u7b80\u5355\u7684\u51c6\u786e\u7387\u8ba1\u7b97\uff1a\u57fa\u4e8e\u7f13\u5b58\u547d\u4e2d\u7387\u63d0\u5347\n    if not self._historical_data:\n        return 0.0\n\n    # \u8fd9\u91cc\u53ef\u4ee5\u5b9e\u73b0\u66f4\u590d\u6742\u7684\u51c6\u786e\u7387\u8ba1\u7b97\u903b\u8f91\n    # \u6682\u65f6\u8fd4\u56de\u4e00\u4e2a\u7b80\u5355\u7684\u4f30\u7b97\u503c\n    return min(1.0, len(self._access_patterns) / 1000)\n</code></pre>"},{"location":"en/api/warming/#symphra_cache.warming.SmartCacheWarmer.record_cache_miss","title":"<code>record_cache_miss(key)</code>","text":"<p>\u8bb0\u5f55\u7f13\u5b58\u672a\u547d\u4e2d</p> <p>\u7528\u4e8e\u5b66\u4e60\u54ea\u4e9b\u6570\u636e\u5e94\u8be5\u88ab\u9884\u70ed\u3002</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u672a\u547d\u4e2d\u7684\u7f13\u5b58\u952e</p> required Source code in <code>src/symphra_cache/warming.py</code> <pre><code>def record_cache_miss(self, key: CacheKey) -&gt; None:\n    \"\"\"\n    \u8bb0\u5f55\u7f13\u5b58\u672a\u547d\u4e2d\n\n    \u7528\u4e8e\u5b66\u4e60\u54ea\u4e9b\u6570\u636e\u5e94\u8be5\u88ab\u9884\u70ed\u3002\n\n    Args:\n        key: \u672a\u547d\u4e2d\u7684\u7f13\u5b58\u952e\n    \"\"\"\n    self._record_access_pattern(key)\n</code></pre>"},{"location":"en/api/warming/#symphra_cache.warming.SmartCacheWarmer.smart_warm_up","title":"<code>smart_warm_up(data_source, top_k=100)</code>  <code>async</code>","text":"<p>\u667a\u80fd\u9884\u70ed</p> <p>\u57fa\u4e8e\u70ed\u5ea6\u5206\u6790\u9884\u70ed\u6700\u70ed\u7684 K \u4e2a\u952e\u3002</p> <p>Parameters:</p> Name Type Description Default <code>data_source</code> <code>Callable[[list[CacheKey]], dict[CacheKey, CacheValue]]</code> <p>\u6570\u636e\u52a0\u8f7d\u51fd\u6570</p> required <code>top_k</code> <code>int</code> <p>\u9884\u70ed\u524d K \u4e2a\u70ed\u70b9\u952e</p> <code>100</code> Source code in <code>src/symphra_cache/warming.py</code> <pre><code>async def smart_warm_up(\n    self,\n    data_source: Callable[[list[CacheKey]], dict[CacheKey, CacheValue]],\n    top_k: int = 100,\n) -&gt; None:\n    \"\"\"\n    \u667a\u80fd\u9884\u70ed\n\n    \u57fa\u4e8e\u70ed\u5ea6\u5206\u6790\u9884\u70ed\u6700\u70ed\u7684 K \u4e2a\u952e\u3002\n\n    Args:\n        data_source: \u6570\u636e\u52a0\u8f7d\u51fd\u6570\n        top_k: \u9884\u70ed\u524d K \u4e2a\u70ed\u70b9\u952e\n    \"\"\"\n    # \u5206\u6790\u8bbf\u95ee\u6a21\u5f0f\n    heat_scores = self._analyze_access_patterns()\n\n    # \u83b7\u53d6\u6700\u70ed\u7684\u952e\n    sorted_keys = sorted(heat_scores.items(), key=lambda x: x[1], reverse=True)[:top_k]\n\n    hot_keys = [key for key, _ in sorted_keys]\n\n    if hot_keys:\n        # \u667a\u80fd\u9884\u70ed\n        await self.incremental_warm_up(hot_keys, data_source)\n</code></pre>"},{"location":"en/api/backends/file/","title":"FileBackend","text":"<p>SQLite-based persistent cache backend with hot-reload support.</p> <p>               Bases: <code>BaseBackend</code></p> <p>\u6587\u4ef6\u7f13\u5b58\u540e\u7aef</p> <p>\u57fa\u4e8e SQLite \u5b9e\u73b0\u7684\u6301\u4e45\u5316\u7f13\u5b58\uff0c\u652f\u6301\u70ed\u91cd\u8f7d\u548c LRU \u6dd8\u6c70\u3002</p> <p>\u67b6\u6784\u8bbe\u8ba1\uff1a - \u5b58\u50a8\u5f15\u64ce\uff1aSQLite\uff08WAL \u6a21\u5f0f\uff0c\u9ad8\u5e76\u53d1\uff09 - \u8868\u7ed3\u6784\uff1acache_entries(key PRIMARY KEY, value BLOB, expires_at REAL, last_access REAL) - LRU \u5b9e\u73b0\uff1a\u57fa\u4e8e last_access \u5b57\u6bb5\uff0c\u5b9a\u671f\u6e05\u7406 - \u5e8f\u5217\u5316\uff1a\u53ef\u914d\u7f6e\uff08JSON/Pickle/MessagePack\uff09</p> <p>\u6027\u80fd\u7279\u70b9\uff1a - \u8bfb\u53d6\uff1a~1-5ms\uff08\u53d6\u51b3\u4e8e\u78c1\u76d8\u6027\u80fd\uff09 - \u5199\u5165\uff1a~1-5ms\uff08WAL \u6a21\u5f0f\u5f02\u6b65\uff09 - \u70ed\u91cd\u8f7d\uff1a\u6587\u4ef6 mtime \u68c0\u6d4b\uff0c\u589e\u91cf\u52a0\u8f7d</p> <p>\u4f7f\u7528\u793a\u4f8b\uff1a     &gt;&gt;&gt; backend = FileBackend(     ...     db_path=Path(\"./cache.db\"),     ...     max_size=10000,     ...     serialization_mode=SerializationMode.PICKLE,     ... )     &gt;&gt;&gt; backend.set(\"user:123\", {\"name\": \"Alice\"}, ttl=3600)</p> Source code in <code>src/symphra_cache/backends/file.py</code> <pre><code>class FileBackend(BaseBackend):\n    \"\"\"\n    \u6587\u4ef6\u7f13\u5b58\u540e\u7aef\n\n    \u57fa\u4e8e SQLite \u5b9e\u73b0\u7684\u6301\u4e45\u5316\u7f13\u5b58\uff0c\u652f\u6301\u70ed\u91cd\u8f7d\u548c LRU \u6dd8\u6c70\u3002\n\n    \u67b6\u6784\u8bbe\u8ba1\uff1a\n    - \u5b58\u50a8\u5f15\u64ce\uff1aSQLite\uff08WAL \u6a21\u5f0f\uff0c\u9ad8\u5e76\u53d1\uff09\n    - \u8868\u7ed3\u6784\uff1acache_entries(key PRIMARY KEY, value BLOB, expires_at REAL, last_access REAL)\n    - LRU \u5b9e\u73b0\uff1a\u57fa\u4e8e last_access \u5b57\u6bb5\uff0c\u5b9a\u671f\u6e05\u7406\n    - \u5e8f\u5217\u5316\uff1a\u53ef\u914d\u7f6e\uff08JSON/Pickle/MessagePack\uff09\n\n    \u6027\u80fd\u7279\u70b9\uff1a\n    - \u8bfb\u53d6\uff1a~1-5ms\uff08\u53d6\u51b3\u4e8e\u78c1\u76d8\u6027\u80fd\uff09\n    - \u5199\u5165\uff1a~1-5ms\uff08WAL \u6a21\u5f0f\u5f02\u6b65\uff09\n    - \u70ed\u91cd\u8f7d\uff1a\u6587\u4ef6 mtime \u68c0\u6d4b\uff0c\u589e\u91cf\u52a0\u8f7d\n\n    \u4f7f\u7528\u793a\u4f8b\uff1a\n        &gt;&gt;&gt; backend = FileBackend(\n        ...     db_path=Path(\"./cache.db\"),\n        ...     max_size=10000,\n        ...     serialization_mode=SerializationMode.PICKLE,\n        ... )\n        &gt;&gt;&gt; backend.set(\"user:123\", {\"name\": \"Alice\"}, ttl=3600)\n    \"\"\"\n\n    def __init__(\n        self,\n        db_path: Path | str = \"./symphra_cache.db\",\n        max_size: int = 10000,\n        serialization_mode: SerializationMode | str = SerializationMode.PICKLE,\n        cleanup_interval: int = 300,  # 5 \u5206\u949f\n        enable_hot_reload: bool = False,\n    ) -&gt; None:\n        \"\"\"\n        \u521d\u59cb\u5316\u6587\u4ef6\u540e\u7aef\n\n        Args:\n            db_path: SQLite \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84\n            max_size: \u6700\u5927\u7f13\u5b58\u6761\u6570\uff08\u8d85\u8fc7\u89e6\u53d1 LRU \u6dd8\u6c70\uff09\n            serialization_mode: \u5e8f\u5217\u5316\u6a21\u5f0f\n            cleanup_interval: \u6e05\u7406\u95f4\u9694\uff08\u79d2\uff09\n            enable_hot_reload: \u662f\u5426\u542f\u7528\u70ed\u91cd\u8f7d\uff08\u5f00\u53d1\u6a21\u5f0f\uff09\n\n        \u793a\u4f8b\uff1a\n            &gt;&gt;&gt; backend = FileBackend(\n            ...     db_path=\"./dev_cache.db\",\n            ...     enable_hot_reload=True,  # \u5f00\u53d1\u73af\u5883\n            ... )\n        \"\"\"\n        self._db_path = Path(db_path)\n        self._max_size = max_size\n        self._serializer = get_serializer(serialization_mode)\n        self._cleanup_interval = cleanup_interval\n        self._enable_hot_reload = enable_hot_reload\n\n        # \u7ebf\u7a0b\u9501\uff08\u4fdd\u62a4\u540c\u6b65\u64cd\u4f5c\uff09\n        self._lock = threading.RLock()\n\n        # \u521d\u59cb\u5316\u6570\u636e\u5e93\n        self._init_database()\n\n        # \u542f\u52a8\u540e\u53f0\u6e05\u7406\u4efb\u52a1\n        self._cleanup_thread: threading.Thread | None = None\n        self._stop_cleanup = threading.Event()\n        self._start_cleanup_task()\n\n        # \u70ed\u91cd\u8f7d\u76f8\u5173\n        self._last_reload_time = time.time()\n        self._db_mtime = self._get_db_mtime()\n\n    # ========== \u6570\u636e\u5e93\u521d\u59cb\u5316 ==========\n\n    def _init_database(self) -&gt; None:\n        \"\"\"\n        \u521d\u59cb\u5316 SQLite \u6570\u636e\u5e93\n\n        \u521b\u5efa\u8868\u7ed3\u6784\u548c\u7d22\u5f15\uff0c\u542f\u7528 WAL \u6a21\u5f0f\u3002\n        \"\"\"\n        # \u786e\u4fdd\u7236\u76ee\u5f55\u5b58\u5728\n        self._db_path.parent.mkdir(parents=True, exist_ok=True)\n\n        with sqlite3.connect(self._db_path) as conn:\n            # \u542f\u7528 WAL \u6a21\u5f0f\uff08Write-Ahead Logging\uff09\n            # \u63d0\u5347\u5e76\u53d1\u6027\u80fd\uff0c\u5141\u8bb8\u8bfb\u5199\u5e76\u884c\n            conn.execute(\"PRAGMA journal_mode=WAL\")\n\n            # \u542f\u7528\u5916\u952e\u7ea6\u675f\n            conn.execute(\"PRAGMA foreign_keys=ON\")\n\n            # \u521b\u5efa\u7f13\u5b58\u8868\n            conn.execute(\n                \"\"\"\n                CREATE TABLE IF NOT EXISTS cache_entries (\n                    key TEXT PRIMARY KEY,\n                    value BLOB NOT NULL,\n                    expires_at REAL,  -- NULL \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n                    last_access REAL NOT NULL,\n                    created_at REAL NOT NULL\n                )\n            \"\"\"\n            )\n\n            # \u521b\u5efa\u7d22\u5f15\uff08\u4f18\u5316 TTL \u6e05\u7406\u548c LRU \u6dd8\u6c70\uff09\n            conn.execute(\n                \"\"\"\n                CREATE INDEX IF NOT EXISTS idx_expires_at\n                ON cache_entries(expires_at)\n                WHERE expires_at IS NOT NULL\n            \"\"\"\n            )\n\n            conn.execute(\n                \"\"\"\n                CREATE INDEX IF NOT EXISTS idx_last_access\n                ON cache_entries(last_access)\n            \"\"\"\n            )\n\n            conn.commit()\n\n    # ========== \u540c\u6b65\u57fa\u7840\u64cd\u4f5c ==========\n\n    def get(self, key: CacheKey) -&gt; CacheValue | None:\n        \"\"\"\n        \u540c\u6b65\u83b7\u53d6\u7f13\u5b58\u503c\n\n        \u5b9e\u73b0\u7ec6\u8282\uff1a\n        1. \u67e5\u8be2\u6570\u636e\u5e93\n        2. \u68c0\u67e5 TTL \u662f\u5426\u8fc7\u671f\n        3. \u66f4\u65b0 last_access\uff08LRU\uff09\n        4. \u53cd\u5e8f\u5217\u5316\u8fd4\u56de\n\n        Args:\n            key: \u7f13\u5b58\u952e\n\n        Returns:\n            \u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u8fd4\u56de None\n        \"\"\"\n        # \u70ed\u91cd\u8f7d\u68c0\u6d4b\n        if self._enable_hot_reload:\n            self._check_hot_reload()\n\n        with self._lock:\n            conn = sqlite3.connect(self._db_path)\n            try:\n                cursor = conn.execute(\n                    \"SELECT value, expires_at FROM cache_entries WHERE key = ?\",\n                    (str(key),),\n                )\n                row = cursor.fetchone()\n\n                if row is None:\n                    return None\n\n                value_bytes, expires_at = row\n\n                # \u68c0\u67e5\u662f\u5426\u8fc7\u671f\n                if expires_at is not None and time.time() &gt; expires_at:\n                    # \u5df2\u8fc7\u671f\uff0c\u5220\u9664\n                    conn.execute(\"DELETE FROM cache_entries WHERE key = ?\", (str(key),))\n                    conn.commit()\n                    return None\n\n                # \u66f4\u65b0 last_access\uff08LRU\uff09\n                conn.execute(\n                    \"UPDATE cache_entries SET last_access = ? WHERE key = ?\",\n                    (time.time(), str(key)),\n                )\n                conn.commit()\n\n                # \u53cd\u5e8f\u5217\u5316\n                return self._serializer.deserialize(value_bytes)\n\n            finally:\n                conn.close()\n\n    async def aget(self, key: CacheKey) -&gt; CacheValue | None:\n        \"\"\"\n        \u5f02\u6b65\u83b7\u53d6\u7f13\u5b58\u503c\n\n        \u4f7f\u7528 aiosqlite \u5b9e\u73b0\u771f\u6b63\u7684\u5f02\u6b65 I/O\u3002\n        \"\"\"\n        # \u70ed\u91cd\u8f7d\u68c0\u6d4b\n        if self._enable_hot_reload:\n            self._check_hot_reload()\n\n        async with aiosqlite.connect(self._db_path) as conn:\n            cursor = await conn.execute(\n                \"SELECT value, expires_at FROM cache_entries WHERE key = ?\",\n                (str(key),),\n            )\n            row = await cursor.fetchone()\n\n            if row is None:\n                return None\n\n            value_bytes, expires_at = row\n\n            # \u68c0\u67e5\u8fc7\u671f\n            if expires_at is not None and time.time() &gt; expires_at:\n                await conn.execute(\"DELETE FROM cache_entries WHERE key = ?\", (str(key),))\n                await conn.commit()\n                return None\n\n            # \u66f4\u65b0 last_access\n            await conn.execute(\n                \"UPDATE cache_entries SET last_access = ? WHERE key = ?\",\n                (time.time(), str(key)),\n            )\n            await conn.commit()\n\n            return self._serializer.deserialize(value_bytes)\n\n    def set(\n        self,\n        key: CacheKey,\n        value: CacheValue,\n        ttl: int | None = None,\n        ex: bool = False,\n        nx: bool = False,\n    ) -&gt; bool:\n        \"\"\"\n        \u8bbe\u7f6e\u7f13\u5b58\u503c\n\n        Args:\n            key: \u7f13\u5b58\u952e\n            value: \u7f13\u5b58\u503c\n            ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2)\n            ex: \u4fdd\u7559\u53c2\u6570\n            nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n        Returns:\n            \u662f\u5426\u8bbe\u7f6e\u6210\u529f\n        \"\"\"\n        with self._lock:\n            conn = sqlite3.connect(self._db_path)\n            try:\n                # \u5e8f\u5217\u5316\u503c\n                serialized_value = self._serializer.serialize(value)\n\n                # \u8ba1\u7b97\u8fc7\u671f\u65f6\u95f4\n                now = time.time()\n                expires_at = None if ttl is None else now + ttl\n\n                # NX \u6a21\u5f0f\u68c0\u67e5\n                if nx:\n                    cursor = conn.execute(\n                        \"SELECT COUNT(*) FROM cache_entries WHERE key = ? AND (expires_at IS NULL OR expires_at &gt; ?)\",\n                        (key, now),\n                    )\n                    if cursor.fetchone()[0] &gt; 0:\n                        return False  # \u952e\u5df2\u5b58\u5728\u4e14\u672a\u8fc7\u671f\n\n                # \u4f7f\u7528 INSERT OR REPLACE\n                conn.execute(\n                    \"\"\"\n                    INSERT OR REPLACE INTO cache_entries\n                    (key, value, expires_at, last_access, created_at)\n                    VALUES (?, ?, ?, ?, ?)\n                    \"\"\",\n                    (key, serialized_value, expires_at, now, now),\n                )\n\n                # LRU \u6dd8\u6c70\u68c0\u67e5\n                self._evict_if_needed(conn)\n\n                # \u7edf\u4e00\u63d0\u4ea4\u6240\u6709\u53d8\u66f4\n                conn.commit()\n\n                return True\n\n            except Exception as e:\n                conn.rollback()\n                msg = f\"\u8bbe\u7f6e\u7f13\u5b58\u5931\u8d25: {key}\"\n                raise CacheBackendError(msg) from e\n            finally:\n                conn.close()\n\n    async def aset(\n        self,\n        key: CacheKey,\n        value: CacheValue,\n        ttl: int | None = None,\n        ex: bool = False,\n        nx: bool = False,\n    ) -&gt; bool:\n        \"\"\"\n        \u5f02\u6b65\u8bbe\u7f6e\u7f13\u5b58\u503c\n\n        Args:\n            key: \u7f13\u5b58\u952e\n            value: \u7f13\u5b58\u503c\n            ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2)\n            ex: \u4fdd\u7559\u53c2\u6570\n            nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n        Returns:\n            \u662f\u5426\u8bbe\u7f6e\u6210\u529f\n        \"\"\"\n        async with aiosqlite.connect(self._db_path) as conn:\n            try:\n                # \u5e8f\u5217\u5316\u503c\n                serialized_value = self._serializer.serialize(value)\n\n                # \u8ba1\u7b97\u8fc7\u671f\u65f6\u95f4\n                now = time.time()\n                expires_at = None if ttl is None else now + ttl\n\n                # NX \u6a21\u5f0f\u68c0\u67e5\n                if nx:\n                    cursor = await conn.execute(\n                        \"SELECT COUNT(*) FROM cache_entries WHERE key = ? AND (expires_at IS NULL OR expires_at &gt; ?)\",\n                        (key, now),\n                    )\n                    row = await cursor.fetchone()\n                    if row[0] &gt; 0:\n                        return False\n\n                # \u63d2\u5165\u6216\u66ff\u6362\n                await conn.execute(\n                    \"\"\"\n                    INSERT OR REPLACE INTO cache_entries\n                    (key, value, expires_at, last_access, created_at)\n                    VALUES (?, ?, ?, ?, ?)\n                    \"\"\",\n                    (key, serialized_value, expires_at, now, now),\n                )\n\n                # LRU \u6dd8\u6c70\n                await self._aevict_if_needed(conn)\n\n                # \u7edf\u4e00\u63d0\u4ea4\u6240\u6709\u53d8\u66f4\n                await conn.commit()\n\n                return True\n\n            except Exception as e:\n                await conn.rollback()\n                msg = f\"\u5f02\u6b65\u8bbe\u7f6e\u7f13\u5b58\u5931\u8d25: {key}\"\n                raise CacheBackendError(msg) from e\n\n    def delete(self, key: CacheKey) -&gt; bool:\n        \"\"\"\u5220\u9664\u7f13\u5b58\"\"\"\n        with self._lock:\n            conn = sqlite3.connect(self._db_path)\n            try:\n                cursor = conn.execute(\n                    \"DELETE FROM cache_entries WHERE key = ?\",\n                    (str(key),),\n                )\n                conn.commit()\n                return cursor.rowcount &gt; 0\n            finally:\n                conn.close()\n\n    async def adelete(self, key: CacheKey) -&gt; bool:\n        \"\"\"\u5f02\u6b65\u5220\u9664\u7f13\u5b58\"\"\"\n        async with aiosqlite.connect(self._db_path) as conn:\n            cursor = await conn.execute(\n                \"DELETE FROM cache_entries WHERE key = ?\",\n                (str(key),),\n            )\n            await conn.commit()\n            return cursor.rowcount &gt; 0\n\n    def exists(self, key: CacheKey) -&gt; bool:\n        \"\"\"\u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728\uff08\u672a\u8fc7\u671f\uff09\"\"\"\n        return self.get(key) is not None\n\n    def clear(self) -&gt; None:\n        \"\"\"\u6e05\u7a7a\u6240\u6709\u7f13\u5b58\"\"\"\n        with self._lock:\n            conn = sqlite3.connect(self._db_path)\n            try:\n                conn.execute(\"DELETE FROM cache_entries\")\n                conn.commit()\n            finally:\n                conn.close()\n\n    # ========== LRU \u6dd8\u6c70 ==========\n\n    def _evict_if_needed(self, conn: sqlite3.Connection) -&gt; None:\n        \"\"\"\n        LRU \u6dd8\u6c70(\u540c\u6b65\u7248\u672c)\n\n        \u5f53\u7f13\u5b58\u6570\u91cf\u8d85\u8fc7 max_size \u65f6,\u5220\u9664\u6700\u65e7\u7684\u6761\u76ee\u3002\n        \"\"\"\n        # \u83b7\u53d6\u5f53\u524d\u6761\u76ee\u6570\n        cursor = conn.execute(\"SELECT COUNT(*) FROM cache_entries\")\n        count = cursor.fetchone()[0]\n\n        if count &gt; self._max_size:\n            # \u8ba1\u7b97\u9700\u8981\u5220\u9664\u7684\u6570\u91cf\n            to_delete = count - self._max_size\n\n            # \u5220\u9664\u6700\u65e7\u7684\u6761\u76ee(last_access \u6700\u5c0f)\n            conn.execute(\n                \"\"\"\n                DELETE FROM cache_entries\n                WHERE key IN (\n                    SELECT key FROM cache_entries\n                    ORDER BY last_access ASC\n                    LIMIT ?\n                )\n                \"\"\",\n                (to_delete,),\n            )\n\n    async def _aevict_if_needed(self, conn: aiosqlite.Connection) -&gt; None:\n        \"\"\"LRU \u6dd8\u6c70(\u5f02\u6b65\u7248\u672c)\"\"\"\n        cursor = await conn.execute(\"SELECT COUNT(*) FROM cache_entries\")\n        row = await cursor.fetchone()\n        count = row[0] if row else 0\n\n        if count &gt; self._max_size:\n            to_delete = count - self._max_size\n\n            await conn.execute(\n                \"\"\"\n                DELETE FROM cache_entries\n                WHERE key IN (\n                    SELECT key FROM cache_entries\n                    ORDER BY last_access ASC\n                    LIMIT ?\n                )\n                \"\"\",\n                (to_delete,),\n            )\n\n    # ========== \u540e\u53f0\u6e05\u7406\u4efb\u52a1 ==========\n\n    def _start_cleanup_task(self) -&gt; None:\n        \"\"\"\u542f\u52a8\u540e\u53f0\u6e05\u7406\u4efb\u52a1\"\"\"\n\n        def _cleanup_loop() -&gt; None:\n            while not self._stop_cleanup.wait(self._cleanup_interval):\n                self._cleanup_expired()\n\n        self._cleanup_thread = threading.Thread(\n            target=_cleanup_loop,\n            daemon=True,\n            name=\"symphra-file-cache-cleanup\",\n        )\n        self._cleanup_thread.start()\n\n    def _cleanup_expired(self) -&gt; None:\n        \"\"\"\u6e05\u7406\u8fc7\u671f\u7684\u7f13\u5b58\u6761\u76ee\"\"\"\n        with self._lock:\n            conn = sqlite3.connect(self._db_path)\n            try:\n                now = time.time()\n                conn.execute(\n                    \"DELETE FROM cache_entries WHERE expires_at IS NOT NULL AND expires_at &lt; ?\",\n                    (now,),\n                )\n                conn.commit()\n            finally:\n                conn.close()\n\n    # ========== \u70ed\u91cd\u8f7d ==========\n\n    def _get_db_mtime(self) -&gt; float:\n        \"\"\"\u83b7\u53d6\u6570\u636e\u5e93\u6587\u4ef6\u7684\u4fee\u6539\u65f6\u95f4\"\"\"\n        if self._db_path.exists():\n            return self._db_path.stat().st_mtime\n        return 0.0\n\n    def _check_hot_reload(self) -&gt; None:\n        \"\"\"\n        \u68c0\u67e5\u6570\u636e\u5e93\u6587\u4ef6\u662f\u5426\u88ab\u5916\u90e8\u4fee\u6539\uff0c\u89e6\u53d1\u70ed\u91cd\u8f7d\n\n        \u9002\u7528\u4e8e\u5f00\u53d1\u73af\u5883\uff0c\u591a\u8fdb\u7a0b\u5171\u4eab\u7f13\u5b58\u65f6\u81ea\u52a8\u540c\u6b65\u3002\n        \"\"\"\n        current_mtime = self._get_db_mtime()\n        if current_mtime &gt; self._db_mtime:\n            # \u6587\u4ef6\u5df2\u66f4\u65b0\uff0c\u91cd\u65b0\u52a0\u8f7d\uff08\u8fd9\u91cc\u5b9e\u9645\u4e0a\u662f\u900f\u660e\u7684\uff0cSQLite \u81ea\u52a8\u540c\u6b65\uff09\n            self._db_mtime = current_mtime\n            self._last_reload_time = time.time()\n\n    # ========== \u8c03\u8bd5\u548c\u76d1\u63a7 ==========\n\n    # ========== \u6269\u5c55\u64cd\u4f5c ==========\n\n    def keys(\n        self,\n        pattern: str = \"*\",\n        cursor: int = 0,\n        count: int = 100,\n        max_keys: int | None = None,\n    ) -&gt; KeysPage:\n        \"\"\"\n        \u626b\u63cf\u7f13\u5b58\u952e\n\n        Args:\n            pattern: \u5339\u914d\u6a21\u5f0f\uff08\u652f\u6301\u901a\u914d\u7b26 * \u548c ?\uff09\n            cursor: \u6e38\u6807\u4f4d\u7f6e\uff08\u7528\u4e8e\u5206\u9875\uff0c\u6b64\u5b9e\u73b0\u4e2d\u57fa\u4e8e\u7d22\u5f15\uff09\n            count: \u6bcf\u9875\u8fd4\u56de\u7684\u952e\u6570\u91cf\n            max_keys: \u6700\u591a\u8fd4\u56de\u7684\u952e\u6570\u91cf\n\n        Returns:\n            KeysPage \u5bf9\u8c61\n        \"\"\"\n        import fnmatch\n\n        from ..types import KeysPage\n\n        with self._lock:\n            conn = sqlite3.connect(self._db_path)\n            try:\n                # \u83b7\u53d6\u6240\u6709\u672a\u8fc7\u671f\u7684\u952e\n                now = time.time()\n                cursor_obj = conn.execute(\n                    \"SELECT key FROM cache_entries WHERE expires_at IS NULL OR expires_at &gt; ? ORDER BY key\",\n                    (now,),\n                )\n                all_keys = [row[0] for row in cursor_obj.fetchall()]\n\n                # \u6a21\u5f0f\u5339\u914d\n                if pattern != \"*\":\n                    matched_keys = [k for k in all_keys if fnmatch.fnmatch(k, pattern)]\n                else:\n                    matched_keys = all_keys\n\n                # \u5206\u9875\u5904\u7406\n                total = len(matched_keys)\n                start_idx = cursor\n                end_idx = start_idx + count\n\n                if max_keys is not None:\n                    end_idx = min(end_idx, start_idx + max_keys)\n\n                page_keys = matched_keys[start_idx:end_idx]\n\n                # \u8ba1\u7b97\u4e0b\u4e00\u9875\u6e38\u6807\n                next_cursor = end_idx if end_idx &lt; total else 0\n                has_more = next_cursor &gt; 0\n\n                return KeysPage(\n                    keys=page_keys,\n                    cursor=next_cursor,\n                    has_more=has_more,\n                    total_scanned=len(page_keys),\n                )\n\n            finally:\n                conn.close()\n\n    async def akeys(\n        self,\n        pattern: str = \"*\",\n        cursor: int = 0,\n        count: int = 100,\n        max_keys: int | None = None,\n    ) -&gt; KeysPage:\n        \"\"\"\u5f02\u6b65\u626b\u63cf\u7f13\u5b58\u952e\"\"\"\n        return self.keys(pattern=pattern, cursor=cursor, count=count, max_keys=max_keys)\n\n    def close(self) -&gt; None:\n        \"\"\"\n        \u5173\u95ed\u540e\u7aef\u8fde\u63a5\uff08\u540c\u6b65\uff09\n\n        \u505c\u6b62\u540e\u53f0\u6e05\u7406\u7ebf\u7a0b\u3002\n        \"\"\"\n        self._stop_cleanup.set()\n        if self._cleanup_thread and self._cleanup_thread.is_alive():\n            self._cleanup_thread.join(timeout=1.0)\n\n    async def aclose(self) -&gt; None:\n        \"\"\"\n        \u5173\u95ed\u540e\u7aef\u8fde\u63a5\uff08\u5f02\u6b65\uff09\n        \"\"\"\n        self.close()\n\n    def __len__(self) -&gt; int:\n        \"\"\"\u83b7\u53d6\u5f53\u524d\u7f13\u5b58\u6761\u76ee\u6570\"\"\"\n        with self._lock:\n            conn = sqlite3.connect(self._db_path)\n            try:\n                cursor = conn.execute(\"SELECT COUNT(*) FROM cache_entries\")\n                return cursor.fetchone()[0]\n            finally:\n                conn.close()\n\n    def __repr__(self) -&gt; str:\n        \"\"\"\u5b57\u7b26\u4e32\u8868\u793a\"\"\"\n        return f\"FileBackend(db_path={self._db_path}, size={len(self)}, max_size={self._max_size})\"\n\n    def __del__(self) -&gt; None:\n        \"\"\"\u6790\u6784\u51fd\u6570\"\"\"\n        self._stop_cleanup.set()\n        if self._cleanup_thread and self._cleanup_thread.is_alive():\n            self._cleanup_thread.join(timeout=1.0)\n</code></pre>"},{"location":"en/api/backends/file/#symphra_cache.backends.file.FileBackend.__del__","title":"<code>__del__()</code>","text":"<p>\u6790\u6784\u51fd\u6570</p> Source code in <code>src/symphra_cache/backends/file.py</code> <pre><code>def __del__(self) -&gt; None:\n    \"\"\"\u6790\u6784\u51fd\u6570\"\"\"\n    self._stop_cleanup.set()\n    if self._cleanup_thread and self._cleanup_thread.is_alive():\n        self._cleanup_thread.join(timeout=1.0)\n</code></pre>"},{"location":"en/api/backends/file/#symphra_cache.backends.file.FileBackend.__init__","title":"<code>__init__(db_path='./symphra_cache.db', max_size=10000, serialization_mode=SerializationMode.PICKLE, cleanup_interval=300, enable_hot_reload=False)</code>","text":"<p>\u521d\u59cb\u5316\u6587\u4ef6\u540e\u7aef</p> <p>Parameters:</p> Name Type Description Default <code>db_path</code> <code>Path | str</code> <p>SQLite \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84</p> <code>'./symphra_cache.db'</code> <code>max_size</code> <code>int</code> <p>\u6700\u5927\u7f13\u5b58\u6761\u6570\uff08\u8d85\u8fc7\u89e6\u53d1 LRU \u6dd8\u6c70\uff09</p> <code>10000</code> <code>serialization_mode</code> <code>SerializationMode | str</code> <p>\u5e8f\u5217\u5316\u6a21\u5f0f</p> <code>PICKLE</code> <code>cleanup_interval</code> <code>int</code> <p>\u6e05\u7406\u95f4\u9694\uff08\u79d2\uff09</p> <code>300</code> <code>enable_hot_reload</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528\u70ed\u91cd\u8f7d\uff08\u5f00\u53d1\u6a21\u5f0f\uff09</p> <code>False</code> <p>\u793a\u4f8b\uff1a     &gt;&gt;&gt; backend = FileBackend(     ...     db_path=\"./dev_cache.db\",     ...     enable_hot_reload=True,  # \u5f00\u53d1\u73af\u5883     ... )</p> Source code in <code>src/symphra_cache/backends/file.py</code> <pre><code>def __init__(\n    self,\n    db_path: Path | str = \"./symphra_cache.db\",\n    max_size: int = 10000,\n    serialization_mode: SerializationMode | str = SerializationMode.PICKLE,\n    cleanup_interval: int = 300,  # 5 \u5206\u949f\n    enable_hot_reload: bool = False,\n) -&gt; None:\n    \"\"\"\n    \u521d\u59cb\u5316\u6587\u4ef6\u540e\u7aef\n\n    Args:\n        db_path: SQLite \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84\n        max_size: \u6700\u5927\u7f13\u5b58\u6761\u6570\uff08\u8d85\u8fc7\u89e6\u53d1 LRU \u6dd8\u6c70\uff09\n        serialization_mode: \u5e8f\u5217\u5316\u6a21\u5f0f\n        cleanup_interval: \u6e05\u7406\u95f4\u9694\uff08\u79d2\uff09\n        enable_hot_reload: \u662f\u5426\u542f\u7528\u70ed\u91cd\u8f7d\uff08\u5f00\u53d1\u6a21\u5f0f\uff09\n\n    \u793a\u4f8b\uff1a\n        &gt;&gt;&gt; backend = FileBackend(\n        ...     db_path=\"./dev_cache.db\",\n        ...     enable_hot_reload=True,  # \u5f00\u53d1\u73af\u5883\n        ... )\n    \"\"\"\n    self._db_path = Path(db_path)\n    self._max_size = max_size\n    self._serializer = get_serializer(serialization_mode)\n    self._cleanup_interval = cleanup_interval\n    self._enable_hot_reload = enable_hot_reload\n\n    # \u7ebf\u7a0b\u9501\uff08\u4fdd\u62a4\u540c\u6b65\u64cd\u4f5c\uff09\n    self._lock = threading.RLock()\n\n    # \u521d\u59cb\u5316\u6570\u636e\u5e93\n    self._init_database()\n\n    # \u542f\u52a8\u540e\u53f0\u6e05\u7406\u4efb\u52a1\n    self._cleanup_thread: threading.Thread | None = None\n    self._stop_cleanup = threading.Event()\n    self._start_cleanup_task()\n\n    # \u70ed\u91cd\u8f7d\u76f8\u5173\n    self._last_reload_time = time.time()\n    self._db_mtime = self._get_db_mtime()\n</code></pre>"},{"location":"en/api/backends/file/#symphra_cache.backends.file.FileBackend.__len__","title":"<code>__len__()</code>","text":"<p>\u83b7\u53d6\u5f53\u524d\u7f13\u5b58\u6761\u76ee\u6570</p> Source code in <code>src/symphra_cache/backends/file.py</code> <pre><code>def __len__(self) -&gt; int:\n    \"\"\"\u83b7\u53d6\u5f53\u524d\u7f13\u5b58\u6761\u76ee\u6570\"\"\"\n    with self._lock:\n        conn = sqlite3.connect(self._db_path)\n        try:\n            cursor = conn.execute(\"SELECT COUNT(*) FROM cache_entries\")\n            return cursor.fetchone()[0]\n        finally:\n            conn.close()\n</code></pre>"},{"location":"en/api/backends/file/#symphra_cache.backends.file.FileBackend.__repr__","title":"<code>__repr__()</code>","text":"<p>\u5b57\u7b26\u4e32\u8868\u793a</p> Source code in <code>src/symphra_cache/backends/file.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"\u5b57\u7b26\u4e32\u8868\u793a\"\"\"\n    return f\"FileBackend(db_path={self._db_path}, size={len(self)}, max_size={self._max_size})\"\n</code></pre>"},{"location":"en/api/backends/file/#symphra_cache.backends.file.FileBackend.aclose","title":"<code>aclose()</code>  <code>async</code>","text":"<p>\u5173\u95ed\u540e\u7aef\u8fde\u63a5\uff08\u5f02\u6b65\uff09</p> Source code in <code>src/symphra_cache/backends/file.py</code> <pre><code>async def aclose(self) -&gt; None:\n    \"\"\"\n    \u5173\u95ed\u540e\u7aef\u8fde\u63a5\uff08\u5f02\u6b65\uff09\n    \"\"\"\n    self.close()\n</code></pre>"},{"location":"en/api/backends/file/#symphra_cache.backends.file.FileBackend.adelete","title":"<code>adelete(key)</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u5220\u9664\u7f13\u5b58</p> Source code in <code>src/symphra_cache/backends/file.py</code> <pre><code>async def adelete(self, key: CacheKey) -&gt; bool:\n    \"\"\"\u5f02\u6b65\u5220\u9664\u7f13\u5b58\"\"\"\n    async with aiosqlite.connect(self._db_path) as conn:\n        cursor = await conn.execute(\n            \"DELETE FROM cache_entries WHERE key = ?\",\n            (str(key),),\n        )\n        await conn.commit()\n        return cursor.rowcount &gt; 0\n</code></pre>"},{"location":"en/api/backends/file/#symphra_cache.backends.file.FileBackend.aget","title":"<code>aget(key)</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u83b7\u53d6\u7f13\u5b58\u503c</p> <p>\u4f7f\u7528 aiosqlite \u5b9e\u73b0\u771f\u6b63\u7684\u5f02\u6b65 I/O\u3002</p> Source code in <code>src/symphra_cache/backends/file.py</code> <pre><code>async def aget(self, key: CacheKey) -&gt; CacheValue | None:\n    \"\"\"\n    \u5f02\u6b65\u83b7\u53d6\u7f13\u5b58\u503c\n\n    \u4f7f\u7528 aiosqlite \u5b9e\u73b0\u771f\u6b63\u7684\u5f02\u6b65 I/O\u3002\n    \"\"\"\n    # \u70ed\u91cd\u8f7d\u68c0\u6d4b\n    if self._enable_hot_reload:\n        self._check_hot_reload()\n\n    async with aiosqlite.connect(self._db_path) as conn:\n        cursor = await conn.execute(\n            \"SELECT value, expires_at FROM cache_entries WHERE key = ?\",\n            (str(key),),\n        )\n        row = await cursor.fetchone()\n\n        if row is None:\n            return None\n\n        value_bytes, expires_at = row\n\n        # \u68c0\u67e5\u8fc7\u671f\n        if expires_at is not None and time.time() &gt; expires_at:\n            await conn.execute(\"DELETE FROM cache_entries WHERE key = ?\", (str(key),))\n            await conn.commit()\n            return None\n\n        # \u66f4\u65b0 last_access\n        await conn.execute(\n            \"UPDATE cache_entries SET last_access = ? WHERE key = ?\",\n            (time.time(), str(key)),\n        )\n        await conn.commit()\n\n        return self._serializer.deserialize(value_bytes)\n</code></pre>"},{"location":"en/api/backends/file/#symphra_cache.backends.file.FileBackend.akeys","title":"<code>akeys(pattern='*', cursor=0, count=100, max_keys=None)</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u626b\u63cf\u7f13\u5b58\u952e</p> Source code in <code>src/symphra_cache/backends/file.py</code> <pre><code>async def akeys(\n    self,\n    pattern: str = \"*\",\n    cursor: int = 0,\n    count: int = 100,\n    max_keys: int | None = None,\n) -&gt; KeysPage:\n    \"\"\"\u5f02\u6b65\u626b\u63cf\u7f13\u5b58\u952e\"\"\"\n    return self.keys(pattern=pattern, cursor=cursor, count=count, max_keys=max_keys)\n</code></pre>"},{"location":"en/api/backends/file/#symphra_cache.backends.file.FileBackend.aset","title":"<code>aset(key, value, ttl=None, ex=False, nx=False)</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u8bbe\u7f6e\u7f13\u5b58\u503c</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <code>value</code> <code>CacheValue</code> <p>\u7f13\u5b58\u503c</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4(\u79d2)</p> <code>None</code> <code>ex</code> <code>bool</code> <p>\u4fdd\u7559\u53c2\u6570</p> <code>False</code> <code>nx</code> <code>bool</code> <p>\u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>\u662f\u5426\u8bbe\u7f6e\u6210\u529f</p> Source code in <code>src/symphra_cache/backends/file.py</code> <pre><code>async def aset(\n    self,\n    key: CacheKey,\n    value: CacheValue,\n    ttl: int | None = None,\n    ex: bool = False,\n    nx: bool = False,\n) -&gt; bool:\n    \"\"\"\n    \u5f02\u6b65\u8bbe\u7f6e\u7f13\u5b58\u503c\n\n    Args:\n        key: \u7f13\u5b58\u952e\n        value: \u7f13\u5b58\u503c\n        ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2)\n        ex: \u4fdd\u7559\u53c2\u6570\n        nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n    Returns:\n        \u662f\u5426\u8bbe\u7f6e\u6210\u529f\n    \"\"\"\n    async with aiosqlite.connect(self._db_path) as conn:\n        try:\n            # \u5e8f\u5217\u5316\u503c\n            serialized_value = self._serializer.serialize(value)\n\n            # \u8ba1\u7b97\u8fc7\u671f\u65f6\u95f4\n            now = time.time()\n            expires_at = None if ttl is None else now + ttl\n\n            # NX \u6a21\u5f0f\u68c0\u67e5\n            if nx:\n                cursor = await conn.execute(\n                    \"SELECT COUNT(*) FROM cache_entries WHERE key = ? AND (expires_at IS NULL OR expires_at &gt; ?)\",\n                    (key, now),\n                )\n                row = await cursor.fetchone()\n                if row[0] &gt; 0:\n                    return False\n\n            # \u63d2\u5165\u6216\u66ff\u6362\n            await conn.execute(\n                \"\"\"\n                INSERT OR REPLACE INTO cache_entries\n                (key, value, expires_at, last_access, created_at)\n                VALUES (?, ?, ?, ?, ?)\n                \"\"\",\n                (key, serialized_value, expires_at, now, now),\n            )\n\n            # LRU \u6dd8\u6c70\n            await self._aevict_if_needed(conn)\n\n            # \u7edf\u4e00\u63d0\u4ea4\u6240\u6709\u53d8\u66f4\n            await conn.commit()\n\n            return True\n\n        except Exception as e:\n            await conn.rollback()\n            msg = f\"\u5f02\u6b65\u8bbe\u7f6e\u7f13\u5b58\u5931\u8d25: {key}\"\n            raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"en/api/backends/file/#symphra_cache.backends.file.FileBackend.clear","title":"<code>clear()</code>","text":"<p>\u6e05\u7a7a\u6240\u6709\u7f13\u5b58</p> Source code in <code>src/symphra_cache/backends/file.py</code> <pre><code>def clear(self) -&gt; None:\n    \"\"\"\u6e05\u7a7a\u6240\u6709\u7f13\u5b58\"\"\"\n    with self._lock:\n        conn = sqlite3.connect(self._db_path)\n        try:\n            conn.execute(\"DELETE FROM cache_entries\")\n            conn.commit()\n        finally:\n            conn.close()\n</code></pre>"},{"location":"en/api/backends/file/#symphra_cache.backends.file.FileBackend.close","title":"<code>close()</code>","text":"<p>\u5173\u95ed\u540e\u7aef\u8fde\u63a5\uff08\u540c\u6b65\uff09</p> <p>\u505c\u6b62\u540e\u53f0\u6e05\u7406\u7ebf\u7a0b\u3002</p> Source code in <code>src/symphra_cache/backends/file.py</code> <pre><code>def close(self) -&gt; None:\n    \"\"\"\n    \u5173\u95ed\u540e\u7aef\u8fde\u63a5\uff08\u540c\u6b65\uff09\n\n    \u505c\u6b62\u540e\u53f0\u6e05\u7406\u7ebf\u7a0b\u3002\n    \"\"\"\n    self._stop_cleanup.set()\n    if self._cleanup_thread and self._cleanup_thread.is_alive():\n        self._cleanup_thread.join(timeout=1.0)\n</code></pre>"},{"location":"en/api/backends/file/#symphra_cache.backends.file.FileBackend.delete","title":"<code>delete(key)</code>","text":"<p>\u5220\u9664\u7f13\u5b58</p> Source code in <code>src/symphra_cache/backends/file.py</code> <pre><code>def delete(self, key: CacheKey) -&gt; bool:\n    \"\"\"\u5220\u9664\u7f13\u5b58\"\"\"\n    with self._lock:\n        conn = sqlite3.connect(self._db_path)\n        try:\n            cursor = conn.execute(\n                \"DELETE FROM cache_entries WHERE key = ?\",\n                (str(key),),\n            )\n            conn.commit()\n            return cursor.rowcount &gt; 0\n        finally:\n            conn.close()\n</code></pre>"},{"location":"en/api/backends/file/#symphra_cache.backends.file.FileBackend.exists","title":"<code>exists(key)</code>","text":"<p>\u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728\uff08\u672a\u8fc7\u671f\uff09</p> Source code in <code>src/symphra_cache/backends/file.py</code> <pre><code>def exists(self, key: CacheKey) -&gt; bool:\n    \"\"\"\u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728\uff08\u672a\u8fc7\u671f\uff09\"\"\"\n    return self.get(key) is not None\n</code></pre>"},{"location":"en/api/backends/file/#symphra_cache.backends.file.FileBackend.get","title":"<code>get(key)</code>","text":"<p>\u540c\u6b65\u83b7\u53d6\u7f13\u5b58\u503c</p> <p>\u5b9e\u73b0\u7ec6\u8282\uff1a 1. \u67e5\u8be2\u6570\u636e\u5e93 2. \u68c0\u67e5 TTL \u662f\u5426\u8fc7\u671f 3. \u66f4\u65b0 last_access\uff08LRU\uff09 4. \u53cd\u5e8f\u5217\u5316\u8fd4\u56de</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <p>Returns:</p> Type Description <code>CacheValue | None</code> <p>\u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u8fd4\u56de None</p> Source code in <code>src/symphra_cache/backends/file.py</code> <pre><code>def get(self, key: CacheKey) -&gt; CacheValue | None:\n    \"\"\"\n    \u540c\u6b65\u83b7\u53d6\u7f13\u5b58\u503c\n\n    \u5b9e\u73b0\u7ec6\u8282\uff1a\n    1. \u67e5\u8be2\u6570\u636e\u5e93\n    2. \u68c0\u67e5 TTL \u662f\u5426\u8fc7\u671f\n    3. \u66f4\u65b0 last_access\uff08LRU\uff09\n    4. \u53cd\u5e8f\u5217\u5316\u8fd4\u56de\n\n    Args:\n        key: \u7f13\u5b58\u952e\n\n    Returns:\n        \u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u8fd4\u56de None\n    \"\"\"\n    # \u70ed\u91cd\u8f7d\u68c0\u6d4b\n    if self._enable_hot_reload:\n        self._check_hot_reload()\n\n    with self._lock:\n        conn = sqlite3.connect(self._db_path)\n        try:\n            cursor = conn.execute(\n                \"SELECT value, expires_at FROM cache_entries WHERE key = ?\",\n                (str(key),),\n            )\n            row = cursor.fetchone()\n\n            if row is None:\n                return None\n\n            value_bytes, expires_at = row\n\n            # \u68c0\u67e5\u662f\u5426\u8fc7\u671f\n            if expires_at is not None and time.time() &gt; expires_at:\n                # \u5df2\u8fc7\u671f\uff0c\u5220\u9664\n                conn.execute(\"DELETE FROM cache_entries WHERE key = ?\", (str(key),))\n                conn.commit()\n                return None\n\n            # \u66f4\u65b0 last_access\uff08LRU\uff09\n            conn.execute(\n                \"UPDATE cache_entries SET last_access = ? WHERE key = ?\",\n                (time.time(), str(key)),\n            )\n            conn.commit()\n\n            # \u53cd\u5e8f\u5217\u5316\n            return self._serializer.deserialize(value_bytes)\n\n        finally:\n            conn.close()\n</code></pre>"},{"location":"en/api/backends/file/#symphra_cache.backends.file.FileBackend.keys","title":"<code>keys(pattern='*', cursor=0, count=100, max_keys=None)</code>","text":"<p>\u626b\u63cf\u7f13\u5b58\u952e</p> <p>Parameters:</p> Name Type Description Default <code>pattern</code> <code>str</code> <p>\u5339\u914d\u6a21\u5f0f\uff08\u652f\u6301\u901a\u914d\u7b26 * \u548c ?\uff09</p> <code>'*'</code> <code>cursor</code> <code>int</code> <p>\u6e38\u6807\u4f4d\u7f6e\uff08\u7528\u4e8e\u5206\u9875\uff0c\u6b64\u5b9e\u73b0\u4e2d\u57fa\u4e8e\u7d22\u5f15\uff09</p> <code>0</code> <code>count</code> <code>int</code> <p>\u6bcf\u9875\u8fd4\u56de\u7684\u952e\u6570\u91cf</p> <code>100</code> <code>max_keys</code> <code>int | None</code> <p>\u6700\u591a\u8fd4\u56de\u7684\u952e\u6570\u91cf</p> <code>None</code> <p>Returns:</p> Type Description <code>KeysPage</code> <p>KeysPage \u5bf9\u8c61</p> Source code in <code>src/symphra_cache/backends/file.py</code> <pre><code>def keys(\n    self,\n    pattern: str = \"*\",\n    cursor: int = 0,\n    count: int = 100,\n    max_keys: int | None = None,\n) -&gt; KeysPage:\n    \"\"\"\n    \u626b\u63cf\u7f13\u5b58\u952e\n\n    Args:\n        pattern: \u5339\u914d\u6a21\u5f0f\uff08\u652f\u6301\u901a\u914d\u7b26 * \u548c ?\uff09\n        cursor: \u6e38\u6807\u4f4d\u7f6e\uff08\u7528\u4e8e\u5206\u9875\uff0c\u6b64\u5b9e\u73b0\u4e2d\u57fa\u4e8e\u7d22\u5f15\uff09\n        count: \u6bcf\u9875\u8fd4\u56de\u7684\u952e\u6570\u91cf\n        max_keys: \u6700\u591a\u8fd4\u56de\u7684\u952e\u6570\u91cf\n\n    Returns:\n        KeysPage \u5bf9\u8c61\n    \"\"\"\n    import fnmatch\n\n    from ..types import KeysPage\n\n    with self._lock:\n        conn = sqlite3.connect(self._db_path)\n        try:\n            # \u83b7\u53d6\u6240\u6709\u672a\u8fc7\u671f\u7684\u952e\n            now = time.time()\n            cursor_obj = conn.execute(\n                \"SELECT key FROM cache_entries WHERE expires_at IS NULL OR expires_at &gt; ? ORDER BY key\",\n                (now,),\n            )\n            all_keys = [row[0] for row in cursor_obj.fetchall()]\n\n            # \u6a21\u5f0f\u5339\u914d\n            if pattern != \"*\":\n                matched_keys = [k for k in all_keys if fnmatch.fnmatch(k, pattern)]\n            else:\n                matched_keys = all_keys\n\n            # \u5206\u9875\u5904\u7406\n            total = len(matched_keys)\n            start_idx = cursor\n            end_idx = start_idx + count\n\n            if max_keys is not None:\n                end_idx = min(end_idx, start_idx + max_keys)\n\n            page_keys = matched_keys[start_idx:end_idx]\n\n            # \u8ba1\u7b97\u4e0b\u4e00\u9875\u6e38\u6807\n            next_cursor = end_idx if end_idx &lt; total else 0\n            has_more = next_cursor &gt; 0\n\n            return KeysPage(\n                keys=page_keys,\n                cursor=next_cursor,\n                has_more=has_more,\n                total_scanned=len(page_keys),\n            )\n\n        finally:\n            conn.close()\n</code></pre>"},{"location":"en/api/backends/file/#symphra_cache.backends.file.FileBackend.set","title":"<code>set(key, value, ttl=None, ex=False, nx=False)</code>","text":"<p>\u8bbe\u7f6e\u7f13\u5b58\u503c</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <code>value</code> <code>CacheValue</code> <p>\u7f13\u5b58\u503c</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4(\u79d2)</p> <code>None</code> <code>ex</code> <code>bool</code> <p>\u4fdd\u7559\u53c2\u6570</p> <code>False</code> <code>nx</code> <code>bool</code> <p>\u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>\u662f\u5426\u8bbe\u7f6e\u6210\u529f</p> Source code in <code>src/symphra_cache/backends/file.py</code> <pre><code>def set(\n    self,\n    key: CacheKey,\n    value: CacheValue,\n    ttl: int | None = None,\n    ex: bool = False,\n    nx: bool = False,\n) -&gt; bool:\n    \"\"\"\n    \u8bbe\u7f6e\u7f13\u5b58\u503c\n\n    Args:\n        key: \u7f13\u5b58\u952e\n        value: \u7f13\u5b58\u503c\n        ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2)\n        ex: \u4fdd\u7559\u53c2\u6570\n        nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n    Returns:\n        \u662f\u5426\u8bbe\u7f6e\u6210\u529f\n    \"\"\"\n    with self._lock:\n        conn = sqlite3.connect(self._db_path)\n        try:\n            # \u5e8f\u5217\u5316\u503c\n            serialized_value = self._serializer.serialize(value)\n\n            # \u8ba1\u7b97\u8fc7\u671f\u65f6\u95f4\n            now = time.time()\n            expires_at = None if ttl is None else now + ttl\n\n            # NX \u6a21\u5f0f\u68c0\u67e5\n            if nx:\n                cursor = conn.execute(\n                    \"SELECT COUNT(*) FROM cache_entries WHERE key = ? AND (expires_at IS NULL OR expires_at &gt; ?)\",\n                    (key, now),\n                )\n                if cursor.fetchone()[0] &gt; 0:\n                    return False  # \u952e\u5df2\u5b58\u5728\u4e14\u672a\u8fc7\u671f\n\n            # \u4f7f\u7528 INSERT OR REPLACE\n            conn.execute(\n                \"\"\"\n                INSERT OR REPLACE INTO cache_entries\n                (key, value, expires_at, last_access, created_at)\n                VALUES (?, ?, ?, ?, ?)\n                \"\"\",\n                (key, serialized_value, expires_at, now, now),\n            )\n\n            # LRU \u6dd8\u6c70\u68c0\u67e5\n            self._evict_if_needed(conn)\n\n            # \u7edf\u4e00\u63d0\u4ea4\u6240\u6709\u53d8\u66f4\n            conn.commit()\n\n            return True\n\n        except Exception as e:\n            conn.rollback()\n            msg = f\"\u8bbe\u7f6e\u7f13\u5b58\u5931\u8d25: {key}\"\n            raise CacheBackendError(msg) from e\n        finally:\n            conn.close()\n</code></pre>"},{"location":"en/api/backends/memory/","title":"MemoryBackend","text":"<p>In-memory high-performance backend with LRU eviction and TTL.</p> <p>               Bases: <code>BaseBackend</code></p> <p>\u5185\u5b58\u7f13\u5b58\u540e\u7aef</p> <p>\u57fa\u4e8e OrderedDict \u5b9e\u73b0\u7684\u9ad8\u6027\u80fd\u5185\u5b58\u7f13\u5b58\uff0c\u652f\u6301 LRU \u6dd8\u6c70\u3002</p> <p>\u67b6\u6784\u8bbe\u8ba1: - \u5b58\u50a8\u7ed3\u6784: OrderedDict[key, (value, expires_at)] - LRU \u5b9e\u73b0: \u8bbf\u95ee\u65f6\u5c06\u952e\u79fb\u5230\u672b\u5c3e\uff0c\u6dd8\u6c70\u65f6\u5220\u9664\u5934\u90e8 - TTL \u7ba1\u7406: \u60f0\u6027\u5220\u9664\uff08\u8bfb\u53d6\u65f6\u68c0\u67e5\uff09+ \u540e\u53f0\u5b9a\u671f\u6e05\u7406 - \u7ebf\u7a0b\u5b89\u5168: \u6240\u6709\u64cd\u4f5c\u4f7f\u7528 RLock \u4fdd\u62a4</p> <p>\u6027\u80fd\u7279\u70b9: - \u8bfb\u53d6: O(1)\uff0c&lt; 0.01ms - \u5199\u5165: O(1)\uff0c&lt; 0.01ms - LRU \u6dd8\u6c70: O(1) - \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)</p> \u4f7f\u7528\u793a\u4f8b <p>backend = MemoryBackend(max_size=10000) backend.set(\"user:123\", {\"name\": \"Alice\"}, ttl=3600) user = backend.get(\"user:123\") print(user)  # {\"name\": \"Alice\"}</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>class MemoryBackend(BaseBackend):\n    \"\"\"\n    \u5185\u5b58\u7f13\u5b58\u540e\u7aef\n\n    \u57fa\u4e8e OrderedDict \u5b9e\u73b0\u7684\u9ad8\u6027\u80fd\u5185\u5b58\u7f13\u5b58\uff0c\u652f\u6301 LRU \u6dd8\u6c70\u3002\n\n    \u67b6\u6784\u8bbe\u8ba1:\n    - \u5b58\u50a8\u7ed3\u6784: OrderedDict[key, (value, expires_at)]\n    - LRU \u5b9e\u73b0: \u8bbf\u95ee\u65f6\u5c06\u952e\u79fb\u5230\u672b\u5c3e\uff0c\u6dd8\u6c70\u65f6\u5220\u9664\u5934\u90e8\n    - TTL \u7ba1\u7406: \u60f0\u6027\u5220\u9664\uff08\u8bfb\u53d6\u65f6\u68c0\u67e5\uff09+ \u540e\u53f0\u5b9a\u671f\u6e05\u7406\n    - \u7ebf\u7a0b\u5b89\u5168: \u6240\u6709\u64cd\u4f5c\u4f7f\u7528 RLock \u4fdd\u62a4\n\n    \u6027\u80fd\u7279\u70b9:\n    - \u8bfb\u53d6: O(1)\uff0c&lt; 0.01ms\n    - \u5199\u5165: O(1)\uff0c&lt; 0.01ms\n    - LRU \u6dd8\u6c70: O(1)\n    - \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n\n    \u4f7f\u7528\u793a\u4f8b:\n        &gt;&gt;&gt; backend = MemoryBackend(max_size=10000)\n        &gt;&gt;&gt; backend.set(\"user:123\", {\"name\": \"Alice\"}, ttl=3600)\n        &gt;&gt;&gt; user = backend.get(\"user:123\")\n        &gt;&gt;&gt; print(user)  # {\"name\": \"Alice\"}\n    \"\"\"\n\n    def __init__(\n        self,\n        max_size: int = 10000,\n        cleanup_interval: int = 60,\n    ) -&gt; None:\n        \"\"\"\n        \u521d\u59cb\u5316\u5185\u5b58\u540e\u7aef\n\n        Args:\n            max_size: \u6700\u5927\u7f13\u5b58\u6761\u6570\uff0c\u8d85\u8fc7\u540e\u89e6\u53d1 LRU \u6dd8\u6c70\uff08\u9ed8\u8ba4 10000\uff09\n            cleanup_interval: TTL \u6e05\u7406\u95f4\u9694\uff08\u79d2\uff09\uff0c\u9ed8\u8ba4 60 \u79d2\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; # \u521b\u5efa\u6700\u5927\u5bb9\u91cf 1000 \u7684\u7f13\u5b58\n            &gt;&gt;&gt; backend = MemoryBackend(max_size=1000, cleanup_interval=30)\n        \"\"\"\n        self._max_size = max_size\n        self._cleanup_interval = cleanup_interval\n\n        # \u5b58\u50a8\u683c\u5f0f: {key: (value, expires_at)}\n        # expires_at \u4e3a None \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n        # \u4f7f\u7528 OrderedDict \u652f\u6301 LRU\uff1a\u6700\u8fd1\u8bbf\u95ee\u7684\u5728\u672b\u5c3e\uff0c\u6700\u65e7\u7684\u5728\u5934\u90e8\n        self._cache: OrderedDict[CacheKey, tuple[CacheValue, float | None]] = OrderedDict()\n\n        # \u7ebf\u7a0b\u9501\uff08\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\uff09\n        # \u4f7f\u7528 RLock \u5141\u8bb8\u540c\u4e00\u7ebf\u7a0b\u91cd\u5165\n        self._lock = threading.RLock()\n\n        # \u542f\u52a8\u540e\u53f0\u6e05\u7406\u4efb\u52a1\n        self._cleanup_thread: threading.Thread | None = None\n        self._stop_cleanup = threading.Event()\n        self._start_cleanup_task()\n\n    # ========== \u540c\u6b65\u57fa\u7840\u64cd\u4f5c ==========\n\n    def get(self, key: CacheKey) -&gt; CacheValue | None:\n        \"\"\"\n        \u540c\u6b65\u83b7\u53d6\u7f13\u5b58\u503c\n\n        \u5b9e\u73b0\u7ec6\u8282:\n        1. \u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728\n        2. \u68c0\u67e5\u662f\u5426\u8fc7\u671f\uff08\u60f0\u6027\u5220\u9664\uff09\n        3. \u66f4\u65b0 LRU \u987a\u5e8f\uff08\u79fb\u5230\u672b\u5c3e\u8868\u793a\u6700\u8fd1\u4f7f\u7528\uff09\n        4. \u8fd4\u56de\u503c\n\n        \u65f6\u95f4\u590d\u6742\u5ea6: O(1)\n\n        Args:\n            key: \u7f13\u5b58\u952e\n\n        Returns:\n            \u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u5219\u8fd4\u56de None\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; backend.set(\"key\", \"value\", ttl=60)\n            &gt;&gt;&gt; backend.get(\"key\")  # \"value\"\n            &gt;&gt;&gt; time.sleep(61)\n            &gt;&gt;&gt; backend.get(\"key\")  # None\uff08\u5df2\u8fc7\u671f\uff09\n        \"\"\"\n        with self._lock:\n            # \u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728\n            if key not in self._cache:\n                return None\n\n            value, expires_at = self._cache[key]\n\n            # \u68c0\u67e5\u662f\u5426\u8fc7\u671f\uff08\u60f0\u6027\u5220\u9664\uff09\n            if expires_at is not None and time.time() &gt; expires_at:\n                # \u5df2\u8fc7\u671f\uff0c\u5220\u9664\u5e76\u8fd4\u56de None\n                del self._cache[key]\n                return None\n\n            # \u66f4\u65b0 LRU\uff1a\u79fb\u5230\u672b\u5c3e\u8868\u793a\u6700\u8fd1\u4f7f\u7528\n            self._cache.move_to_end(key)\n\n            return value\n\n    async def aget(self, key: CacheKey) -&gt; CacheValue | None:\n        \"\"\"\n        \u5f02\u6b65\u83b7\u53d6\u7f13\u5b58\u503c\n\n        \u5185\u5b58\u540e\u7aef\u7684\u5f02\u6b65\u7248\u672c\u76f4\u63a5\u8c03\u7528\u540c\u6b65\u65b9\u6cd5\u3002\n        \u56e0\u4e3a\u5185\u5b58\u64cd\u4f5c\u975e\u5e38\u5feb\uff08&lt; 0.01ms\uff09\uff0c\u65e0\u9700\u771f\u6b63\u7684\u5f02\u6b65 I/O\u3002\n\n        Args:\n            key: \u7f13\u5b58\u952e\n\n        Returns:\n            \u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u5219\u8fd4\u56de None\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; value = await backend.aget(\"user:123\")\n        \"\"\"\n        return self.get(key)\n\n    def set(\n        self,\n        key: CacheKey,\n        value: CacheValue,\n        ttl: int | None = None,\n        ex: bool = False,\n        nx: bool = False,\n    ) -&gt; bool:\n        \"\"\"\n        \u8bbe\u7f6e\u7f13\u5b58\u503c\n\n        Args:\n            key: \u7f13\u5b58\u952e\n            value: \u7f13\u5b58\u503c\n            ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2),None \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n            ex: \u4fdd\u7559\u53c2\u6570,\u5185\u5b58\u540e\u7aef\u59cb\u7ec8\u4f7f\u7528\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4\n            nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n        Returns:\n            \u662f\u5426\u8bbe\u7f6e\u6210\u529f\n        \"\"\"\n        with self._lock:\n            # \u68c0\u67e5 max_size \u662f\u5426\u4e3a 0\n            if self._max_size == 0:\n                return False\n\n            # NX \u6a21\u5f0f:\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u8bbe\u7f6e\n            if nx and key in self._cache:\n                # \u68c0\u67e5\u662f\u5426\u5df2\u8fc7\u671f\n                _, expires_at = self._cache[key]\n                if expires_at is None or time.time() &lt;= expires_at:\n                    return False  # \u952e\u5b58\u5728\u4e14\u672a\u8fc7\u671f,\u8bbe\u7f6e\u5931\u8d25\n\n            # \u8ba1\u7b97\u8fc7\u671f\u65f6\u95f4\n            expires_at = None if ttl is None else time.time() + ttl\n\n            # \u5982\u679c\u952e\u5df2\u5b58\u5728,\u66f4\u65b0\u4f4d\u7f6e\n            if key in self._cache:\n                self._cache.move_to_end(key)\n            # \u5982\u679c\u7f13\u5b58\u5df2\u6ee1,\u6267\u884c LRU \u6dd8\u6c70\n            elif len(self._cache) &gt;= self._max_size:\n                self._cache.popitem(last=False)\n\n            # \u8bbe\u7f6e\u7f13\u5b58\u503c\n            self._cache[key] = (value, expires_at)\n            return True\n\n    async def aset(\n        self,\n        key: CacheKey,\n        value: CacheValue,\n        ttl: int | None = None,\n        ex: bool = False,\n        nx: bool = False,\n    ) -&gt; bool:\n        \"\"\"\n        \u5f02\u6b65\u8bbe\u7f6e\u7f13\u5b58\u503c\n\n        Args:\n            key: \u7f13\u5b58\u952e\n            value: \u7f13\u5b58\u503c\n            ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2)\n            ex: \u4fdd\u7559\u53c2\u6570\n            nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n        Returns:\n            \u662f\u5426\u8bbe\u7f6e\u6210\u529f\n        \"\"\"\n        return self.set(key, value, ttl=ttl, ex=ex, nx=nx)\n\n    def delete(self, key: CacheKey) -&gt; bool:\n        \"\"\"\n        \u5220\u9664\u7f13\u5b58\n\n        Args:\n            key: \u7f13\u5b58\u952e\n\n        Returns:\n            \u5982\u679c\u952e\u5b58\u5728\u5e76\u6210\u529f\u5220\u9664\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; backend.set(\"temp\", \"data\")\n            &gt;&gt;&gt; backend.delete(\"temp\")  # True\n            &gt;&gt;&gt; backend.delete(\"temp\")  # False\uff08\u5df2\u5220\u9664\uff09\n        \"\"\"\n        with self._lock:\n            if key in self._cache:\n                del self._cache[key]\n                return True\n            return False\n\n    async def adelete(self, key: CacheKey) -&gt; bool:\n        \"\"\"\n        \u5f02\u6b65\u5220\u9664\u7f13\u5b58\n\n        Args:\n            key: \u7f13\u5b58\u952e\n\n        Returns:\n            \u5982\u679c\u952e\u5b58\u5728\u5e76\u6210\u529f\u5220\u9664\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; deleted = await backend.adelete(\"user:123\")\n        \"\"\"\n        return self.delete(key)\n\n    def exists(self, key: CacheKey) -&gt; bool:\n        \"\"\"\n        \u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728\n\n        \u4f1a\u68c0\u67e5\u952e\u662f\u5426\u8fc7\u671f\uff0c\u8fc7\u671f\u7684\u952e\u8fd4\u56de False\u3002\n\n        Args:\n            key: \u7f13\u5b58\u952e\n\n        Returns:\n            \u5982\u679c\u952e\u5b58\u5728\u4e14\u672a\u8fc7\u671f\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; backend.set(\"key\", \"value\", ttl=60)\n            &gt;&gt;&gt; backend.exists(\"key\")  # True\n            &gt;&gt;&gt; time.sleep(61)\n            &gt;&gt;&gt; backend.exists(\"key\")  # False\uff08\u5df2\u8fc7\u671f\uff09\n        \"\"\"\n        return self.get(key) is not None\n\n    def clear(self) -&gt; None:\n        \"\"\"\n        \u6e05\u7a7a\u6240\u6709\u7f13\u5b58\n\n        \u8b66\u544a:\n            \u6b64\u64cd\u4f5c\u4e0d\u53ef\u9006\uff0c\u4f1a\u5220\u9664\u6240\u6709\u7f13\u5b58\u6570\u636e\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; backend.clear()  # \u5220\u9664\u6240\u6709\u7f13\u5b58\n        \"\"\"\n        with self._lock:\n            self._cache.clear()\n\n    # ========== \u6279\u91cf\u64cd\u4f5c\u4f18\u5316 ==========\n\n    def get_many(self, keys: list[CacheKey]) -&gt; dict[CacheKey, CacheValue]:\n        \"\"\"\n        \u6279\u91cf\u83b7\u53d6\u7f13\u5b58\u503c\uff08\u4f18\u5316\u7248\uff09\n\n        \u76f8\u6bd4\u57fa\u7c7b\u7684\u9ed8\u8ba4\u5b9e\u73b0\uff0c\u6b64\u7248\u672c\u5728\u5355\u4e2a\u9501\u5185\u5b8c\u6210\u6240\u6709\u64cd\u4f5c\uff0c\n        \u51cf\u5c11\u9501\u5f00\u9500\uff0c\u63d0\u5347\u6027\u80fd\u3002\n\n        Args:\n            keys: \u7f13\u5b58\u952e\u5217\u8868\n\n        Returns:\n            \u952e\u503c\u5bf9\u5b57\u5178\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u7684\u952e\u4e0d\u5305\u542b\u5728\u7ed3\u679c\u4e2d\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; backend.set_many({\"k1\": \"v1\", \"k2\": \"v2\"})\n            &gt;&gt;&gt; results = backend.get_many([\"k1\", \"k2\", \"k3\"])\n            &gt;&gt;&gt; print(results)  # {\"k1\": \"v1\", \"k2\": \"v2\"}\n        \"\"\"\n        result: dict[CacheKey, CacheValue] = {}\n        now = time.time()\n\n        with self._lock:\n            for key in keys:\n                if key not in self._cache:\n                    continue\n\n                value, expires_at = self._cache[key]\n\n                # \u68c0\u67e5\u662f\u5426\u8fc7\u671f\n                if expires_at is not None and now &gt; expires_at:\n                    # \u8fc7\u671f\uff0c\u5220\u9664\uff08\u60f0\u6027\u6e05\u7406\uff09\n                    del self._cache[key]\n                    continue\n\n                # \u66f4\u65b0 LRU\n                self._cache.move_to_end(key)\n                result[key] = value\n\n        return result\n\n    def set_many(\n        self,\n        mapping: dict[CacheKey, CacheValue],\n        ttl: int | None = None,\n    ) -&gt; None:\n        \"\"\"\n        \u6279\u91cf\u8bbe\u7f6e\u7f13\u5b58\u503c\uff08\u4f18\u5316\u7248\uff09\n\n        \u5728\u5355\u4e2a\u9501\u5185\u5b8c\u6210\u6240\u6709\u64cd\u4f5c\uff0c\u63d0\u5347\u6027\u80fd\u3002\n\n        Args:\n            mapping: \u952e\u503c\u5bf9\u5b57\u5178\n            ttl: \u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; backend.set_many(\n            ...     {\n            ...         \"user:1\": {\"name\": \"Alice\"},\n            ...         \"user:2\": {\"name\": \"Bob\"},\n            ...     },\n            ...     ttl=600,\n            ... )\n        \"\"\"\n        with self._lock:\n            # \u8fb9\u754c\u60c5\u51b5\uff1amax_size=0 \u65f6\u4e0d\u5b58\u50a8\u4efb\u4f55\u5185\u5bb9\n            if self._max_size == 0:\n                return\n\n            expires_at = time.time() + ttl if ttl is not None else None\n\n            for key, value in mapping.items():\n                # \u68c0\u67e5\u5bb9\u91cf\u5e76 LRU \u6dd8\u6c70\n                if len(self._cache) &gt;= self._max_size and key not in self._cache:\n                    self._cache.popitem(last=False)\n\n                # \u5b58\u50a8\u5e76\u79fb\u5230\u672b\u5c3e\n                self._cache[key] = (value, expires_at)\n                self._cache.move_to_end(key)\n\n    # ========== \u6269\u5c55\u64cd\u4f5c ==========\n\n    def keys(\n        self,\n        pattern: str = \"*\",\n        cursor: int = 0,\n        count: int = 100,\n        max_keys: int | None = None,\n    ) -&gt; KeysPage:\n        \"\"\"\n        \u626b\u63cf\u7f13\u5b58\u952e\n\n        Args:\n            pattern: \u5339\u914d\u6a21\u5f0f(\u652f\u6301\u901a\u914d\u7b26 * \u548c ?)\n            cursor: \u6e38\u6807\u4f4d\u7f6e\n            count: \u6bcf\u9875\u8fd4\u56de\u7684\u952e\u6570\u91cf\n            max_keys: \u6700\u591a\u8fd4\u56de\u7684\u952e\u6570\u91cf\n\n        Returns:\n            KeysPage \u5bf9\u8c61\n        \"\"\"\n        import fnmatch\n\n        from ..types import KeysPage\n\n        with self._lock:\n            # \u83b7\u53d6\u6240\u6709\u952e\u5e76\u8fc7\u6ee4\n            all_keys = list(self._cache.keys())\n\n            # \u6a21\u5f0f\u5339\u914d\n            if pattern != \"*\":\n                matched_keys = [k for k in all_keys if fnmatch.fnmatch(k, pattern)]\n            else:\n                matched_keys = all_keys\n\n            # \u5206\u9875\u5904\u7406\n            total = len(matched_keys)\n            start_idx = cursor\n            end_idx = start_idx + count\n\n            if max_keys is not None:\n                end_idx = min(end_idx, start_idx + max_keys)\n\n            page_keys = matched_keys[start_idx:end_idx]\n\n            # \u8ba1\u7b97\u4e0b\u4e00\u9875\u6e38\u6807\n            next_cursor = end_idx if end_idx &lt; total else 0\n            has_more = next_cursor &gt; 0\n\n            return KeysPage(\n                keys=page_keys,\n                cursor=next_cursor,\n                has_more=has_more,\n                total_scanned=len(page_keys),\n            )\n\n    async def akeys(\n        self,\n        pattern: str = \"*\",\n        cursor: int = 0,\n        count: int = 100,\n        max_keys: int | None = None,\n    ) -&gt; KeysPage:\n        \"\"\"\u5f02\u6b65\u626b\u63cf\u7f13\u5b58\u952e\"\"\"\n        return self.keys(pattern=pattern, cursor=cursor, count=count, max_keys=max_keys)\n\n    def ttl(self, key: CacheKey) -&gt; int:\n        \"\"\"\n        \u83b7\u53d6\u952e\u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4\n\n        Returns:\n            \u5269\u4f59\u79d2\u6570,-1 \u8868\u793a\u6c38\u4e0d\u8fc7\u671f,-2 \u8868\u793a\u952e\u4e0d\u5b58\u5728\n        \"\"\"\n        with self._lock:\n            if key not in self._cache:\n                return -2\n\n            _, expires_at = self._cache[key]\n            if expires_at is None:\n                return -1\n\n            remaining = int(expires_at - time.time())\n            return remaining if remaining &gt; 0 else -2\n\n    async def attl(self, key: CacheKey) -&gt; int:\n        \"\"\"\u5f02\u6b65\u83b7\u53d6\u952e\u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4\"\"\"\n        return self.ttl(key)\n\n    def close(self) -&gt; None:\n        \"\"\"\n        \u5173\u95ed\u540e\u7aef\n\n        \u505c\u6b62\u540e\u53f0\u6e05\u7406\u7ebf\u7a0b\u3002\n        \"\"\"\n        if self._cleanup_thread and self._cleanup_thread.is_alive():\n            # \u8bbe\u7f6e\u505c\u6b62\u6807\u5fd7(\u5982\u679c\u6709\u7684\u8bdd)\n            # \u5f53\u524d\u5b9e\u73b0\u4e2d\u6e05\u7406\u7ebf\u7a0b\u662f daemon,\u4f1a\u81ea\u52a8\u9000\u51fa\n            pass\n\n    async def aclose(self) -&gt; None:\n        \"\"\"\u5f02\u6b65\u5173\u95ed\u540e\u7aef\"\"\"\n        self.close()\n\n    # ========== \u540e\u53f0\u6e05\u7406\u4efb\u52a1 ==========\n\n    def _start_cleanup_task(self) -&gt; None:\n        \"\"\"\n        \u542f\u52a8\u540e\u53f0 TTL \u6e05\u7406\u4efb\u52a1\n\n        \u4f7f\u7528\u5b88\u62a4\u7ebf\u7a0b\u5b9a\u671f\u6e05\u7406\u8fc7\u671f\u7684\u952e\u3002\n        \u7ebf\u7a0b\u5728\u5bf9\u8c61\u9500\u6bc1\u65f6\u81ea\u52a8\u505c\u6b62\u3002\n        \"\"\"\n\n        def _cleanup_loop() -&gt; None:\n            \"\"\"\u540e\u53f0\u6e05\u7406\u5faa\u73af\"\"\"\n            while not self._stop_cleanup.wait(self._cleanup_interval):\n                self._cleanup_expired()\n\n        # \u521b\u5efa\u5e76\u542f\u52a8\u5b88\u62a4\u7ebf\u7a0b\n        self._cleanup_thread = threading.Thread(\n            target=_cleanup_loop,\n            daemon=True,  # \u5b88\u62a4\u7ebf\u7a0b\uff0c\u4e3b\u7a0b\u5e8f\u9000\u51fa\u65f6\u81ea\u52a8\u7ec8\u6b62\n            name=\"symphra-cache-cleanup\",\n        )\n        self._cleanup_thread.start()\n\n    def _cleanup_expired(self) -&gt; None:\n        \"\"\"\n        \u6e05\u7406\u6240\u6709\u8fc7\u671f\u7684\u952e\n\n        \u904d\u5386\u6240\u6709\u7f13\u5b58\u9879\uff0c\u5220\u9664\u5df2\u8fc7\u671f\u7684\u952e\u3002\n        \u6b64\u65b9\u6cd5\u7531\u540e\u53f0\u7ebf\u7a0b\u5b9a\u671f\u8c03\u7528\u3002\n        \"\"\"\n        with self._lock:\n            now = time.time()\n            # \u6536\u96c6\u8fc7\u671f\u7684\u952e\n            expired_keys = [\n                key\n                for key, (_, expires_at) in self._cache.items()\n                if expires_at is not None and now &gt; expires_at\n            ]\n\n            # \u6279\u91cf\u5220\u9664\u8fc7\u671f\u952e\n            for key in expired_keys:\n                del self._cache[key]\n\n    def __del__(self) -&gt; None:\n        \"\"\"\n        \u6790\u6784\u51fd\u6570\n\n        \u505c\u6b62\u540e\u53f0\u6e05\u7406\u7ebf\u7a0b\u3002\n        \"\"\"\n        # \u901a\u77e5\u6e05\u7406\u7ebf\u7a0b\u505c\u6b62\n        self._stop_cleanup.set()\n\n        # \u7b49\u5f85\u7ebf\u7a0b\u7ed3\u675f\uff08\u6700\u591a\u7b49\u5f85 1 \u79d2\uff09\n        if self._cleanup_thread and self._cleanup_thread.is_alive():\n            self._cleanup_thread.join(timeout=1.0)\n\n    # ========== \u8c03\u8bd5\u548c\u76d1\u63a7\u65b9\u6cd5 ==========\n\n    def __len__(self) -&gt; int:\n        \"\"\"\n        \u83b7\u53d6\u5f53\u524d\u7f13\u5b58\u9879\u6570\u91cf\n\n        Returns:\n            \u7f13\u5b58\u9879\u6570\u91cf\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; backend.set(\"k1\", \"v1\")\n            &gt;&gt;&gt; backend.set(\"k2\", \"v2\")\n            &gt;&gt;&gt; len(backend)  # 2\n        \"\"\"\n        with self._lock:\n            return len(self._cache)\n\n    def __repr__(self) -&gt; str:\n        \"\"\"\n        \u5b57\u7b26\u4e32\u8868\u793a\n\n        Returns:\n            \u5bf9\u8c61\u7684\u5b57\u7b26\u4e32\u8868\u793a\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; backend = MemoryBackend(max_size=1000)\n            &gt;&gt;&gt; repr(backend)\n            \"MemoryBackend(size=0, max_size=1000)\"\n        \"\"\"\n        with self._lock:\n            return f\"MemoryBackend(size={len(self._cache)}, max_size={self._max_size})\"\n</code></pre>"},{"location":"en/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.__del__","title":"<code>__del__()</code>","text":"<p>\u6790\u6784\u51fd\u6570</p> <p>\u505c\u6b62\u540e\u53f0\u6e05\u7406\u7ebf\u7a0b\u3002</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>def __del__(self) -&gt; None:\n    \"\"\"\n    \u6790\u6784\u51fd\u6570\n\n    \u505c\u6b62\u540e\u53f0\u6e05\u7406\u7ebf\u7a0b\u3002\n    \"\"\"\n    # \u901a\u77e5\u6e05\u7406\u7ebf\u7a0b\u505c\u6b62\n    self._stop_cleanup.set()\n\n    # \u7b49\u5f85\u7ebf\u7a0b\u7ed3\u675f\uff08\u6700\u591a\u7b49\u5f85 1 \u79d2\uff09\n    if self._cleanup_thread and self._cleanup_thread.is_alive():\n        self._cleanup_thread.join(timeout=1.0)\n</code></pre>"},{"location":"en/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.__init__","title":"<code>__init__(max_size=10000, cleanup_interval=60)</code>","text":"<p>\u521d\u59cb\u5316\u5185\u5b58\u540e\u7aef</p> <p>Parameters:</p> Name Type Description Default <code>max_size</code> <code>int</code> <p>\u6700\u5927\u7f13\u5b58\u6761\u6570\uff0c\u8d85\u8fc7\u540e\u89e6\u53d1 LRU \u6dd8\u6c70\uff08\u9ed8\u8ba4 10000\uff09</p> <code>10000</code> <code>cleanup_interval</code> <code>int</code> <p>TTL \u6e05\u7406\u95f4\u9694\uff08\u79d2\uff09\uff0c\u9ed8\u8ba4 60 \u79d2</p> <code>60</code> \u793a\u4f8b Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>def __init__(\n    self,\n    max_size: int = 10000,\n    cleanup_interval: int = 60,\n) -&gt; None:\n    \"\"\"\n    \u521d\u59cb\u5316\u5185\u5b58\u540e\u7aef\n\n    Args:\n        max_size: \u6700\u5927\u7f13\u5b58\u6761\u6570\uff0c\u8d85\u8fc7\u540e\u89e6\u53d1 LRU \u6dd8\u6c70\uff08\u9ed8\u8ba4 10000\uff09\n        cleanup_interval: TTL \u6e05\u7406\u95f4\u9694\uff08\u79d2\uff09\uff0c\u9ed8\u8ba4 60 \u79d2\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; # \u521b\u5efa\u6700\u5927\u5bb9\u91cf 1000 \u7684\u7f13\u5b58\n        &gt;&gt;&gt; backend = MemoryBackend(max_size=1000, cleanup_interval=30)\n    \"\"\"\n    self._max_size = max_size\n    self._cleanup_interval = cleanup_interval\n\n    # \u5b58\u50a8\u683c\u5f0f: {key: (value, expires_at)}\n    # expires_at \u4e3a None \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n    # \u4f7f\u7528 OrderedDict \u652f\u6301 LRU\uff1a\u6700\u8fd1\u8bbf\u95ee\u7684\u5728\u672b\u5c3e\uff0c\u6700\u65e7\u7684\u5728\u5934\u90e8\n    self._cache: OrderedDict[CacheKey, tuple[CacheValue, float | None]] = OrderedDict()\n\n    # \u7ebf\u7a0b\u9501\uff08\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\uff09\n    # \u4f7f\u7528 RLock \u5141\u8bb8\u540c\u4e00\u7ebf\u7a0b\u91cd\u5165\n    self._lock = threading.RLock()\n\n    # \u542f\u52a8\u540e\u53f0\u6e05\u7406\u4efb\u52a1\n    self._cleanup_thread: threading.Thread | None = None\n    self._stop_cleanup = threading.Event()\n    self._start_cleanup_task()\n</code></pre>"},{"location":"en/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.__init__--1000","title":"\u521b\u5efa\u6700\u5927\u5bb9\u91cf 1000 \u7684\u7f13\u5b58","text":"<p>backend = MemoryBackend(max_size=1000, cleanup_interval=30)</p>"},{"location":"en/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.__len__","title":"<code>__len__()</code>","text":"<p>\u83b7\u53d6\u5f53\u524d\u7f13\u5b58\u9879\u6570\u91cf</p> <p>Returns:</p> Type Description <code>int</code> <p>\u7f13\u5b58\u9879\u6570\u91cf</p> \u793a\u4f8b <p>backend.set(\"k1\", \"v1\") backend.set(\"k2\", \"v2\") len(backend)  # 2</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>def __len__(self) -&gt; int:\n    \"\"\"\n    \u83b7\u53d6\u5f53\u524d\u7f13\u5b58\u9879\u6570\u91cf\n\n    Returns:\n        \u7f13\u5b58\u9879\u6570\u91cf\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; backend.set(\"k1\", \"v1\")\n        &gt;&gt;&gt; backend.set(\"k2\", \"v2\")\n        &gt;&gt;&gt; len(backend)  # 2\n    \"\"\"\n    with self._lock:\n        return len(self._cache)\n</code></pre>"},{"location":"en/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.__repr__","title":"<code>__repr__()</code>","text":"<p>\u5b57\u7b26\u4e32\u8868\u793a</p> <p>Returns:</p> Type Description <code>str</code> <p>\u5bf9\u8c61\u7684\u5b57\u7b26\u4e32\u8868\u793a</p> \u793a\u4f8b <p>backend = MemoryBackend(max_size=1000) repr(backend) \"MemoryBackend(size=0, max_size=1000)\"</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"\n    \u5b57\u7b26\u4e32\u8868\u793a\n\n    Returns:\n        \u5bf9\u8c61\u7684\u5b57\u7b26\u4e32\u8868\u793a\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; backend = MemoryBackend(max_size=1000)\n        &gt;&gt;&gt; repr(backend)\n        \"MemoryBackend(size=0, max_size=1000)\"\n    \"\"\"\n    with self._lock:\n        return f\"MemoryBackend(size={len(self._cache)}, max_size={self._max_size})\"\n</code></pre>"},{"location":"en/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.aclose","title":"<code>aclose()</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u5173\u95ed\u540e\u7aef</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>async def aclose(self) -&gt; None:\n    \"\"\"\u5f02\u6b65\u5173\u95ed\u540e\u7aef\"\"\"\n    self.close()\n</code></pre>"},{"location":"en/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.adelete","title":"<code>adelete(key)</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u5220\u9664\u7f13\u5b58</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <p>Returns:</p> Type Description <code>bool</code> <p>\u5982\u679c\u952e\u5b58\u5728\u5e76\u6210\u529f\u5220\u9664\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False</p> \u793a\u4f8b <p>deleted = await backend.adelete(\"user:123\")</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>async def adelete(self, key: CacheKey) -&gt; bool:\n    \"\"\"\n    \u5f02\u6b65\u5220\u9664\u7f13\u5b58\n\n    Args:\n        key: \u7f13\u5b58\u952e\n\n    Returns:\n        \u5982\u679c\u952e\u5b58\u5728\u5e76\u6210\u529f\u5220\u9664\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; deleted = await backend.adelete(\"user:123\")\n    \"\"\"\n    return self.delete(key)\n</code></pre>"},{"location":"en/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.aget","title":"<code>aget(key)</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u83b7\u53d6\u7f13\u5b58\u503c</p> <p>\u5185\u5b58\u540e\u7aef\u7684\u5f02\u6b65\u7248\u672c\u76f4\u63a5\u8c03\u7528\u540c\u6b65\u65b9\u6cd5\u3002 \u56e0\u4e3a\u5185\u5b58\u64cd\u4f5c\u975e\u5e38\u5feb\uff08&lt; 0.01ms\uff09\uff0c\u65e0\u9700\u771f\u6b63\u7684\u5f02\u6b65 I/O\u3002</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <p>Returns:</p> Type Description <code>CacheValue | None</code> <p>\u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u5219\u8fd4\u56de None</p> \u793a\u4f8b <p>value = await backend.aget(\"user:123\")</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>async def aget(self, key: CacheKey) -&gt; CacheValue | None:\n    \"\"\"\n    \u5f02\u6b65\u83b7\u53d6\u7f13\u5b58\u503c\n\n    \u5185\u5b58\u540e\u7aef\u7684\u5f02\u6b65\u7248\u672c\u76f4\u63a5\u8c03\u7528\u540c\u6b65\u65b9\u6cd5\u3002\n    \u56e0\u4e3a\u5185\u5b58\u64cd\u4f5c\u975e\u5e38\u5feb\uff08&lt; 0.01ms\uff09\uff0c\u65e0\u9700\u771f\u6b63\u7684\u5f02\u6b65 I/O\u3002\n\n    Args:\n        key: \u7f13\u5b58\u952e\n\n    Returns:\n        \u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u5219\u8fd4\u56de None\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; value = await backend.aget(\"user:123\")\n    \"\"\"\n    return self.get(key)\n</code></pre>"},{"location":"en/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.akeys","title":"<code>akeys(pattern='*', cursor=0, count=100, max_keys=None)</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u626b\u63cf\u7f13\u5b58\u952e</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>async def akeys(\n    self,\n    pattern: str = \"*\",\n    cursor: int = 0,\n    count: int = 100,\n    max_keys: int | None = None,\n) -&gt; KeysPage:\n    \"\"\"\u5f02\u6b65\u626b\u63cf\u7f13\u5b58\u952e\"\"\"\n    return self.keys(pattern=pattern, cursor=cursor, count=count, max_keys=max_keys)\n</code></pre>"},{"location":"en/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.aset","title":"<code>aset(key, value, ttl=None, ex=False, nx=False)</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u8bbe\u7f6e\u7f13\u5b58\u503c</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <code>value</code> <code>CacheValue</code> <p>\u7f13\u5b58\u503c</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4(\u79d2)</p> <code>None</code> <code>ex</code> <code>bool</code> <p>\u4fdd\u7559\u53c2\u6570</p> <code>False</code> <code>nx</code> <code>bool</code> <p>\u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>\u662f\u5426\u8bbe\u7f6e\u6210\u529f</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>async def aset(\n    self,\n    key: CacheKey,\n    value: CacheValue,\n    ttl: int | None = None,\n    ex: bool = False,\n    nx: bool = False,\n) -&gt; bool:\n    \"\"\"\n    \u5f02\u6b65\u8bbe\u7f6e\u7f13\u5b58\u503c\n\n    Args:\n        key: \u7f13\u5b58\u952e\n        value: \u7f13\u5b58\u503c\n        ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2)\n        ex: \u4fdd\u7559\u53c2\u6570\n        nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n    Returns:\n        \u662f\u5426\u8bbe\u7f6e\u6210\u529f\n    \"\"\"\n    return self.set(key, value, ttl=ttl, ex=ex, nx=nx)\n</code></pre>"},{"location":"en/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.attl","title":"<code>attl(key)</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u83b7\u53d6\u952e\u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>async def attl(self, key: CacheKey) -&gt; int:\n    \"\"\"\u5f02\u6b65\u83b7\u53d6\u952e\u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4\"\"\"\n    return self.ttl(key)\n</code></pre>"},{"location":"en/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.clear","title":"<code>clear()</code>","text":"<p>\u6e05\u7a7a\u6240\u6709\u7f13\u5b58</p> \u8b66\u544a <p>\u6b64\u64cd\u4f5c\u4e0d\u53ef\u9006\uff0c\u4f1a\u5220\u9664\u6240\u6709\u7f13\u5b58\u6570\u636e</p> \u793a\u4f8b <p>backend.clear()  # \u5220\u9664\u6240\u6709\u7f13\u5b58</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>def clear(self) -&gt; None:\n    \"\"\"\n    \u6e05\u7a7a\u6240\u6709\u7f13\u5b58\n\n    \u8b66\u544a:\n        \u6b64\u64cd\u4f5c\u4e0d\u53ef\u9006\uff0c\u4f1a\u5220\u9664\u6240\u6709\u7f13\u5b58\u6570\u636e\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; backend.clear()  # \u5220\u9664\u6240\u6709\u7f13\u5b58\n    \"\"\"\n    with self._lock:\n        self._cache.clear()\n</code></pre>"},{"location":"en/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.close","title":"<code>close()</code>","text":"<p>\u5173\u95ed\u540e\u7aef</p> <p>\u505c\u6b62\u540e\u53f0\u6e05\u7406\u7ebf\u7a0b\u3002</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>def close(self) -&gt; None:\n    \"\"\"\n    \u5173\u95ed\u540e\u7aef\n\n    \u505c\u6b62\u540e\u53f0\u6e05\u7406\u7ebf\u7a0b\u3002\n    \"\"\"\n    if self._cleanup_thread and self._cleanup_thread.is_alive():\n        # \u8bbe\u7f6e\u505c\u6b62\u6807\u5fd7(\u5982\u679c\u6709\u7684\u8bdd)\n        # \u5f53\u524d\u5b9e\u73b0\u4e2d\u6e05\u7406\u7ebf\u7a0b\u662f daemon,\u4f1a\u81ea\u52a8\u9000\u51fa\n        pass\n</code></pre>"},{"location":"en/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.delete","title":"<code>delete(key)</code>","text":"<p>\u5220\u9664\u7f13\u5b58</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <p>Returns:</p> Type Description <code>bool</code> <p>\u5982\u679c\u952e\u5b58\u5728\u5e76\u6210\u529f\u5220\u9664\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False</p> \u793a\u4f8b <p>backend.set(\"temp\", \"data\") backend.delete(\"temp\")  # True backend.delete(\"temp\")  # False\uff08\u5df2\u5220\u9664\uff09</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>def delete(self, key: CacheKey) -&gt; bool:\n    \"\"\"\n    \u5220\u9664\u7f13\u5b58\n\n    Args:\n        key: \u7f13\u5b58\u952e\n\n    Returns:\n        \u5982\u679c\u952e\u5b58\u5728\u5e76\u6210\u529f\u5220\u9664\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; backend.set(\"temp\", \"data\")\n        &gt;&gt;&gt; backend.delete(\"temp\")  # True\n        &gt;&gt;&gt; backend.delete(\"temp\")  # False\uff08\u5df2\u5220\u9664\uff09\n    \"\"\"\n    with self._lock:\n        if key in self._cache:\n            del self._cache[key]\n            return True\n        return False\n</code></pre>"},{"location":"en/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.exists","title":"<code>exists(key)</code>","text":"<p>\u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728</p> <p>\u4f1a\u68c0\u67e5\u952e\u662f\u5426\u8fc7\u671f\uff0c\u8fc7\u671f\u7684\u952e\u8fd4\u56de False\u3002</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <p>Returns:</p> Type Description <code>bool</code> <p>\u5982\u679c\u952e\u5b58\u5728\u4e14\u672a\u8fc7\u671f\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False</p> \u793a\u4f8b <p>backend.set(\"key\", \"value\", ttl=60) backend.exists(\"key\")  # True time.sleep(61) backend.exists(\"key\")  # False\uff08\u5df2\u8fc7\u671f\uff09</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>def exists(self, key: CacheKey) -&gt; bool:\n    \"\"\"\n    \u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728\n\n    \u4f1a\u68c0\u67e5\u952e\u662f\u5426\u8fc7\u671f\uff0c\u8fc7\u671f\u7684\u952e\u8fd4\u56de False\u3002\n\n    Args:\n        key: \u7f13\u5b58\u952e\n\n    Returns:\n        \u5982\u679c\u952e\u5b58\u5728\u4e14\u672a\u8fc7\u671f\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; backend.set(\"key\", \"value\", ttl=60)\n        &gt;&gt;&gt; backend.exists(\"key\")  # True\n        &gt;&gt;&gt; time.sleep(61)\n        &gt;&gt;&gt; backend.exists(\"key\")  # False\uff08\u5df2\u8fc7\u671f\uff09\n    \"\"\"\n    return self.get(key) is not None\n</code></pre>"},{"location":"en/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.get","title":"<code>get(key)</code>","text":"<p>\u540c\u6b65\u83b7\u53d6\u7f13\u5b58\u503c</p> <p>\u5b9e\u73b0\u7ec6\u8282: 1. \u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728 2. \u68c0\u67e5\u662f\u5426\u8fc7\u671f\uff08\u60f0\u6027\u5220\u9664\uff09 3. \u66f4\u65b0 LRU \u987a\u5e8f\uff08\u79fb\u5230\u672b\u5c3e\u8868\u793a\u6700\u8fd1\u4f7f\u7528\uff09 4. \u8fd4\u56de\u503c</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6: O(1)</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <p>Returns:</p> Type Description <code>CacheValue | None</code> <p>\u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u5219\u8fd4\u56de None</p> \u793a\u4f8b <p>backend.set(\"key\", \"value\", ttl=60) backend.get(\"key\")  # \"value\" time.sleep(61) backend.get(\"key\")  # None\uff08\u5df2\u8fc7\u671f\uff09</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>def get(self, key: CacheKey) -&gt; CacheValue | None:\n    \"\"\"\n    \u540c\u6b65\u83b7\u53d6\u7f13\u5b58\u503c\n\n    \u5b9e\u73b0\u7ec6\u8282:\n    1. \u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728\n    2. \u68c0\u67e5\u662f\u5426\u8fc7\u671f\uff08\u60f0\u6027\u5220\u9664\uff09\n    3. \u66f4\u65b0 LRU \u987a\u5e8f\uff08\u79fb\u5230\u672b\u5c3e\u8868\u793a\u6700\u8fd1\u4f7f\u7528\uff09\n    4. \u8fd4\u56de\u503c\n\n    \u65f6\u95f4\u590d\u6742\u5ea6: O(1)\n\n    Args:\n        key: \u7f13\u5b58\u952e\n\n    Returns:\n        \u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u5219\u8fd4\u56de None\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; backend.set(\"key\", \"value\", ttl=60)\n        &gt;&gt;&gt; backend.get(\"key\")  # \"value\"\n        &gt;&gt;&gt; time.sleep(61)\n        &gt;&gt;&gt; backend.get(\"key\")  # None\uff08\u5df2\u8fc7\u671f\uff09\n    \"\"\"\n    with self._lock:\n        # \u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728\n        if key not in self._cache:\n            return None\n\n        value, expires_at = self._cache[key]\n\n        # \u68c0\u67e5\u662f\u5426\u8fc7\u671f\uff08\u60f0\u6027\u5220\u9664\uff09\n        if expires_at is not None and time.time() &gt; expires_at:\n            # \u5df2\u8fc7\u671f\uff0c\u5220\u9664\u5e76\u8fd4\u56de None\n            del self._cache[key]\n            return None\n\n        # \u66f4\u65b0 LRU\uff1a\u79fb\u5230\u672b\u5c3e\u8868\u793a\u6700\u8fd1\u4f7f\u7528\n        self._cache.move_to_end(key)\n\n        return value\n</code></pre>"},{"location":"en/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.get_many","title":"<code>get_many(keys)</code>","text":"<p>\u6279\u91cf\u83b7\u53d6\u7f13\u5b58\u503c\uff08\u4f18\u5316\u7248\uff09</p> <p>\u76f8\u6bd4\u57fa\u7c7b\u7684\u9ed8\u8ba4\u5b9e\u73b0\uff0c\u6b64\u7248\u672c\u5728\u5355\u4e2a\u9501\u5185\u5b8c\u6210\u6240\u6709\u64cd\u4f5c\uff0c \u51cf\u5c11\u9501\u5f00\u9500\uff0c\u63d0\u5347\u6027\u80fd\u3002</p> <p>Parameters:</p> Name Type Description Default <code>keys</code> <code>list[CacheKey]</code> <p>\u7f13\u5b58\u952e\u5217\u8868</p> required <p>Returns:</p> Type Description <code>dict[CacheKey, CacheValue]</code> <p>\u952e\u503c\u5bf9\u5b57\u5178\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u7684\u952e\u4e0d\u5305\u542b\u5728\u7ed3\u679c\u4e2d</p> \u793a\u4f8b <p>backend.set_many({\"k1\": \"v1\", \"k2\": \"v2\"}) results = backend.get_many([\"k1\", \"k2\", \"k3\"]) print(results)  # {\"k1\": \"v1\", \"k2\": \"v2\"}</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>def get_many(self, keys: list[CacheKey]) -&gt; dict[CacheKey, CacheValue]:\n    \"\"\"\n    \u6279\u91cf\u83b7\u53d6\u7f13\u5b58\u503c\uff08\u4f18\u5316\u7248\uff09\n\n    \u76f8\u6bd4\u57fa\u7c7b\u7684\u9ed8\u8ba4\u5b9e\u73b0\uff0c\u6b64\u7248\u672c\u5728\u5355\u4e2a\u9501\u5185\u5b8c\u6210\u6240\u6709\u64cd\u4f5c\uff0c\n    \u51cf\u5c11\u9501\u5f00\u9500\uff0c\u63d0\u5347\u6027\u80fd\u3002\n\n    Args:\n        keys: \u7f13\u5b58\u952e\u5217\u8868\n\n    Returns:\n        \u952e\u503c\u5bf9\u5b57\u5178\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u7684\u952e\u4e0d\u5305\u542b\u5728\u7ed3\u679c\u4e2d\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; backend.set_many({\"k1\": \"v1\", \"k2\": \"v2\"})\n        &gt;&gt;&gt; results = backend.get_many([\"k1\", \"k2\", \"k3\"])\n        &gt;&gt;&gt; print(results)  # {\"k1\": \"v1\", \"k2\": \"v2\"}\n    \"\"\"\n    result: dict[CacheKey, CacheValue] = {}\n    now = time.time()\n\n    with self._lock:\n        for key in keys:\n            if key not in self._cache:\n                continue\n\n            value, expires_at = self._cache[key]\n\n            # \u68c0\u67e5\u662f\u5426\u8fc7\u671f\n            if expires_at is not None and now &gt; expires_at:\n                # \u8fc7\u671f\uff0c\u5220\u9664\uff08\u60f0\u6027\u6e05\u7406\uff09\n                del self._cache[key]\n                continue\n\n            # \u66f4\u65b0 LRU\n            self._cache.move_to_end(key)\n            result[key] = value\n\n    return result\n</code></pre>"},{"location":"en/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.keys","title":"<code>keys(pattern='*', cursor=0, count=100, max_keys=None)</code>","text":"<p>\u626b\u63cf\u7f13\u5b58\u952e</p> <p>Parameters:</p> Name Type Description Default <code>pattern</code> <code>str</code> <p>\u5339\u914d\u6a21\u5f0f(\u652f\u6301\u901a\u914d\u7b26 * \u548c ?)</p> <code>'*'</code> <code>cursor</code> <code>int</code> <p>\u6e38\u6807\u4f4d\u7f6e</p> <code>0</code> <code>count</code> <code>int</code> <p>\u6bcf\u9875\u8fd4\u56de\u7684\u952e\u6570\u91cf</p> <code>100</code> <code>max_keys</code> <code>int | None</code> <p>\u6700\u591a\u8fd4\u56de\u7684\u952e\u6570\u91cf</p> <code>None</code> <p>Returns:</p> Type Description <code>KeysPage</code> <p>KeysPage \u5bf9\u8c61</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>def keys(\n    self,\n    pattern: str = \"*\",\n    cursor: int = 0,\n    count: int = 100,\n    max_keys: int | None = None,\n) -&gt; KeysPage:\n    \"\"\"\n    \u626b\u63cf\u7f13\u5b58\u952e\n\n    Args:\n        pattern: \u5339\u914d\u6a21\u5f0f(\u652f\u6301\u901a\u914d\u7b26 * \u548c ?)\n        cursor: \u6e38\u6807\u4f4d\u7f6e\n        count: \u6bcf\u9875\u8fd4\u56de\u7684\u952e\u6570\u91cf\n        max_keys: \u6700\u591a\u8fd4\u56de\u7684\u952e\u6570\u91cf\n\n    Returns:\n        KeysPage \u5bf9\u8c61\n    \"\"\"\n    import fnmatch\n\n    from ..types import KeysPage\n\n    with self._lock:\n        # \u83b7\u53d6\u6240\u6709\u952e\u5e76\u8fc7\u6ee4\n        all_keys = list(self._cache.keys())\n\n        # \u6a21\u5f0f\u5339\u914d\n        if pattern != \"*\":\n            matched_keys = [k for k in all_keys if fnmatch.fnmatch(k, pattern)]\n        else:\n            matched_keys = all_keys\n\n        # \u5206\u9875\u5904\u7406\n        total = len(matched_keys)\n        start_idx = cursor\n        end_idx = start_idx + count\n\n        if max_keys is not None:\n            end_idx = min(end_idx, start_idx + max_keys)\n\n        page_keys = matched_keys[start_idx:end_idx]\n\n        # \u8ba1\u7b97\u4e0b\u4e00\u9875\u6e38\u6807\n        next_cursor = end_idx if end_idx &lt; total else 0\n        has_more = next_cursor &gt; 0\n\n        return KeysPage(\n            keys=page_keys,\n            cursor=next_cursor,\n            has_more=has_more,\n            total_scanned=len(page_keys),\n        )\n</code></pre>"},{"location":"en/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.set","title":"<code>set(key, value, ttl=None, ex=False, nx=False)</code>","text":"<p>\u8bbe\u7f6e\u7f13\u5b58\u503c</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <code>value</code> <code>CacheValue</code> <p>\u7f13\u5b58\u503c</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4(\u79d2),None \u8868\u793a\u6c38\u4e0d\u8fc7\u671f</p> <code>None</code> <code>ex</code> <code>bool</code> <p>\u4fdd\u7559\u53c2\u6570,\u5185\u5b58\u540e\u7aef\u59cb\u7ec8\u4f7f\u7528\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4</p> <code>False</code> <code>nx</code> <code>bool</code> <p>\u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>\u662f\u5426\u8bbe\u7f6e\u6210\u529f</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>def set(\n    self,\n    key: CacheKey,\n    value: CacheValue,\n    ttl: int | None = None,\n    ex: bool = False,\n    nx: bool = False,\n) -&gt; bool:\n    \"\"\"\n    \u8bbe\u7f6e\u7f13\u5b58\u503c\n\n    Args:\n        key: \u7f13\u5b58\u952e\n        value: \u7f13\u5b58\u503c\n        ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2),None \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n        ex: \u4fdd\u7559\u53c2\u6570,\u5185\u5b58\u540e\u7aef\u59cb\u7ec8\u4f7f\u7528\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4\n        nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n    Returns:\n        \u662f\u5426\u8bbe\u7f6e\u6210\u529f\n    \"\"\"\n    with self._lock:\n        # \u68c0\u67e5 max_size \u662f\u5426\u4e3a 0\n        if self._max_size == 0:\n            return False\n\n        # NX \u6a21\u5f0f:\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u8bbe\u7f6e\n        if nx and key in self._cache:\n            # \u68c0\u67e5\u662f\u5426\u5df2\u8fc7\u671f\n            _, expires_at = self._cache[key]\n            if expires_at is None or time.time() &lt;= expires_at:\n                return False  # \u952e\u5b58\u5728\u4e14\u672a\u8fc7\u671f,\u8bbe\u7f6e\u5931\u8d25\n\n        # \u8ba1\u7b97\u8fc7\u671f\u65f6\u95f4\n        expires_at = None if ttl is None else time.time() + ttl\n\n        # \u5982\u679c\u952e\u5df2\u5b58\u5728,\u66f4\u65b0\u4f4d\u7f6e\n        if key in self._cache:\n            self._cache.move_to_end(key)\n        # \u5982\u679c\u7f13\u5b58\u5df2\u6ee1,\u6267\u884c LRU \u6dd8\u6c70\n        elif len(self._cache) &gt;= self._max_size:\n            self._cache.popitem(last=False)\n\n        # \u8bbe\u7f6e\u7f13\u5b58\u503c\n        self._cache[key] = (value, expires_at)\n        return True\n</code></pre>"},{"location":"en/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.set_many","title":"<code>set_many(mapping, ttl=None)</code>","text":"<p>\u6279\u91cf\u8bbe\u7f6e\u7f13\u5b58\u503c\uff08\u4f18\u5316\u7248\uff09</p> <p>\u5728\u5355\u4e2a\u9501\u5185\u5b8c\u6210\u6240\u6709\u64cd\u4f5c\uff0c\u63d0\u5347\u6027\u80fd\u3002</p> <p>Parameters:</p> Name Type Description Default <code>mapping</code> <code>dict[CacheKey, CacheValue]</code> <p>\u952e\u503c\u5bf9\u5b57\u5178</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u8868\u793a\u6c38\u4e0d\u8fc7\u671f</p> <code>None</code> \u793a\u4f8b <p>backend.set_many( ...     { ...         \"user:1\": {\"name\": \"Alice\"}, ...         \"user:2\": {\"name\": \"Bob\"}, ...     }, ...     ttl=600, ... )</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>def set_many(\n    self,\n    mapping: dict[CacheKey, CacheValue],\n    ttl: int | None = None,\n) -&gt; None:\n    \"\"\"\n    \u6279\u91cf\u8bbe\u7f6e\u7f13\u5b58\u503c\uff08\u4f18\u5316\u7248\uff09\n\n    \u5728\u5355\u4e2a\u9501\u5185\u5b8c\u6210\u6240\u6709\u64cd\u4f5c\uff0c\u63d0\u5347\u6027\u80fd\u3002\n\n    Args:\n        mapping: \u952e\u503c\u5bf9\u5b57\u5178\n        ttl: \u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; backend.set_many(\n        ...     {\n        ...         \"user:1\": {\"name\": \"Alice\"},\n        ...         \"user:2\": {\"name\": \"Bob\"},\n        ...     },\n        ...     ttl=600,\n        ... )\n    \"\"\"\n    with self._lock:\n        # \u8fb9\u754c\u60c5\u51b5\uff1amax_size=0 \u65f6\u4e0d\u5b58\u50a8\u4efb\u4f55\u5185\u5bb9\n        if self._max_size == 0:\n            return\n\n        expires_at = time.time() + ttl if ttl is not None else None\n\n        for key, value in mapping.items():\n            # \u68c0\u67e5\u5bb9\u91cf\u5e76 LRU \u6dd8\u6c70\n            if len(self._cache) &gt;= self._max_size and key not in self._cache:\n                self._cache.popitem(last=False)\n\n            # \u5b58\u50a8\u5e76\u79fb\u5230\u672b\u5c3e\n            self._cache[key] = (value, expires_at)\n            self._cache.move_to_end(key)\n</code></pre>"},{"location":"en/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.ttl","title":"<code>ttl(key)</code>","text":"<p>\u83b7\u53d6\u952e\u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4</p> <p>Returns:</p> Type Description <code>int</code> <p>\u5269\u4f59\u79d2\u6570,-1 \u8868\u793a\u6c38\u4e0d\u8fc7\u671f,-2 \u8868\u793a\u952e\u4e0d\u5b58\u5728</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>def ttl(self, key: CacheKey) -&gt; int:\n    \"\"\"\n    \u83b7\u53d6\u952e\u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4\n\n    Returns:\n        \u5269\u4f59\u79d2\u6570,-1 \u8868\u793a\u6c38\u4e0d\u8fc7\u671f,-2 \u8868\u793a\u952e\u4e0d\u5b58\u5728\n    \"\"\"\n    with self._lock:\n        if key not in self._cache:\n            return -2\n\n        _, expires_at = self._cache[key]\n        if expires_at is None:\n            return -1\n\n        remaining = int(expires_at - time.time())\n        return remaining if remaining &gt; 0 else -2\n</code></pre>"},{"location":"en/api/backends/redis/","title":"RedisBackend","text":"<p>Distributed cache backend powered by <code>redis-py</code>, supporting cluster/sentinel and pipeline optimizations.</p> <p>               Bases: <code>BaseBackend</code></p> <p>Redis \u7f13\u5b58\u540e\u7aef</p> <p>\u57fa\u4e8e redis-py \u5b9e\u73b0\u7684\u5206\u5e03\u5f0f\u7f13\u5b58\uff0c\u652f\u6301\u96c6\u7fa4\u548c\u54e8\u5175\u3002</p> <p>\u67b6\u6784\u8bbe\u8ba1\uff1a - \u8fde\u63a5\uff1aConnectionPool \u590d\u7528\u8fde\u63a5 - \u5e8f\u5217\u5316\uff1a\u53ef\u914d\u7f6e\uff08JSON/Pickle/MessagePack\uff09 - TTL\uff1aRedis \u539f\u751f SETEX/EXPIRE - \u539f\u5b50\u6027\uff1aLua \u811a\u672c\u4fdd\u8bc1</p> <p>\u6027\u80fd\u7279\u70b9\uff1a - \u8bfb\u53d6\uff1a~0.1-1ms\uff08\u7f51\u7edc\u5ef6\u8fdf\uff09 - \u5199\u5165\uff1a~0.1-1ms - \u6279\u91cf\u64cd\u4f5c\uff1aMGET/MSET \u7ba1\u9053\u4f18\u5316</p> <p>\u4f7f\u7528\u793a\u4f8b\uff1a     &gt;&gt;&gt; # \u5355\u673a\u6a21\u5f0f     &gt;&gt;&gt; backend = RedisBackend(host=\"localhost\", port=6379)     &gt;&gt;&gt;     &gt;&gt;&gt; # \u8fde\u63a5\u6c60\u6a21\u5f0f     &gt;&gt;&gt; from redis import ConnectionPool     &gt;&gt;&gt; pool = ConnectionPool(host=\"localhost\", port=6379, db=0)     &gt;&gt;&gt; backend = RedisBackend(connection_pool=pool)     &gt;&gt;&gt;     &gt;&gt;&gt; # \u54e8\u5175\u6a21\u5f0f     &gt;&gt;&gt; from redis.sentinel import Sentinel     &gt;&gt;&gt; sentinel = Sentinel([(\"sentinel1\", 26379), (\"sentinel2\", 26379)])     &gt;&gt;&gt; backend = RedisBackend(sentinel=sentinel, service_name=\"mymaster\")</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>class RedisBackend(BaseBackend):\n    \"\"\"\n    Redis \u7f13\u5b58\u540e\u7aef\n\n    \u57fa\u4e8e redis-py \u5b9e\u73b0\u7684\u5206\u5e03\u5f0f\u7f13\u5b58\uff0c\u652f\u6301\u96c6\u7fa4\u548c\u54e8\u5175\u3002\n\n    \u67b6\u6784\u8bbe\u8ba1\uff1a\n    - \u8fde\u63a5\uff1aConnectionPool \u590d\u7528\u8fde\u63a5\n    - \u5e8f\u5217\u5316\uff1a\u53ef\u914d\u7f6e\uff08JSON/Pickle/MessagePack\uff09\n    - TTL\uff1aRedis \u539f\u751f SETEX/EXPIRE\n    - \u539f\u5b50\u6027\uff1aLua \u811a\u672c\u4fdd\u8bc1\n\n    \u6027\u80fd\u7279\u70b9\uff1a\n    - \u8bfb\u53d6\uff1a~0.1-1ms\uff08\u7f51\u7edc\u5ef6\u8fdf\uff09\n    - \u5199\u5165\uff1a~0.1-1ms\n    - \u6279\u91cf\u64cd\u4f5c\uff1aMGET/MSET \u7ba1\u9053\u4f18\u5316\n\n    \u4f7f\u7528\u793a\u4f8b\uff1a\n        &gt;&gt;&gt; # \u5355\u673a\u6a21\u5f0f\n        &gt;&gt;&gt; backend = RedisBackend(host=\"localhost\", port=6379)\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; # \u8fde\u63a5\u6c60\u6a21\u5f0f\n        &gt;&gt;&gt; from redis import ConnectionPool\n        &gt;&gt;&gt; pool = ConnectionPool(host=\"localhost\", port=6379, db=0)\n        &gt;&gt;&gt; backend = RedisBackend(connection_pool=pool)\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; # \u54e8\u5175\u6a21\u5f0f\n        &gt;&gt;&gt; from redis.sentinel import Sentinel\n        &gt;&gt;&gt; sentinel = Sentinel([(\"sentinel1\", 26379), (\"sentinel2\", 26379)])\n        &gt;&gt;&gt; backend = RedisBackend(sentinel=sentinel, service_name=\"mymaster\")\n    \"\"\"\n\n    def __init__(\n        self,\n        host: str = \"localhost\",\n        port: int = 6379,\n        db: int = 0,\n        password: str | None = None,\n        key_prefix: str = \"symphra:\",\n        serialization_mode: SerializationMode | str = SerializationMode.PICKLE,\n        socket_timeout: float = 5.0,\n        socket_connect_timeout: float = 5.0,\n        connection_pool: Any = None,\n        max_connections: int = 50,\n        decode_responses: bool = False,\n        **kwargs: Any,\n    ) -&gt; None:\n        \"\"\"\n        \u521d\u59cb\u5316 Redis \u540e\u7aef\n\n        Args:\n            host: Redis \u4e3b\u673a\u5730\u5740\n            port: Redis \u7aef\u53e3\n            db: \u6570\u636e\u5e93\u7f16\u53f7\uff080-15\uff09\n            password: Redis \u5bc6\u7801\n            key_prefix: \u952e\u524d\u7f00\uff08\u907f\u514d\u51b2\u7a81\uff09\n            serialization_mode: \u5e8f\u5217\u5316\u6a21\u5f0f\n            socket_timeout: \u5957\u63a5\u5b57\u8d85\u65f6\uff08\u79d2\uff09\n            socket_connect_timeout: \u8fde\u63a5\u8d85\u65f6\uff08\u79d2\uff09\n            connection_pool: \u81ea\u5b9a\u4e49\u8fde\u63a5\u6c60\n            max_connections: \u6700\u5927\u8fde\u63a5\u6570\n            decode_responses: \u662f\u5426\u89e3\u7801\u54cd\u5e94\u4e3a\u5b57\u7b26\u4e32\n            **kwargs: \u5176\u4ed6 redis.Redis \u53c2\u6570\n\n        \u793a\u4f8b\uff1a\n            &gt;&gt;&gt; backend = RedisBackend(\n            ...     host=\"redis.example.com\",\n            ...     port=6379,\n            ...     password=\"secret\",\n            ...     key_prefix=\"myapp:\",\n            ... )\n        \"\"\"\n        try:\n            import redis\n            import redis.asyncio as aioredis\n        except ImportError as e:\n            msg = \"Redis \u540e\u7aef\u9700\u8981\u5b89\u88c5 redis: pip install redis\"\n            raise ImportError(msg) from e\n\n        self._key_prefix = key_prefix\n        self._serializer = get_serializer(serialization_mode)\n\n        # \u521b\u5efa\u540c\u6b65\u5ba2\u6237\u7aef\n        if connection_pool is not None:\n            self._client = redis.Redis(connection_pool=connection_pool)\n        else:\n            self._client = redis.Redis(\n                host=host,\n                port=port,\n                db=db,\n                password=password,\n                socket_timeout=socket_timeout,\n                socket_connect_timeout=socket_connect_timeout,\n                max_connections=max_connections,\n                decode_responses=decode_responses,\n                **kwargs,\n            )\n\n        # \u521b\u5efa\u5f02\u6b65\u5ba2\u6237\u7aef\n        self._async_client = aioredis.Redis(\n            host=host,\n            port=port,\n            db=db,\n            password=password,\n            socket_timeout=socket_timeout,\n            socket_connect_timeout=socket_connect_timeout,\n            max_connections=max_connections,\n            decode_responses=decode_responses,\n            **kwargs,\n        )\n\n        # \u6d4b\u8bd5\u8fde\u63a5\n        self._test_connection()\n\n    # ========== \u8fde\u63a5\u7ba1\u7406 ==========\n\n    def _test_connection(self) -&gt; None:\n        \"\"\"\u6d4b\u8bd5 Redis \u8fde\u63a5\"\"\"\n        try:\n            self._client.ping()\n        except Exception as e:\n            msg = f\"\u65e0\u6cd5\u8fde\u63a5\u5230 Redis \u670d\u52a1\u5668: {e}\"\n            raise CacheConnectionError(msg) from e\n\n    def _make_key(self, key: CacheKey) -&gt; str:\n        \"\"\"\u751f\u6210\u5e26\u524d\u7f00\u7684\u5b8c\u6574\u952e\u540d\"\"\"\n        return f\"{self._key_prefix}{key}\"\n\n    # ========== \u540c\u6b65\u57fa\u7840\u64cd\u4f5c ==========\n\n    def get(self, key: CacheKey) -&gt; CacheValue | None:\n        \"\"\"\n        \u540c\u6b65\u83b7\u53d6\u7f13\u5b58\u503c\n\n        \u4f7f\u7528 Redis GET \u547d\u4ee4\uff0c\u81ea\u52a8\u5904\u7406 TTL \u8fc7\u671f\u3002\n\n        Args:\n            key: \u7f13\u5b58\u952e\n\n        Returns:\n            \u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u8fd4\u56de None\n        \"\"\"\n        try:\n            full_key = self._make_key(key)\n            value_bytes = self._client.get(full_key)\n\n            if value_bytes is None:\n                return None\n\n            # \u53cd\u5e8f\u5217\u5316\n            return self._serializer.deserialize(value_bytes)\n\n        except Exception as e:\n            msg = f\"Redis GET \u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    async def aget(self, key: CacheKey) -&gt; CacheValue | None:\n        \"\"\"\u5f02\u6b65\u83b7\u53d6\u7f13\u5b58\u503c\"\"\"\n        try:\n            full_key = self._make_key(key)\n            value_bytes = await self._async_client.get(full_key)\n\n            if value_bytes is None:\n                return None\n\n            return self._serializer.deserialize(value_bytes)\n\n        except Exception as e:\n            msg = f\"Redis AGET \u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    def set(\n        self,\n        key: CacheKey,\n        value: CacheValue,\n        ttl: int | None = None,\n        ex: bool = False,\n        nx: bool = False,\n    ) -&gt; bool:\n        \"\"\"\n        \u540c\u6b65\u8bbe\u7f6e\u7f13\u5b58\u503c\n\n        Args:\n            key: \u7f13\u5b58\u952e\n            value: \u7f13\u5b58\u503c\n            ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2)\n            ex: \u4fdd\u7559\u53c2\u6570,Redis \u59cb\u7ec8\u4f7f\u7528\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4\n            nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e(SET NX)\n\n        Returns:\n            \u662f\u5426\u8bbe\u7f6e\u6210\u529f\n        \"\"\"\n        try:\n            full_key = self._make_key(key)\n            value_bytes = self._serializer.serialize(value)\n\n            # \u5f53 ttl &lt;= 0 \u6216 None \u65f6\uff0c\u4e0d\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\uff0c\u907f\u514d Redis invalid expire time \u9519\u8bef\n            if ttl is not None and ttl &gt; 0:\n                result = self._client.set(\n                    full_key,\n                    value_bytes,\n                    ex=ttl,  # \u8fc7\u671f\u65f6\u95f4(\u79d2)\n                    nx=nx,  # \u4ec5\u5f53\u4e0d\u5b58\u5728\u65f6\u8bbe\u7f6e\n                )\n            else:\n                result = self._client.set(\n                    full_key,\n                    value_bytes,\n                    nx=nx,\n                )\n\n            # nx=True \u65f6,\u5982\u679c\u952e\u5df2\u5b58\u5728\u5219\u8fd4\u56de None\n            return result is not False and result is not None\n\n        except Exception as e:\n            msg = f\"Redis SET \u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    async def aset(\n        self,\n        key: CacheKey,\n        value: CacheValue,\n        ttl: int | None = None,\n        ex: bool = False,\n        nx: bool = False,\n    ) -&gt; bool:\n        \"\"\"\n        \u5f02\u6b65\u8bbe\u7f6e\u7f13\u5b58\u503c\n\n        Args:\n            key: \u7f13\u5b58\u952e\n            value: \u7f13\u5b58\u503c\n            ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2)\n            ex: \u4fdd\u7559\u53c2\u6570\n            nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n        Returns:\n            \u662f\u5426\u8bbe\u7f6e\u6210\u529f\n        \"\"\"\n        try:\n            full_key = self._make_key(key)\n            value_bytes = self._serializer.serialize(value)\n\n            if ttl is not None and ttl &gt; 0:\n                result = await self._async_client.set(\n                    full_key,\n                    value_bytes,\n                    ex=ttl,\n                    nx=nx,\n                )\n            else:\n                result = await self._async_client.set(\n                    full_key,\n                    value_bytes,\n                    nx=nx,\n                )\n\n            return result is not False and result is not None\n\n        except Exception as e:\n            msg = f\"Redis ASET \u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    def delete(self, key: CacheKey) -&gt; bool:\n        \"\"\"\u5220\u9664\u7f13\u5b58\"\"\"\n        try:\n            full_key = self._make_key(key)\n            count = self._client.delete(full_key)\n            return count &gt; 0\n        except Exception as e:\n            msg = f\"Redis DELETE \u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    async def adelete(self, key: CacheKey) -&gt; bool:\n        \"\"\"\u5f02\u6b65\u5220\u9664\u7f13\u5b58\"\"\"\n        try:\n            full_key = self._make_key(key)\n            count = await self._async_client.delete(full_key)\n            return count &gt; 0\n        except Exception as e:\n            msg = f\"Redis ADELETE \u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    def exists(self, key: CacheKey) -&gt; bool:\n        \"\"\"\u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728\"\"\"\n        try:\n            full_key = self._make_key(key)\n            return self._client.exists(full_key) &gt; 0\n        except Exception as e:\n            msg = f\"Redis EXISTS \u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    def clear(self) -&gt; None:\n        \"\"\"\n        \u6e05\u7a7a\u6240\u6709\u7f13\u5b58\n\n        \u8b66\u544a\uff1a\u8fd9\u4f1a\u5220\u9664\u6240\u6709\u5e26\u524d\u7f00\u7684\u952e\n        \"\"\"\n        try:\n            # \u4f7f\u7528 SCAN \u904d\u5386\u6240\u6709\u5339\u914d\u7684\u952e\n            pattern = f\"{self._key_prefix}*\"\n            cursor = 0\n\n            while True:\n                cursor, keys = self._client.scan(cursor, match=pattern, count=100)\n\n                if keys:\n                    self._client.delete(*keys)\n\n                if cursor == 0:\n                    break\n\n        except Exception as e:\n            msg = f\"Redis CLEAR \u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    # ========== \u6279\u91cf\u64cd\u4f5c\u4f18\u5316 ==========\n\n    def get_many(self, keys: list[CacheKey]) -&gt; dict[CacheKey, CacheValue]:\n        \"\"\"\n        \u6279\u91cf\u83b7\u53d6\uff08\u4f7f\u7528 MGET \u4f18\u5316\uff09\n\n        \u76f8\u6bd4\u5faa\u73af\u8c03\u7528 get()\uff0cMGET \u53ea\u9700\u4e00\u6b21\u7f51\u7edc\u5f80\u8fd4\u3002\n        \"\"\"\n        if not keys:\n            return {}\n\n        try:\n            full_keys = [self._make_key(k) for k in keys]\n\n            # \u4f7f\u7528 MGET \u6279\u91cf\u83b7\u53d6\n            values_bytes = self._client.mget(full_keys)\n\n            result: dict[CacheKey, CacheValue] = {}\n            for key, value_bytes in zip(keys, values_bytes, strict=False):\n                if value_bytes is not None:\n                    result[key] = self._serializer.deserialize(value_bytes)\n\n            return result\n\n        except Exception as e:\n            msg = f\"Redis MGET \u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    def set_many(\n        self,\n        mapping: dict[CacheKey, CacheValue],\n        ttl: int | None = None,\n    ) -&gt; None:\n        \"\"\"\n        \u6279\u91cf\u8bbe\u7f6e\uff08\u4f7f\u7528\u7ba1\u9053\u4f18\u5316\uff09\n\n        \u4f7f\u7528 Pipeline \u6279\u91cf\u63d0\u4ea4\u547d\u4ee4\uff0c\u51cf\u5c11\u7f51\u7edc\u5f80\u8fd4\u3002\n        \"\"\"\n        if not mapping:\n            return\n\n        try:\n            # \u4f7f\u7528 Pipeline \u6279\u91cf\u6267\u884c\n            pipe = self._client.pipeline()\n\n            for key, value in mapping.items():\n                full_key = self._make_key(key)\n                value_bytes = self._serializer.serialize(value)\n\n                if ttl is not None and ttl &gt; 0:\n                    pipe.setex(full_key, ttl, value_bytes)\n                else:\n                    pipe.set(full_key, value_bytes)\n\n            pipe.execute()\n\n        except Exception as e:\n            msg = f\"Redis MSET \u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    def delete_many(self, keys: list[CacheKey]) -&gt; int:\n        \"\"\"\u6279\u91cf\u5220\u9664\"\"\"\n        if not keys:\n            return 0\n\n        try:\n            full_keys = [self._make_key(k) for k in keys]\n            return self._client.delete(*full_keys)\n\n        except Exception as e:\n            msg = f\"Redis DEL \u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    # ========== \u9ad8\u7ea7\u529f\u80fd ==========\n\n    def incr(self, key: CacheKey, delta: int = 1) -&gt; int:\n        \"\"\"\n        \u539f\u5b50\u81ea\u589e\n\n        Args:\n            key: \u7f13\u5b58\u952e\n            delta: \u589e\u91cf\uff08\u9ed8\u8ba4 1\uff09\n\n        Returns:\n            \u81ea\u589e\u540e\u7684\u503c\n        \"\"\"\n        try:\n            full_key = self._make_key(key)\n            return self._client.incrby(full_key, delta)\n        except Exception as e:\n            msg = f\"Redis INCR \u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    def decr(self, key: CacheKey, delta: int = 1) -&gt; int:\n        \"\"\"\n        \u539f\u5b50\u81ea\u51cf\n\n        Args:\n            key: \u7f13\u5b58\u952e\n            delta: \u51cf\u91cf\uff08\u9ed8\u8ba4 1\uff09\n\n        Returns:\n            \u81ea\u51cf\u540e\u7684\u503c\n        \"\"\"\n        try:\n            full_key = self._make_key(key)\n            return self._client.decrby(full_key, delta)\n        except Exception as e:\n            msg = f\"Redis DECR \u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    # ========== \u6269\u5c55\u64cd\u4f5c ==========\n\n    def keys(\n        self,\n        pattern: str = \"*\",\n        cursor: int = 0,\n        count: int = 100,\n        max_keys: int | None = None,\n    ) -&gt; KeysPage:\n        \"\"\"\n        \u626b\u63cf\u7f13\u5b58\u952e(\u4f7f\u7528 SCAN)\n\n        Args:\n            pattern: \u5339\u914d\u6a21\u5f0f\n            cursor: \u6e38\u6807\u4f4d\u7f6e\n            count: \u6bcf\u9875\u8fd4\u56de\u7684\u952e\u6570\u91cf\u5efa\u8bae\u503c\n            max_keys: \u6700\u591a\u8fd4\u56de\u7684\u952e\u6570\u91cf\n\n        Returns:\n            KeysPage \u5bf9\u8c61\n        \"\"\"\n        from ..types import KeysPage\n\n        try:\n            # \u6dfb\u52a0\u952e\u524d\u7f00\u5230\u6a21\u5f0f\n            full_pattern = f\"{self._key_prefix}{pattern}\"\n\n            # \u4f7f\u7528 SCAN \u547d\u4ee4\n            next_cursor, keys_found = self._client.scan(\n                cursor=cursor,\n                match=full_pattern,\n                count=count,\n            )\n\n            # \u79fb\u9664\u952e\u524d\u7f00\n            prefix_len = len(self._key_prefix)\n            clean_keys = [k.decode() if isinstance(k, bytes) else k for k in keys_found]\n            clean_keys = [k[prefix_len:] for k in clean_keys]\n\n            # \u9650\u5236\u8fd4\u56de\u6570\u91cf\uff0c\u4f18\u5148\u9075\u5faa count\uff08\u5206\u9875\u5927\u5c0f\uff09\n            if count is not None and count &gt; 0:\n                clean_keys = clean_keys[:count]\n            # \u8fdb\u4e00\u6b65\u9650\u5236\u5230 max_keys\uff08\u5982\u679c\u63d0\u4f9b\uff09\n            if max_keys is not None:\n                clean_keys = clean_keys[:max_keys]\n\n            return KeysPage(\n                keys=clean_keys,\n                cursor=next_cursor,\n                has_more=next_cursor != 0,\n                total_scanned=len(clean_keys),\n            )\n\n        except Exception as e:\n            msg = f\"Redis SCAN \u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    async def akeys(\n        self,\n        pattern: str = \"*\",\n        cursor: int = 0,\n        count: int = 100,\n        max_keys: int | None = None,\n    ) -&gt; KeysPage:\n        \"\"\"\u5f02\u6b65\u626b\u63cf\u7f13\u5b58\u952e\"\"\"\n        from ..types import KeysPage\n\n        try:\n            full_pattern = f\"{self._key_prefix}{pattern}\"\n\n            next_cursor, keys_found = await self._async_client.scan(\n                cursor=cursor,\n                match=full_pattern,\n                count=count,\n            )\n\n            prefix_len = len(self._key_prefix)\n            clean_keys = [k.decode() if isinstance(k, bytes) else k for k in keys_found]\n            clean_keys = [k[prefix_len:] for k in clean_keys]\n\n            if count is not None and count &gt; 0:\n                clean_keys = clean_keys[:count]\n            if max_keys is not None:\n                clean_keys = clean_keys[:max_keys]\n\n            return KeysPage(\n                keys=clean_keys,\n                cursor=next_cursor,\n                has_more=next_cursor != 0,\n                total_scanned=len(clean_keys),\n            )\n\n        except Exception as e:\n            msg = f\"Redis ASCAN \u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    def ttl(self, key: CacheKey) -&gt; int:\n        \"\"\"\n        \u83b7\u53d6\u952e\u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4\n\n        Returns:\n            \u5269\u4f59\u79d2\u6570,-1 \u8868\u793a\u6c38\u4e0d\u8fc7\u671f,-2 \u8868\u793a\u952e\u4e0d\u5b58\u5728\n        \"\"\"\n        try:\n            full_key = self._make_key(key)\n            return self._client.ttl(full_key)\n        except Exception as e:\n            msg = f\"Redis TTL \u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    async def attl(self, key: CacheKey) -&gt; int:\n        \"\"\"\u5f02\u6b65\u83b7\u53d6\u952e\u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4\"\"\"\n        try:\n            full_key = self._make_key(key)\n            return await self._async_client.ttl(full_key)\n        except Exception as e:\n            msg = f\"Redis ATTL \u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    # ========== \u8c03\u8bd5\u548c\u76d1\u63a7 ==========\n\n    def __len__(self) -&gt; int:\n        \"\"\"\n        \u83b7\u53d6\u7f13\u5b58\u952e\u6570\u91cf\n\n        \u6ce8\u610f\uff1a\u4f7f\u7528 SCAN \u904d\u5386\uff0c\u5927\u6570\u636e\u96c6\u53ef\u80fd\u8f83\u6162\n        \"\"\"\n        try:\n            pattern = f\"{self._key_prefix}*\"\n            cursor = 0\n            count = 0\n\n            while True:\n                cursor, keys = self._client.scan(cursor, match=pattern, count=100)\n                count += len(keys)\n\n                if cursor == 0:\n                    break\n\n            return count\n\n        except Exception as e:\n            msg = f\"Redis \u8ba1\u6570\u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    def __repr__(self) -&gt; str:\n        \"\"\"\u5b57\u7b26\u4e32\u8868\u793a\"\"\"\n        return f\"RedisBackend(prefix={self._key_prefix}, client={self._client})\"\n\n    def close(self) -&gt; None:\n        \"\"\"\u5173\u95ed Redis \u8fde\u63a5\"\"\"\n        self._client.close()\n\n    async def aclose(self) -&gt; None:\n        \"\"\"\u5f02\u6b65\u5173\u95ed Redis \u8fde\u63a5\"\"\"\n        await self._async_client.close()\n\n    def __del__(self) -&gt; None:\n        \"\"\"\u6790\u6784\u51fd\u6570\"\"\"\n        import contextlib\n\n        with contextlib.suppress(Exception):\n            self.close()\n</code></pre>"},{"location":"en/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.__del__","title":"<code>__del__()</code>","text":"<p>\u6790\u6784\u51fd\u6570</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>def __del__(self) -&gt; None:\n    \"\"\"\u6790\u6784\u51fd\u6570\"\"\"\n    import contextlib\n\n    with contextlib.suppress(Exception):\n        self.close()\n</code></pre>"},{"location":"en/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.__init__","title":"<code>__init__(host='localhost', port=6379, db=0, password=None, key_prefix='symphra:', serialization_mode=SerializationMode.PICKLE, socket_timeout=5.0, socket_connect_timeout=5.0, connection_pool=None, max_connections=50, decode_responses=False, **kwargs)</code>","text":"<p>\u521d\u59cb\u5316 Redis \u540e\u7aef</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>Redis \u4e3b\u673a\u5730\u5740</p> <code>'localhost'</code> <code>port</code> <code>int</code> <p>Redis \u7aef\u53e3</p> <code>6379</code> <code>db</code> <code>int</code> <p>\u6570\u636e\u5e93\u7f16\u53f7\uff080-15\uff09</p> <code>0</code> <code>password</code> <code>str | None</code> <p>Redis \u5bc6\u7801</p> <code>None</code> <code>key_prefix</code> <code>str</code> <p>\u952e\u524d\u7f00\uff08\u907f\u514d\u51b2\u7a81\uff09</p> <code>'symphra:'</code> <code>serialization_mode</code> <code>SerializationMode | str</code> <p>\u5e8f\u5217\u5316\u6a21\u5f0f</p> <code>PICKLE</code> <code>socket_timeout</code> <code>float</code> <p>\u5957\u63a5\u5b57\u8d85\u65f6\uff08\u79d2\uff09</p> <code>5.0</code> <code>socket_connect_timeout</code> <code>float</code> <p>\u8fde\u63a5\u8d85\u65f6\uff08\u79d2\uff09</p> <code>5.0</code> <code>connection_pool</code> <code>Any</code> <p>\u81ea\u5b9a\u4e49\u8fde\u63a5\u6c60</p> <code>None</code> <code>max_connections</code> <code>int</code> <p>\u6700\u5927\u8fde\u63a5\u6570</p> <code>50</code> <code>decode_responses</code> <code>bool</code> <p>\u662f\u5426\u89e3\u7801\u54cd\u5e94\u4e3a\u5b57\u7b26\u4e32</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>\u5176\u4ed6 redis.Redis \u53c2\u6570</p> <code>{}</code> <p>\u793a\u4f8b\uff1a     &gt;&gt;&gt; backend = RedisBackend(     ...     host=\"redis.example.com\",     ...     port=6379,     ...     password=\"secret\",     ...     key_prefix=\"myapp:\",     ... )</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>def __init__(\n    self,\n    host: str = \"localhost\",\n    port: int = 6379,\n    db: int = 0,\n    password: str | None = None,\n    key_prefix: str = \"symphra:\",\n    serialization_mode: SerializationMode | str = SerializationMode.PICKLE,\n    socket_timeout: float = 5.0,\n    socket_connect_timeout: float = 5.0,\n    connection_pool: Any = None,\n    max_connections: int = 50,\n    decode_responses: bool = False,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"\n    \u521d\u59cb\u5316 Redis \u540e\u7aef\n\n    Args:\n        host: Redis \u4e3b\u673a\u5730\u5740\n        port: Redis \u7aef\u53e3\n        db: \u6570\u636e\u5e93\u7f16\u53f7\uff080-15\uff09\n        password: Redis \u5bc6\u7801\n        key_prefix: \u952e\u524d\u7f00\uff08\u907f\u514d\u51b2\u7a81\uff09\n        serialization_mode: \u5e8f\u5217\u5316\u6a21\u5f0f\n        socket_timeout: \u5957\u63a5\u5b57\u8d85\u65f6\uff08\u79d2\uff09\n        socket_connect_timeout: \u8fde\u63a5\u8d85\u65f6\uff08\u79d2\uff09\n        connection_pool: \u81ea\u5b9a\u4e49\u8fde\u63a5\u6c60\n        max_connections: \u6700\u5927\u8fde\u63a5\u6570\n        decode_responses: \u662f\u5426\u89e3\u7801\u54cd\u5e94\u4e3a\u5b57\u7b26\u4e32\n        **kwargs: \u5176\u4ed6 redis.Redis \u53c2\u6570\n\n    \u793a\u4f8b\uff1a\n        &gt;&gt;&gt; backend = RedisBackend(\n        ...     host=\"redis.example.com\",\n        ...     port=6379,\n        ...     password=\"secret\",\n        ...     key_prefix=\"myapp:\",\n        ... )\n    \"\"\"\n    try:\n        import redis\n        import redis.asyncio as aioredis\n    except ImportError as e:\n        msg = \"Redis \u540e\u7aef\u9700\u8981\u5b89\u88c5 redis: pip install redis\"\n        raise ImportError(msg) from e\n\n    self._key_prefix = key_prefix\n    self._serializer = get_serializer(serialization_mode)\n\n    # \u521b\u5efa\u540c\u6b65\u5ba2\u6237\u7aef\n    if connection_pool is not None:\n        self._client = redis.Redis(connection_pool=connection_pool)\n    else:\n        self._client = redis.Redis(\n            host=host,\n            port=port,\n            db=db,\n            password=password,\n            socket_timeout=socket_timeout,\n            socket_connect_timeout=socket_connect_timeout,\n            max_connections=max_connections,\n            decode_responses=decode_responses,\n            **kwargs,\n        )\n\n    # \u521b\u5efa\u5f02\u6b65\u5ba2\u6237\u7aef\n    self._async_client = aioredis.Redis(\n        host=host,\n        port=port,\n        db=db,\n        password=password,\n        socket_timeout=socket_timeout,\n        socket_connect_timeout=socket_connect_timeout,\n        max_connections=max_connections,\n        decode_responses=decode_responses,\n        **kwargs,\n    )\n\n    # \u6d4b\u8bd5\u8fde\u63a5\n    self._test_connection()\n</code></pre>"},{"location":"en/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.__len__","title":"<code>__len__()</code>","text":"<p>\u83b7\u53d6\u7f13\u5b58\u952e\u6570\u91cf</p> <p>\u6ce8\u610f\uff1a\u4f7f\u7528 SCAN \u904d\u5386\uff0c\u5927\u6570\u636e\u96c6\u53ef\u80fd\u8f83\u6162</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>def __len__(self) -&gt; int:\n    \"\"\"\n    \u83b7\u53d6\u7f13\u5b58\u952e\u6570\u91cf\n\n    \u6ce8\u610f\uff1a\u4f7f\u7528 SCAN \u904d\u5386\uff0c\u5927\u6570\u636e\u96c6\u53ef\u80fd\u8f83\u6162\n    \"\"\"\n    try:\n        pattern = f\"{self._key_prefix}*\"\n        cursor = 0\n        count = 0\n\n        while True:\n            cursor, keys = self._client.scan(cursor, match=pattern, count=100)\n            count += len(keys)\n\n            if cursor == 0:\n                break\n\n        return count\n\n    except Exception as e:\n        msg = f\"Redis \u8ba1\u6570\u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"en/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.__repr__","title":"<code>__repr__()</code>","text":"<p>\u5b57\u7b26\u4e32\u8868\u793a</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"\u5b57\u7b26\u4e32\u8868\u793a\"\"\"\n    return f\"RedisBackend(prefix={self._key_prefix}, client={self._client})\"\n</code></pre>"},{"location":"en/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.aclose","title":"<code>aclose()</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u5173\u95ed Redis \u8fde\u63a5</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>async def aclose(self) -&gt; None:\n    \"\"\"\u5f02\u6b65\u5173\u95ed Redis \u8fde\u63a5\"\"\"\n    await self._async_client.close()\n</code></pre>"},{"location":"en/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.adelete","title":"<code>adelete(key)</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u5220\u9664\u7f13\u5b58</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>async def adelete(self, key: CacheKey) -&gt; bool:\n    \"\"\"\u5f02\u6b65\u5220\u9664\u7f13\u5b58\"\"\"\n    try:\n        full_key = self._make_key(key)\n        count = await self._async_client.delete(full_key)\n        return count &gt; 0\n    except Exception as e:\n        msg = f\"Redis ADELETE \u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"en/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.aget","title":"<code>aget(key)</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u83b7\u53d6\u7f13\u5b58\u503c</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>async def aget(self, key: CacheKey) -&gt; CacheValue | None:\n    \"\"\"\u5f02\u6b65\u83b7\u53d6\u7f13\u5b58\u503c\"\"\"\n    try:\n        full_key = self._make_key(key)\n        value_bytes = await self._async_client.get(full_key)\n\n        if value_bytes is None:\n            return None\n\n        return self._serializer.deserialize(value_bytes)\n\n    except Exception as e:\n        msg = f\"Redis AGET \u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"en/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.akeys","title":"<code>akeys(pattern='*', cursor=0, count=100, max_keys=None)</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u626b\u63cf\u7f13\u5b58\u952e</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>async def akeys(\n    self,\n    pattern: str = \"*\",\n    cursor: int = 0,\n    count: int = 100,\n    max_keys: int | None = None,\n) -&gt; KeysPage:\n    \"\"\"\u5f02\u6b65\u626b\u63cf\u7f13\u5b58\u952e\"\"\"\n    from ..types import KeysPage\n\n    try:\n        full_pattern = f\"{self._key_prefix}{pattern}\"\n\n        next_cursor, keys_found = await self._async_client.scan(\n            cursor=cursor,\n            match=full_pattern,\n            count=count,\n        )\n\n        prefix_len = len(self._key_prefix)\n        clean_keys = [k.decode() if isinstance(k, bytes) else k for k in keys_found]\n        clean_keys = [k[prefix_len:] for k in clean_keys]\n\n        if count is not None and count &gt; 0:\n            clean_keys = clean_keys[:count]\n        if max_keys is not None:\n            clean_keys = clean_keys[:max_keys]\n\n        return KeysPage(\n            keys=clean_keys,\n            cursor=next_cursor,\n            has_more=next_cursor != 0,\n            total_scanned=len(clean_keys),\n        )\n\n    except Exception as e:\n        msg = f\"Redis ASCAN \u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"en/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.aset","title":"<code>aset(key, value, ttl=None, ex=False, nx=False)</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u8bbe\u7f6e\u7f13\u5b58\u503c</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <code>value</code> <code>CacheValue</code> <p>\u7f13\u5b58\u503c</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4(\u79d2)</p> <code>None</code> <code>ex</code> <code>bool</code> <p>\u4fdd\u7559\u53c2\u6570</p> <code>False</code> <code>nx</code> <code>bool</code> <p>\u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>\u662f\u5426\u8bbe\u7f6e\u6210\u529f</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>async def aset(\n    self,\n    key: CacheKey,\n    value: CacheValue,\n    ttl: int | None = None,\n    ex: bool = False,\n    nx: bool = False,\n) -&gt; bool:\n    \"\"\"\n    \u5f02\u6b65\u8bbe\u7f6e\u7f13\u5b58\u503c\n\n    Args:\n        key: \u7f13\u5b58\u952e\n        value: \u7f13\u5b58\u503c\n        ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2)\n        ex: \u4fdd\u7559\u53c2\u6570\n        nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n    Returns:\n        \u662f\u5426\u8bbe\u7f6e\u6210\u529f\n    \"\"\"\n    try:\n        full_key = self._make_key(key)\n        value_bytes = self._serializer.serialize(value)\n\n        if ttl is not None and ttl &gt; 0:\n            result = await self._async_client.set(\n                full_key,\n                value_bytes,\n                ex=ttl,\n                nx=nx,\n            )\n        else:\n            result = await self._async_client.set(\n                full_key,\n                value_bytes,\n                nx=nx,\n            )\n\n        return result is not False and result is not None\n\n    except Exception as e:\n        msg = f\"Redis ASET \u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"en/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.attl","title":"<code>attl(key)</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u83b7\u53d6\u952e\u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>async def attl(self, key: CacheKey) -&gt; int:\n    \"\"\"\u5f02\u6b65\u83b7\u53d6\u952e\u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4\"\"\"\n    try:\n        full_key = self._make_key(key)\n        return await self._async_client.ttl(full_key)\n    except Exception as e:\n        msg = f\"Redis ATTL \u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"en/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.clear","title":"<code>clear()</code>","text":"<p>\u6e05\u7a7a\u6240\u6709\u7f13\u5b58</p> <p>\u8b66\u544a\uff1a\u8fd9\u4f1a\u5220\u9664\u6240\u6709\u5e26\u524d\u7f00\u7684\u952e</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>def clear(self) -&gt; None:\n    \"\"\"\n    \u6e05\u7a7a\u6240\u6709\u7f13\u5b58\n\n    \u8b66\u544a\uff1a\u8fd9\u4f1a\u5220\u9664\u6240\u6709\u5e26\u524d\u7f00\u7684\u952e\n    \"\"\"\n    try:\n        # \u4f7f\u7528 SCAN \u904d\u5386\u6240\u6709\u5339\u914d\u7684\u952e\n        pattern = f\"{self._key_prefix}*\"\n        cursor = 0\n\n        while True:\n            cursor, keys = self._client.scan(cursor, match=pattern, count=100)\n\n            if keys:\n                self._client.delete(*keys)\n\n            if cursor == 0:\n                break\n\n    except Exception as e:\n        msg = f\"Redis CLEAR \u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"en/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.close","title":"<code>close()</code>","text":"<p>\u5173\u95ed Redis \u8fde\u63a5</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>def close(self) -&gt; None:\n    \"\"\"\u5173\u95ed Redis \u8fde\u63a5\"\"\"\n    self._client.close()\n</code></pre>"},{"location":"en/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.decr","title":"<code>decr(key, delta=1)</code>","text":"<p>\u539f\u5b50\u81ea\u51cf</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <code>delta</code> <code>int</code> <p>\u51cf\u91cf\uff08\u9ed8\u8ba4 1\uff09</p> <code>1</code> <p>Returns:</p> Type Description <code>int</code> <p>\u81ea\u51cf\u540e\u7684\u503c</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>def decr(self, key: CacheKey, delta: int = 1) -&gt; int:\n    \"\"\"\n    \u539f\u5b50\u81ea\u51cf\n\n    Args:\n        key: \u7f13\u5b58\u952e\n        delta: \u51cf\u91cf\uff08\u9ed8\u8ba4 1\uff09\n\n    Returns:\n        \u81ea\u51cf\u540e\u7684\u503c\n    \"\"\"\n    try:\n        full_key = self._make_key(key)\n        return self._client.decrby(full_key, delta)\n    except Exception as e:\n        msg = f\"Redis DECR \u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"en/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.delete","title":"<code>delete(key)</code>","text":"<p>\u5220\u9664\u7f13\u5b58</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>def delete(self, key: CacheKey) -&gt; bool:\n    \"\"\"\u5220\u9664\u7f13\u5b58\"\"\"\n    try:\n        full_key = self._make_key(key)\n        count = self._client.delete(full_key)\n        return count &gt; 0\n    except Exception as e:\n        msg = f\"Redis DELETE \u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"en/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.delete_many","title":"<code>delete_many(keys)</code>","text":"<p>\u6279\u91cf\u5220\u9664</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>def delete_many(self, keys: list[CacheKey]) -&gt; int:\n    \"\"\"\u6279\u91cf\u5220\u9664\"\"\"\n    if not keys:\n        return 0\n\n    try:\n        full_keys = [self._make_key(k) for k in keys]\n        return self._client.delete(*full_keys)\n\n    except Exception as e:\n        msg = f\"Redis DEL \u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"en/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.exists","title":"<code>exists(key)</code>","text":"<p>\u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>def exists(self, key: CacheKey) -&gt; bool:\n    \"\"\"\u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728\"\"\"\n    try:\n        full_key = self._make_key(key)\n        return self._client.exists(full_key) &gt; 0\n    except Exception as e:\n        msg = f\"Redis EXISTS \u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"en/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.get","title":"<code>get(key)</code>","text":"<p>\u540c\u6b65\u83b7\u53d6\u7f13\u5b58\u503c</p> <p>\u4f7f\u7528 Redis GET \u547d\u4ee4\uff0c\u81ea\u52a8\u5904\u7406 TTL \u8fc7\u671f\u3002</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <p>Returns:</p> Type Description <code>CacheValue | None</code> <p>\u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u8fd4\u56de None</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>def get(self, key: CacheKey) -&gt; CacheValue | None:\n    \"\"\"\n    \u540c\u6b65\u83b7\u53d6\u7f13\u5b58\u503c\n\n    \u4f7f\u7528 Redis GET \u547d\u4ee4\uff0c\u81ea\u52a8\u5904\u7406 TTL \u8fc7\u671f\u3002\n\n    Args:\n        key: \u7f13\u5b58\u952e\n\n    Returns:\n        \u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u8fd4\u56de None\n    \"\"\"\n    try:\n        full_key = self._make_key(key)\n        value_bytes = self._client.get(full_key)\n\n        if value_bytes is None:\n            return None\n\n        # \u53cd\u5e8f\u5217\u5316\n        return self._serializer.deserialize(value_bytes)\n\n    except Exception as e:\n        msg = f\"Redis GET \u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"en/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.get_many","title":"<code>get_many(keys)</code>","text":"<p>\u6279\u91cf\u83b7\u53d6\uff08\u4f7f\u7528 MGET \u4f18\u5316\uff09</p> <p>\u76f8\u6bd4\u5faa\u73af\u8c03\u7528 get()\uff0cMGET \u53ea\u9700\u4e00\u6b21\u7f51\u7edc\u5f80\u8fd4\u3002</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>def get_many(self, keys: list[CacheKey]) -&gt; dict[CacheKey, CacheValue]:\n    \"\"\"\n    \u6279\u91cf\u83b7\u53d6\uff08\u4f7f\u7528 MGET \u4f18\u5316\uff09\n\n    \u76f8\u6bd4\u5faa\u73af\u8c03\u7528 get()\uff0cMGET \u53ea\u9700\u4e00\u6b21\u7f51\u7edc\u5f80\u8fd4\u3002\n    \"\"\"\n    if not keys:\n        return {}\n\n    try:\n        full_keys = [self._make_key(k) for k in keys]\n\n        # \u4f7f\u7528 MGET \u6279\u91cf\u83b7\u53d6\n        values_bytes = self._client.mget(full_keys)\n\n        result: dict[CacheKey, CacheValue] = {}\n        for key, value_bytes in zip(keys, values_bytes, strict=False):\n            if value_bytes is not None:\n                result[key] = self._serializer.deserialize(value_bytes)\n\n        return result\n\n    except Exception as e:\n        msg = f\"Redis MGET \u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"en/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.incr","title":"<code>incr(key, delta=1)</code>","text":"<p>\u539f\u5b50\u81ea\u589e</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <code>delta</code> <code>int</code> <p>\u589e\u91cf\uff08\u9ed8\u8ba4 1\uff09</p> <code>1</code> <p>Returns:</p> Type Description <code>int</code> <p>\u81ea\u589e\u540e\u7684\u503c</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>def incr(self, key: CacheKey, delta: int = 1) -&gt; int:\n    \"\"\"\n    \u539f\u5b50\u81ea\u589e\n\n    Args:\n        key: \u7f13\u5b58\u952e\n        delta: \u589e\u91cf\uff08\u9ed8\u8ba4 1\uff09\n\n    Returns:\n        \u81ea\u589e\u540e\u7684\u503c\n    \"\"\"\n    try:\n        full_key = self._make_key(key)\n        return self._client.incrby(full_key, delta)\n    except Exception as e:\n        msg = f\"Redis INCR \u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"en/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.keys","title":"<code>keys(pattern='*', cursor=0, count=100, max_keys=None)</code>","text":"<p>\u626b\u63cf\u7f13\u5b58\u952e(\u4f7f\u7528 SCAN)</p> <p>Parameters:</p> Name Type Description Default <code>pattern</code> <code>str</code> <p>\u5339\u914d\u6a21\u5f0f</p> <code>'*'</code> <code>cursor</code> <code>int</code> <p>\u6e38\u6807\u4f4d\u7f6e</p> <code>0</code> <code>count</code> <code>int</code> <p>\u6bcf\u9875\u8fd4\u56de\u7684\u952e\u6570\u91cf\u5efa\u8bae\u503c</p> <code>100</code> <code>max_keys</code> <code>int | None</code> <p>\u6700\u591a\u8fd4\u56de\u7684\u952e\u6570\u91cf</p> <code>None</code> <p>Returns:</p> Type Description <code>KeysPage</code> <p>KeysPage \u5bf9\u8c61</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>def keys(\n    self,\n    pattern: str = \"*\",\n    cursor: int = 0,\n    count: int = 100,\n    max_keys: int | None = None,\n) -&gt; KeysPage:\n    \"\"\"\n    \u626b\u63cf\u7f13\u5b58\u952e(\u4f7f\u7528 SCAN)\n\n    Args:\n        pattern: \u5339\u914d\u6a21\u5f0f\n        cursor: \u6e38\u6807\u4f4d\u7f6e\n        count: \u6bcf\u9875\u8fd4\u56de\u7684\u952e\u6570\u91cf\u5efa\u8bae\u503c\n        max_keys: \u6700\u591a\u8fd4\u56de\u7684\u952e\u6570\u91cf\n\n    Returns:\n        KeysPage \u5bf9\u8c61\n    \"\"\"\n    from ..types import KeysPage\n\n    try:\n        # \u6dfb\u52a0\u952e\u524d\u7f00\u5230\u6a21\u5f0f\n        full_pattern = f\"{self._key_prefix}{pattern}\"\n\n        # \u4f7f\u7528 SCAN \u547d\u4ee4\n        next_cursor, keys_found = self._client.scan(\n            cursor=cursor,\n            match=full_pattern,\n            count=count,\n        )\n\n        # \u79fb\u9664\u952e\u524d\u7f00\n        prefix_len = len(self._key_prefix)\n        clean_keys = [k.decode() if isinstance(k, bytes) else k for k in keys_found]\n        clean_keys = [k[prefix_len:] for k in clean_keys]\n\n        # \u9650\u5236\u8fd4\u56de\u6570\u91cf\uff0c\u4f18\u5148\u9075\u5faa count\uff08\u5206\u9875\u5927\u5c0f\uff09\n        if count is not None and count &gt; 0:\n            clean_keys = clean_keys[:count]\n        # \u8fdb\u4e00\u6b65\u9650\u5236\u5230 max_keys\uff08\u5982\u679c\u63d0\u4f9b\uff09\n        if max_keys is not None:\n            clean_keys = clean_keys[:max_keys]\n\n        return KeysPage(\n            keys=clean_keys,\n            cursor=next_cursor,\n            has_more=next_cursor != 0,\n            total_scanned=len(clean_keys),\n        )\n\n    except Exception as e:\n        msg = f\"Redis SCAN \u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"en/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.set","title":"<code>set(key, value, ttl=None, ex=False, nx=False)</code>","text":"<p>\u540c\u6b65\u8bbe\u7f6e\u7f13\u5b58\u503c</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <code>value</code> <code>CacheValue</code> <p>\u7f13\u5b58\u503c</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4(\u79d2)</p> <code>None</code> <code>ex</code> <code>bool</code> <p>\u4fdd\u7559\u53c2\u6570,Redis \u59cb\u7ec8\u4f7f\u7528\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4</p> <code>False</code> <code>nx</code> <code>bool</code> <p>\u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e(SET NX)</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>\u662f\u5426\u8bbe\u7f6e\u6210\u529f</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>def set(\n    self,\n    key: CacheKey,\n    value: CacheValue,\n    ttl: int | None = None,\n    ex: bool = False,\n    nx: bool = False,\n) -&gt; bool:\n    \"\"\"\n    \u540c\u6b65\u8bbe\u7f6e\u7f13\u5b58\u503c\n\n    Args:\n        key: \u7f13\u5b58\u952e\n        value: \u7f13\u5b58\u503c\n        ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2)\n        ex: \u4fdd\u7559\u53c2\u6570,Redis \u59cb\u7ec8\u4f7f\u7528\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4\n        nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e(SET NX)\n\n    Returns:\n        \u662f\u5426\u8bbe\u7f6e\u6210\u529f\n    \"\"\"\n    try:\n        full_key = self._make_key(key)\n        value_bytes = self._serializer.serialize(value)\n\n        # \u5f53 ttl &lt;= 0 \u6216 None \u65f6\uff0c\u4e0d\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\uff0c\u907f\u514d Redis invalid expire time \u9519\u8bef\n        if ttl is not None and ttl &gt; 0:\n            result = self._client.set(\n                full_key,\n                value_bytes,\n                ex=ttl,  # \u8fc7\u671f\u65f6\u95f4(\u79d2)\n                nx=nx,  # \u4ec5\u5f53\u4e0d\u5b58\u5728\u65f6\u8bbe\u7f6e\n            )\n        else:\n            result = self._client.set(\n                full_key,\n                value_bytes,\n                nx=nx,\n            )\n\n        # nx=True \u65f6,\u5982\u679c\u952e\u5df2\u5b58\u5728\u5219\u8fd4\u56de None\n        return result is not False and result is not None\n\n    except Exception as e:\n        msg = f\"Redis SET \u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"en/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.set_many","title":"<code>set_many(mapping, ttl=None)</code>","text":"<p>\u6279\u91cf\u8bbe\u7f6e\uff08\u4f7f\u7528\u7ba1\u9053\u4f18\u5316\uff09</p> <p>\u4f7f\u7528 Pipeline \u6279\u91cf\u63d0\u4ea4\u547d\u4ee4\uff0c\u51cf\u5c11\u7f51\u7edc\u5f80\u8fd4\u3002</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>def set_many(\n    self,\n    mapping: dict[CacheKey, CacheValue],\n    ttl: int | None = None,\n) -&gt; None:\n    \"\"\"\n    \u6279\u91cf\u8bbe\u7f6e\uff08\u4f7f\u7528\u7ba1\u9053\u4f18\u5316\uff09\n\n    \u4f7f\u7528 Pipeline \u6279\u91cf\u63d0\u4ea4\u547d\u4ee4\uff0c\u51cf\u5c11\u7f51\u7edc\u5f80\u8fd4\u3002\n    \"\"\"\n    if not mapping:\n        return\n\n    try:\n        # \u4f7f\u7528 Pipeline \u6279\u91cf\u6267\u884c\n        pipe = self._client.pipeline()\n\n        for key, value in mapping.items():\n            full_key = self._make_key(key)\n            value_bytes = self._serializer.serialize(value)\n\n            if ttl is not None and ttl &gt; 0:\n                pipe.setex(full_key, ttl, value_bytes)\n            else:\n                pipe.set(full_key, value_bytes)\n\n        pipe.execute()\n\n    except Exception as e:\n        msg = f\"Redis MSET \u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"en/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.ttl","title":"<code>ttl(key)</code>","text":"<p>\u83b7\u53d6\u952e\u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4</p> <p>Returns:</p> Type Description <code>int</code> <p>\u5269\u4f59\u79d2\u6570,-1 \u8868\u793a\u6c38\u4e0d\u8fc7\u671f,-2 \u8868\u793a\u952e\u4e0d\u5b58\u5728</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>def ttl(self, key: CacheKey) -&gt; int:\n    \"\"\"\n    \u83b7\u53d6\u952e\u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4\n\n    Returns:\n        \u5269\u4f59\u79d2\u6570,-1 \u8868\u793a\u6c38\u4e0d\u8fc7\u671f,-2 \u8868\u793a\u952e\u4e0d\u5b58\u5728\n    \"\"\"\n    try:\n        full_key = self._make_key(key)\n        return self._client.ttl(full_key)\n    except Exception as e:\n        msg = f\"Redis TTL \u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"zh/","title":"\u6982\u8ff0","text":"<p>Symphra Cache \u662f\u4e00\u4e2a\u751f\u4ea7\u7ea7 Python \u5f02\u6b65\u7f13\u5b58\u5e93\uff0c\u652f\u6301\u5185\u5b58\u3001\u6587\u4ef6\uff08\u70ed\u91cd\u8f7d\uff09\u4e0e Redis \u540e\u7aef\uff0c\u63d0\u4f9b\u88c5\u9970\u5668\u3001\u7f13\u5b58\u5931\u6548\u3001\u9884\u70ed\u4e0e\u76d1\u63a7\u5bfc\u51fa\u7b49\u80fd\u529b\u3002</p> <ul> <li>\u652f\u6301\u540c\u6b65\u4e0e\u5f02\u6b65\u51fd\u6570\u7f13\u5b58</li> <li>\u591a\u540e\u7aef\u9009\u62e9\uff1a\u5185\u5b58\u3001\u6587\u4ef6\u3001Redis</li> <li>\u7075\u6d3b\u7684\u952e\u7a7a\u95f4\u4e0e\u5e8f\u5217\u5316\u7b56\u7565</li> <li>\u5185\u7f6e\u7f13\u5b58\u5931\u6548\u3001\u5206\u5e03\u5f0f\u9501\u3001\u9884\u70ed\u5de5\u5177</li> <li>\u76d1\u63a7\u6307\u6807\u5bfc\u51fa\u81f3 Prometheus / StatsD</li> </ul> <p>\u7ee7\u7eed\u9605\u8bfb\uff1a - \u5b89\u88c5: zh/installation.md - \u5feb\u901f\u5165\u95e8: zh/getting-started.md - API \u53c2\u8003: zh/api/index.md</p>"},{"location":"zh/best-practices/","title":"\u6700\u4f73\u5b9e\u8df5","text":"<p>\u5e2e\u52a9\u4f60\u7528 Symphra Cache \u6784\u5efa\u5065\u58ee\u4e0e\u9ad8\u6548\u7684\u7f13\u5b58\u7b56\u7565\u3002</p>"},{"location":"zh/best-practices/#_2","title":"\u952e\u4e0e\u547d\u540d\u7a7a\u95f4","text":"<ul> <li>\u4f7f\u7528\u4e00\u81f4\u7684 <code>key_prefix</code>\uff08\u5982 <code>user:</code>\uff09</li> <li>\u907f\u514d\u76f4\u63a5\u5d4c\u5165\u6613\u53d8\u53c2\u6570\uff0c\u5c3d\u91cf\u89c4\u8303\u5316</li> </ul>"},{"location":"zh/best-practices/#ttl","title":"TTL \u4e0e\u65b0\u9c9c\u5ea6","text":"<ul> <li>\u6839\u636e\u6570\u636e\u6ce2\u52a8\u4e0e SLA \u9009\u62e9 TTL</li> <li>TTL \u4e0e\u663e\u5f0f\u5931\u6548\u7ec4\u5408\u4f7f\u7528</li> </ul>"},{"location":"zh/best-practices/#_3","title":"\u88c5\u9970\u5668","text":"<ul> <li>\u9996\u9009 <code>@cache</code> \u4e0e <code>@acache</code></li> <li>\u4fdd\u6301\u51fd\u6570\u53c2\u6570\u53ef JSON \u5e8f\u5217\u5316\u6216\u5b9e\u73b0\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316</li> </ul>"},{"location":"zh/best-practices/#_4","title":"\u540e\u7aef\u9009\u62e9","text":"<ul> <li><code>MemoryBackend</code>\uff1a\u5355\u8fdb\u7a0b\u6700\u5feb</li> <li><code>FileBackend</code>\uff1a\u5f00\u53d1\u4e0e\u7b80\u5355\u6301\u4e45\u5316</li> <li><code>RedisBackend</code>\uff1a\u5171\u4eab\u3001\u6301\u4e45\u5316\u4e0e\u6c34\u5e73\u6269\u5c55</li> </ul>"},{"location":"zh/best-practices/#_5","title":"\u76d1\u63a7\u4e0e\u8fd0\u7ef4","text":"<ul> <li>\u8ffd\u8e2a\u547d\u4e2d/\u672a\u547d\u4e2d\u3001\u5ef6\u8fdf\u5206\u4f4d\u4e0e\u9519\u8bef\u7387</li> <li>\u5bf9\u672a\u547d\u4e2d\u6fc0\u589e\u4e0e\u540e\u7aef\u8d85\u65f6\u8bbe\u7f6e\u544a\u8b66</li> <li>\u5728\u6d41\u91cf\u9ad8\u5cf0\u524d\u8fdb\u884c\u5173\u952e\u8def\u5f84\u9884\u70ed</li> </ul>"},{"location":"zh/best-practices/#_6","title":"\u6d4b\u8bd5","text":"<ul> <li>\u5355\u5143\u6d4b\u8bd5\u4e2d\u6a21\u62df\u540e\u7aef\u4ee5\u4fdd\u8bc1\u786e\u5b9a\u6027</li> <li>\u6821\u9a8c\u7f13\u5b58\u952e\u4e0e\u5931\u6548\u8def\u5f84\u7684\u6b63\u786e\u6027</li> </ul>"},{"location":"zh/changelog/","title":"\u53d8\u66f4\u65e5\u5fd7","text":"<p>\u672c\u9875\u5c55\u793a\u9879\u76ee\u7684\u53d1\u5e03\u4e0e\u53d8\u66f4\u8bb0\u5f55\u3002\u4ed3\u5e93\u5185\u7684\u6743\u5a01\u7248\u672c\u8bf7\u53c2\u89c1 <code>CHANGELOG.md</code>\u3002</p> <p>\u683c\u5f0f\u9075\u5faa Keep a Changelog \u5e76\u9075\u5faa \u8bed\u4e49\u5316\u7248\u672c\u3002</p>"},{"location":"zh/changelog/#_2","title":"\u672a\u53d1\u5e03","text":""},{"location":"zh/changelog/#_3","title":"\u8ba1\u5212\u7279\u6027","text":"<ul> <li>Prometheus/StatsD \u76d1\u63a7\u5bfc\u51fa\u5668</li> <li>\u9ad8\u7ea7\u7f13\u5b58\u9884\u70ed\u7b56\u7565</li> <li>\u7f13\u5b58\u5931\u6548\u901a\u77e5</li> <li>\u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5</li> </ul>"},{"location":"zh/changelog/#010-2025-10-25","title":"0.1.0 - 2025-10-25","text":""},{"location":"zh/changelog/#-","title":"\u65b0\u589e - \u6838\u5fc3\u540e\u7aef","text":"<ul> <li>MemoryBackend: \u9ad8\u6027\u80fd\u5185\u5b58\u7f13\u5b58</li> <li>LRU \u6dd8\u6c70\u7b56\u7565\uff08\u57fa\u4e8e OrderedDict, O(1) \u590d\u6742\u5ea6\uff09</li> <li>\u540e\u53f0 TTL \u6e05\u7406\uff08\u5b88\u62a4\u7ebf\u7a0b\uff09</li> <li>\u7ebf\u7a0b\u5b89\u5168\uff08RLock \u4fdd\u62a4\uff09</li> <li> <p>\u6279\u91cf\u64cd\u4f5c\u4f18\u5316</p> </li> <li> <p>FileBackend: \u6301\u4e45\u5316\u6587\u4ef6\u7f13\u5b58</p> </li> <li>\u57fa\u4e8e SQLite WAL \u6a21\u5f0f</li> <li>\u70ed\u91cd\u8f7d\u652f\u6301\uff08\u5f00\u53d1\u6a21\u5f0f\uff09</li> <li>LRU \u6dd8\u6c70\uff08\u57fa\u4e8e last_access \u5b57\u6bb5\uff09</li> <li> <p>\u5b8c\u6574\u7684\u5f02\u6b65\u652f\u6301\uff08aiosqlite\uff09</p> </li> <li> <p>RedisBackend: \u5206\u5e03\u5f0f\u7f13\u5b58</p> </li> <li>redis-py 4.x+ \u652f\u6301</li> <li>\u8fde\u63a5\u6c60\u4f18\u5316</li> <li>\u6279\u91cf\u64cd\u4f5c\uff08MGET/MSET \u7ba1\u9053\uff09</li> <li>\u539f\u5b50\u64cd\u4f5c\uff08incr/decr\uff09</li> </ul>"},{"location":"zh/changelog/#-_1","title":"\u65b0\u589e - \u6838\u5fc3\u529f\u80fd","text":"<ul> <li>\u7edf\u4e00\u7684\u7f13\u5b58\u7ba1\u7406\u5668 (<code>CacheManager</code>)</li> <li>\u540c\u6b65\u548c\u5f02\u6b65\u53cc API\uff08get/aget, set/aset, \u7b49\uff09</li> <li>TTL \u8fc7\u671f\u63a7\u5236\uff08\u79d2\u7ea7\u7cbe\u5ea6\uff09</li> <li>\u6279\u91cf\u64cd\u4f5c\uff08get_many, set_many, delete_many\uff09</li> <li>\u5f02\u5e38\u5c42\u6b21\u7ed3\u6784\uff088 \u4e2a\u81ea\u5b9a\u4e49\u5f02\u5e38\u7c7b\uff09</li> </ul>"},{"location":"zh/changelog/#-_2","title":"\u65b0\u589e - \u88c5\u9970\u5668","text":"<ul> <li><code>@cache</code>: \u540c\u6b65\u51fd\u6570\u7f13\u5b58\u88c5\u9970\u5668</li> <li><code>@acache</code>: \u5f02\u6b65\u51fd\u6570\u7f13\u5b58\u88c5\u9970\u5668</li> <li><code>@cache_invalidate</code>: \u7f13\u5b58\u5931\u6548\u88c5\u9970\u5668</li> <li><code>CachedProperty</code>: \u7f13\u5b58\u5c5e\u6027\u88c5\u9970\u5668</li> <li>\u81ea\u5b9a\u4e49\u952e\u751f\u6210\u7b56\u7565</li> </ul>"},{"location":"zh/changelog/#-_3","title":"\u65b0\u589e - \u5e8f\u5217\u5316","text":"<ul> <li>JSON \u5e8f\u5217\u5316\u5668\uff08\u8de8\u8bed\u8a00\u517c\u5bb9\uff09</li> <li>Pickle \u5e8f\u5217\u5316\u5668\uff08\u652f\u6301\u590d\u6742\u5bf9\u8c61\uff09</li> <li>MessagePack \u5e8f\u5217\u5316\u5668\uff08\u9ad8\u6027\u80fd\uff09</li> <li>\u53ef\u6269\u5c55\u7684\u5e8f\u5217\u5316\u5668\u6ce8\u518c\u673a\u5236</li> </ul>"},{"location":"zh/changelog/#-_4","title":"\u65b0\u589e - \u9ad8\u7ea7\u7279\u6027","text":"<ul> <li>\u5206\u5e03\u5f0f\u9501\uff08DistributedLock\uff09</li> <li>\u552f\u4e00\u6807\u8bc6\u7b26\u9632\u6b62\u9501\u51b2\u7a81</li> <li>\u963b\u585e\u548c\u975e\u963b\u585e\u6a21\u5f0f</li> <li>\u81ea\u52a8\u8d85\u65f6\u91ca\u653e</li> </ul>"},{"location":"zh/changelog/#-_5","title":"\u65b0\u589e - \u6d4b\u8bd5","text":"<ul> <li>73 \u4e2a\u5355\u5143\u6d4b\u8bd5\uff0c\u5168\u90e8\u901a\u8fc7</li> <li>\u6d4b\u8bd5\u8986\u76d6\u6240\u6709\u6838\u5fc3\u529f\u80fd</li> <li>\u5185\u5b58\u540e\u7aef\uff1a27 \u4e2a\u6d4b\u8bd5</li> <li>\u6587\u4ef6\u540e\u7aef\uff1a16 \u4e2a\u6d4b\u8bd5</li> <li>\u5e8f\u5217\u5316\u5668\uff1a8 \u4e2a\u6d4b\u8bd5</li> <li>\u88c5\u9970\u5668\uff1a5 \u4e2a\u6d4b\u8bd5</li> <li>\u5f02\u5e38\u548c\u7c7b\u578b\uff1a17 \u4e2a\u6d4b\u8bd5</li> </ul>"},{"location":"zh/changelog/#-_6","title":"\u65b0\u589e - \u6587\u6863","text":"<ul> <li>\u5b8c\u6574\u7684\u4e2d\u6587\u4ee3\u7801\u6ce8\u91ca\uff082000+ \u884c\uff09</li> <li>3 \u4e2a\u4f7f\u7528\u793a\u4f8b\uff08basic_usage, decorator_usage, file_backend_usage\uff09</li> <li>\u53cc\u8bed README\uff08English + \u4e2d\u6587\uff09</li> <li>\u5b9e\u73b0\u9075\u5faa SOLID \u539f\u5219</li> </ul>"},{"location":"zh/changelog/#_4","title":"\u6280\u672f\u7ec6\u8282","text":"<ul> <li>Python 3.11+ \u652f\u6301</li> <li>\u57fa\u4e8e uv \u5305\u7ba1\u7406\u5668</li> <li>Mypy \u4e25\u683c\u6a21\u5f0f\u901a\u8fc7</li> <li>Ruff \u683c\u5f0f\u5316\u548c Lint</li> <li>GitHub Actions CI/CD</li> </ul>"},{"location":"zh/faq/","title":"\u5e38\u89c1\u95ee\u9898","text":""},{"location":"zh/faq/#_2","title":"\u662f\u5426\u540c\u65f6\u652f\u6301\u540c\u6b65\u4e0e\u5f02\u6b65\uff1f","text":"<p>\u652f\u6301\u3002\u540c\u6b65\u7528 <code>@cache</code>\uff0c\u5f02\u6b65\u7528 <code>@acache</code>\u3002</p>"},{"location":"zh/faq/#_3","title":"\u5982\u4f55\u9009\u62e9\u540e\u7aef\uff1f","text":"<ul> <li><code>MemoryBackend</code>\uff1a\u6700\u5feb\uff0c\u8fdb\u7a0b\u5185</li> <li><code>FileBackend</code>\uff1a\u7b80\u5355\u6301\u4e45\u5316\uff0c\u70ed\u91cd\u8f7d</li> <li><code>RedisBackend</code>\uff1a\u5171\u4eab\u3001\u6301\u4e45\u5316\u3001\u6c34\u5e73\u6269\u5c55</li> </ul>"},{"location":"zh/faq/#_4","title":"\u5982\u4f55\u5931\u6548\u7279\u5b9a\u952e\uff1f","text":"<p>\u4f7f\u7528 <code>CacheInvalidator.invalidate_key(\"prefix:...:id\")</code> \u6216 <code>@cache_invalidate</code>\u3002</p>"},{"location":"zh/faq/#_5","title":"\u53ef\u4ee5\u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\u5417\uff1f","text":"<p>\u53ef\u4ee5\u3002\u4f7f\u7528 <code>serializers.get_serializer(...)</code> \u6216\u5b9e\u73b0 <code>BaseSerializer</code>\u3002</p>"},{"location":"zh/faq/#_6","title":"\u662f\u5426\u63d0\u4f9b\u76d1\u63a7\u6307\u6807\uff1f","text":"<p>\u63d0\u4f9b\u3002\u4f7f\u7528 <code>CacheMonitor</code>\uff0c\u5e76\u901a\u8fc7 Prometheus / StatsD \u5bfc\u51fa\u3002</p>"},{"location":"zh/faq/#_7","title":"\u5982\u4f55\u4ece\u6587\u4ef6\u914d\u7f6e\uff1f","text":"<p>\u4ece YAML/TOML/JSON \u52a0\u8f7d <code>CacheConfig</code>\uff0c\u518d\u6784\u9020 <code>CacheManager</code>\u3002</p>"},{"location":"zh/getting-started/","title":"\u5feb\u901f\u5165\u95e8","text":""},{"location":"zh/getting-started/#_2","title":"\u57fa\u7840\u793a\u4f8b","text":"<pre><code>from symphra_cache import CacheManager\nfrom symphra_cache.backends import MemoryBackend\n\ncache = CacheManager(backend=MemoryBackend())\n\nresult = await cache.get_or_set(\"hello\", ttl=60, func=lambda: \"world\")\nprint(result)\n</code></pre>"},{"location":"zh/getting-started/#_3","title":"\u88c5\u9970\u5668\uff08\u540c\u6b65 / \u5f02\u6b65\uff09","text":"<pre><code>from symphra_cache.decorators import cache, acache\n\n@cache(cache, ttl=120, key_prefix=\"sync:\")\ndef add(x: int, y: int):\n    return x + y\n\n@acache(cache, ttl=120, key_prefix=\"async:\")\nasync def fetch_user(uid: int):\n    return {\"id\": uid}\n</code></pre>"},{"location":"zh/getting-started/#_4","title":"\u4ece\u914d\u7f6e\u6587\u4ef6\u52a0\u8f7d","text":"<pre><code>from symphra_cache.config import CacheConfig\nfrom symphra_cache import CacheManager\n\nconf = CacheConfig.from_yaml(\"config/cache.yaml\")\nmanager = CacheManager.from_config(conf)\n</code></pre>"},{"location":"zh/installation/","title":"\u5b89\u88c5","text":"<p>\u8981\u6c42\uff1aPython 3.9+</p>"},{"location":"zh/installation/#_2","title":"\u57fa\u672c\u5b89\u88c5","text":"<pre><code>pip install symphra-cache\n</code></pre>"},{"location":"zh/installation/#_3","title":"\u53ef\u9009\u7ec4\u4ef6","text":"<ul> <li>\u76d1\u63a7\u5bfc\u51fa\uff08Prometheus/StatsD\uff09\uff1a <pre><code>pip install \"symphra-cache[monitoring]\"\n</code></pre></li> <li>\u6587\u6863\u5de5\u5177\uff08MkDocs/mkdocstrings\uff09\uff1a <pre><code>pip install \"symphra-cache[docs]\"\n</code></pre></li> <li>Redis \u6027\u80fd\uff08hiredis\uff09\uff1a <pre><code>pip install \"symphra-cache[hiredis]\"\n</code></pre></li> </ul>"},{"location":"zh/installation/#_4","title":"\u9a8c\u8bc1\u5b89\u88c5","text":"<pre><code>import symphra_cache\nprint(symphra_cache.__version__)\n</code></pre>"},{"location":"zh/use-cases/","title":"\u4f7f\u7528\u573a\u666f","text":"<p>\u5c55\u793a Symphra Cache \u5728\u5e94\u7528\u4e2d\u7684\u5178\u578b\u4f7f\u7528\u65b9\u5f0f\u3002</p>"},{"location":"zh/use-cases/#web-api","title":"Web API \u54cd\u5e94\u7f13\u5b58","text":"<pre><code>from fastapi import FastAPI\nfrom symphra_cache import CacheManager\nfrom symphra_cache.backends import RedisBackend\nfrom symphra_cache.decorators import cache\n\napp = FastAPI()\ncache = CacheManager(backend=RedisBackend(url=\"redis://localhost:6379\"))\n\n@cache(cache, ttl=60, key_prefix=\"api:v1:prod:\")\nasync def fetch_products(category: str):\n    return [{\"id\": 1, \"name\": \"Keyboard\"}]\n</code></pre>"},{"location":"zh/use-cases/#_2","title":"\u7279\u6027\u5f00\u5173\u4e0e\u914d\u7f6e","text":"<pre><code>from symphra_cache.decorators import cache\n\n@cache(cache, ttl=5, key_prefix=\"flags:\")\nasync def get_flag(name: str) -&gt; bool:\n    return True\n</code></pre>"},{"location":"zh/use-cases/#_3","title":"\u8ba1\u7b97\u7ed3\u679c\u7f13\u5b58","text":"<pre><code>@cache(cache, ttl=300, key_prefix=\"calc:\")\nasync def expensive_fn(x: int, y: int):\n    return x ** y\n</code></pre>"},{"location":"zh/use-cases/#_4","title":"\u6279\u5904\u7406\u4f5c\u4e1a","text":"<ul> <li>\u9ad8\u5cf0\u524d\u9884\u70ed\u70ed\u95e8\u952e</li> <li>\u591c\u95f4 ETL \u540e\u6309\u5206\u7ec4\u5931\u6548</li> </ul>"},{"location":"zh/use-cases/#_5","title":"\u53ef\u89c2\u6d4b\u6027","text":"<ul> <li>\u76d1\u63a7\u547d\u4e2d/\u672a\u547d\u4e2d\u4e0e\u5ef6\u8fdf</li> <li>\u5bfc\u51fa\u81f3 Prometheus/StatsD \u505a\u770b\u677f</li> </ul>"},{"location":"zh/advanced/invalidation/","title":"\u7f13\u5b58\u5931\u6548\u901a\u77e5","text":"<p>\u7f13\u5b58\u5931\u6548\u901a\u77e5\u662f Symphra Cache \u63d0\u4f9b\u7684\u9ad8\u7ea7\u529f\u80fd\uff0c\u7528\u4e8e\u5728\u6570\u636e\u66f4\u65b0\u65f6\u4e3b\u52a8\u6e05\u9664\u6216\u66f4\u65b0\u7f13\u5b58\u4e2d\u7684\u8fc7\u671f\u6570\u636e\uff0c\u786e\u4fdd\u6570\u636e\u4e00\u81f4\u6027\u3002</p>"},{"location":"zh/advanced/invalidation/#_2","title":"\u6982\u8ff0","text":"<p>\u7f13\u5b58\u5931\u6548\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u786e\u4fdd\u6570\u636e\u4e00\u81f4\u6027\uff1a</p> <ul> <li>\u4e3b\u52a8\u5931\u6548\uff1a\u5728\u6570\u636e\u66f4\u65b0\u65f6\u4e3b\u52a8\u6e05\u9664\u76f8\u5173\u7f13\u5b58</li> <li>\u6a21\u5f0f\u5339\u914d\uff1a\u57fa\u4e8e\u952e\u6a21\u5f0f\u6279\u91cf\u6e05\u9664\u7f13\u5b58</li> <li>\u4f9d\u8d56\u7ba1\u7406\uff1a\u6e05\u9664\u4e3b\u952e\u65f6\u540c\u65f6\u6e05\u9664\u76f8\u5173\u4f9d\u8d56\u952e</li> <li>\u5ef6\u8fdf\u5931\u6548\uff1a\u5728\u6307\u5b9a\u65f6\u95f4\u540e\u81ea\u52a8\u6e05\u9664\u7f13\u5b58</li> </ul>"},{"location":"zh/advanced/invalidation/#_3","title":"\u57fa\u7840\u7528\u6cd5","text":""},{"location":"zh/advanced/invalidation/#_4","title":"\u952e\u7ea7\u5931\u6548","text":"<pre><code>from symphra_cache import CacheManager, MemoryBackend\nfrom symphra_cache.invalidation import CacheInvalidator\n\n# \u521b\u5efa\u7f13\u5b58\u7ba1\u7406\u5668\ncache = CacheManager(backend=MemoryBackend())\n\n# \u521b\u5efa\u5931\u6548\u5668\ninvalidator = CacheInvalidator(cache)\n\n# \u5931\u6548\u7279\u5b9a\u952e\nkeys_to_invalidate = [\"user:123\", \"user:456\", \"user:789\"]\nawait invalidator.invalidate_keys(keys_to_invalidate)\n</code></pre>"},{"location":"zh/advanced/invalidation/#_5","title":"\u6a21\u5f0f\u5339\u914d\u5931\u6548","text":"<pre><code># \u5931\u6548\u6240\u6709\u7528\u6237\u6570\u636e\nawait invalidator.invalidate_pattern(\"user:*\")\n\n# \u5931\u6548\u7279\u5b9a\u524d\u7f00\u7684\u6570\u636e\nawait invalidator.invalidate_prefix(\"session:\")\n\n# \u4f7f\u7528\u901a\u914d\u7b26\u6a21\u5f0f\nawait invalidator.invalidate_pattern(\"product:*:price\")\n</code></pre>"},{"location":"zh/advanced/invalidation/#_6","title":"\u6761\u4ef6\u5931\u6548","text":"<pre><code># \u57fa\u4e8e\u6761\u4ef6\u5931\u6548\u6570\u636e\ndef should_invalidate(key, value):\n    \"\"\"\u68c0\u67e5\u662f\u5426\u5e94\u8be5\u5931\u6548\u8be5\u952e\u503c\u5bf9\"\"\"\n    return \"temp\" in key or value is None\n\nawait invalidator.invalidate_by_condition(should_invalidate)\n</code></pre>"},{"location":"zh/advanced/invalidation/#_7","title":"\u9ad8\u7ea7\u529f\u80fd","text":""},{"location":"zh/advanced/invalidation/#_8","title":"\u7f13\u5b58\u7ec4\u7ba1\u7406","text":"<pre><code># \u521b\u5efa\u7528\u6237\u7ec4\u5931\u6548\u5668\nuser_group = invalidator.create_cache_group_invalidator(\"user:\")\n\n# \u5931\u6548\u6574\u4e2a\u7528\u6237\u7ec4\nawait user_group.invalidate_all()\n\n# \u5931\u6548\u7528\u6237\u7ec4\u4e2d\u7684\u7279\u5b9a\u6a21\u5f0f\nawait user_group.invalidate_pattern(\"*:profile\")\n\n# \u5931\u6548\u7528\u6237\u7ec4\u4e2d\u7684\u7279\u5b9a\u952e\nawait user_group.invalidate_keys([\"profile\", \"settings\"])\n</code></pre>"},{"location":"zh/advanced/invalidation/#_9","title":"\u4f9d\u8d56\u5931\u6548","text":"<pre><code># \u5b9a\u4e49\u4f9d\u8d56\u89e3\u6790\u51fd\u6570\ndef resolve_user_dependencies(user_keys):\n    \"\"\"\u89e3\u6790\u7528\u6237\u76f8\u5173\u7684\u6240\u6709\u4f9d\u8d56\u952e\"\"\"\n    dependencies = []\n    for key in user_keys:\n        if key.startswith(\"user:profile:\"):\n            user_id = key.split(\":\")[-1]\n            dependencies.extend([\n                f\"user:posts:{user_id}\",\n                f\"user:followers:{user_id}\",\n                f\"user:following:{user_id}\",\n                f\"stats:user:{user_id}\",\n            ])\n    return dependencies\n\n# \u5931\u6548\u7528\u6237\u53ca\u5176\u6240\u6709\u4f9d\u8d56\nprimary_keys = [\"user:profile:123\"]\nawait invalidator.invalidate_with_dependencies(\n    primary_keys,\n    resolve_user_dependencies\n)\n</code></pre>"},{"location":"zh/advanced/invalidation/#_10","title":"\u5ef6\u8fdf\u5931\u6548","text":"<pre><code># 2\u79d2\u540e\u5931\u6548\u7279\u5b9a\u952e\nkeys_to_delay = [\"temp:data1\", \"temp:data2\"]\ntask = await invalidator.schedule_invalidation(keys_to_delay, delay=2.0)\n\n# \u7b49\u5f85\u5ef6\u8fdf\u5931\u6548\u5b8c\u6210\nawait task\n</code></pre>"},{"location":"zh/advanced/invalidation/#_11","title":"\u6761\u4ef6\u5ef6\u8fdf\u5931\u6548","text":"<pre><code># \u5f53\u6761\u4ef6\u6ee1\u8db3\u65f6\u624d\u5931\u6548\ndef check_condition():\n    return some_global_flag is True\n\ntask = await invalidator.conditional_invalidation(\n    condition=check_condition,\n    keys=[\"conditional:key\"],\n    check_interval=1.0  # \u6bcf\u79d2\u68c0\u67e5\u4e00\u6b21\n)\n</code></pre>"},{"location":"zh/advanced/invalidation/#_12","title":"\u6279\u91cf\u64cd\u4f5c\u4f18\u5316","text":""},{"location":"zh/advanced/invalidation/#_13","title":"\u5927\u6570\u636e\u96c6\u5931\u6548","text":"<pre><code># \u5927\u91cf\u952e\u7684\u5206\u6279\u5931\u6548\nall_keys = [f\"key:{i}\" for i in range(10000)]\n\n# \u4f7f\u7528\u81ea\u5b9a\u4e49\u6279\u91cf\u5927\u5c0f\ninvalidator = CacheInvalidator(cache, batch_size=500)\nawait invalidator.invalidate_keys(all_keys)\n</code></pre>"},{"location":"zh/advanced/invalidation/#_14","title":"\u6027\u80fd\u76d1\u63a7","text":"<pre><code># \u76d1\u63a7\u5931\u6548\u64cd\u4f5c\u6027\u80fd\nstart_time = time.time()\ninvalidated_count = await invalidator.invalidate_pattern(\"temp:*\")\nelapsed = time.time() - start_time\n\nprint(f\"\u5931\u6548 {invalidated_count} \u4e2a\u952e\uff0c\u8017\u65f6 {elapsed:.3f} \u79d2\")\n</code></pre>"},{"location":"zh/advanced/invalidation/#_15","title":"\u7edf\u8ba1\u548c\u76d1\u63a7","text":""},{"location":"zh/advanced/invalidation/#_16","title":"\u5931\u6548\u7edf\u8ba1","text":"<pre><code>stats = invalidator.get_invalidation_stats()\nprint(f\"\u603b\u64cd\u4f5c\u6570: {stats['total_operations']}\")\nprint(f\"\u603b\u5931\u6548\u952e\u6570: {stats['total_invalidated_keys']}\")\nprint(f\"\u6700\u540e\u64cd\u4f5c\u65f6\u95f4: {stats['last_invalidation_time']}\")\nprint(f\"\u6700\u540e\u64cd\u4f5c\u8be6\u60c5: {stats['last_operation']}\")\n</code></pre>"},{"location":"zh/advanced/invalidation/#_17","title":"\u5931\u6548\u5386\u53f2","text":"<pre><code># \u83b7\u53d6\u6700\u8fd110\u6b21\u5931\u6548\u64cd\u4f5c\u5386\u53f2\nhistory = invalidator.get_invalidation_history(limit=10)\nfor i, record in enumerate(history, 1):\n    print(f\"\u64cd\u4f5c {i}:\")\n    print(f\"  \u65f6\u95f4: {record['timestamp']}\")\n    print(f\"  \u65b9\u6cd5: {record['method']}\")\n    print(f\"  \u8be6\u60c5: {record['details']}\")\n    print(f\"  \u5931\u6548\u952e\u6570: {record['invalidated_count']}\")\n</code></pre>"},{"location":"zh/advanced/invalidation/#_18","title":"\u5b9e\u9645\u5e94\u7528\u573a\u666f","text":""},{"location":"zh/advanced/invalidation/#_19","title":"\u7528\u6237\u6570\u636e\u66f4\u65b0","text":"<pre><code>async def update_user_profile(user_id, profile_data):\n    \"\"\"\u66f4\u65b0\u7528\u6237\u8d44\u6599\u5e76\u5931\u6548\u76f8\u5173\u7f13\u5b58\"\"\"\n    # 1. \u66f4\u65b0\u6570\u636e\u5e93\n    await database.update_user(user_id, profile_data)\n\n    # 2. \u5931\u6548\u7528\u6237\u76f8\u5173\u7f13\u5b58\n    invalidator = CacheInvalidator(cache)\n\n    # \u5931\u6548\u7528\u6237\u8d44\u6599\u7f13\u5b58\n    await invalidator.invalidate_keys([f\"user:profile:{user_id}\"])\n\n    # \u5931\u6548\u7528\u6237\u7edf\u8ba1\u7f13\u5b58\n    await invalidator.invalidate_pattern(f\"user:stats:{user_id}:*\")\n\n    # \u5931\u6548\u7528\u6237\u52a8\u6001\u7f13\u5b58\n    await invalidator.invalidate_pattern(f\"feed:user:{user_id}:*\")\n\n# \u4f7f\u7528\u793a\u4f8b\nawait update_user_profile(123, {\"name\": \"New Name\", \"avatar\": \"new_avatar.jpg\"})\n</code></pre>"},{"location":"zh/advanced/invalidation/#_20","title":"\u5546\u54c1\u4ef7\u683c\u66f4\u65b0","text":"<pre><code>async def update_product_price(product_id, new_price):\n    \"\"\"\u66f4\u65b0\u5546\u54c1\u4ef7\u683c\u5e76\u5931\u6548\u76f8\u5173\u7f13\u5b58\"\"\"\n    # 1. \u66f4\u65b0\u6570\u636e\u5e93\n    await database.update_price(product_id, new_price)\n\n    # 2. \u5931\u6548\u4ef7\u683c\u76f8\u5173\u7f13\u5b58\n    invalidator = CacheInvalidator(cache)\n\n    # \u5931\u6548\u5546\u54c1\u4ef7\u683c\u7f13\u5b58\n    await invalidator.invalidate_keys([f\"product:price:{product_id}\"])\n\n    # \u5931\u6548\u5546\u54c1\u8be6\u60c5\u7f13\u5b58\n    await invalidator.invalidate_keys([f\"product:detail:{product_id}\"])\n\n    # \u5931\u6548\u5206\u7c7b\u4ef7\u683c\u7f13\u5b58\n    category = await database.get_product_category(product_id)\n    await invalidator.invalidate_pattern(f\"category:{category}:products:*\")\n\n# \u4f7f\u7528\u793a\u4f8b\nawait update_product_price(101, 2999.99)\n</code></pre>"},{"location":"zh/advanced/invalidation/#_21","title":"\u914d\u7f6e\u66f4\u65b0","text":"<pre><code>async def update_app_config(config_key, config_value):\n    \"\"\"\u66f4\u65b0\u5e94\u7528\u914d\u7f6e\u5e76\u5931\u6548\u76f8\u5173\u7f13\u5b58\"\"\"\n    # 1. \u66f4\u65b0\u914d\u7f6e\n    await config_service.update(config_key, config_value)\n\n    # 2. \u5931\u6548\u914d\u7f6e\u7f13\u5b58\n    invalidator = CacheInvalidator(cache)\n\n    # \u5931\u6548\u7279\u5b9a\u914d\u7f6e\n    await invalidator.invalidate_keys([f\"config:{config_key}\"])\n\n    # \u5931\u6548\u6240\u6709\u914d\u7f6e\u7f13\u5b58\n    await invalidator.invalidate_prefix(\"config:\")\n\n    # \u5931\u6548\u4f9d\u8d56\u8be5\u914d\u7f6e\u7684\u529f\u80fd\u7f13\u5b58\n    await invalidator.invalidate_pattern(\"feature:*\")\n\n# \u4f7f\u7528\u793a\u4f8b\nawait update_app_config(\"maintenance_mode\", True)\n</code></pre>"},{"location":"zh/advanced/invalidation/#_22","title":"\u4f1a\u8bdd\u7ba1\u7406","text":"<pre><code>async def logout_user(user_id):\n    \"\"\"\u7528\u6237\u767b\u51fa\u5e76\u6e05\u7406\u4f1a\u8bdd\u7f13\u5b58\"\"\"\n    # 1. \u6e05\u7406\u4f1a\u8bdd\u72b6\u6001\n    await session_service.clear_session(user_id)\n\n    # 2. \u5931\u4f1a\u8bdd\u7f13\u5b58\n    invalidator = CacheInvalidator(cache)\n\n    # \u5931\u6548\u7528\u6237\u4f1a\u8bdd\n    await invalidator.invalidate_pattern(f\"session:user:{user_id}:*\")\n\n    # \u5931\u6548\u7528\u6237\u6743\u9650\u7f13\u5b58\n    await invalidator.invalidate_keys([f\"permissions:user:{user_id}\"])\n\n    # \u5931\u6548\u7528\u6237\u72b6\u6001\u7f13\u5b58\n    await invalidator.invalidate_keys([f\"status:user:{user_id}\"])\n\n# \u4f7f\u7528\u793a\u4f8b\nawait logout_user(123)\n</code></pre>"},{"location":"zh/advanced/invalidation/#_23","title":"\u6700\u4f73\u5b9e\u8df5","text":""},{"location":"zh/advanced/invalidation/#1","title":"1. \u5931\u6548\u7b56\u7565","text":"<ul> <li>\u53ca\u65f6\u5931\u6548\uff1a\u6570\u636e\u66f4\u65b0\u540e\u7acb\u5373\u5931\u6548\u76f8\u5173\u7f13\u5b58</li> <li>\u7cbe\u786e\u5931\u6548\uff1a\u53ea\u5931\u6548\u5fc5\u8981\u7684\u952e\uff0c\u907f\u514d\u8fc7\u5ea6\u6e05\u9664</li> <li>\u6279\u91cf\u5931\u6548\uff1a\u5927\u91cf\u952e\u4f7f\u7528\u6279\u91cf\u64cd\u4f5c\u63d0\u9ad8\u6548\u7387</li> <li>\u5f02\u6b65\u5931\u6548\uff1a\u975e\u5173\u952e\u5931\u6548\u4f7f\u7528\u5f02\u6b65\u64cd\u4f5c\u907f\u514d\u963b\u585e</li> </ul>"},{"location":"zh/advanced/invalidation/#2","title":"2. \u4f9d\u8d56\u7ba1\u7406","text":"<ul> <li>\u5efa\u7acb\u4f9d\u8d56\u56fe\uff1a\u660e\u786e\u6570\u636e\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb</li> <li>\u7ea7\u8054\u5931\u6548\uff1a\u4e3b\u6570\u636e\u53d8\u66f4\u65f6\u81ea\u52a8\u5931\u6548\u4f9d\u8d56\u6570\u636e</li> <li>\u907f\u514d\u5faa\u73af\uff1a\u9632\u6b62\u4f9d\u8d56\u5173\u7cfb\u5f62\u6210\u5faa\u73af</li> </ul>"},{"location":"zh/advanced/invalidation/#3","title":"3. \u6027\u80fd\u4f18\u5316","text":"<ul> <li>\u6279\u91cf\u64cd\u4f5c\uff1a\u4f7f\u7528\u6279\u91cf\u5931\u6548\u51cf\u5c11\u7f51\u7edc\u5f80\u8fd4</li> <li>\u6a21\u5f0f\u5339\u914d\uff1a\u5229\u7528\u6a21\u5f0f\u5339\u914d\u63d0\u9ad8\u5931\u6548\u6548\u7387</li> <li>\u5ef6\u8fdf\u5931\u6548\uff1a\u975e\u7d27\u6025\u5931\u6548\u53ef\u4ee5\u5ef6\u8fdf\u6267\u884c</li> </ul>"},{"location":"zh/advanced/invalidation/#4","title":"4. \u9519\u8bef\u5904\u7406","text":"<ul> <li>\u4f18\u96c5\u964d\u7ea7\uff1a\u5931\u6548\u5931\u8d25\u65f6\u8bb0\u5f55\u9519\u8bef\u4f46\u4e0d\u4e2d\u65ad\u4e1a\u52a1</li> <li>\u91cd\u8bd5\u673a\u5236\uff1a\u91cd\u8981\u5931\u6548\u64cd\u4f5c\u5b9e\u73b0\u91cd\u8bd5\u903b\u8f91</li> <li>\u76d1\u63a7\u544a\u8b66\uff1a\u76d1\u63a7\u5931\u6548\u64cd\u4f5c\u7684\u6210\u529f\u7387</li> </ul>"},{"location":"zh/advanced/invalidation/#5","title":"5. \u5206\u5e03\u5f0f\u8003\u8651","text":"<ul> <li>\u4e00\u81f4\u6027\uff1a\u5728\u5206\u5e03\u5f0f\u73af\u5883\u4e2d\u786e\u4fdd\u6240\u6709\u5b9e\u4f8b\u7684\u7f13\u5b58\u4e00\u81f4\u6027</li> <li>\u901a\u77e5\u673a\u5236\uff1a\u4f7f\u7528\u6d88\u606f\u961f\u5217\u901a\u77e5\u5176\u4ed6\u5b9e\u4f8b</li> <li>\u7248\u672c\u63a7\u5236\uff1a\u4f7f\u7528\u7248\u672c\u53f7\u907f\u514d\u5e76\u53d1\u66f4\u65b0\u95ee\u9898</li> </ul>"},{"location":"zh/advanced/invalidation/#_24","title":"\u9519\u8bef\u5904\u7406","text":""},{"location":"zh/advanced/invalidation/#_25","title":"\u5f02\u5e38\u6355\u83b7","text":"<pre><code>async def safe_invalidate(invalidator, keys):\n    \"\"\"\u5b89\u5168\u5931\u6548\uff0c\u5305\u542b\u9519\u8bef\u5904\u7406\"\"\"\n    try:\n        return await invalidator.invalidate_keys(keys)\n    except Exception as e:\n        print(f\"\u5931\u6548\u5931\u8d25: {e}\")\n        # \u8bb0\u5f55\u9519\u8bef\u65e5\u5fd7\n        # \u5b9e\u65bd\u964d\u7ea7\u7b56\u7565\n        return 0\n</code></pre>"},{"location":"zh/advanced/invalidation/#_26","title":"\u964d\u7ea7\u7b56\u7565","text":"<pre><code>async def invalidate_with_fallback(invalidator, keys):\n    \"\"\"\u5e26\u964d\u7ea7\u7b56\u7565\u7684\u5931\u6548\"\"\"\n    try:\n        return await invalidator.invalidate_keys(keys)\n    except Exception:\n        # \u964d\u7ea7\uff1a\u4f7f\u7528\u5355\u4e2a\u952e\u5931\u6548\n        invalidated = 0\n        for key in keys:\n            try:\n                if await invalidator.invalidate_keys([key]):\n                    invalidated += 1\n            except Exception:\n                continue\n        return invalidated\n</code></pre>"},{"location":"zh/advanced/invalidation/#_27","title":"\u6027\u80fd\u76d1\u63a7","text":""},{"location":"zh/advanced/invalidation/#_28","title":"\u5931\u6548\u6027\u80fd\u6307\u6807","text":"<pre><code>class InvalidationMonitor:\n    def __init__(self, invalidator):\n        self.invalidator = invalidator\n        self.metrics = {}\n\n    async def monitored_invalidate(self, method, *args, **kwargs):\n        \"\"\"\u76d1\u63a7\u5931\u6548\u64cd\u4f5c\u6027\u80fd\"\"\"\n        start_time = time.time()\n\n        if method == \"keys\":\n            result = await self.invalidator.invalidate_keys(*args, **kwargs)\n        elif method == \"pattern\":\n            result = await self.invalidator.invalidate_pattern(*args, **kwargs)\n        # ... \u5176\u4ed6\u65b9\u6cd5\n\n        elapsed = time.time() - start_time\n\n        # \u8bb0\u5f55\u6027\u80fd\u6307\u6807\n        self.metrics[method] = {\n            \"last_duration\": elapsed,\n            \"last_result\": result,\n            \"avg_duration\": self._calculate_avg(method, elapsed)\n        }\n\n        return result\n</code></pre> <p>\u901a\u8fc7\u5408\u7406\u4f7f\u7528\u7f13\u5b58\u5931\u6548\u901a\u77e5\u529f\u80fd\uff0c\u53ef\u4ee5\u786e\u4fdd\u7f13\u5b58\u6570\u636e\u7684\u4e00\u81f4\u6027\uff0c\u907f\u514d\u810f\u6570\u636e\u95ee\u9898\uff0c\u63d0\u5347\u7cfb\u7edf\u7684\u53ef\u9760\u6027\u548c\u7528\u6237\u4f53\u9a8c\u3002</p>"},{"location":"zh/advanced/monitoring/","title":"\u76d1\u63a7\u548c\u6307\u6807","text":"<p>Symphra Cache \u63d0\u4f9b\u4e86\u5168\u9762\u7684\u76d1\u63a7\u548c\u6307\u6807\u529f\u80fd\uff0c\u652f\u6301 Prometheus\u3001StatsD \u7b49\u4e3b\u6d41\u76d1\u63a7\u7cfb\u7edf\uff0c\u5e2e\u52a9\u60a8\u5b9e\u65f6\u4e86\u89e3\u7f13\u5b58\u7cfb\u7edf\u7684\u6027\u80fd\u548c\u5065\u5eb7\u72b6\u51b5\u3002</p>"},{"location":"zh/advanced/monitoring/#_2","title":"\u6982\u8ff0","text":"<p>\u76d1\u63a7\u529f\u80fd\u63d0\u4f9b\u4ee5\u4e0b\u80fd\u529b\uff1a</p> <ul> <li>\u6027\u80fd\u6307\u6807\uff1a\u547d\u4e2d\u7387\u3001\u5ef6\u8fdf\u3001\u541e\u5410\u91cf\u7b49\u5173\u952e\u6027\u80fd\u6307\u6807</li> <li>\u5065\u5eb7\u68c0\u67e5\uff1a\u7f13\u5b58\u8fde\u63a5\u72b6\u6001\u548c\u7cfb\u7edf\u5065\u5eb7\u5ea6</li> <li>\u591a\u683c\u5f0f\u5bfc\u51fa\uff1a\u652f\u6301 Prometheus\u3001StatsD \u7b49\u591a\u79cd\u76d1\u63a7\u683c\u5f0f</li> <li>\u5b9e\u65f6\u76d1\u63a7\uff1a\u5b9e\u65f6\u6536\u96c6\u548c\u5c55\u793a\u7f13\u5b58\u6027\u80fd\u6570\u636e</li> <li>\u81ea\u5b9a\u4e49\u6307\u6807\uff1a\u652f\u6301\u6dfb\u52a0\u4e1a\u52a1\u76f8\u5173\u7684\u81ea\u5b9a\u4e49\u6307\u6807</li> </ul>"},{"location":"zh/advanced/monitoring/#_3","title":"\u57fa\u7840\u76d1\u63a7","text":""},{"location":"zh/advanced/monitoring/#_4","title":"\u521b\u5efa\u76d1\u63a7\u5668","text":"<pre><code>from symphra_cache import CacheManager, MemoryBackend\nfrom symphra_cache.monitoring import CacheMonitor\n\n# \u521b\u5efa\u7f13\u5b58\u7ba1\u7406\u5668\ncache = CacheManager(backend=MemoryBackend())\n\n# \u521b\u5efa\u76d1\u63a7\u5668\nmonitor = CacheMonitor(cache)\n\n# \u6536\u96c6\u6307\u6807\nmetrics = await monitor.collect_metrics()\nprint(f\"\u7f13\u5b58\u5927\u5c0f: {len(cache)}\")\nprint(f\"\u547d\u4e2d\u7387: {metrics.get_hit_rate():.4f}\")\nprint(f\"\u603b\u64cd\u4f5c\u6570: {metrics.get_total_operations()}\")\n</code></pre>"},{"location":"zh/advanced/monitoring/#_5","title":"\u5065\u5eb7\u68c0\u67e5","text":"<pre><code># \u68c0\u67e5\u7f13\u5b58\u5065\u5eb7\u72b6\u6001\nhealth = monitor.get_health_status()\nprint(f\"\u5065\u5eb7\u72b6\u6001: {health['status']}\")\nprint(f\"\u7f13\u5b58\u5927\u5c0f: {health['cache_size']}\")\nprint(f\"\u8fd0\u884c\u65f6\u95f4: {health['uptime_seconds']:.2f}\u79d2\")\n\n# \u5f02\u6b65\u5065\u5eb7\u68c0\u67e5\nis_healthy = await cache.acheck_health()\nprint(f\"\u5f02\u6b65\u5065\u5eb7\u68c0\u67e5: {'\u5065\u5eb7' if is_healthy else '\u4e0d\u5065\u5eb7'}\")\n</code></pre>"},{"location":"zh/advanced/monitoring/#prometheus","title":"Prometheus \u76d1\u63a7","text":""},{"location":"zh/advanced/monitoring/#prometheus_1","title":"\u521b\u5efa Prometheus \u5bfc\u51fa\u5668","text":"<pre><code>from symphra_cache.monitoring.prometheus import PrometheusExporter\n\n# \u521b\u5efa Prometheus \u5bfc\u51fa\u5668\nexporter = PrometheusExporter(\n    monitor,\n    namespace=\"myapp\",\n    subsystem=\"cache\",\n    labels={\"instance\": \"web-server-01\", \"environment\": \"production\"}\n)\n\n# \u751f\u6210 Prometheus \u683c\u5f0f\u6307\u6807\nmetrics_text = exporter.generate_metrics()\nprint(metrics_text)\n</code></pre>"},{"location":"zh/advanced/monitoring/#prometheus_2","title":"Prometheus \u6307\u6807\u793a\u4f8b","text":"<pre><code># \u751f\u6210\u7684 Prometheus \u6307\u6807\u683c\u5f0f\n\"\"\"\n# HELP myapp_cache_size Current cache size\n# TYPE myapp_cache_size gauge\nmyapp_cache_size{instance=\"web-server-01\",environment=\"production\"} 1024\n\n# HELP myapp_cache_hit_rate Cache hit rate\n# TYPE myapp_cache_hit_rate gauge\nmyapp_cache_hit_rate{instance=\"web-server-01\",environment=\"production\"} 0.95\n\n# HELP myapp_cache_get_duration_seconds Time spent on GET operations\n# TYPE myapp_cache_get_duration_seconds histogram\nmyapp_cache_get_duration_seconds_bucket{le=\"0.001\",instance=\"web-server-01\",environment=\"production\"} 1000\nmyapp_cache_get_duration_seconds_bucket{le=\"0.005\",instance=\"web-server-01\",environment=\"production\"} 1500\nmyapp_cache_get_duration_seconds_count{instance=\"web-server-01\",environment=\"production\"} 2000\nmyapp_cache_get_duration_seconds_sum{instance=\"web-server-01\",environment=\"production\"} 1.5\n\"\"\"\n</code></pre>"},{"location":"zh/advanced/monitoring/#pushgateway","title":"Pushgateway \u96c6\u6210","text":"<pre><code># \u521b\u5efa Pushgateway \u5ba2\u6237\u7aef\npushgateway_client = exporter.create_pushgateway_client(\n    gateway_url=\"http://pushgateway.example.com:9091\",\n    job_name=\"cache_monitoring\",\n    instance=\"web-server-01\"\n)\n\n# \u63a8\u9001\u6307\u6807\u5230 Pushgateway\nsuccess = await pushgateway_client.push_metrics()\nprint(f\"\u63a8\u9001\u6210\u529f: {success}\")\n\n# \u83b7\u53d6\u63a8\u9001 URL\npush_url = pushgateway_client.get_push_url()\nprint(f\"\u63a8\u9001\u5730\u5740: {push_url}\")\n</code></pre>"},{"location":"zh/advanced/monitoring/#statsd","title":"StatsD \u76d1\u63a7","text":""},{"location":"zh/advanced/monitoring/#statsd_1","title":"\u521b\u5efa StatsD \u5bfc\u51fa\u5668","text":"<pre><code>from symphra_cache.monitoring.statsd import StatsDExporter\n\n# \u521b\u5efa StatsD \u5bfc\u51fa\u5668\nstatsd_exporter = StatsDExporter(\n    monitor,\n    host=\"statsd.example.com\",\n    port=8125,\n    prefix=\"myapp.cache\",\n    sample_rate=1.0,  # 100% \u91c7\u6837\n    protocol=\"udp\",\n    batch_size=100\n)\n\n# \u751f\u6210 StatsD \u683c\u5f0f\u6307\u6807\nstatsd_metrics = statsd_exporter.generate_all_metrics()\nfor metric in statsd_metrics:\n    print(metric)\n</code></pre>"},{"location":"zh/advanced/monitoring/#statsd_2","title":"StatsD \u6307\u6807\u793a\u4f8b","text":"<pre><code># \u751f\u6210\u7684 StatsD \u6307\u6807\u683c\u5f0f\n\"\"\"\nmyapp.cache.size:1024|g\nmyapp.cache.hit_rate:0.95|g\nmyapp.cache.operations.total:2000|g\nmyapp.cache.get.latency.avg:0.5|ms\nmyapp.cache.get.latency.min:0.1|ms\nmyapp.cache.get.latency.max:2.0|ms\nmyapp.cache.set.latency.avg:0.8|ms\nmyapp.cache.set.latency.min:0.2|ms\nmyapp.cache.set.latency.max:3.0|ms\n\"\"\"\n</code></pre>"},{"location":"zh/advanced/monitoring/#_6","title":"\u5f02\u6b65\u53d1\u9001\u6307\u6807","text":"<pre><code># \u5f02\u6b65\u53d1\u9001\u6307\u6807\u5230 StatsD\nsuccess = await statsd_exporter.send_metrics()\nprint(f\"\u53d1\u9001\u6210\u529f: {success}\")\n\n# \u4f7f\u7528\u8fde\u63a5\u6c60\nasync with statsd_exporter:\n    await statsd_exporter.send_metrics()\n</code></pre>"},{"location":"zh/advanced/monitoring/#_7","title":"\u5b9e\u65f6\u76d1\u63a7","text":""},{"location":"zh/advanced/monitoring/#_8","title":"\u5b9a\u65f6\u76d1\u63a7","text":"<pre><code>import asyncio\n\nasync def real_time_monitoring(monitor, interval=60):\n    \"\"\"\u5b9e\u65f6\u76d1\u63a7\u7f13\u5b58\u6027\u80fd\"\"\"\n    while True:\n        try:\n            # \u6536\u96c6\u6307\u6807\n            metrics = await monitor.collect_metrics()\n\n            # \u8bb0\u5f55\u5173\u952e\u6307\u6807\n            hit_rate = metrics.get_hit_rate()\n            cache_size = len(monitor.cache)\n            total_ops = metrics.get_total_operations()\n\n            print(f\"[{time.strftime('%H:%M:%S')}] \"\n                  f\"\u547d\u4e2d\u7387: {hit_rate:.4f}, \"\n                  f\"\u7f13\u5b58\u5927\u5c0f: {cache_size}, \"\n                  f\"\u603b\u64cd\u4f5c: {total_ops}\")\n\n            # \u53d1\u9001\u5230\u76d1\u63a7\u7cfb\u7edf\n            await send_to_monitoring_system(hit_rate, cache_size, total_ops)\n\n        except Exception as e:\n            print(f\"\u76d1\u63a7\u9519\u8bef: {e}\")\n\n        await asyncio.sleep(interval)\n\n# \u542f\u52a8\u5b9e\u65f6\u76d1\u63a7\nmonitoring_task = asyncio.create_task(real_time_monitoring(monitor, interval=30))\n</code></pre>"},{"location":"zh/advanced/monitoring/#_9","title":"\u6307\u6807\u805a\u5408","text":"<pre><code>class MetricsAggregator:\n    def __init__(self):\n        self.metrics_history = []\n        self.window_size = 10  # \u4fdd\u7559\u6700\u8fd110\u4e2a\u91c7\u6837\u70b9\n\n    def add_metrics(self, metrics):\n        \"\"\"\u6dfb\u52a0\u65b0\u7684\u6307\u6807\u6570\u636e\"\"\"\n        self.metrics_history.append({\n            'timestamp': time.time(),\n            'hit_rate': metrics.get_hit_rate(),\n            'cache_size': len(metrics.cache),\n            'get_latency': metrics.get_latency_stats('get'),\n            'set_latency': metrics.get_latency_stats('set')\n        })\n\n        # \u9650\u5236\u5386\u53f2\u8bb0\u5f55\u5927\u5c0f\n        if len(self.metrics_history) &gt; self.window_size:\n            self.metrics_history.pop(0)\n\n    def get_average_hit_rate(self):\n        \"\"\"\u83b7\u53d6\u5e73\u5747\u547d\u4e2d\u7387\"\"\"\n        if not self.metrics_history:\n            return 0.0\n\n        total = sum(m['hit_rate'] for m in self.metrics_history)\n        return total / len(self.metrics_history)\n\n    def get_p95_latency(self, operation='get'):\n        \"\"\"\u83b7\u53d6 P95 \u5ef6\u8fdf\"\"\"\n        latencies = []\n        for m in self.metrics_history:\n            latency_stats = m.get(f'{operation}_latency', {})\n            if latency_stats.get('avg'):\n                latencies.append(latency_stats['avg'])\n\n        if not latencies:\n            return 0.0\n\n        # \u7b80\u5355\u7684 P95 \u8ba1\u7b97\n        latencies.sort()\n        index = int(len(latencies) * 0.95)\n        return latencies[min(index, len(latencies) - 1)]\n</code></pre>"},{"location":"zh/advanced/monitoring/#_10","title":"\u81ea\u5b9a\u4e49\u6307\u6807","text":""},{"location":"zh/advanced/monitoring/#_11","title":"\u6dfb\u52a0\u4e1a\u52a1\u6307\u6807","text":"<pre><code># \u6dfb\u52a0\u81ea\u5b9a\u4e49\u4e1a\u52a1\u6307\u6807\nmonitor.create_custom_metric(\"user_cache_hit_rate\", 0.95,\n                           {\"service\": \"user_service\"})\nmonitor.create_custom_metric(\"product_cache_size\", 500,\n                           {\"service\": \"product_service\"})\n\n# StatsD \u81ea\u5b9a\u4e49\u6307\u6807\nstatsd_exporter.add_custom_metric(\"custom_metric\", 42.5, \"g\")\nstatsd_exporter.add_custom_metric(\"operation_count\", 100, \"c\")\n</code></pre>"},{"location":"zh/advanced/monitoring/#_12","title":"\u4e1a\u52a1\u573a\u666f\u76d1\u63a7","text":"<pre><code>class BusinessMetricsMonitor:\n    def __init__(self, monitor):\n        self.monitor = monitor\n\n    async def track_user_cache_performance(self):\n        \"\"\"\u8ddf\u8e2a\u7528\u6237\u7f13\u5b58\u6027\u80fd\"\"\"\n        # \u6a21\u62df\u4e1a\u52a1\u6307\u6807\u6536\u96c6\n        user_cache_hit = self.calculate_user_cache_hit_rate()\n        user_cache_size = self.get_user_cache_size()\n\n        # \u6dfb\u52a0\u81ea\u5b9a\u4e49\u6307\u6807\n        self.monitor.create_custom_metric(\n            \"user_cache_hit_rate\",\n            user_cache_hit,\n            {\"business_area\": \"user_service\"}\n        )\n        self.monitor.create_custom_metric(\n            \"user_cache_size\",\n            user_cache_size,\n            {\"business_area\": \"user_service\"}\n        )\n\n    def calculate_user_cache_hit_rate(self):\n        \"\"\"\u8ba1\u7b97\u7528\u6237\u7f13\u5b58\u547d\u4e2d\u7387\"\"\"\n        # \u5b9e\u73b0\u4e1a\u52a1\u903b\u8f91\n        pass\n\n    def get_user_cache_size(self):\n        \"\"\"\u83b7\u53d6\u7528\u6237\u7f13\u5b58\u5927\u5c0f\"\"\"\n        # \u5b9e\u73b0\u4e1a\u52a1\u903b\u8f91\n        pass\n</code></pre>"},{"location":"zh/advanced/monitoring/#_13","title":"\u544a\u8b66\u548c\u901a\u77e5","text":""},{"location":"zh/advanced/monitoring/#_14","title":"\u547d\u4e2d\u7387\u544a\u8b66","text":"<pre><code>class CacheAlertManager:\n    def __init__(self, monitor, thresholds):\n        self.monitor = monitor\n        self.thresholds = thresholds  # \u544a\u8b66\u9608\u503c\u914d\u7f6e\n        self.alert_history = []\n\n    async def check_alerts(self):\n        \"\"\"\u68c0\u67e5\u662f\u5426\u9700\u8981\u544a\u8b66\"\"\"\n        metrics = await self.monitor.collect_metrics()\n        hit_rate = metrics.get_hit_rate()\n\n        # \u68c0\u67e5\u547d\u4e2d\u7387\u544a\u8b66\n        if hit_rate &lt; self.thresholds['hit_rate_min']:\n            await self.send_alert(\n                'cache_hit_rate_low',\n                f'\u7f13\u5b58\u547d\u4e2d\u7387\u8fc7\u4f4e: {hit_rate:.4f} (\u9608\u503c: {self.thresholds[\"hit_rate_min\"]})'\n            )\n\n        # \u68c0\u67e5\u7f13\u5b58\u5927\u5c0f\u544a\u8b66\n        cache_size = len(self.monitor.cache)\n        if cache_size &gt; self.thresholds['cache_size_max']:\n            await self.send_alert(\n                'cache_size_too_large',\n                f'\u7f13\u5b58\u5927\u5c0f\u8fc7\u5927: {cache_size} (\u9608\u503c: {self.thresholds[\"cache_size_max\"]})'\n            )\n\n    async def send_alert(self, alert_type, message):\n        \"\"\"\u53d1\u9001\u544a\u8b66\"\"\"\n        alert = {\n            'timestamp': time.time(),\n            'type': alert_type,\n            'message': message,\n            'severity': 'warning' if alert_type == 'cache_hit_rate_low' else 'critical'\n        }\n\n        self.alert_history.append(alert)\n\n        # \u53d1\u9001\u5230\u544a\u8b66\u7cfb\u7edf\n        await self.send_to_alert_system(alert)\n\n    async def send_to_alert_system(self, alert):\n        \"\"\"\u53d1\u9001\u5230\u5b9e\u9645\u7684\u544a\u8b66\u7cfb\u7edf\"\"\"\n        # \u5b9e\u73b0\u53d1\u9001\u5230\u9489\u9489\u3001\u4f01\u4e1a\u5fae\u4fe1\u3001\u90ae\u4ef6\u7b49\n        pass\n</code></pre>"},{"location":"zh/advanced/monitoring/#_15","title":"\u5ef6\u8fdf\u544a\u8b66","text":"<pre><code>async def monitor_latency_alerts(monitor, thresholds):\n    \"\"\"\u76d1\u63a7\u5ef6\u8fdf\u544a\u8b66\"\"\"\n    while True:\n        try:\n            metrics = await monitor.collect_metrics()\n            latency_stats = metrics.get_latency_stats('get')\n\n            if latency_stats['avg'] &gt; thresholds['get_latency_max']:\n                await send_latency_alert(\n                    'get_latency_high',\n                    f'GET \u64cd\u4f5c\u5e73\u5747\u5ef6\u8fdf\u8fc7\u9ad8: {latency_stats[\"avg\"]:.3f}ms'\n                )\n\n            if latency_stats['max'] &gt; thresholds['get_latency_critical']:\n                await send_latency_alert(\n                    'get_latency_critical',\n                    f'GET \u64cd\u4f5c\u6700\u5927\u5ef6\u8fdf\u8fc7\u9ad8: {latency_stats[\"max\"]:.3f}ms'\n                )\n\n        except Exception as e:\n            print(f'\u5ef6\u8fdf\u76d1\u63a7\u9519\u8bef: {e}')\n\n        await asyncio.sleep(60)  # \u6bcf\u5206\u949f\u68c0\u67e5\u4e00\u6b21\n</code></pre>"},{"location":"zh/advanced/monitoring/#_16","title":"\u76d1\u63a7\u6700\u4f73\u5b9e\u8df5","text":""},{"location":"zh/advanced/monitoring/#1","title":"1. \u6307\u6807\u9009\u62e9","text":"<ul> <li>\u6838\u5fc3\u6307\u6807\uff1a\u547d\u4e2d\u7387\u3001\u5ef6\u8fdf\u3001\u7f13\u5b58\u5927\u5c0f</li> <li>\u4e1a\u52a1\u6307\u6807\uff1a\u6309\u4e1a\u52a1\u6a21\u5757\u5206\u7c7b\u76d1\u63a7</li> <li>\u9519\u8bef\u6307\u6807\uff1a\u7f13\u5b58\u64cd\u4f5c\u5931\u8d25\u7387</li> <li>\u5bb9\u91cf\u6307\u6807\uff1a\u5185\u5b58\u4f7f\u7528\u3001\u8fde\u63a5\u6570</li> </ul>"},{"location":"zh/advanced/monitoring/#2","title":"2. \u91c7\u6837\u9891\u7387","text":"<ul> <li>\u9ad8\u9891\u91c7\u6837\uff1a\u5173\u952e\u6307\u6807\u6bcf\u79d2\u91c7\u6837</li> <li>\u4f4e\u9891\u91c7\u6837\uff1a\u805a\u5408\u6307\u6807\u6bcf\u5206\u949f\u91c7\u6837</li> <li>\u6309\u9700\u91c7\u6837\uff1a\u7279\u5b9a\u573a\u666f\u4e0b\u624b\u52a8\u89e6\u53d1</li> </ul>"},{"location":"zh/advanced/monitoring/#3","title":"3. \u544a\u8b66\u914d\u7f6e","text":"<ul> <li>\u5408\u7406\u9608\u503c\uff1a\u6839\u636e\u5386\u53f2\u6570\u636e\u8bbe\u7f6e\u9608\u503c</li> <li>\u5206\u7ea7\u544a\u8b66\uff1a\u4e0d\u540c\u4e25\u91cd\u7a0b\u5ea6\u4e0d\u540c\u5904\u7406</li> <li>\u907f\u514d\u566a\u97f3\uff1a\u8bbe\u7f6e\u544a\u8b66\u6291\u5236\u89c4\u5219</li> </ul>"},{"location":"zh/advanced/monitoring/#4","title":"4. \u6570\u636e\u4fdd\u7559","text":"<ul> <li>\u77ed\u671f\u6570\u636e\uff1a\u9ad8\u7cbe\u5ea6\u6570\u636e\u4fdd\u7559\u8f83\u77ed\u65f6\u95f4</li> <li>\u957f\u671f\u6570\u636e\uff1a\u805a\u5408\u6570\u636e\u4fdd\u7559\u8f83\u957f\u65f6\u95f4</li> <li>\u5173\u952e\u4e8b\u4ef6\uff1a\u91cd\u8981\u4e8b\u4ef6\u6c38\u4e45\u4fdd\u7559</li> </ul>"},{"location":"zh/advanced/monitoring/#5","title":"5. \u53ef\u89c6\u5316","text":"<ul> <li>\u5b9e\u65f6\u4eea\u8868\u76d8\uff1a\u5173\u952e\u6307\u6807\u5b9e\u65f6\u5c55\u793a</li> <li>\u8d8b\u52bf\u5206\u6790\uff1a\u5386\u53f2\u6570\u636e\u8d8b\u52bf\u5206\u6790</li> <li>\u5f02\u5e38\u68c0\u6d4b\uff1a\u81ea\u52a8\u8bc6\u522b\u5f02\u5e38\u6a21\u5f0f</li> </ul>"},{"location":"zh/advanced/monitoring/#_17","title":"\u6027\u80fd\u4f18\u5316","text":""},{"location":"zh/advanced/monitoring/#_18","title":"\u76d1\u63a7\u5f00\u9500\u63a7\u5236","text":"<pre><code># \u63a7\u5236\u76d1\u63a7\u5f00\u9500\nmonitor = CacheMonitor(cache, enabled=True)\n\n# \u5728\u9ad8\u8d1f\u8f7d\u65f6\u4e34\u65f6\u7981\u7528\u76d1\u63a7\nif system_load_is_high():\n    monitor.disable()\nelse:\n    monitor.enable()\n\n# \u6279\u91cf\u6536\u96c6\u6307\u6807\u51cf\u5c11\u5f00\u9500\nasync def batch_collect_metrics(monitor, keys):\n    \"\"\"\u6279\u91cf\u6536\u96c6\u591a\u4e2a\u7f13\u5b58\u7684\u6307\u6807\"\"\"\n    tasks = [monitor.collect_metrics() for _ in keys]\n    return await asyncio.gather(*tasks)\n</code></pre>"},{"location":"zh/advanced/monitoring/#_19","title":"\u5f02\u6b65\u76d1\u63a7","text":"<pre><code># \u4f7f\u7528\u5f02\u6b65\u76d1\u63a7\u907f\u514d\u963b\u585e\nasync def async_monitoring_task(monitor):\n    \"\"\"\u5f02\u6b65\u76d1\u63a7\u4efb\u52a1\"\"\"\n    while True:\n        # \u5f02\u6b65\u6536\u96c6\u6307\u6807\n        metrics = await monitor.collect_metrics()\n\n        # \u5f02\u6b65\u53d1\u9001\u5230\u76d1\u63a7\u7cfb\u7edf\n        await asyncio.gather(\n            send_to_prometheus(metrics),\n            send_to_statsd(metrics),\n            check_alerts(metrics)\n        )\n\n        await asyncio.sleep(30)\n\n# \u542f\u52a8\u5f02\u6b65\u76d1\u63a7\nmonitoring_task = asyncio.create_task(async_monitoring_task(monitor))\n</code></pre> <p>\u901a\u8fc7\u5b8c\u5584\u7684\u76d1\u63a7\u548c\u6307\u6807\u7cfb\u7edf\uff0c\u60a8\u53ef\u4ee5\u5168\u9762\u4e86\u89e3\u7f13\u5b58\u7cfb\u7edf\u7684\u8fd0\u884c\u72b6\u6001\uff0c\u53ca\u65f6\u53d1\u73b0\u548c\u89e3\u51b3\u95ee\u9898\uff0c\u786e\u4fdd\u7cfb\u7edf\u7684\u7a33\u5b9a\u6027\u548c\u9ad8\u6027\u80fd\u3002</p>"},{"location":"zh/advanced/warming/","title":"\u7f13\u5b58\u9884\u70ed","text":"<p>\u7f13\u5b58\u9884\u70ed\u662f Symphra Cache \u63d0\u4f9b\u7684\u9ad8\u7ea7\u529f\u80fd\uff0c\u7528\u4e8e\u5728\u5e94\u7528\u7a0b\u5e8f\u542f\u52a8\u6216\u8fd0\u884c\u65f6\u9884\u5148\u52a0\u8f7d\u70ed\u70b9\u6570\u636e\u5230\u7f13\u5b58\u4e2d\uff0c\u907f\u514d\u7f13\u5b58\u51b7\u542f\u52a8\u95ee\u9898\uff0c\u63d0\u5347\u7cfb\u7edf\u6027\u80fd\u3002</p>"},{"location":"zh/advanced/warming/#_2","title":"\u6982\u8ff0","text":"<p>\u7f13\u5b58\u9884\u70ed\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u63d0\u5347\u6027\u80fd\uff1a</p> <ul> <li>\u907f\u514d\u7f13\u5b58\u96ea\u5d29\uff1a\u5728\u9ad8\u5e76\u53d1\u573a\u666f\u4e0b\uff0c\u5927\u91cf\u8bf7\u6c42\u540c\u65f6\u8bbf\u95ee\u672a\u7f13\u5b58\u7684\u6570\u636e\u53ef\u80fd\u5bfc\u81f4\u6570\u636e\u5e93\u538b\u529b\u8fc7\u5927</li> <li>\u63d0\u5347\u54cd\u5e94\u901f\u5ea6\uff1a\u70ed\u70b9\u6570\u636e\u9884\u5148\u52a0\u8f7d\uff0c\u51cf\u5c11\u9996\u6b21\u8bbf\u95ee\u5ef6\u8fdf</li> <li>\u4f18\u5316\u7528\u6237\u4f53\u9a8c\uff1a\u5173\u952e\u6570\u636e\u59cb\u7ec8\u53ef\u7528\uff0c\u63d0\u4f9b\u4e00\u81f4\u7684\u54cd\u5e94\u65f6\u95f4</li> </ul>"},{"location":"zh/advanced/warming/#_3","title":"\u57fa\u7840\u7528\u6cd5","text":""},{"location":"zh/advanced/warming/#_4","title":"\u624b\u52a8\u9884\u70ed","text":"<pre><code>from symphra_cache import CacheManager, MemoryBackend\nfrom symphra_cache.warming import CacheWarmer\n\n# \u521b\u5efa\u7f13\u5b58\u7ba1\u7406\u5668\ncache = CacheManager(backend=MemoryBackend())\n\n# \u521b\u5efa\u9884\u70ed\u5668\nwarmer = CacheWarmer(cache, ttl=3600)\n\n# \u624b\u52a8\u9884\u70ed\u6570\u636e\ndata = {\n    \"user:1\": {\"name\": \"Alice\", \"age\": 30},\n    \"user:2\": {\"name\": \"Bob\", \"age\": 25},\n    \"config:app_name\": \"MyApp\",\n}\n\nawait warmer.warm_up(data)\n</code></pre>"},{"location":"zh/advanced/warming/#_5","title":"\u81ea\u52a8\u9884\u70ed","text":"<pre><code># \u5b9a\u4e49\u6570\u636e\u6e90\u51fd\u6570\ndef load_hot_data():\n    return {\n        \"product:101\": {\"name\": \"\u7b14\u8bb0\u672c\u7535\u8111\", \"price\": 5999},\n        \"product:102\": {\"name\": \"\u667a\u80fd\u624b\u673a\", \"price\": 2999},\n    }\n\n# \u81ea\u52a8\u9884\u70ed\nawait warmer.auto_warm_up(load_hot_data)\n</code></pre>"},{"location":"zh/advanced/warming/#_6","title":"\u667a\u80fd\u9884\u70ed","text":"<pre><code>from symphra_cache.warming import SmartCacheWarmer\n\n# \u521b\u5efa\u667a\u80fd\u9884\u70ed\u5668\nsmart_warmer = SmartCacheWarmer(cache, prediction_window=24)\n\n# \u8bb0\u5f55\u8bbf\u95ee\u6a21\u5f0f\nsmart_warmer.record_cache_miss(\"user:123\")\n\n# \u667a\u80fd\u9884\u70ed\u70ed\u70b9\u6570\u636e\ndef predict_and_load(hot_keys):\n    return {key: f\"predicted_data_{key}\" for key in hot_keys}\n\nawait smart_warmer.smart_warm_up(predict_and_load, top_k=10)\n</code></pre>"},{"location":"zh/advanced/warming/#_7","title":"\u9ad8\u7ea7\u529f\u80fd","text":""},{"location":"zh/advanced/warming/#_8","title":"\u589e\u91cf\u9884\u70ed","text":"<p>\u9002\u7528\u4e8e\u5927\u6570\u636e\u96c6\u7684\u6e10\u8fdb\u5f0f\u9884\u70ed\uff1a</p> <pre><code># \u5927\u91cf\u70ed\u70b9\u952e\nhot_keys = [f\"user:{i}\" for i in range(1, 10001)]  # 1\u4e07\u7528\u6237\n\ndef load_user_batch(keys):\n    \"\"\"\u6279\u91cf\u52a0\u8f7d\u7528\u6237\u6570\u636e\"\"\"\n    return {key: f\"user_data_{key}\" for key in keys}\n\n# \u589e\u91cf\u9884\u70ed\uff0c\u6bcf\u6b21\u5904\u7406100\u4e2a\u952e\nawait warmer.incremental_warm_up(hot_keys, load_user_batch, batch_size=100)\n</code></pre>"},{"location":"zh/advanced/warming/#_9","title":"\u6587\u4ef6\u9884\u70ed","text":"<p>\u4ece\u6587\u4ef6\u9884\u70ed\u7f13\u5b58\u6570\u636e\uff1a</p> <pre><code>import json\n\n# JSON \u6587\u4ef6\u9884\u70ed\nawait warmer.warm_up_from_file(\"cache_data.json\", format=\"json\", ttl=7200)\n\n# CSV \u6587\u4ef6\u9884\u70ed\nawait warmer.warm_up_from_file(\"cache_data.csv\", format=\"csv\", ttl=3600)\n</code></pre>"},{"location":"zh/advanced/warming/#ttl","title":"TTL \u6620\u5c04\u9884\u70ed","text":"<p>\u4e3a\u4e0d\u540c\u952e\u8bbe\u7f6e\u4e0d\u540c\u7684\u8fc7\u671f\u65f6\u95f4\uff1a</p> <pre><code>data = {\n    \"session:user123\": \"session_data\",\n    \"token:api456\": \"api_token\",\n    \"config:app\": \"app_config\",\n}\n\nttl_map = {\n    \"session:user123\": 1800,    # \u4f1a\u8bdd\u6570\u636e\uff1a30\u5206\u949f\n    \"token:api456\": 3600,       # API \u4ee4\u724c\uff1a1\u5c0f\u65f6\n    \"config:app\": 7200,         # \u914d\u7f6e\u6570\u636e\uff1a2\u5c0f\u65f6\n}\n\nawait warmer.warm_up_with_ttl_map(data, ttl_map)\n</code></pre>"},{"location":"zh/advanced/warming/#_10","title":"\u540e\u53f0\u9884\u70ed","text":"<p>\u542f\u52a8\u540e\u53f0\u5b9a\u65f6\u9884\u70ed\u4efb\u52a1\uff1a</p> <pre><code># \u542f\u52a8\u540e\u53f0\u9884\u70ed\uff08\u6bcf\u5c0f\u65f6\u6267\u884c\u4e00\u6b21\uff09\nawait warmer.start_background_warming(\n    data_source=load_hot_data,\n    interval=3600  # 1\u5c0f\u65f6\n)\n\n# \u505c\u6b62\u540e\u53f0\u9884\u70ed\nwarmer.stop_background_warming()\n</code></pre>"},{"location":"zh/advanced/warming/#_11","title":"\u7f13\u5b58\u7ec4\u7ba1\u7406","text":""},{"location":"zh/advanced/warming/#_12","title":"\u521b\u5efa\u7f13\u5b58\u7ec4","text":"<pre><code># \u4e3a\u7528\u6237\u6570\u636e\u521b\u5efa\u4e13\u95e8\u7684\u7f13\u5b58\u7ec4\nuser_group = warmer.create_cache_group_invalidator(\"user:\")\n\n# \u9884\u70ed\u6574\u4e2a\u7528\u6237\u7ec4\nawait user_group.warm_up_all()\n\n# \u9884\u70ed\u7279\u5b9a\u6a21\u5f0f\nawait user_group.warm_up_pattern(\"*:profile\")\n</code></pre>"},{"location":"zh/advanced/warming/#_13","title":"\u7edf\u8ba1\u548c\u76d1\u63a7","text":""},{"location":"zh/advanced/warming/#_14","title":"\u83b7\u53d6\u9884\u70ed\u7edf\u8ba1","text":"<pre><code>stats = warmer.get_warming_stats()\nprint(f\"\u7b56\u7565: {stats['strategy']}\")\nprint(f\"\u6700\u540e\u9884\u70ed\u65f6\u95f4: {stats['last_warm_up_time']}\")\nprint(f\"\u5df2\u9884\u70ed\u952e\u6570\u91cf: {stats['total_keys_warmed']}\")\nprint(f\"\u70ed\u70b9\u952e\u6570\u91cf: {stats['hot_keys_count']}\")\n</code></pre>"},{"location":"zh/advanced/warming/#_15","title":"\u9884\u70ed\u5386\u53f2","text":"<pre><code># \u83b7\u53d6\u6700\u8fd110\u6b21\u9884\u70ed\u64cd\u4f5c\u5386\u53f2\nhistory = warmer.get_invalidation_history(limit=10)\nfor record in history:\n    print(f\"\u65f6\u95f4: {record['timestamp']}\")\n    print(f\"\u65b9\u6cd5: {record['method']}\")\n    print(f\"\u8be6\u60c5: {record['details']}\")\n</code></pre>"},{"location":"zh/advanced/warming/#_16","title":"\u5de5\u5382\u6a21\u5f0f","text":"<p>\u4f7f\u7528\u5de5\u5382\u51fd\u6570\u521b\u5efa\u4e0d\u540c\u7c7b\u578b\u7684\u9884\u70ed\u5668\uff1a</p> <pre><code>from symphra_cache.warming import create_warmer\n\n# \u521b\u5efa\u624b\u52a8\u9884\u70ed\u5668\nmanual_warmer = create_warmer(cache, strategy=\"manual\", ttl=3600)\n\n# \u521b\u5efa\u667a\u80fd\u9884\u70ed\u5668\nsmart_warmer = create_warmer(cache, strategy=\"smart\", prediction_window=12)\n\n# \u521b\u5efa\u81ea\u5b9a\u4e49\u914d\u7f6e\u9884\u70ed\u5668\ncustom_warmer = create_warmer(\n    cache,\n    strategy=\"incremental\",\n    batch_size=50,\n    ttl=1800\n)\n</code></pre>"},{"location":"zh/advanced/warming/#_17","title":"\u6700\u4f73\u5b9e\u8df5","text":""},{"location":"zh/advanced/warming/#1","title":"1. \u9884\u70ed\u65f6\u673a","text":"<ul> <li>\u5e94\u7528\u542f\u52a8\u65f6\uff1a\u9884\u70ed\u6838\u5fc3\u914d\u7f6e\u548c\u70ed\u70b9\u6570\u636e</li> <li>\u4f4e\u5cf0\u65f6\u6bb5\uff1a\u5728\u4e1a\u52a1\u4f4e\u5cf0\u671f\u6267\u884c\u5927\u91cf\u9884\u70ed\u64cd\u4f5c</li> <li>\u9884\u6d4b\u6027\u9884\u70ed\uff1a\u57fa\u4e8e\u5386\u53f2\u8bbf\u95ee\u6a21\u5f0f\u9884\u6d4b\u70ed\u70b9\u6570\u636e</li> </ul>"},{"location":"zh/advanced/warming/#2","title":"2. \u6570\u636e\u9009\u62e9","text":"<ul> <li>\u70ed\u70b9\u6570\u636e\uff1a\u8bbf\u95ee\u9891\u7387\u9ad8\u7684\u6570\u636e\u4f18\u5148\u9884\u70ed</li> <li>\u5173\u952e\u6570\u636e\uff1a\u5bf9\u4e1a\u52a1\u81f3\u5173\u91cd\u8981\u7684\u6570\u636e</li> <li>\u8ba1\u7b97\u6210\u672c\u9ad8\uff1a\u751f\u6210\u6210\u672c\u9ad8\u7684\u6570\u636e\u9002\u5408\u9884\u70ed</li> </ul>"},{"location":"zh/advanced/warming/#3","title":"3. \u6027\u80fd\u4f18\u5316","text":"<ul> <li>\u6279\u91cf\u64cd\u4f5c\uff1a\u4f7f\u7528\u6279\u91cf\u9884\u70ed\u51cf\u5c11\u7f51\u7edc\u5f80\u8fd4</li> <li>\u5206\u6279\u5904\u7406\uff1a\u5927\u6570\u636e\u96c6\u5206\u6279\u9884\u70ed\uff0c\u907f\u514d\u5185\u5b58\u5cf0\u503c</li> <li>\u5f02\u6b65\u6267\u884c\uff1a\u4f7f\u7528\u5f02\u6b65\u9884\u70ed\u907f\u514d\u963b\u585e\u4e3b\u7ebf\u7a0b</li> </ul>"},{"location":"zh/advanced/warming/#4-ttl","title":"4. TTL \u7b56\u7565","text":"<ul> <li>\u52a8\u6001 TTL\uff1a\u6839\u636e\u6570\u636e\u7c7b\u578b\u8bbe\u7f6e\u4e0d\u540c\u8fc7\u671f\u65f6\u95f4</li> <li>\u70ed\u70b9\u5ef6\u957f\uff1a\u70ed\u70b9\u6570\u636e\u8bbe\u7f6e\u8f83\u957f TTL</li> <li>\u51b7\u6570\u636e\u77ed TTL\uff1a\u51b7\u6570\u636e\u8bbe\u7f6e\u8f83\u77ed TTL</li> </ul>"},{"location":"zh/advanced/warming/#5","title":"5. \u76d1\u63a7\u548c\u8c03\u4f18","text":"<ul> <li>\u76d1\u63a7\u547d\u4e2d\u7387\uff1a\u8ddf\u8e2a\u9884\u70ed\u6548\u679c</li> <li>\u8c03\u6574\u7b56\u7565\uff1a\u6839\u636e\u76d1\u63a7\u6570\u636e\u8c03\u6574\u9884\u70ed\u7b56\u7565</li> <li>\u5bb9\u91cf\u89c4\u5212\uff1a\u5408\u7406\u8bbe\u7f6e\u7f13\u5b58\u5bb9\u91cf\uff0c\u907f\u514d\u5185\u5b58\u6ea2\u51fa</li> </ul>"},{"location":"zh/advanced/warming/#_18","title":"\u9519\u8bef\u5904\u7406","text":""},{"location":"zh/advanced/warming/#_19","title":"\u5f02\u5e38\u6355\u83b7","text":"<pre><code>try:\n    await warmer.warm_up(large_data)\nexcept Exception as e:\n    print(f\"\u9884\u70ed\u5931\u8d25: {e}\")\n    # \u8bb0\u5f55\u9519\u8bef\u65e5\u5fd7\n    # \u5b9e\u65bd\u964d\u7ea7\u7b56\u7565\n</code></pre>"},{"location":"zh/advanced/warming/#_20","title":"\u964d\u7ea7\u7b56\u7565","text":"<pre><code>def safe_warm_up(warmer, data):\n    \"\"\"\u5b89\u5168\u9884\u70ed\uff0c\u5305\u542b\u9519\u8bef\u5904\u7406\"\"\"\n    try:\n        await warmer.warm_up(data)\n        return True\n    except Exception as e:\n        # \u8bb0\u5f55\u9519\u8bef\u4f46\u4e0d\u4e2d\u65ad\u5e94\u7528\n        print(f\"\u9884\u70ed\u8b66\u544a: {e}\")\n        return False\n</code></pre>"},{"location":"zh/advanced/warming/#_21","title":"\u6027\u80fd\u8c03\u4f18","text":""},{"location":"zh/advanced/warming/#_22","title":"\u6279\u91cf\u5927\u5c0f\u4f18\u5316","text":"<pre><code># \u6839\u636e\u7f51\u7edc\u548c\u5185\u5b58\u60c5\u51b5\u8c03\u6574\u6279\u91cf\u5927\u5c0f\noptimal_batch_size = 100  # \u521d\u59cb\u503c\nwarmer = CacheWarmer(cache, batch_size=optimal_batch_size)\n</code></pre>"},{"location":"zh/advanced/warming/#_23","title":"\u5e76\u53d1\u9884\u70ed","text":"<pre><code># \u5e76\u53d1\u6267\u884c\u591a\u4e2a\u9884\u70ed\u4efb\u52a1\ntasks = []\nfor data_chunk in data_chunks:\n    task = warmer.warm_up(data_chunk)\n    tasks.append(task)\n\nawait asyncio.gather(*tasks)\n</code></pre>"},{"location":"zh/advanced/warming/#_24","title":"\u5b9e\u9645\u5e94\u7528\u573a\u666f","text":""},{"location":"zh/advanced/warming/#_25","title":"\u7535\u5546\u7f51\u7ad9","text":"<pre><code># \u9884\u70ed\u5546\u54c1\u6570\u636e\nproduct_warmer = CacheWarmer(cache, ttl=3600)\nawait product_warmer.warm_up_from_file(\"hot_products.json\")\n\n# \u9884\u70ed\u7528\u6237\u4f1a\u8bdd\nsession_warmer = CacheWarmer(cache, ttl=1800)\nawait session_warmer.warm_up(load_active_sessions())\n</code></pre>"},{"location":"zh/advanced/warming/#_26","title":"\u793e\u4ea4\u5a92\u4f53","text":"<pre><code># \u667a\u80fd\u9884\u70ed\u7528\u6237\u52a8\u6001\nsocial_warmer = SmartCacheWarmer(cache)\nawait social_warmer.smart_warm_up(load_user_feeds, top_k=50)\n\n# \u9884\u70ed\u70ed\u95e8\u8bdd\u9898\ntrending_warmer = CacheWarmer(cache, ttl=600)  # 10\u5206\u949f\u8fc7\u671f\nawait trending_warmer.warm_up(load_trending_topics())\n</code></pre>"},{"location":"zh/advanced/warming/#_27","title":"\u5185\u5bb9\u7ba1\u7406\u7cfb\u7edf","text":"<pre><code># \u9884\u70ed\u70ed\u95e8\u6587\u7ae0\ncms_warmer = CacheWarmer(cache, ttl=7200)\nawait cms_warmer.warm_up(load_popular_articles())\n\n# \u9884\u70ed\u5206\u7c7b\u6570\u636e\ncategory_warmer = CacheWarmer(cache, ttl=14400)\nawait category_warmer.warm_up(load_categories())\n</code></pre> <p>\u901a\u8fc7\u5408\u7406\u4f7f\u7528\u7f13\u5b58\u9884\u70ed\u529f\u80fd\uff0c\u53ef\u4ee5\u663e\u8457\u63d0\u5347\u5e94\u7528\u7a0b\u5e8f\u7684\u6027\u80fd\u548c\u7528\u6237\u4f53\u9a8c\uff0c\u7279\u522b\u662f\u5728\u9ad8\u5e76\u53d1\u548c\u5927\u6570\u636e\u91cf\u7684\u573a\u666f\u4e0b\u3002</p>"},{"location":"zh/api/","title":"API \u6982\u89c8","text":"<p>\u672c\u8282\u901a\u8fc7\u81ea\u52a8\u751f\u6210\u7684\u6587\u6863\u5c55\u793a\u6838\u5fc3\u6a21\u5757\uff1a\u7ba1\u7406\u5668\u3001\u88c5\u9970\u5668\u3001\u540e\u7aef\u3001\u9501\u3001\u914d\u7f6e\u3001\u5e8f\u5217\u5316\u3001\u7c7b\u578b\u679a\u4e3e\u3001\u76d1\u63a7\u3001\u9884\u70ed\u4e0e\u5931\u6548\u5de5\u5177\u3002</p> <p>\u4ee5\u4e0b\u9875\u9762\u901a\u8fc7 mkdocstrings \u4ece\u6e90\u7801\u751f\u6210\uff0c\u786e\u4fdd\u4e0e\u4ee3\u7801\u4fdd\u6301\u540c\u6b65\u3002</p>"},{"location":"zh/api/config/","title":"\u914d\u7f6e","text":"<p>\u7edf\u4e00\u7684\u7f13\u5b58\u914d\u7f6e\uff0c\u652f\u6301\u4ece\u5b57\u5178\u3001YAML/TOML/JSON \u6587\u4ef6\u4e0e\u73af\u5883\u53d8\u91cf\u52a0\u8f7d\u3002</p> <p>               Bases: <code>BaseModel</code></p> <p>\u7f13\u5b58\u914d\u7f6e\u7c7b</p> <p>\u4f7f\u7528 Pydantic \u8fdb\u884c\u81ea\u52a8\u9a8c\u8bc1,\u91c7\u7528 backend + options \u7684\u6269\u5c55\u6a21\u5f0f\u3002</p> <p>\u652f\u6301\u4ece\u591a\u79cd\u6765\u6e90\u52a0\u8f7d: - \u5b57\u5178 - YAML \u6587\u4ef6 - TOML \u6587\u4ef6 - JSON \u6587\u4ef6 - \u73af\u5883\u53d8\u91cf</p> \u914d\u7f6e\u793a\u4f8b <pre><code># \u65b9\u5f0f1: \u4f7f\u7528\u9ed8\u8ba4\u5185\u5b58\u540e\u7aef\nconfig = CacheConfig()\n\n# \u65b9\u5f0f2: \u6307\u5b9a\u540e\u7aef\u540d\u79f0\nconfig = CacheConfig(backend=\"memory\")\n\n# \u65b9\u5f0f3: \u6307\u5b9a\u540e\u7aef\u548c\u53c2\u6570\nconfig = CacheConfig(backend=\"redis\", options={\"host\": \"localhost\", \"port\": 6379})\n\n# \u5b9e\u4f8b\u5316\u540e\u7aef\nbackend = config.create_backend()\n</code></pre> \u5c5e\u6027 Source code in <code>src/symphra_cache/config.py</code> <pre><code>class CacheConfig(BaseModel):\n    \"\"\"\n    \u7f13\u5b58\u914d\u7f6e\u7c7b\n\n    \u4f7f\u7528 Pydantic \u8fdb\u884c\u81ea\u52a8\u9a8c\u8bc1,\u91c7\u7528 backend + options \u7684\u6269\u5c55\u6a21\u5f0f\u3002\n\n    \u652f\u6301\u4ece\u591a\u79cd\u6765\u6e90\u52a0\u8f7d:\n    - \u5b57\u5178\n    - YAML \u6587\u4ef6\n    - TOML \u6587\u4ef6\n    - JSON \u6587\u4ef6\n    - \u73af\u5883\u53d8\u91cf\n\n    \u914d\u7f6e\u793a\u4f8b:\n        ```python\n        # \u65b9\u5f0f1: \u4f7f\u7528\u9ed8\u8ba4\u5185\u5b58\u540e\u7aef\n        config = CacheConfig()\n\n        # \u65b9\u5f0f2: \u6307\u5b9a\u540e\u7aef\u540d\u79f0\n        config = CacheConfig(backend=\"memory\")\n\n        # \u65b9\u5f0f3: \u6307\u5b9a\u540e\u7aef\u548c\u53c2\u6570\n        config = CacheConfig(backend=\"redis\", options={\"host\": \"localhost\", \"port\": 6379})\n\n        # \u5b9e\u4f8b\u5316\u540e\u7aef\n        backend = config.create_backend()\n        ```\n\n    \u5c5e\u6027:\n        backend: \u5df2\u6ce8\u518c\u7684\u540e\u7aef\u540d\u79f0(\u5982 memory\u3001file\u3001redis)\n        options: \u4f20\u9012\u7ed9\u540e\u7aef\u6784\u9020\u51fd\u6570\u7684\u53c2\u6570\u5b57\u5178\n    \"\"\"\n\n    backend: str = Field(\n        default=\"memory\",\n        description=\"\u540e\u7aef\u540d\u79f0,\u5bf9\u5e94\u5df2\u6ce8\u518c\u7684 backend \u6807\u8bc6(\u5982 memory\u3001file\u3001redis)\",\n    )\n\n    options: dict[str, Any] = Field(\n        default_factory=dict,\n        description=\"\u540e\u7aef\u6784\u9020\u53c2\u6570,\u4f1a\u5728\u5b9e\u4f8b\u5316\u65f6\u4f20\u9012\u7ed9\u5177\u4f53\u540e\u7aef\u5b9e\u73b0\",\n    )\n\n    # ========== Pydantic \u914d\u7f6e ==========\n\n    model_config = {\n        \"validate_assignment\": True,\n        \"extra\": \"forbid\",  # \u7981\u6b62\u989d\u5916\u5b57\u6bb5\n        \"str_strip_whitespace\": True,\n    }\n\n    # ========== \u9a8c\u8bc1\u5668 ==========\n\n    @model_validator(mode=\"after\")\n    def validate_backend(self) -&gt; CacheConfig:\n        \"\"\"\u9a8c\u8bc1\u540e\u7aef\u914d\u7f6e\"\"\"\n        from .backends import get_registered_backends\n\n        # \u9a8c\u8bc1\u540e\u7aef\u7c7b\u578b\n        available_backends = get_registered_backends()\n        if self.backend.lower() not in available_backends:\n            valid_backends = \", \".join(available_backends)\n            msg = f\"\u4e0d\u652f\u6301\u7684\u540e\u7aef\u7c7b\u578b: {self.backend}\u3002\u652f\u6301\u7684\u7c7b\u578b: {valid_backends}\"\n            raise ValueError(msg)\n\n        return self\n\n    # ========== \u540e\u7aef\u5b9e\u4f8b\u5316 ==========\n\n    def create_backend(self) -&gt; BaseBackend:\n        \"\"\"\n        \u6839\u636e\u914d\u7f6e\u521b\u5efa\u540e\u7aef\u5b9e\u4f8b\n\n        Returns:\n            \u914d\u7f6e\u597d\u7684\u540e\u7aef\u5b9e\u4f8b\n\n        Raises:\n            CacheConfigError: \u540e\u7aef\u521b\u5efa\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; config = CacheConfig(backend=\"memory\", options={\"max_size\": 1000})\n            &gt;&gt;&gt; backend = config.create_backend()\n        \"\"\"\n        from .backends import create_backend\n\n        try:\n            return create_backend(self.backend, **self.options)\n        except Exception as e:\n            msg = f\"\u521b\u5efa {self.backend} \u540e\u7aef\u5931\u8d25: {e}\"\n            raise CacheConfigError(msg) from e\n\n    # ========== \u5de5\u5382\u65b9\u6cd5 ==========\n\n    @classmethod\n    def from_file(cls, file_path: str | Path) -&gt; CacheConfig:\n        \"\"\"\n        \u4ece\u914d\u7f6e\u6587\u4ef6\u521b\u5efa\u914d\u7f6e\n\n        \u652f\u6301\u7684\u683c\u5f0f:\n        - YAML (.yaml, .yml)\n        - TOML (.toml)\n        - JSON (.json)\n\n        Args:\n            file_path: \u914d\u7f6e\u6587\u4ef6\u8def\u5f84\n\n        Returns:\n            CacheConfig \u5b9e\u4f8b\n\n        Raises:\n            CacheConfigError: \u6587\u4ef6\u8bfb\u53d6\u6216\u89e3\u6790\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; config = CacheConfig.from_file(\"config/cache.yaml\")\n        \"\"\"\n        file_path = Path(file_path)\n\n        if not file_path.exists():\n            msg = f\"\u914d\u7f6e\u6587\u4ef6\u4e0d\u5b58\u5728: {file_path}\"\n            raise CacheConfigError(msg)\n\n        suffix = file_path.suffix.lower()\n\n        try:\n            if suffix in {\".yaml\", \".yml\"}:\n                return cls._from_yaml(file_path)\n            if suffix == \".toml\":\n                return cls._from_toml(file_path)\n            if suffix == \".json\":\n                return cls._from_json(file_path)\n            msg = f\"\u4e0d\u652f\u6301\u7684\u914d\u7f6e\u6587\u4ef6\u683c\u5f0f: {suffix}\"\n            raise CacheConfigError(msg)\n        except Exception as e:\n            if isinstance(e, CacheConfigError):\n                raise\n            msg = f\"\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\u5931\u8d25: {file_path}\"\n            raise CacheConfigError(msg) from e\n\n    @classmethod\n    def _from_yaml(cls, file_path: Path) -&gt; CacheConfig:\n        \"\"\"\u4ece YAML \u6587\u4ef6\u52a0\u8f7d\"\"\"\n        try:\n            import yaml\n        except ImportError as e:\n            msg = \"YAML \u652f\u6301\u9700\u8981\u5b89\u88c5 PyYAML: pip install pyyaml\"\n            raise ImportError(msg) from e\n\n        with file_path.open(\"r\", encoding=\"utf-8\") as f:\n            data = yaml.safe_load(f)\n\n        if not isinstance(data, dict):\n            msg = \"YAML \u914d\u7f6e\u6587\u4ef6\u5fc5\u987b\u662f\u5b57\u5178\u683c\u5f0f\"\n            raise CacheConfigError(msg)\n\n        return cls(**data)\n\n    @classmethod\n    def _from_toml(cls, file_path: Path) -&gt; CacheConfig:\n        \"\"\"\u4ece TOML \u6587\u4ef6\u52a0\u8f7d\"\"\"\n        try:\n            import tomllib\n        except ImportError:\n            try:\n                import tomli as tomllib  # Python &lt; 3.11\n            except ImportError as e:\n                msg = \"TOML \u652f\u6301\u9700\u8981\u5b89\u88c5 tomli: pip install tomli\"\n                raise ImportError(msg) from e\n\n        with file_path.open(\"rb\") as f:\n            data = tomllib.load(f)\n\n        if not isinstance(data, dict):\n            msg = \"TOML \u914d\u7f6e\u6587\u4ef6\u5fc5\u987b\u662f\u5b57\u5178\u683c\u5f0f\"\n            raise CacheConfigError(msg)\n\n        return cls(**data)\n\n    @classmethod\n    def _from_json(cls, file_path: Path) -&gt; CacheConfig:\n        \"\"\"\u4ece JSON \u6587\u4ef6\u52a0\u8f7d\"\"\"\n        import json\n\n        with file_path.open(\"r\", encoding=\"utf-8\") as f:\n            data = json.load(f)\n\n        if not isinstance(data, dict):\n            msg = \"JSON \u914d\u7f6e\u6587\u4ef6\u5fc5\u987b\u662f\u5b57\u5178\u683c\u5f0f\"\n            raise CacheConfigError(msg)\n\n        return cls(**data)\n\n    @classmethod\n    def from_env(cls, prefix: str = \"SYMPHRA_CACHE_\") -&gt; CacheConfig:\n        \"\"\"\n        \u4ece\u73af\u5883\u53d8\u91cf\u521b\u5efa\u914d\u7f6e\n\n        \u73af\u5883\u53d8\u91cf\u547d\u540d\u89c4\u5219:\n        - SYMPHRA_CACHE_BACKEND=memory\n        - SYMPHRA_CACHE_OPTIONS__MAX_SIZE=10000  (options \u4f7f\u7528\u53cc\u4e0b\u5212\u7ebf)\n        - SYMPHRA_CACHE_OPTIONS__HOST=localhost\n\n        Args:\n            prefix: \u73af\u5883\u53d8\u91cf\u524d\u7f00\n\n        Returns:\n            CacheConfig \u5b9e\u4f8b\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; import os\n            &gt;&gt;&gt; os.environ[\"SYMPHRA_CACHE_BACKEND\"] = \"redis\"\n            &gt;&gt;&gt; os.environ[\"SYMPHRA_CACHE_OPTIONS__HOST\"] = \"localhost\"\n            &gt;&gt;&gt; config = CacheConfig.from_env()\n        \"\"\"\n        backend = os.environ.get(f\"{prefix}BACKEND\", \"memory\")\n        options: dict[str, Any] = {}\n\n        # \u6536\u96c6 options\n        options_prefix = f\"{prefix}OPTIONS__\"\n        for key, value in os.environ.items():\n            if key.startswith(options_prefix):\n                # \u79fb\u9664\u524d\u7f00\u5e76\u8f6c\u4e3a\u5c0f\u5199\n                option_key = key[len(options_prefix) :].lower()\n                # \u7c7b\u578b\u8f6c\u6362\n                options[option_key] = cls._convert_env_value(value)\n\n        return cls(backend=backend, options=options)\n\n    @staticmethod\n    def _convert_env_value(value: str) -&gt; Any:\n        \"\"\"\u8f6c\u6362\u73af\u5883\u53d8\u91cf\u503c\u7c7b\u578b\"\"\"\n        # \u5e03\u5c14\u503c\n        if value.lower() in {\"true\", \"1\", \"yes\", \"on\"}:\n            return True\n        if value.lower() in {\"false\", \"0\", \"no\", \"off\"}:\n            return False\n\n        # None/null\n        if value.lower() in {\"none\", \"null\", \"\"}:\n            return None\n\n        # \u6570\u5b57\n        try:\n            if \".\" in value:\n                return float(value)\n            return int(value)\n        except ValueError:\n            pass\n\n        # \u5b57\u7b26\u4e32\n        return value\n\n    def __repr__(self) -&gt; str:\n        \"\"\"\u5b57\u7b26\u4e32\u8868\u793a\"\"\"\n        return f\"CacheConfig(backend={self.backend!r}, options={self.options!r})\"\n</code></pre>"},{"location":"zh/api/config/#symphra_cache.config.CacheConfig.__repr__","title":"<code>__repr__()</code>","text":"<p>\u5b57\u7b26\u4e32\u8868\u793a</p> Source code in <code>src/symphra_cache/config.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"\u5b57\u7b26\u4e32\u8868\u793a\"\"\"\n    return f\"CacheConfig(backend={self.backend!r}, options={self.options!r})\"\n</code></pre>"},{"location":"zh/api/config/#symphra_cache.config.CacheConfig.create_backend","title":"<code>create_backend()</code>","text":"<p>\u6839\u636e\u914d\u7f6e\u521b\u5efa\u540e\u7aef\u5b9e\u4f8b</p> <p>Returns:</p> Type Description <code>BaseBackend</code> <p>\u914d\u7f6e\u597d\u7684\u540e\u7aef\u5b9e\u4f8b</p> <p>Raises:</p> Type Description <code>CacheConfigError</code> <p>\u540e\u7aef\u521b\u5efa\u5931\u8d25</p> \u793a\u4f8b <p>config = CacheConfig(backend=\"memory\", options={\"max_size\": 1000}) backend = config.create_backend()</p> Source code in <code>src/symphra_cache/config.py</code> <pre><code>def create_backend(self) -&gt; BaseBackend:\n    \"\"\"\n    \u6839\u636e\u914d\u7f6e\u521b\u5efa\u540e\u7aef\u5b9e\u4f8b\n\n    Returns:\n        \u914d\u7f6e\u597d\u7684\u540e\u7aef\u5b9e\u4f8b\n\n    Raises:\n        CacheConfigError: \u540e\u7aef\u521b\u5efa\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; config = CacheConfig(backend=\"memory\", options={\"max_size\": 1000})\n        &gt;&gt;&gt; backend = config.create_backend()\n    \"\"\"\n    from .backends import create_backend\n\n    try:\n        return create_backend(self.backend, **self.options)\n    except Exception as e:\n        msg = f\"\u521b\u5efa {self.backend} \u540e\u7aef\u5931\u8d25: {e}\"\n        raise CacheConfigError(msg) from e\n</code></pre>"},{"location":"zh/api/config/#symphra_cache.config.CacheConfig.from_env","title":"<code>from_env(prefix='SYMPHRA_CACHE_')</code>  <code>classmethod</code>","text":"<p>\u4ece\u73af\u5883\u53d8\u91cf\u521b\u5efa\u914d\u7f6e</p> <p>\u73af\u5883\u53d8\u91cf\u547d\u540d\u89c4\u5219: - SYMPHRA_CACHE_BACKEND=memory - SYMPHRA_CACHE_OPTIONS__MAX_SIZE=10000  (options \u4f7f\u7528\u53cc\u4e0b\u5212\u7ebf) - SYMPHRA_CACHE_OPTIONS__HOST=localhost</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>\u73af\u5883\u53d8\u91cf\u524d\u7f00</p> <code>'SYMPHRA_CACHE_'</code> <p>Returns:</p> Type Description <code>CacheConfig</code> <p>CacheConfig \u5b9e\u4f8b</p> \u793a\u4f8b <p>import os os.environ[\"SYMPHRA_CACHE_BACKEND\"] = \"redis\" os.environ[\"SYMPHRA_CACHE_OPTIONS__HOST\"] = \"localhost\" config = CacheConfig.from_env()</p> Source code in <code>src/symphra_cache/config.py</code> <pre><code>@classmethod\ndef from_env(cls, prefix: str = \"SYMPHRA_CACHE_\") -&gt; CacheConfig:\n    \"\"\"\n    \u4ece\u73af\u5883\u53d8\u91cf\u521b\u5efa\u914d\u7f6e\n\n    \u73af\u5883\u53d8\u91cf\u547d\u540d\u89c4\u5219:\n    - SYMPHRA_CACHE_BACKEND=memory\n    - SYMPHRA_CACHE_OPTIONS__MAX_SIZE=10000  (options \u4f7f\u7528\u53cc\u4e0b\u5212\u7ebf)\n    - SYMPHRA_CACHE_OPTIONS__HOST=localhost\n\n    Args:\n        prefix: \u73af\u5883\u53d8\u91cf\u524d\u7f00\n\n    Returns:\n        CacheConfig \u5b9e\u4f8b\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; import os\n        &gt;&gt;&gt; os.environ[\"SYMPHRA_CACHE_BACKEND\"] = \"redis\"\n        &gt;&gt;&gt; os.environ[\"SYMPHRA_CACHE_OPTIONS__HOST\"] = \"localhost\"\n        &gt;&gt;&gt; config = CacheConfig.from_env()\n    \"\"\"\n    backend = os.environ.get(f\"{prefix}BACKEND\", \"memory\")\n    options: dict[str, Any] = {}\n\n    # \u6536\u96c6 options\n    options_prefix = f\"{prefix}OPTIONS__\"\n    for key, value in os.environ.items():\n        if key.startswith(options_prefix):\n            # \u79fb\u9664\u524d\u7f00\u5e76\u8f6c\u4e3a\u5c0f\u5199\n            option_key = key[len(options_prefix) :].lower()\n            # \u7c7b\u578b\u8f6c\u6362\n            options[option_key] = cls._convert_env_value(value)\n\n    return cls(backend=backend, options=options)\n</code></pre>"},{"location":"zh/api/config/#symphra_cache.config.CacheConfig.from_file","title":"<code>from_file(file_path)</code>  <code>classmethod</code>","text":"<p>\u4ece\u914d\u7f6e\u6587\u4ef6\u521b\u5efa\u914d\u7f6e</p> <p>\u652f\u6301\u7684\u683c\u5f0f: - YAML (.yaml, .yml) - TOML (.toml) - JSON (.json)</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str | Path</code> <p>\u914d\u7f6e\u6587\u4ef6\u8def\u5f84</p> required <p>Returns:</p> Type Description <code>CacheConfig</code> <p>CacheConfig \u5b9e\u4f8b</p> <p>Raises:</p> Type Description <code>CacheConfigError</code> <p>\u6587\u4ef6\u8bfb\u53d6\u6216\u89e3\u6790\u5931\u8d25</p> \u793a\u4f8b <p>config = CacheConfig.from_file(\"config/cache.yaml\")</p> Source code in <code>src/symphra_cache/config.py</code> <pre><code>@classmethod\ndef from_file(cls, file_path: str | Path) -&gt; CacheConfig:\n    \"\"\"\n    \u4ece\u914d\u7f6e\u6587\u4ef6\u521b\u5efa\u914d\u7f6e\n\n    \u652f\u6301\u7684\u683c\u5f0f:\n    - YAML (.yaml, .yml)\n    - TOML (.toml)\n    - JSON (.json)\n\n    Args:\n        file_path: \u914d\u7f6e\u6587\u4ef6\u8def\u5f84\n\n    Returns:\n        CacheConfig \u5b9e\u4f8b\n\n    Raises:\n        CacheConfigError: \u6587\u4ef6\u8bfb\u53d6\u6216\u89e3\u6790\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; config = CacheConfig.from_file(\"config/cache.yaml\")\n    \"\"\"\n    file_path = Path(file_path)\n\n    if not file_path.exists():\n        msg = f\"\u914d\u7f6e\u6587\u4ef6\u4e0d\u5b58\u5728: {file_path}\"\n        raise CacheConfigError(msg)\n\n    suffix = file_path.suffix.lower()\n\n    try:\n        if suffix in {\".yaml\", \".yml\"}:\n            return cls._from_yaml(file_path)\n        if suffix == \".toml\":\n            return cls._from_toml(file_path)\n        if suffix == \".json\":\n            return cls._from_json(file_path)\n        msg = f\"\u4e0d\u652f\u6301\u7684\u914d\u7f6e\u6587\u4ef6\u683c\u5f0f: {suffix}\"\n        raise CacheConfigError(msg)\n    except Exception as e:\n        if isinstance(e, CacheConfigError):\n            raise\n        msg = f\"\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\u5931\u8d25: {file_path}\"\n        raise CacheConfigError(msg) from e\n</code></pre>"},{"location":"zh/api/config/#symphra_cache.config.CacheConfig.validate_backend","title":"<code>validate_backend()</code>","text":"<p>\u9a8c\u8bc1\u540e\u7aef\u914d\u7f6e</p> Source code in <code>src/symphra_cache/config.py</code> <pre><code>@model_validator(mode=\"after\")\ndef validate_backend(self) -&gt; CacheConfig:\n    \"\"\"\u9a8c\u8bc1\u540e\u7aef\u914d\u7f6e\"\"\"\n    from .backends import get_registered_backends\n\n    # \u9a8c\u8bc1\u540e\u7aef\u7c7b\u578b\n    available_backends = get_registered_backends()\n    if self.backend.lower() not in available_backends:\n        valid_backends = \", \".join(available_backends)\n        msg = f\"\u4e0d\u652f\u6301\u7684\u540e\u7aef\u7c7b\u578b: {self.backend}\u3002\u652f\u6301\u7684\u7c7b\u578b: {valid_backends}\"\n        raise ValueError(msg)\n\n    return self\n</code></pre>"},{"location":"zh/api/decorators/","title":"\u88c5\u9970\u5668","text":"<p>\u540c\u6b65\u4e0e\u5f02\u6b65\u7f13\u5b58\u88c5\u9970\u5668\uff0c\u4ee5\u53ca\u7f13\u5b58\u5931\u6548\u88c5\u9970\u5668\u4e0e\u5c5e\u6027\u7f13\u5b58\u3002</p> <p>\u7f13\u5b58\u88c5\u9970\u5668\uff08\u540c\u6b65\u51fd\u6570\uff09</p> <p>\u81ea\u52a8\u7f13\u5b58\u51fd\u6570\u8fd4\u56de\u503c\uff0c\u63d0\u5347\u6027\u80fd\u3002</p> <p>Parameters:</p> Name Type Description Default <code>manager</code> <code>CacheManager</code> <p>\u7f13\u5b58\u7ba1\u7406\u5668\u5b9e\u4f8b</p> required <code>ttl</code> <code>int | None</code> <p>\u7f13\u5b58\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u8868\u793a\u6c38\u4e0d\u8fc7\u671f</p> <code>None</code> <code>key_builder</code> <code>Callable[[Callable[..., Any], tuple[Any, ...], dict[str, Any]], str] | None</code> <p>\u81ea\u5b9a\u4e49\u952e\u751f\u6210\u51fd\u6570</p> <code>None</code> <code>key_prefix</code> <code>str</code> <p>\u952e\u524d\u7f00\uff08\u7528\u4e8e\u547d\u540d\u7a7a\u95f4\u9694\u79bb\uff09</p> <code>''</code> <p>Returns:</p> Type Description <code>Callable[[F], F]</code> <p>\u88c5\u9970\u540e\u7684\u51fd\u6570</p> <p>\u793a\u4f8b\uff1a     &gt;&gt;&gt; @cache(manager, ttl=3600, key_prefix=\"user:\")     &gt;&gt;&gt; def get_user(user_id: int):     ...     return db.query(User).get(user_id)     &gt;&gt;&gt;     &gt;&gt;&gt; user = get_user(123)  # \u7f13\u5b58 1 \u5c0f\u65f6</p> Source code in <code>src/symphra_cache/decorators.py</code> <pre><code>def cache(\n    manager: CacheManager,\n    ttl: int | None = None,\n    key_builder: Callable[[Callable[..., Any], tuple[Any, ...], dict[str, Any]], str] | None = None,\n    key_prefix: str = \"\",\n) -&gt; Callable[[F], F]:\n    \"\"\"\n    \u7f13\u5b58\u88c5\u9970\u5668\uff08\u540c\u6b65\u51fd\u6570\uff09\n\n    \u81ea\u52a8\u7f13\u5b58\u51fd\u6570\u8fd4\u56de\u503c\uff0c\u63d0\u5347\u6027\u80fd\u3002\n\n    Args:\n        manager: \u7f13\u5b58\u7ba1\u7406\u5668\u5b9e\u4f8b\n        ttl: \u7f13\u5b58\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n        key_builder: \u81ea\u5b9a\u4e49\u952e\u751f\u6210\u51fd\u6570\n        key_prefix: \u952e\u524d\u7f00\uff08\u7528\u4e8e\u547d\u540d\u7a7a\u95f4\u9694\u79bb\uff09\n\n    Returns:\n        \u88c5\u9970\u540e\u7684\u51fd\u6570\n\n    \u793a\u4f8b\uff1a\n        &gt;&gt;&gt; @cache(manager, ttl=3600, key_prefix=\"user:\")\n        &gt;&gt;&gt; def get_user(user_id: int):\n        ...     return db.query(User).get(user_id)\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; user = get_user(123)  # \u7f13\u5b58 1 \u5c0f\u65f6\n    \"\"\"\n\n    def decorator(func: F) -&gt; F:\n        # \u4f7f\u7528\u9ed8\u8ba4\u952e\u751f\u6210\u5668\n        nonlocal key_builder\n        if key_builder is None:\n            key_builder = default_key_builder\n\n        @functools.wraps(func)\n        def wrapper(*args: Any, **kwargs: Any) -&gt; Any:\n            # \u751f\u6210\u7f13\u5b58\u952e\n            cache_key = key_prefix + key_builder(func, args, kwargs)\n\n            # \u5c1d\u8bd5\u4ece\u7f13\u5b58\u83b7\u53d6\n            cached_value = manager.get(cache_key)\n            if cached_value is not None:\n                return cached_value\n\n            # \u7f13\u5b58\u672a\u547d\u4e2d\uff0c\u6267\u884c\u51fd\u6570\n            result = func(*args, **kwargs)\n\n            # \u5b58\u5165\u7f13\u5b58\n            if result is not None:  # \u4e0d\u7f13\u5b58 None \u503c\n                manager.set(cache_key, result, ttl=ttl)\n\n            return result\n\n        return cast(\"F\", wrapper)\n\n    return decorator\n</code></pre> <p>\u7f13\u5b58\u88c5\u9970\u5668\uff08\u5f02\u6b65\u51fd\u6570\uff09</p> <p>\u5f02\u6b65\u7248\u672c\u7684\u7f13\u5b58\u88c5\u9970\u5668\uff0c\u652f\u6301 async/await \u51fd\u6570\u3002</p> <p>Parameters:</p> Name Type Description Default <code>manager</code> <code>CacheManager</code> <p>\u7f13\u5b58\u7ba1\u7406\u5668\u5b9e\u4f8b</p> required <code>ttl</code> <code>int | None</code> <p>\u7f13\u5b58\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09</p> <code>None</code> <code>key_builder</code> <code>Callable[[Callable[..., Any], tuple[Any, ...], dict[str, Any]], str] | None</code> <p>\u81ea\u5b9a\u4e49\u952e\u751f\u6210\u51fd\u6570</p> <code>None</code> <code>key_prefix</code> <code>str</code> <p>\u952e\u524d\u7f00</p> <code>''</code> <p>Returns:</p> Type Description <code>Callable[[AsyncF], AsyncF]</code> <p>\u88c5\u9970\u540e\u7684\u5f02\u6b65\u51fd\u6570</p> <p>\u793a\u4f8b\uff1a     &gt;&gt;&gt; @acache(manager, ttl=600)     &gt;&gt;&gt; async def fetch_data(api_url: str):     ...     async with httpx.AsyncClient() as client:     ...         response = await client.get(api_url)     ...         return response.json()     &gt;&gt;&gt;     &gt;&gt;&gt; data = await fetch_data(\"https://api.example.com/users\")</p> Source code in <code>src/symphra_cache/decorators.py</code> <pre><code>def acache(\n    manager: CacheManager,\n    ttl: int | None = None,\n    key_builder: Callable[[Callable[..., Any], tuple[Any, ...], dict[str, Any]], str] | None = None,\n    key_prefix: str = \"\",\n) -&gt; Callable[[AsyncF], AsyncF]:\n    \"\"\"\n    \u7f13\u5b58\u88c5\u9970\u5668\uff08\u5f02\u6b65\u51fd\u6570\uff09\n\n    \u5f02\u6b65\u7248\u672c\u7684\u7f13\u5b58\u88c5\u9970\u5668\uff0c\u652f\u6301 async/await \u51fd\u6570\u3002\n\n    Args:\n        manager: \u7f13\u5b58\u7ba1\u7406\u5668\u5b9e\u4f8b\n        ttl: \u7f13\u5b58\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\n        key_builder: \u81ea\u5b9a\u4e49\u952e\u751f\u6210\u51fd\u6570\n        key_prefix: \u952e\u524d\u7f00\n\n    Returns:\n        \u88c5\u9970\u540e\u7684\u5f02\u6b65\u51fd\u6570\n\n    \u793a\u4f8b\uff1a\n        &gt;&gt;&gt; @acache(manager, ttl=600)\n        &gt;&gt;&gt; async def fetch_data(api_url: str):\n        ...     async with httpx.AsyncClient() as client:\n        ...         response = await client.get(api_url)\n        ...         return response.json()\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; data = await fetch_data(\"https://api.example.com/users\")\n    \"\"\"\n\n    def decorator(func: AsyncF) -&gt; AsyncF:\n        # \u4f7f\u7528\u9ed8\u8ba4\u952e\u751f\u6210\u5668\n        nonlocal key_builder\n        if key_builder is None:\n            key_builder = default_key_builder\n\n        @functools.wraps(func)\n        async def wrapper(*args: Any, **kwargs: Any) -&gt; Any:\n            # \u751f\u6210\u7f13\u5b58\u952e\n            cache_key = key_prefix + key_builder(func, args, kwargs)\n\n            # \u5c1d\u8bd5\u4ece\u7f13\u5b58\u83b7\u53d6\n            cached_value = await manager.aget(cache_key)\n            if cached_value is not None:\n                return cached_value\n\n            # \u7f13\u5b58\u672a\u547d\u4e2d\uff0c\u6267\u884c\u51fd\u6570\n            result = await func(*args, **kwargs)\n\n            # \u5b58\u5165\u7f13\u5b58\n            if result is not None:\n                await manager.aset(cache_key, result, ttl=ttl)\n\n            return result\n\n        return cast(\"AsyncF\", wrapper)\n\n    return decorator\n</code></pre> <p>\u7f13\u5b58\u5931\u6548\u88c5\u9970\u5668</p> <p>\u5728\u51fd\u6570\u6267\u884c\u540e\uff0c\u5220\u9664\u5bf9\u5e94\u7684\u7f13\u5b58\u3002 \u5e38\u7528\u4e8e\u66f4\u65b0\u64cd\u4f5c\uff08\u5982 update_user \u540e\u6e05\u9664 get_user \u7f13\u5b58\uff09\u3002</p> <p>Parameters:</p> Name Type Description Default <code>manager</code> <code>CacheManager</code> <p>\u7f13\u5b58\u7ba1\u7406\u5668</p> required <code>key_builder</code> <code>Callable[[Callable[..., Any], tuple[Any, ...], dict[str, Any]], str] | None</code> <p>\u952e\u751f\u6210\u51fd\u6570\uff08\u9700\u4e0e @cache \u4e00\u81f4\uff09</p> <code>None</code> <code>key_prefix</code> <code>str</code> <p>\u952e\u524d\u7f00</p> <code>''</code> <p>Returns:</p> Type Description <code>Callable[[F], F]</code> <p>\u88c5\u9970\u540e\u7684\u51fd\u6570</p> <p>\u793a\u4f8b\uff1a     &gt;&gt;&gt; @cache(manager, key_prefix=\"user:\")     &gt;&gt;&gt; def get_user(user_id: int):     ...     return db.query(User).get(user_id)     &gt;&gt;&gt;     &gt;&gt;&gt; @cache_invalidate(manager, key_prefix=\"user:\")     &gt;&gt;&gt; def update_user(user_id: int, **updates):     ...     db.query(User).filter_by(id=user_id).update(updates)     ...     db.commit()     &gt;&gt;&gt;     &gt;&gt;&gt; get_user(123)  # \u7f13\u5b58\u7ed3\u679c     &gt;&gt;&gt; update_user(123, name=\"Bob\")  # \u6e05\u9664\u7f13\u5b58     &gt;&gt;&gt; get_user(123)  # \u91cd\u65b0\u67e5\u8be2\u6570\u636e\u5e93</p> Source code in <code>src/symphra_cache/decorators.py</code> <pre><code>def cache_invalidate(\n    manager: CacheManager,\n    key_builder: Callable[[Callable[..., Any], tuple[Any, ...], dict[str, Any]], str] | None = None,\n    key_prefix: str = \"\",\n) -&gt; Callable[[F], F]:\n    \"\"\"\n    \u7f13\u5b58\u5931\u6548\u88c5\u9970\u5668\n\n    \u5728\u51fd\u6570\u6267\u884c\u540e\uff0c\u5220\u9664\u5bf9\u5e94\u7684\u7f13\u5b58\u3002\n    \u5e38\u7528\u4e8e\u66f4\u65b0\u64cd\u4f5c\uff08\u5982 update_user \u540e\u6e05\u9664 get_user \u7f13\u5b58\uff09\u3002\n\n    Args:\n        manager: \u7f13\u5b58\u7ba1\u7406\u5668\n        key_builder: \u952e\u751f\u6210\u51fd\u6570\uff08\u9700\u4e0e @cache \u4e00\u81f4\uff09\n        key_prefix: \u952e\u524d\u7f00\n\n    Returns:\n        \u88c5\u9970\u540e\u7684\u51fd\u6570\n\n    \u793a\u4f8b\uff1a\n        &gt;&gt;&gt; @cache(manager, key_prefix=\"user:\")\n        &gt;&gt;&gt; def get_user(user_id: int):\n        ...     return db.query(User).get(user_id)\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; @cache_invalidate(manager, key_prefix=\"user:\")\n        &gt;&gt;&gt; def update_user(user_id: int, **updates):\n        ...     db.query(User).filter_by(id=user_id).update(updates)\n        ...     db.commit()\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; get_user(123)  # \u7f13\u5b58\u7ed3\u679c\n        &gt;&gt;&gt; update_user(123, name=\"Bob\")  # \u6e05\u9664\u7f13\u5b58\n        &gt;&gt;&gt; get_user(123)  # \u91cd\u65b0\u67e5\u8be2\u6570\u636e\u5e93\n    \"\"\"\n\n    def decorator(func: F) -&gt; F:\n        nonlocal key_builder\n        if key_builder is None:\n            key_builder = default_key_builder\n\n        @functools.wraps(func)\n        def wrapper(*args: Any, **kwargs: Any) -&gt; Any:\n            # \u5148\u6267\u884c\u51fd\u6570\n            result = func(*args, **kwargs)\n\n            # \u751f\u6210\u7f13\u5b58\u952e\u5e76\u5220\u9664\n            cache_key = key_prefix + key_builder(func, args, kwargs)\n            manager.delete(cache_key)\n\n            return result\n\n        return cast(\"F\", wrapper)\n\n    return decorator\n</code></pre> <p>\u7f13\u5b58\u5c5e\u6027\u88c5\u9970\u5668</p> <p>\u7c7b\u4f3c\u4e8e functools.cached_property\uff0c\u4f46\u4f7f\u7528\u5916\u90e8\u7f13\u5b58\u540e\u7aef\u3002 \u9002\u7528\u4e8e\u9700\u8981\u5728\u591a\u4e2a\u5b9e\u4f8b\u95f4\u5171\u4eab\u7f13\u5b58\u7684\u573a\u666f\u3002</p> <p>\u793a\u4f8b\uff1a     &gt;&gt;&gt; class User:     ...     def init(self, user_id):     ...         self.user_id = user_id     ...     ...     @CachedProperty(manager, ttl=600)     ...     def profile(self):     ...         # \u6570\u636e\u5e93\u67e5\u8be2     ...         return db.query(Profile).get(self.user_id)     &gt;&gt;&gt;     &gt;&gt;&gt; user = User(123)     &gt;&gt;&gt; profile = user.profile  # \u7b2c\u4e00\u6b21\uff1a\u67e5\u8be2\u6570\u636e\u5e93     &gt;&gt;&gt; profile = user.profile  # \u7b2c\u4e8c\u6b21\uff1a\u4ece\u7f13\u5b58\u83b7\u53d6</p> Source code in <code>src/symphra_cache/decorators.py</code> <pre><code>class CachedProperty:\n    \"\"\"\n    \u7f13\u5b58\u5c5e\u6027\u88c5\u9970\u5668\n\n    \u7c7b\u4f3c\u4e8e functools.cached_property\uff0c\u4f46\u4f7f\u7528\u5916\u90e8\u7f13\u5b58\u540e\u7aef\u3002\n    \u9002\u7528\u4e8e\u9700\u8981\u5728\u591a\u4e2a\u5b9e\u4f8b\u95f4\u5171\u4eab\u7f13\u5b58\u7684\u573a\u666f\u3002\n\n    \u793a\u4f8b\uff1a\n        &gt;&gt;&gt; class User:\n        ...     def __init__(self, user_id):\n        ...         self.user_id = user_id\n        ...\n        ...     @CachedProperty(manager, ttl=600)\n        ...     def profile(self):\n        ...         # \u6570\u636e\u5e93\u67e5\u8be2\n        ...         return db.query(Profile).get(self.user_id)\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; user = User(123)\n        &gt;&gt;&gt; profile = user.profile  # \u7b2c\u4e00\u6b21\uff1a\u67e5\u8be2\u6570\u636e\u5e93\n        &gt;&gt;&gt; profile = user.profile  # \u7b2c\u4e8c\u6b21\uff1a\u4ece\u7f13\u5b58\u83b7\u53d6\n    \"\"\"\n\n    def __init__(\n        self,\n        manager: CacheManager,\n        ttl: int | None = None,\n        key_prefix: str = \"\",\n    ) -&gt; None:\n        \"\"\"\n        \u521d\u59cb\u5316\u7f13\u5b58\u5c5e\u6027\n\n        Args:\n            manager: \u7f13\u5b58\u7ba1\u7406\u5668\n            ttl: \u7f13\u5b58\u8fc7\u671f\u65f6\u95f4\n            key_prefix: \u952e\u524d\u7f00\n        \"\"\"\n        self.manager = manager\n        self.ttl = ttl\n        self.key_prefix = key_prefix\n        self.func: Callable[[Any], Any] | None = None\n\n    def __call__(self, func: Callable[[Any], Any]) -&gt; CachedProperty:\n        \"\"\"\u8bbe\u7f6e\u88ab\u88c5\u9970\u7684\u65b9\u6cd5\"\"\"\n        self.func = func\n        return self\n\n    def __get__(self, instance: Any, owner: type | None = None) -&gt; Any:\n        \"\"\"\u63cf\u8ff0\u5668\u534f\u8bae\uff1a\u83b7\u53d6\u5c5e\u6027\u503c\"\"\"\n        if instance is None:\n            return self\n\n        if self.func is None:\n            msg = \"CachedProperty \u672a\u6b63\u786e\u521d\u59cb\u5316\"\n            raise RuntimeError(msg)\n\n        # \u751f\u6210\u7f13\u5b58\u952e\uff08\u57fa\u4e8e\u7c7b\u540d\u3001\u65b9\u6cd5\u540d\u3001\u5b9e\u4f8b ID\uff09\n        cache_key = f\"{self.key_prefix}{owner.__name__}.{self.func.__name__}:{id(instance)}\"\n\n        # \u5c1d\u8bd5\u4ece\u7f13\u5b58\u83b7\u53d6\n        cached_value = self.manager.get(cache_key)\n        if cached_value is not None:\n            return cached_value\n\n        # \u7f13\u5b58\u672a\u547d\u4e2d\uff0c\u8c03\u7528\u65b9\u6cd5\n        result = self.func(instance)\n\n        # \u5b58\u5165\u7f13\u5b58\n        if result is not None:\n            self.manager.set(cache_key, result, ttl=self.ttl)\n\n        return result\n</code></pre>"},{"location":"zh/api/decorators/#symphra_cache.decorators.CachedProperty.__call__","title":"<code>__call__(func)</code>","text":"<p>\u8bbe\u7f6e\u88ab\u88c5\u9970\u7684\u65b9\u6cd5</p> Source code in <code>src/symphra_cache/decorators.py</code> <pre><code>def __call__(self, func: Callable[[Any], Any]) -&gt; CachedProperty:\n    \"\"\"\u8bbe\u7f6e\u88ab\u88c5\u9970\u7684\u65b9\u6cd5\"\"\"\n    self.func = func\n    return self\n</code></pre>"},{"location":"zh/api/decorators/#symphra_cache.decorators.CachedProperty.__get__","title":"<code>__get__(instance, owner=None)</code>","text":"<p>\u63cf\u8ff0\u5668\u534f\u8bae\uff1a\u83b7\u53d6\u5c5e\u6027\u503c</p> Source code in <code>src/symphra_cache/decorators.py</code> <pre><code>def __get__(self, instance: Any, owner: type | None = None) -&gt; Any:\n    \"\"\"\u63cf\u8ff0\u5668\u534f\u8bae\uff1a\u83b7\u53d6\u5c5e\u6027\u503c\"\"\"\n    if instance is None:\n        return self\n\n    if self.func is None:\n        msg = \"CachedProperty \u672a\u6b63\u786e\u521d\u59cb\u5316\"\n        raise RuntimeError(msg)\n\n    # \u751f\u6210\u7f13\u5b58\u952e\uff08\u57fa\u4e8e\u7c7b\u540d\u3001\u65b9\u6cd5\u540d\u3001\u5b9e\u4f8b ID\uff09\n    cache_key = f\"{self.key_prefix}{owner.__name__}.{self.func.__name__}:{id(instance)}\"\n\n    # \u5c1d\u8bd5\u4ece\u7f13\u5b58\u83b7\u53d6\n    cached_value = self.manager.get(cache_key)\n    if cached_value is not None:\n        return cached_value\n\n    # \u7f13\u5b58\u672a\u547d\u4e2d\uff0c\u8c03\u7528\u65b9\u6cd5\n    result = self.func(instance)\n\n    # \u5b58\u5165\u7f13\u5b58\n    if result is not None:\n        self.manager.set(cache_key, result, ttl=self.ttl)\n\n    return result\n</code></pre>"},{"location":"zh/api/decorators/#symphra_cache.decorators.CachedProperty.__init__","title":"<code>__init__(manager, ttl=None, key_prefix='')</code>","text":"<p>\u521d\u59cb\u5316\u7f13\u5b58\u5c5e\u6027</p> <p>Parameters:</p> Name Type Description Default <code>manager</code> <code>CacheManager</code> <p>\u7f13\u5b58\u7ba1\u7406\u5668</p> required <code>ttl</code> <code>int | None</code> <p>\u7f13\u5b58\u8fc7\u671f\u65f6\u95f4</p> <code>None</code> <code>key_prefix</code> <code>str</code> <p>\u952e\u524d\u7f00</p> <code>''</code> Source code in <code>src/symphra_cache/decorators.py</code> <pre><code>def __init__(\n    self,\n    manager: CacheManager,\n    ttl: int | None = None,\n    key_prefix: str = \"\",\n) -&gt; None:\n    \"\"\"\n    \u521d\u59cb\u5316\u7f13\u5b58\u5c5e\u6027\n\n    Args:\n        manager: \u7f13\u5b58\u7ba1\u7406\u5668\n        ttl: \u7f13\u5b58\u8fc7\u671f\u65f6\u95f4\n        key_prefix: \u952e\u524d\u7f00\n    \"\"\"\n    self.manager = manager\n    self.ttl = ttl\n    self.key_prefix = key_prefix\n    self.func: Callable[[Any], Any] | None = None\n</code></pre>"},{"location":"zh/api/invalidation/","title":"\u5931\u6548","text":"<p>\u7f13\u5b58\u5931\u6548\u5de5\u5177\u4e0e\u5206\u7ec4\u5931\u6548\u3002</p> <p>\u7f13\u5b58\u5931\u6548\u5668</p> <p>\u63d0\u4f9b\u591a\u79cd\u7f13\u5b58\u5931\u6548\u7b56\u7565\uff0c\u786e\u4fdd\u6570\u636e\u4e00\u81f4\u6027\u548c\u7f13\u5b58\u66f4\u65b0\u3002</p> <p>\u5931\u6548\u7b56\u7565\uff1a - \u4e3b\u52a8\u5931\u6548\uff1a\u624b\u52a8\u6307\u5b9a\u8981\u5931\u6548\u7684\u952e - \u6a21\u5f0f\u5339\u914d\u5931\u6548\uff1a\u57fa\u4e8e\u901a\u914d\u7b26\u6a21\u5f0f\u5931\u6548 - \u6279\u91cf\u5931\u6548\uff1a\u6e05\u7a7a\u6240\u6709\u6216\u7279\u5b9a\u7c7b\u578b\u7684\u6570\u636e - \u6761\u4ef6\u5931\u6548\uff1a\u57fa\u4e8e\u6761\u4ef6\u8868\u8fbe\u5f0f\u5931\u6548 - \u5206\u5e03\u5f0f\u5931\u6548\uff1a\u8de8\u591a\u4e2a\u7f13\u5b58\u5b9e\u4f8b\u5931\u6548</p> <p>\u4f7f\u7528\u793a\u4f8b\uff1a     &gt;&gt;&gt; invalidator = CacheInvalidator(cache)     &gt;&gt;&gt; await invalidator.invalidate_keys([\"key1\", \"key2\"])     &gt;&gt;&gt; await invalidator.invalidate_pattern(\"user:*\")</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>class CacheInvalidator:\n    \"\"\"\n    \u7f13\u5b58\u5931\u6548\u5668\n\n    \u63d0\u4f9b\u591a\u79cd\u7f13\u5b58\u5931\u6548\u7b56\u7565\uff0c\u786e\u4fdd\u6570\u636e\u4e00\u81f4\u6027\u548c\u7f13\u5b58\u66f4\u65b0\u3002\n\n    \u5931\u6548\u7b56\u7565\uff1a\n    - \u4e3b\u52a8\u5931\u6548\uff1a\u624b\u52a8\u6307\u5b9a\u8981\u5931\u6548\u7684\u952e\n    - \u6a21\u5f0f\u5339\u914d\u5931\u6548\uff1a\u57fa\u4e8e\u901a\u914d\u7b26\u6a21\u5f0f\u5931\u6548\n    - \u6279\u91cf\u5931\u6548\uff1a\u6e05\u7a7a\u6240\u6709\u6216\u7279\u5b9a\u7c7b\u578b\u7684\u6570\u636e\n    - \u6761\u4ef6\u5931\u6548\uff1a\u57fa\u4e8e\u6761\u4ef6\u8868\u8fbe\u5f0f\u5931\u6548\n    - \u5206\u5e03\u5f0f\u5931\u6548\uff1a\u8de8\u591a\u4e2a\u7f13\u5b58\u5b9e\u4f8b\u5931\u6548\n\n    \u4f7f\u7528\u793a\u4f8b\uff1a\n        &gt;&gt;&gt; invalidator = CacheInvalidator(cache)\n        &gt;&gt;&gt; await invalidator.invalidate_keys([\"key1\", \"key2\"])\n        &gt;&gt;&gt; await invalidator.invalidate_pattern(\"user:*\")\n    \"\"\"\n\n    def __init__(\n        self,\n        cache: CacheManager,\n        batch_size: int = 100,\n        enable_distributed: bool = False,\n    ) -&gt; None:\n        \"\"\"\n        \u521d\u59cb\u5316\u7f13\u5b58\u5931\u6548\u5668\n\n        Args:\n            cache: \u7f13\u5b58\u7ba1\u7406\u5668\u5b9e\u4f8b\n            batch_size: \u6279\u91cf\u64cd\u4f5c\u5927\u5c0f\n            enable_distributed: \u662f\u5426\u542f\u7528\u5206\u5e03\u5f0f\u5931\u6548\n        \"\"\"\n        self.cache = cache\n        self.batch_size = batch_size\n        self.enable_distributed = enable_distributed\n        self._invalidation_log: list[dict[str, Any]] = []\n        self._last_invalidation_time = time.time()\n\n    async def invalidate_keys(\n        self,\n        keys: list[CacheKey],\n        batch_size: int | None = None,\n    ) -&gt; int:\n        \"\"\"\n        \u5931\u6548\u6307\u5b9a\u7684\u952e\n\n        Args:\n            keys: \u8981\u5931\u6548\u7684\u952e\u5217\u8868\n            batch_size: \u6279\u91cf\u5927\u5c0f\n\n        Returns:\n            \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n        \"\"\"\n        if not keys:\n            return 0\n\n        batch_size = batch_size if batch_size is not None else self.batch_size\n        total_invalidated = 0\n\n        # \u6279\u91cf\u5931\u6548\uff0c\u907f\u514d\u4e00\u6b21\u6027\u64cd\u4f5c\u8fc7\u591a\u6570\u636e\n        for i in range(0, len(keys), batch_size):\n            batch_keys = keys[i : i + batch_size]\n\n            # \u6279\u91cf\u5220\u9664\n            count = await self.cache.adelete_many(batch_keys)\n            total_invalidated += count\n\n            # \u8bb0\u5f55\u5931\u6548\u65e5\u5fd7\n            self._log_invalidation(\"keys\", batch_keys, count)\n\n            # \u77ed\u6682\u4f11\u7720\u907f\u514d\u963b\u585e\n            if i + batch_size &lt; len(keys):\n                await asyncio.sleep(0.01)\n\n        self._last_invalidation_time = time.time()\n        return total_invalidated\n\n    async def invalidate_pattern(\n        self,\n        pattern: str,\n        max_keys: int | None = None,\n    ) -&gt; int:\n        \"\"\"\n        \u57fa\u4e8e\u6a21\u5f0f\u5339\u914d\u5931\u6548\u952e\n\n        \u652f\u6301\u901a\u914d\u7b26\u6a21\u5f0f\uff08* \u548c ?\uff09\u3002\n\n        Args:\n            pattern: \u5339\u914d\u6a21\u5f0f\uff08\u5982 \"user:*\", \"session:??\"\uff09\n            max_keys: \u6700\u5927\u5931\u6548\u952e\u6570\u91cf\uff0cNone \u8868\u793a\u65e0\u9650\u5236\n\n        Returns:\n            \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n        \"\"\"\n        # \u626b\u63cf\u5339\u914d\u7684\u952e\n        all_keys: list[CacheKey] = []\n        cursor = 0\n\n        while True:\n            page = await self.cache.akeys(pattern=pattern, cursor=cursor, count=100)\n            all_keys.extend(page.keys)\n\n            if not page.has_more or (max_keys and len(all_keys) &gt;= max_keys):\n                break\n            cursor = page.cursor\n\n        # \u9650\u5236\u6570\u91cf\n        if max_keys:\n            all_keys = all_keys[:max_keys]\n\n        # \u5931\u6548\u5339\u914d\u7684\u952e\n        invalidated_count = await self.invalidate_keys(all_keys)\n\n        self._log_invalidation(\n            \"pattern\", {\"pattern\": pattern, \"matched_keys\": len(all_keys)}, invalidated_count\n        )\n        return invalidated_count\n\n    async def invalidate_prefix(self, prefix: str) -&gt; int:\n        \"\"\"\n        \u5931\u6548\u6307\u5b9a\u524d\u7f00\u7684\u6240\u6709\u952e\n\n        Args:\n            prefix: \u952e\u524d\u7f00\n\n        Returns:\n            \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n        \"\"\"\n        return await self.invalidate_pattern(f\"{prefix}*\", max_keys=None)\n\n    async def invalidate_all(self) -&gt; int:\n        \"\"\"\n        \u5931\u6548\u6240\u6709\u7f13\u5b58\n\n        Returns:\n            \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n        \"\"\"\n        try:\n            # \u4f7f\u7528\u7f13\u5b58\u7684 keys \u65b9\u6cd5\u83b7\u53d6\u6240\u6709\u952e\n            all_keys: list[CacheKey] = []\n            cursor = 0\n\n            while True:\n                page = await self.cache.akeys(cursor=cursor, count=100)\n                all_keys.extend(page.keys)\n\n                if not page.has_more:\n                    break\n                cursor = page.cursor\n\n            # \u6279\u91cf\u5931\u6548\n            invalidated_count = await self.invalidate_keys(all_keys)\n\n            self._log_invalidation(\"all\", {\"total_keys\": len(all_keys)}, invalidated_count)\n            return invalidated_count\n\n        except Exception:\n            # \u5982\u679c\u626b\u63cf\u5931\u8d25\uff0c\u4f7f\u7528 clear \u65b9\u6cd5\n            await self.cache.aclear()\n            self._log_invalidation(\"all\", {\"method\": \"clear\"}, len(all_keys) if all_keys else 0)\n            return len(all_keys) if all_keys else 0\n\n    async def invalidate_by_condition(\n        self,\n        condition: Callable[[CacheKey, Any], bool],\n        max_keys: int | None = None,\n    ) -&gt; int:\n        \"\"\"\n        \u57fa\u4e8e\u6761\u4ef6\u5931\u6548\u952e\n\n        Args:\n            condition: \u5931\u6548\u6761\u4ef6\u51fd\u6570\uff0c\u63a5\u6536 (key, value) \u8fd4\u56de\u662f\u5426\u5931\u6548\n            max_keys: \u6700\u5927\u5931\u6548\u952e\u6570\u91cf\n\n        Returns:\n            \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n        \"\"\"\n        # \u626b\u63cf\u6240\u6709\u952e\u5e76\u68c0\u67e5\u6761\u4ef6\n        all_keys_to_invalidate: list[CacheKey] = []\n        cursor = 0\n        total_scanned = 0\n\n        while True:\n            page = await self.cache.akeys(cursor=cursor, count=100)\n\n            for key in page.keys:\n                total_scanned += 1\n\n                # \u83b7\u53d6\u952e\u503c\u5e76\u68c0\u67e5\u6761\u4ef6\n                try:\n                    value = await self.cache.aget(key)\n                    if value is not None and condition(key, value):\n                        all_keys_to_invalidate.append(key)\n\n                        # \u68c0\u67e5\u662f\u5426\u8fbe\u5230\u4e0a\u9650\n                        if max_keys and len(all_keys_to_invalidate) &gt;= max_keys:\n                            break\n\n                except Exception:\n                    # \u5ffd\u7565\u83b7\u53d6\u5931\u8d25\u7684\u952e\n                    continue\n\n            if not page.has_more or (max_keys and len(all_keys_to_invalidate) &gt;= max_keys):\n                break\n            cursor = page.cursor\n\n        # \u5931\u6548\u7b26\u5408\u6761\u4ef6\u7684\u952e\n        invalidated_count = await self.invalidate_keys(all_keys_to_invalidate)\n\n        self._log_invalidation(\n            \"condition\",\n            {\n                \"condition_func\": condition.__name__\n                if hasattr(condition, \"__name__\")\n                else str(condition),\n                \"total_scanned\": total_scanned,\n                \"matched_keys\": len(all_keys_to_invalidate),\n            },\n            invalidated_count,\n        )\n        return invalidated_count\n\n    async def invalidate_with_dependencies(\n        self,\n        keys: list[CacheKey],\n        dependency_resolver: Callable[[list[CacheKey]], list[CacheKey]],\n    ) -&gt; int:\n        \"\"\"\n        \u5931\u6548\u952e\u53ca\u5176\u4f9d\u8d56\u9879\n\n        Args:\n            keys: \u4e3b\u952e\u5217\u8868\n            dependency_resolver: \u4f9d\u8d56\u89e3\u6790\u51fd\u6570\uff0c\u8fd4\u56de\u76f8\u5173\u7684\u4f9d\u8d56\u952e\n\n        Returns:\n            \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n        \"\"\"\n        # \u83b7\u53d6\u4e3b\u952e\n        all_keys_to_invalidate = set(keys)\n\n        # \u89e3\u6790\u4f9d\u8d56\u952e\n        try:\n            dependency_keys = await asyncio.to_thread(dependency_resolver, keys)\n            all_keys_to_invalidate.update(dependency_keys)\n        except Exception as e:\n            print(f\"\u4f9d\u8d56\u89e3\u6790\u5931\u8d25: {e}\")\n\n        # \u5931\u6548\u6240\u6709\u952e\n        invalidated_count = await self.invalidate_keys(list(all_keys_to_invalidate))\n\n        self._log_invalidation(\n            \"dependencies\",\n            {\"primary_keys\": len(keys), \"dependency_keys\": len(all_keys_to_invalidate) - len(keys)},\n            invalidated_count,\n        )\n        return invalidated_count\n\n    def _log_invalidation(\n        self,\n        method: str,\n        details: dict[str, Any],\n        count: int,\n    ) -&gt; None:\n        \"\"\"\n        \u8bb0\u5f55\u5931\u6548\u64cd\u4f5c\u65e5\u5fd7\n\n        Args:\n            method: \u5931\u6548\u65b9\u6cd5\n            details: \u5931\u6548\u8be6\u60c5\n            count: \u5931\u6548\u952e\u6570\u91cf\n        \"\"\"\n        log_entry = {\n            \"timestamp\": time.time(),\n            \"method\": method,\n            \"details\": details,\n            \"invalidated_count\": count,\n        }\n        self._invalidation_log.append(log_entry)\n\n        # \u4fdd\u7559\u6700\u8fd1100\u6761\u65e5\u5fd7\n        if len(self._invalidation_log) &gt; 100:\n            self._invalidation_log.pop(0)\n\n    def get_invalidation_stats(self) -&gt; dict[str, Any]:\n        \"\"\"\n        \u83b7\u53d6\u5931\u6548\u7edf\u8ba1\u4fe1\u606f\n\n        Returns:\n            \u7edf\u8ba1\u4fe1\u606f\u5b57\u5178\n        \"\"\"\n        total_invalidated = sum(entry[\"invalidated_count\"] for entry in self._invalidation_log)\n        last_operation = self._invalidation_log[-1] if self._invalidation_log else None\n\n        return {\n            \"total_operations\": len(self._invalidation_log),\n            \"total_invalidated_keys\": total_invalidated,\n            \"last_invalidation_time\": self._last_invalidation_time,\n            \"last_operation\": last_operation,\n            \"batch_size\": self.batch_size,\n            \"enable_distributed\": self.enable_distributed,\n        }\n\n    def get_invalidation_history(self, limit: int = 10) -&gt; list[dict[str, Any]]:\n        \"\"\"\n        \u83b7\u53d6\u5931\u6548\u5386\u53f2\u8bb0\u5f55\n\n        Args:\n            limit: \u8fd4\u56de\u8bb0\u5f55\u6570\u91cf\n\n        Returns:\n            \u5931\u6548\u5386\u53f2\u5217\u8868\uff08\u6309\u65f6\u95f4\u5012\u5e8f\uff09\n        \"\"\"\n        return self._invalidation_log[-limit:][::-1]\n\n    async def schedule_invalidation(\n        self,\n        keys: list[CacheKey],\n        delay: float,\n    ) -&gt; asyncio.Task[int]:\n        \"\"\"\n        \u5ef6\u8fdf\u5931\u6548\n\n        Args:\n            keys: \u8981\u5931\u6548\u7684\u952e\n            delay: \u5ef6\u8fdf\u65f6\u95f4\uff08\u79d2\uff09\n\n        Returns:\n            \u5f02\u6b65\u4efb\u52a1\u5bf9\u8c61\n        \"\"\"\n\n        async def _delayed_invalidation() -&gt; int:\n            await asyncio.sleep(delay)\n            return await self.invalidate_keys(keys)\n\n        task = asyncio.create_task(_delayed_invalidation())\n        return task\n\n    async def conditional_invalidation(\n        self,\n        condition: Callable[[], bool],\n        keys: list[CacheKey],\n        check_interval: float = 1.0,\n    ) -&gt; asyncio.Task[int]:\n        \"\"\"\n        \u6761\u4ef6\u5931\u6548\n\n        \u5f53\u6761\u4ef6\u6ee1\u8db3\u65f6\u624d\u5931\u6548\u7f13\u5b58\u3002\n\n        Args:\n            condition: \u5931\u6548\u6761\u4ef6\u51fd\u6570\n            keys: \u8981\u5931\u6548\u7684\u952e\n            check_interval: \u6761\u4ef6\u68c0\u67e5\u95f4\u9694\uff08\u79d2\uff09\n\n        Returns:\n            \u5f02\u6b65\u4efb\u52a1\u5bf9\u8c61\n        \"\"\"\n\n        async def _conditional_invalidation() -&gt; int:\n            while True:\n                if condition():\n                    return await self.invalidate_keys(keys)\n                await asyncio.sleep(check_interval)\n\n        task = asyncio.create_task(_conditional_invalidation())\n        return task\n\n    def create_cache_group_invalidator(self, group_prefix: str) -&gt; CacheGroupInvalidator:\n        \"\"\"\n        \u521b\u5efa\u7f13\u5b58\u7ec4\u5931\u6548\u5668\n\n        \u4e13\u95e8\u7528\u4e8e\u7ba1\u7406\u5177\u6709\u76f8\u540c\u524d\u7f00\u7684\u7f13\u5b58\u952e\u3002\n\n        Args:\n            group_prefix: \u7ec4\u524d\u7f00\n\n        Returns:\n            \u7f13\u5b58\u7ec4\u5931\u6548\u5668\n        \"\"\"\n        return CacheGroupInvalidator(self, group_prefix)\n\n    async def close(self) -&gt; None:\n        \"\"\"\n        \u5173\u95ed\u5931\u6548\u5668\n        \"\"\"\n        # \u6e05\u7406\u8d44\u6e90\n        self._invalidation_log.clear()\n</code></pre> <p>\u7f13\u5b58\u7ec4\u5931\u6548\u5668</p> <p>\u4e13\u95e8\u7ba1\u7406\u5177\u6709\u76f8\u540c\u524d\u7f00\u7684\u7f13\u5b58\u952e\u7684\u5931\u6548\u3002</p> <p>\u4f7f\u7528\u793a\u4f8b\uff1a     &gt;&gt;&gt; group_invalidator = invalidator.create_cache_group_invalidator(\"user:\")     &gt;&gt;&gt; await group_invalidator.invalidate_all()     &gt;&gt;&gt; await group_invalidator.invalidate_pattern(\"*:profile\")</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>class CacheGroupInvalidator:\n    \"\"\"\n    \u7f13\u5b58\u7ec4\u5931\u6548\u5668\n\n    \u4e13\u95e8\u7ba1\u7406\u5177\u6709\u76f8\u540c\u524d\u7f00\u7684\u7f13\u5b58\u952e\u7684\u5931\u6548\u3002\n\n    \u4f7f\u7528\u793a\u4f8b\uff1a\n        &gt;&gt;&gt; group_invalidator = invalidator.create_cache_group_invalidator(\"user:\")\n        &gt;&gt;&gt; await group_invalidator.invalidate_all()\n        &gt;&gt;&gt; await group_invalidator.invalidate_pattern(\"*:profile\")\n    \"\"\"\n\n    def __init__(self, parent: CacheInvalidator, group_prefix: str) -&gt; None:\n        \"\"\"\n        \u521d\u59cb\u5316\u7f13\u5b58\u7ec4\u5931\u6548\u5668\n\n        Args:\n            parent: \u7236\u5931\u6548\u5668\n            group_prefix: \u7ec4\u524d\u7f00\n        \"\"\"\n        self.parent = parent\n        self.group_prefix = group_prefix\n\n    async def invalidate_all(self) -&gt; int:\n        \"\"\"\n        \u5931\u6548\u6574\u4e2a\u7ec4\u7684\u6240\u6709\u952e\n\n        Returns:\n            \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n        \"\"\"\n        return await self.parent.invalidate_prefix(self.group_prefix)\n\n    async def invalidate_pattern(self, pattern: str) -&gt; int:\n        \"\"\"\n        \u5931\u6548\u7ec4\u5185\u5339\u914d\u6a21\u5f0f\u7684\u952e\n\n        Args:\n            pattern: \u76f8\u5bf9\u4e8e\u7ec4\u524d\u7f00\u7684\u6a21\u5f0f\n\n        Returns:\n            \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n        \"\"\"\n        full_pattern = f\"{self.group_prefix}{pattern}\"\n        return await self.parent.invalidate_pattern(full_pattern)\n\n    async def invalidate_keys(self, relative_keys: list[str]) -&gt; int:\n        \"\"\"\n        \u5931\u6548\u7ec4\u5185\u7684\u6307\u5b9a\u952e\n\n        Args:\n            relative_keys: \u76f8\u5bf9\u4e8e\u7ec4\u524d\u7f00\u7684\u952e\u540d\u5217\u8868\n\n        Returns:\n            \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n        \"\"\"\n        from typing import cast\n\n        full_keys = cast(\"list[CacheKey]\", [f\"{self.group_prefix}{key}\" for key in relative_keys])\n        return await self.parent.invalidate_keys(full_keys)\n\n    def get_stats(self) -&gt; dict[str, Any]:\n        \"\"\"\n        \u83b7\u53d6\u7ec4\u5931\u6548\u7edf\u8ba1\n\n        Returns:\n            \u7edf\u8ba1\u4fe1\u606f\n        \"\"\"\n        return {\n            \"group_prefix\": self.group_prefix,\n            \"parent_stats\": self.parent.get_invalidation_stats(),\n        }\n</code></pre> <p>\u521b\u5efa\u7f13\u5b58\u5931\u6548\u5668\u5de5\u5382\u51fd\u6570</p> <p>Parameters:</p> Name Type Description Default <code>cache</code> <code>CacheManager</code> <p>\u7f13\u5b58\u7ba1\u7406\u5668</p> required <code>strategy</code> <code>str</code> <p>\u5931\u6548\u7b56\u7565</p> <code>'default'</code> <code>**kwargs</code> <code>Any</code> <p>\u5176\u4ed6\u53c2\u6570</p> <code>{}</code> <p>Returns:</p> Type Description <code>CacheInvalidator</code> <p>\u7f13\u5b58\u5931\u6548\u5668\u5b9e\u4f8b</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>def create_invalidator(\n    cache: CacheManager,\n    strategy: str = \"default\",\n    **kwargs: Any,\n) -&gt; CacheInvalidator:\n    \"\"\"\n    \u521b\u5efa\u7f13\u5b58\u5931\u6548\u5668\u5de5\u5382\u51fd\u6570\n\n    Args:\n        cache: \u7f13\u5b58\u7ba1\u7406\u5668\n        strategy: \u5931\u6548\u7b56\u7565\n        **kwargs: \u5176\u4ed6\u53c2\u6570\n\n    Returns:\n        \u7f13\u5b58\u5931\u6548\u5668\u5b9e\u4f8b\n    \"\"\"\n    return CacheInvalidator(cache, **kwargs)\n</code></pre>"},{"location":"zh/api/invalidation/#symphra_cache.invalidation.CacheInvalidator.__init__","title":"<code>__init__(cache, batch_size=100, enable_distributed=False)</code>","text":"<p>\u521d\u59cb\u5316\u7f13\u5b58\u5931\u6548\u5668</p> <p>Parameters:</p> Name Type Description Default <code>cache</code> <code>CacheManager</code> <p>\u7f13\u5b58\u7ba1\u7406\u5668\u5b9e\u4f8b</p> required <code>batch_size</code> <code>int</code> <p>\u6279\u91cf\u64cd\u4f5c\u5927\u5c0f</p> <code>100</code> <code>enable_distributed</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528\u5206\u5e03\u5f0f\u5931\u6548</p> <code>False</code> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>def __init__(\n    self,\n    cache: CacheManager,\n    batch_size: int = 100,\n    enable_distributed: bool = False,\n) -&gt; None:\n    \"\"\"\n    \u521d\u59cb\u5316\u7f13\u5b58\u5931\u6548\u5668\n\n    Args:\n        cache: \u7f13\u5b58\u7ba1\u7406\u5668\u5b9e\u4f8b\n        batch_size: \u6279\u91cf\u64cd\u4f5c\u5927\u5c0f\n        enable_distributed: \u662f\u5426\u542f\u7528\u5206\u5e03\u5f0f\u5931\u6548\n    \"\"\"\n    self.cache = cache\n    self.batch_size = batch_size\n    self.enable_distributed = enable_distributed\n    self._invalidation_log: list[dict[str, Any]] = []\n    self._last_invalidation_time = time.time()\n</code></pre>"},{"location":"zh/api/invalidation/#symphra_cache.invalidation.CacheInvalidator.close","title":"<code>close()</code>  <code>async</code>","text":"<p>\u5173\u95ed\u5931\u6548\u5668</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>async def close(self) -&gt; None:\n    \"\"\"\n    \u5173\u95ed\u5931\u6548\u5668\n    \"\"\"\n    # \u6e05\u7406\u8d44\u6e90\n    self._invalidation_log.clear()\n</code></pre>"},{"location":"zh/api/invalidation/#symphra_cache.invalidation.CacheInvalidator.conditional_invalidation","title":"<code>conditional_invalidation(condition, keys, check_interval=1.0)</code>  <code>async</code>","text":"<p>\u6761\u4ef6\u5931\u6548</p> <p>\u5f53\u6761\u4ef6\u6ee1\u8db3\u65f6\u624d\u5931\u6548\u7f13\u5b58\u3002</p> <p>Parameters:</p> Name Type Description Default <code>condition</code> <code>Callable[[], bool]</code> <p>\u5931\u6548\u6761\u4ef6\u51fd\u6570</p> required <code>keys</code> <code>list[CacheKey]</code> <p>\u8981\u5931\u6548\u7684\u952e</p> required <code>check_interval</code> <code>float</code> <p>\u6761\u4ef6\u68c0\u67e5\u95f4\u9694\uff08\u79d2\uff09</p> <code>1.0</code> <p>Returns:</p> Type Description <code>Task[int]</code> <p>\u5f02\u6b65\u4efb\u52a1\u5bf9\u8c61</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>async def conditional_invalidation(\n    self,\n    condition: Callable[[], bool],\n    keys: list[CacheKey],\n    check_interval: float = 1.0,\n) -&gt; asyncio.Task[int]:\n    \"\"\"\n    \u6761\u4ef6\u5931\u6548\n\n    \u5f53\u6761\u4ef6\u6ee1\u8db3\u65f6\u624d\u5931\u6548\u7f13\u5b58\u3002\n\n    Args:\n        condition: \u5931\u6548\u6761\u4ef6\u51fd\u6570\n        keys: \u8981\u5931\u6548\u7684\u952e\n        check_interval: \u6761\u4ef6\u68c0\u67e5\u95f4\u9694\uff08\u79d2\uff09\n\n    Returns:\n        \u5f02\u6b65\u4efb\u52a1\u5bf9\u8c61\n    \"\"\"\n\n    async def _conditional_invalidation() -&gt; int:\n        while True:\n            if condition():\n                return await self.invalidate_keys(keys)\n            await asyncio.sleep(check_interval)\n\n    task = asyncio.create_task(_conditional_invalidation())\n    return task\n</code></pre>"},{"location":"zh/api/invalidation/#symphra_cache.invalidation.CacheInvalidator.create_cache_group_invalidator","title":"<code>create_cache_group_invalidator(group_prefix)</code>","text":"<p>\u521b\u5efa\u7f13\u5b58\u7ec4\u5931\u6548\u5668</p> <p>\u4e13\u95e8\u7528\u4e8e\u7ba1\u7406\u5177\u6709\u76f8\u540c\u524d\u7f00\u7684\u7f13\u5b58\u952e\u3002</p> <p>Parameters:</p> Name Type Description Default <code>group_prefix</code> <code>str</code> <p>\u7ec4\u524d\u7f00</p> required <p>Returns:</p> Type Description <code>CacheGroupInvalidator</code> <p>\u7f13\u5b58\u7ec4\u5931\u6548\u5668</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>def create_cache_group_invalidator(self, group_prefix: str) -&gt; CacheGroupInvalidator:\n    \"\"\"\n    \u521b\u5efa\u7f13\u5b58\u7ec4\u5931\u6548\u5668\n\n    \u4e13\u95e8\u7528\u4e8e\u7ba1\u7406\u5177\u6709\u76f8\u540c\u524d\u7f00\u7684\u7f13\u5b58\u952e\u3002\n\n    Args:\n        group_prefix: \u7ec4\u524d\u7f00\n\n    Returns:\n        \u7f13\u5b58\u7ec4\u5931\u6548\u5668\n    \"\"\"\n    return CacheGroupInvalidator(self, group_prefix)\n</code></pre>"},{"location":"zh/api/invalidation/#symphra_cache.invalidation.CacheInvalidator.get_invalidation_history","title":"<code>get_invalidation_history(limit=10)</code>","text":"<p>\u83b7\u53d6\u5931\u6548\u5386\u53f2\u8bb0\u5f55</p> <p>Parameters:</p> Name Type Description Default <code>limit</code> <code>int</code> <p>\u8fd4\u56de\u8bb0\u5f55\u6570\u91cf</p> <code>10</code> <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>\u5931\u6548\u5386\u53f2\u5217\u8868\uff08\u6309\u65f6\u95f4\u5012\u5e8f\uff09</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>def get_invalidation_history(self, limit: int = 10) -&gt; list[dict[str, Any]]:\n    \"\"\"\n    \u83b7\u53d6\u5931\u6548\u5386\u53f2\u8bb0\u5f55\n\n    Args:\n        limit: \u8fd4\u56de\u8bb0\u5f55\u6570\u91cf\n\n    Returns:\n        \u5931\u6548\u5386\u53f2\u5217\u8868\uff08\u6309\u65f6\u95f4\u5012\u5e8f\uff09\n    \"\"\"\n    return self._invalidation_log[-limit:][::-1]\n</code></pre>"},{"location":"zh/api/invalidation/#symphra_cache.invalidation.CacheInvalidator.get_invalidation_stats","title":"<code>get_invalidation_stats()</code>","text":"<p>\u83b7\u53d6\u5931\u6548\u7edf\u8ba1\u4fe1\u606f</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>\u7edf\u8ba1\u4fe1\u606f\u5b57\u5178</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>def get_invalidation_stats(self) -&gt; dict[str, Any]:\n    \"\"\"\n    \u83b7\u53d6\u5931\u6548\u7edf\u8ba1\u4fe1\u606f\n\n    Returns:\n        \u7edf\u8ba1\u4fe1\u606f\u5b57\u5178\n    \"\"\"\n    total_invalidated = sum(entry[\"invalidated_count\"] for entry in self._invalidation_log)\n    last_operation = self._invalidation_log[-1] if self._invalidation_log else None\n\n    return {\n        \"total_operations\": len(self._invalidation_log),\n        \"total_invalidated_keys\": total_invalidated,\n        \"last_invalidation_time\": self._last_invalidation_time,\n        \"last_operation\": last_operation,\n        \"batch_size\": self.batch_size,\n        \"enable_distributed\": self.enable_distributed,\n    }\n</code></pre>"},{"location":"zh/api/invalidation/#symphra_cache.invalidation.CacheInvalidator.invalidate_all","title":"<code>invalidate_all()</code>  <code>async</code>","text":"<p>\u5931\u6548\u6240\u6709\u7f13\u5b58</p> <p>Returns:</p> Type Description <code>int</code> <p>\u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>async def invalidate_all(self) -&gt; int:\n    \"\"\"\n    \u5931\u6548\u6240\u6709\u7f13\u5b58\n\n    Returns:\n        \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n    \"\"\"\n    try:\n        # \u4f7f\u7528\u7f13\u5b58\u7684 keys \u65b9\u6cd5\u83b7\u53d6\u6240\u6709\u952e\n        all_keys: list[CacheKey] = []\n        cursor = 0\n\n        while True:\n            page = await self.cache.akeys(cursor=cursor, count=100)\n            all_keys.extend(page.keys)\n\n            if not page.has_more:\n                break\n            cursor = page.cursor\n\n        # \u6279\u91cf\u5931\u6548\n        invalidated_count = await self.invalidate_keys(all_keys)\n\n        self._log_invalidation(\"all\", {\"total_keys\": len(all_keys)}, invalidated_count)\n        return invalidated_count\n\n    except Exception:\n        # \u5982\u679c\u626b\u63cf\u5931\u8d25\uff0c\u4f7f\u7528 clear \u65b9\u6cd5\n        await self.cache.aclear()\n        self._log_invalidation(\"all\", {\"method\": \"clear\"}, len(all_keys) if all_keys else 0)\n        return len(all_keys) if all_keys else 0\n</code></pre>"},{"location":"zh/api/invalidation/#symphra_cache.invalidation.CacheInvalidator.invalidate_by_condition","title":"<code>invalidate_by_condition(condition, max_keys=None)</code>  <code>async</code>","text":"<p>\u57fa\u4e8e\u6761\u4ef6\u5931\u6548\u952e</p> <p>Parameters:</p> Name Type Description Default <code>condition</code> <code>Callable[[CacheKey, Any], bool]</code> <p>\u5931\u6548\u6761\u4ef6\u51fd\u6570\uff0c\u63a5\u6536 (key, value) \u8fd4\u56de\u662f\u5426\u5931\u6548</p> required <code>max_keys</code> <code>int | None</code> <p>\u6700\u5927\u5931\u6548\u952e\u6570\u91cf</p> <code>None</code> <p>Returns:</p> Type Description <code>int</code> <p>\u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>async def invalidate_by_condition(\n    self,\n    condition: Callable[[CacheKey, Any], bool],\n    max_keys: int | None = None,\n) -&gt; int:\n    \"\"\"\n    \u57fa\u4e8e\u6761\u4ef6\u5931\u6548\u952e\n\n    Args:\n        condition: \u5931\u6548\u6761\u4ef6\u51fd\u6570\uff0c\u63a5\u6536 (key, value) \u8fd4\u56de\u662f\u5426\u5931\u6548\n        max_keys: \u6700\u5927\u5931\u6548\u952e\u6570\u91cf\n\n    Returns:\n        \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n    \"\"\"\n    # \u626b\u63cf\u6240\u6709\u952e\u5e76\u68c0\u67e5\u6761\u4ef6\n    all_keys_to_invalidate: list[CacheKey] = []\n    cursor = 0\n    total_scanned = 0\n\n    while True:\n        page = await self.cache.akeys(cursor=cursor, count=100)\n\n        for key in page.keys:\n            total_scanned += 1\n\n            # \u83b7\u53d6\u952e\u503c\u5e76\u68c0\u67e5\u6761\u4ef6\n            try:\n                value = await self.cache.aget(key)\n                if value is not None and condition(key, value):\n                    all_keys_to_invalidate.append(key)\n\n                    # \u68c0\u67e5\u662f\u5426\u8fbe\u5230\u4e0a\u9650\n                    if max_keys and len(all_keys_to_invalidate) &gt;= max_keys:\n                        break\n\n            except Exception:\n                # \u5ffd\u7565\u83b7\u53d6\u5931\u8d25\u7684\u952e\n                continue\n\n        if not page.has_more or (max_keys and len(all_keys_to_invalidate) &gt;= max_keys):\n            break\n        cursor = page.cursor\n\n    # \u5931\u6548\u7b26\u5408\u6761\u4ef6\u7684\u952e\n    invalidated_count = await self.invalidate_keys(all_keys_to_invalidate)\n\n    self._log_invalidation(\n        \"condition\",\n        {\n            \"condition_func\": condition.__name__\n            if hasattr(condition, \"__name__\")\n            else str(condition),\n            \"total_scanned\": total_scanned,\n            \"matched_keys\": len(all_keys_to_invalidate),\n        },\n        invalidated_count,\n    )\n    return invalidated_count\n</code></pre>"},{"location":"zh/api/invalidation/#symphra_cache.invalidation.CacheInvalidator.invalidate_keys","title":"<code>invalidate_keys(keys, batch_size=None)</code>  <code>async</code>","text":"<p>\u5931\u6548\u6307\u5b9a\u7684\u952e</p> <p>Parameters:</p> Name Type Description Default <code>keys</code> <code>list[CacheKey]</code> <p>\u8981\u5931\u6548\u7684\u952e\u5217\u8868</p> required <code>batch_size</code> <code>int | None</code> <p>\u6279\u91cf\u5927\u5c0f</p> <code>None</code> <p>Returns:</p> Type Description <code>int</code> <p>\u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>async def invalidate_keys(\n    self,\n    keys: list[CacheKey],\n    batch_size: int | None = None,\n) -&gt; int:\n    \"\"\"\n    \u5931\u6548\u6307\u5b9a\u7684\u952e\n\n    Args:\n        keys: \u8981\u5931\u6548\u7684\u952e\u5217\u8868\n        batch_size: \u6279\u91cf\u5927\u5c0f\n\n    Returns:\n        \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n    \"\"\"\n    if not keys:\n        return 0\n\n    batch_size = batch_size if batch_size is not None else self.batch_size\n    total_invalidated = 0\n\n    # \u6279\u91cf\u5931\u6548\uff0c\u907f\u514d\u4e00\u6b21\u6027\u64cd\u4f5c\u8fc7\u591a\u6570\u636e\n    for i in range(0, len(keys), batch_size):\n        batch_keys = keys[i : i + batch_size]\n\n        # \u6279\u91cf\u5220\u9664\n        count = await self.cache.adelete_many(batch_keys)\n        total_invalidated += count\n\n        # \u8bb0\u5f55\u5931\u6548\u65e5\u5fd7\n        self._log_invalidation(\"keys\", batch_keys, count)\n\n        # \u77ed\u6682\u4f11\u7720\u907f\u514d\u963b\u585e\n        if i + batch_size &lt; len(keys):\n            await asyncio.sleep(0.01)\n\n    self._last_invalidation_time = time.time()\n    return total_invalidated\n</code></pre>"},{"location":"zh/api/invalidation/#symphra_cache.invalidation.CacheInvalidator.invalidate_pattern","title":"<code>invalidate_pattern(pattern, max_keys=None)</code>  <code>async</code>","text":"<p>\u57fa\u4e8e\u6a21\u5f0f\u5339\u914d\u5931\u6548\u952e</p> <p>\u652f\u6301\u901a\u914d\u7b26\u6a21\u5f0f\uff08* \u548c ?\uff09\u3002</p> <p>Parameters:</p> Name Type Description Default <code>pattern</code> <code>str</code> <p>\u5339\u914d\u6a21\u5f0f\uff08\u5982 \"user:*\", \"session:??\"\uff09</p> required <code>max_keys</code> <code>int | None</code> <p>\u6700\u5927\u5931\u6548\u952e\u6570\u91cf\uff0cNone \u8868\u793a\u65e0\u9650\u5236</p> <code>None</code> <p>Returns:</p> Type Description <code>int</code> <p>\u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>async def invalidate_pattern(\n    self,\n    pattern: str,\n    max_keys: int | None = None,\n) -&gt; int:\n    \"\"\"\n    \u57fa\u4e8e\u6a21\u5f0f\u5339\u914d\u5931\u6548\u952e\n\n    \u652f\u6301\u901a\u914d\u7b26\u6a21\u5f0f\uff08* \u548c ?\uff09\u3002\n\n    Args:\n        pattern: \u5339\u914d\u6a21\u5f0f\uff08\u5982 \"user:*\", \"session:??\"\uff09\n        max_keys: \u6700\u5927\u5931\u6548\u952e\u6570\u91cf\uff0cNone \u8868\u793a\u65e0\u9650\u5236\n\n    Returns:\n        \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n    \"\"\"\n    # \u626b\u63cf\u5339\u914d\u7684\u952e\n    all_keys: list[CacheKey] = []\n    cursor = 0\n\n    while True:\n        page = await self.cache.akeys(pattern=pattern, cursor=cursor, count=100)\n        all_keys.extend(page.keys)\n\n        if not page.has_more or (max_keys and len(all_keys) &gt;= max_keys):\n            break\n        cursor = page.cursor\n\n    # \u9650\u5236\u6570\u91cf\n    if max_keys:\n        all_keys = all_keys[:max_keys]\n\n    # \u5931\u6548\u5339\u914d\u7684\u952e\n    invalidated_count = await self.invalidate_keys(all_keys)\n\n    self._log_invalidation(\n        \"pattern\", {\"pattern\": pattern, \"matched_keys\": len(all_keys)}, invalidated_count\n    )\n    return invalidated_count\n</code></pre>"},{"location":"zh/api/invalidation/#symphra_cache.invalidation.CacheInvalidator.invalidate_prefix","title":"<code>invalidate_prefix(prefix)</code>  <code>async</code>","text":"<p>\u5931\u6548\u6307\u5b9a\u524d\u7f00\u7684\u6240\u6709\u952e</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>\u952e\u524d\u7f00</p> required <p>Returns:</p> Type Description <code>int</code> <p>\u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>async def invalidate_prefix(self, prefix: str) -&gt; int:\n    \"\"\"\n    \u5931\u6548\u6307\u5b9a\u524d\u7f00\u7684\u6240\u6709\u952e\n\n    Args:\n        prefix: \u952e\u524d\u7f00\n\n    Returns:\n        \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n    \"\"\"\n    return await self.invalidate_pattern(f\"{prefix}*\", max_keys=None)\n</code></pre>"},{"location":"zh/api/invalidation/#symphra_cache.invalidation.CacheInvalidator.invalidate_with_dependencies","title":"<code>invalidate_with_dependencies(keys, dependency_resolver)</code>  <code>async</code>","text":"<p>\u5931\u6548\u952e\u53ca\u5176\u4f9d\u8d56\u9879</p> <p>Parameters:</p> Name Type Description Default <code>keys</code> <code>list[CacheKey]</code> <p>\u4e3b\u952e\u5217\u8868</p> required <code>dependency_resolver</code> <code>Callable[[list[CacheKey]], list[CacheKey]]</code> <p>\u4f9d\u8d56\u89e3\u6790\u51fd\u6570\uff0c\u8fd4\u56de\u76f8\u5173\u7684\u4f9d\u8d56\u952e</p> required <p>Returns:</p> Type Description <code>int</code> <p>\u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>async def invalidate_with_dependencies(\n    self,\n    keys: list[CacheKey],\n    dependency_resolver: Callable[[list[CacheKey]], list[CacheKey]],\n) -&gt; int:\n    \"\"\"\n    \u5931\u6548\u952e\u53ca\u5176\u4f9d\u8d56\u9879\n\n    Args:\n        keys: \u4e3b\u952e\u5217\u8868\n        dependency_resolver: \u4f9d\u8d56\u89e3\u6790\u51fd\u6570\uff0c\u8fd4\u56de\u76f8\u5173\u7684\u4f9d\u8d56\u952e\n\n    Returns:\n        \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n    \"\"\"\n    # \u83b7\u53d6\u4e3b\u952e\n    all_keys_to_invalidate = set(keys)\n\n    # \u89e3\u6790\u4f9d\u8d56\u952e\n    try:\n        dependency_keys = await asyncio.to_thread(dependency_resolver, keys)\n        all_keys_to_invalidate.update(dependency_keys)\n    except Exception as e:\n        print(f\"\u4f9d\u8d56\u89e3\u6790\u5931\u8d25: {e}\")\n\n    # \u5931\u6548\u6240\u6709\u952e\n    invalidated_count = await self.invalidate_keys(list(all_keys_to_invalidate))\n\n    self._log_invalidation(\n        \"dependencies\",\n        {\"primary_keys\": len(keys), \"dependency_keys\": len(all_keys_to_invalidate) - len(keys)},\n        invalidated_count,\n    )\n    return invalidated_count\n</code></pre>"},{"location":"zh/api/invalidation/#symphra_cache.invalidation.CacheInvalidator.schedule_invalidation","title":"<code>schedule_invalidation(keys, delay)</code>  <code>async</code>","text":"<p>\u5ef6\u8fdf\u5931\u6548</p> <p>Parameters:</p> Name Type Description Default <code>keys</code> <code>list[CacheKey]</code> <p>\u8981\u5931\u6548\u7684\u952e</p> required <code>delay</code> <code>float</code> <p>\u5ef6\u8fdf\u65f6\u95f4\uff08\u79d2\uff09</p> required <p>Returns:</p> Type Description <code>Task[int]</code> <p>\u5f02\u6b65\u4efb\u52a1\u5bf9\u8c61</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>async def schedule_invalidation(\n    self,\n    keys: list[CacheKey],\n    delay: float,\n) -&gt; asyncio.Task[int]:\n    \"\"\"\n    \u5ef6\u8fdf\u5931\u6548\n\n    Args:\n        keys: \u8981\u5931\u6548\u7684\u952e\n        delay: \u5ef6\u8fdf\u65f6\u95f4\uff08\u79d2\uff09\n\n    Returns:\n        \u5f02\u6b65\u4efb\u52a1\u5bf9\u8c61\n    \"\"\"\n\n    async def _delayed_invalidation() -&gt; int:\n        await asyncio.sleep(delay)\n        return await self.invalidate_keys(keys)\n\n    task = asyncio.create_task(_delayed_invalidation())\n    return task\n</code></pre>"},{"location":"zh/api/invalidation/#symphra_cache.invalidation.CacheGroupInvalidator.__init__","title":"<code>__init__(parent, group_prefix)</code>","text":"<p>\u521d\u59cb\u5316\u7f13\u5b58\u7ec4\u5931\u6548\u5668</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>CacheInvalidator</code> <p>\u7236\u5931\u6548\u5668</p> required <code>group_prefix</code> <code>str</code> <p>\u7ec4\u524d\u7f00</p> required Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>def __init__(self, parent: CacheInvalidator, group_prefix: str) -&gt; None:\n    \"\"\"\n    \u521d\u59cb\u5316\u7f13\u5b58\u7ec4\u5931\u6548\u5668\n\n    Args:\n        parent: \u7236\u5931\u6548\u5668\n        group_prefix: \u7ec4\u524d\u7f00\n    \"\"\"\n    self.parent = parent\n    self.group_prefix = group_prefix\n</code></pre>"},{"location":"zh/api/invalidation/#symphra_cache.invalidation.CacheGroupInvalidator.get_stats","title":"<code>get_stats()</code>","text":"<p>\u83b7\u53d6\u7ec4\u5931\u6548\u7edf\u8ba1</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>\u7edf\u8ba1\u4fe1\u606f</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>def get_stats(self) -&gt; dict[str, Any]:\n    \"\"\"\n    \u83b7\u53d6\u7ec4\u5931\u6548\u7edf\u8ba1\n\n    Returns:\n        \u7edf\u8ba1\u4fe1\u606f\n    \"\"\"\n    return {\n        \"group_prefix\": self.group_prefix,\n        \"parent_stats\": self.parent.get_invalidation_stats(),\n    }\n</code></pre>"},{"location":"zh/api/invalidation/#symphra_cache.invalidation.CacheGroupInvalidator.invalidate_all","title":"<code>invalidate_all()</code>  <code>async</code>","text":"<p>\u5931\u6548\u6574\u4e2a\u7ec4\u7684\u6240\u6709\u952e</p> <p>Returns:</p> Type Description <code>int</code> <p>\u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>async def invalidate_all(self) -&gt; int:\n    \"\"\"\n    \u5931\u6548\u6574\u4e2a\u7ec4\u7684\u6240\u6709\u952e\n\n    Returns:\n        \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n    \"\"\"\n    return await self.parent.invalidate_prefix(self.group_prefix)\n</code></pre>"},{"location":"zh/api/invalidation/#symphra_cache.invalidation.CacheGroupInvalidator.invalidate_keys","title":"<code>invalidate_keys(relative_keys)</code>  <code>async</code>","text":"<p>\u5931\u6548\u7ec4\u5185\u7684\u6307\u5b9a\u952e</p> <p>Parameters:</p> Name Type Description Default <code>relative_keys</code> <code>list[str]</code> <p>\u76f8\u5bf9\u4e8e\u7ec4\u524d\u7f00\u7684\u952e\u540d\u5217\u8868</p> required <p>Returns:</p> Type Description <code>int</code> <p>\u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>async def invalidate_keys(self, relative_keys: list[str]) -&gt; int:\n    \"\"\"\n    \u5931\u6548\u7ec4\u5185\u7684\u6307\u5b9a\u952e\n\n    Args:\n        relative_keys: \u76f8\u5bf9\u4e8e\u7ec4\u524d\u7f00\u7684\u952e\u540d\u5217\u8868\n\n    Returns:\n        \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n    \"\"\"\n    from typing import cast\n\n    full_keys = cast(\"list[CacheKey]\", [f\"{self.group_prefix}{key}\" for key in relative_keys])\n    return await self.parent.invalidate_keys(full_keys)\n</code></pre>"},{"location":"zh/api/invalidation/#symphra_cache.invalidation.CacheGroupInvalidator.invalidate_pattern","title":"<code>invalidate_pattern(pattern)</code>  <code>async</code>","text":"<p>\u5931\u6548\u7ec4\u5185\u5339\u914d\u6a21\u5f0f\u7684\u952e</p> <p>Parameters:</p> Name Type Description Default <code>pattern</code> <code>str</code> <p>\u76f8\u5bf9\u4e8e\u7ec4\u524d\u7f00\u7684\u6a21\u5f0f</p> required <p>Returns:</p> Type Description <code>int</code> <p>\u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf</p> Source code in <code>src/symphra_cache/invalidation.py</code> <pre><code>async def invalidate_pattern(self, pattern: str) -&gt; int:\n    \"\"\"\n    \u5931\u6548\u7ec4\u5185\u5339\u914d\u6a21\u5f0f\u7684\u952e\n\n    Args:\n        pattern: \u76f8\u5bf9\u4e8e\u7ec4\u524d\u7f00\u7684\u6a21\u5f0f\n\n    Returns:\n        \u5b9e\u9645\u5931\u6548\u7684\u952e\u6570\u91cf\n    \"\"\"\n    full_pattern = f\"{self.group_prefix}{pattern}\"\n    return await self.parent.invalidate_pattern(full_pattern)\n</code></pre>"},{"location":"zh/api/locks/","title":"\u5206\u5e03\u5f0f\u9501","text":"<p>\u63d0\u4f9b\u8de8\u8fdb\u7a0b/\u5b9e\u4f8b\u7684\u4e92\u65a5\u63a7\u5236\uff0c\u4fdd\u8bc1\u7f13\u5b58\u4e00\u81f4\u6027\u4e0e\u5e76\u53d1\u5b89\u5168\u3002</p> <p>\u5206\u5e03\u5f0f\u9501</p> <p>\u57fa\u4e8e\u7f13\u5b58\u540e\u7aef\u7684\u5206\u5e03\u5f0f\u9501\u5b9e\u73b0\uff0c\u652f\u6301\u8d85\u65f6\u548c\u81ea\u52a8\u91ca\u653e\u3002</p> <p>\u4f7f\u7528\u793a\u4f8b\uff1a     &gt;&gt;&gt; lock = DistributedLock(manager, \"resource:123\", timeout=10)     &gt;&gt;&gt; if lock.acquire():     ...     try:     ...         # \u5904\u7406\u8d44\u6e90     ...         pass     ...     finally:     ...         lock.release()</p> Source code in <code>src/symphra_cache/locks.py</code> <pre><code>class DistributedLock:\n    \"\"\"\n    \u5206\u5e03\u5f0f\u9501\n\n    \u57fa\u4e8e\u7f13\u5b58\u540e\u7aef\u7684\u5206\u5e03\u5f0f\u9501\u5b9e\u73b0\uff0c\u652f\u6301\u8d85\u65f6\u548c\u81ea\u52a8\u91ca\u653e\u3002\n\n    \u4f7f\u7528\u793a\u4f8b\uff1a\n        &gt;&gt;&gt; lock = DistributedLock(manager, \"resource:123\", timeout=10)\n        &gt;&gt;&gt; if lock.acquire():\n        ...     try:\n        ...         # \u5904\u7406\u8d44\u6e90\n        ...         pass\n        ...     finally:\n        ...         lock.release()\n    \"\"\"\n\n    def __init__(\n        self,\n        manager: CacheManager,\n        name: str,\n        timeout: int = 10,\n        blocking: bool = True,\n        blocking_timeout: float | None = None,\n    ) -&gt; None:\n        \"\"\"\n        \u521d\u59cb\u5316\u5206\u5e03\u5f0f\u9501\n\n        Args:\n            manager: \u7f13\u5b58\u7ba1\u7406\u5668\n            name: \u9501\u540d\u79f0\n            timeout: \u9501\u8d85\u65f6\u65f6\u95f4\uff08\u79d2\uff09\n            blocking: \u662f\u5426\u963b\u585e\u7b49\u5f85\n            blocking_timeout: \u963b\u585e\u8d85\u65f6\uff08\u79d2\uff09\n        \"\"\"\n        self.manager = manager\n        self.name = f\"lock:{name}\"\n        self.timeout = timeout\n        self.blocking = blocking\n        self.blocking_timeout = blocking_timeout\n        self.identifier = str(uuid.uuid4())  # \u552f\u4e00\u6807\u8bc6\u7b26\n        self._locked = False\n\n    def acquire(self) -&gt; bool:\n        \"\"\"\n        \u83b7\u53d6\u9501\n\n        Returns:\n            \u662f\u5426\u6210\u529f\u83b7\u53d6\u9501\n        \"\"\"\n        start_time = time.time()\n\n        while True:\n            # \u5c1d\u8bd5\u8bbe\u7f6e\u9501\uff08\u4f7f\u7528 TTL \u9632\u6b62\u6b7b\u9501\uff09\n            existing = self.manager.get(self.name)\n\n            if existing is None:\n                # \u9501\u4e0d\u5b58\u5728\uff0c\u5c1d\u8bd5\u83b7\u53d6\n                self.manager.set(self.name, self.identifier, ttl=self.timeout)\n                self._locked = True\n                return True\n\n            if not self.blocking:\n                return False\n\n            # \u68c0\u67e5\u963b\u585e\u8d85\u65f6\n            if (\n                self.blocking_timeout is not None\n                and time.time() - start_time &gt;= self.blocking_timeout\n            ):\n                return False\n\n            # \u77ed\u6682\u4f11\u7720\u540e\u91cd\u8bd5\n            time.sleep(0.01)\n\n    def release(self) -&gt; None:\n        \"\"\"\u91ca\u653e\u9501\"\"\"\n        if not self._locked:\n            return\n\n        # \u9a8c\u8bc1\u662f\u5426\u662f\u81ea\u5df1\u7684\u9501\n        current_value = self.manager.get(self.name)\n        if current_value == self.identifier:\n            self.manager.delete(self.name)\n            self._locked = False\n\n    def __enter__(self) -&gt; DistributedLock:\n        \"\"\"\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff1a\u8fdb\u5165\"\"\"\n        self.acquire()\n        return self\n\n    def __exit__(self, exc_type: object, exc_val: object, exc_tb: object) -&gt; None:\n        \"\"\"\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff1a\u9000\u51fa\"\"\"\n        self.release()\n</code></pre>"},{"location":"zh/api/locks/#symphra_cache.locks.DistributedLock.__enter__","title":"<code>__enter__()</code>","text":"<p>\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff1a\u8fdb\u5165</p> Source code in <code>src/symphra_cache/locks.py</code> <pre><code>def __enter__(self) -&gt; DistributedLock:\n    \"\"\"\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff1a\u8fdb\u5165\"\"\"\n    self.acquire()\n    return self\n</code></pre>"},{"location":"zh/api/locks/#symphra_cache.locks.DistributedLock.__exit__","title":"<code>__exit__(exc_type, exc_val, exc_tb)</code>","text":"<p>\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff1a\u9000\u51fa</p> Source code in <code>src/symphra_cache/locks.py</code> <pre><code>def __exit__(self, exc_type: object, exc_val: object, exc_tb: object) -&gt; None:\n    \"\"\"\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff1a\u9000\u51fa\"\"\"\n    self.release()\n</code></pre>"},{"location":"zh/api/locks/#symphra_cache.locks.DistributedLock.__init__","title":"<code>__init__(manager, name, timeout=10, blocking=True, blocking_timeout=None)</code>","text":"<p>\u521d\u59cb\u5316\u5206\u5e03\u5f0f\u9501</p> <p>Parameters:</p> Name Type Description Default <code>manager</code> <code>CacheManager</code> <p>\u7f13\u5b58\u7ba1\u7406\u5668</p> required <code>name</code> <code>str</code> <p>\u9501\u540d\u79f0</p> required <code>timeout</code> <code>int</code> <p>\u9501\u8d85\u65f6\u65f6\u95f4\uff08\u79d2\uff09</p> <code>10</code> <code>blocking</code> <code>bool</code> <p>\u662f\u5426\u963b\u585e\u7b49\u5f85</p> <code>True</code> <code>blocking_timeout</code> <code>float | None</code> <p>\u963b\u585e\u8d85\u65f6\uff08\u79d2\uff09</p> <code>None</code> Source code in <code>src/symphra_cache/locks.py</code> <pre><code>def __init__(\n    self,\n    manager: CacheManager,\n    name: str,\n    timeout: int = 10,\n    blocking: bool = True,\n    blocking_timeout: float | None = None,\n) -&gt; None:\n    \"\"\"\n    \u521d\u59cb\u5316\u5206\u5e03\u5f0f\u9501\n\n    Args:\n        manager: \u7f13\u5b58\u7ba1\u7406\u5668\n        name: \u9501\u540d\u79f0\n        timeout: \u9501\u8d85\u65f6\u65f6\u95f4\uff08\u79d2\uff09\n        blocking: \u662f\u5426\u963b\u585e\u7b49\u5f85\n        blocking_timeout: \u963b\u585e\u8d85\u65f6\uff08\u79d2\uff09\n    \"\"\"\n    self.manager = manager\n    self.name = f\"lock:{name}\"\n    self.timeout = timeout\n    self.blocking = blocking\n    self.blocking_timeout = blocking_timeout\n    self.identifier = str(uuid.uuid4())  # \u552f\u4e00\u6807\u8bc6\u7b26\n    self._locked = False\n</code></pre>"},{"location":"zh/api/locks/#symphra_cache.locks.DistributedLock.acquire","title":"<code>acquire()</code>","text":"<p>\u83b7\u53d6\u9501</p> <p>Returns:</p> Type Description <code>bool</code> <p>\u662f\u5426\u6210\u529f\u83b7\u53d6\u9501</p> Source code in <code>src/symphra_cache/locks.py</code> <pre><code>def acquire(self) -&gt; bool:\n    \"\"\"\n    \u83b7\u53d6\u9501\n\n    Returns:\n        \u662f\u5426\u6210\u529f\u83b7\u53d6\u9501\n    \"\"\"\n    start_time = time.time()\n\n    while True:\n        # \u5c1d\u8bd5\u8bbe\u7f6e\u9501\uff08\u4f7f\u7528 TTL \u9632\u6b62\u6b7b\u9501\uff09\n        existing = self.manager.get(self.name)\n\n        if existing is None:\n            # \u9501\u4e0d\u5b58\u5728\uff0c\u5c1d\u8bd5\u83b7\u53d6\n            self.manager.set(self.name, self.identifier, ttl=self.timeout)\n            self._locked = True\n            return True\n\n        if not self.blocking:\n            return False\n\n        # \u68c0\u67e5\u963b\u585e\u8d85\u65f6\n        if (\n            self.blocking_timeout is not None\n            and time.time() - start_time &gt;= self.blocking_timeout\n        ):\n            return False\n\n        # \u77ed\u6682\u4f11\u7720\u540e\u91cd\u8bd5\n        time.sleep(0.01)\n</code></pre>"},{"location":"zh/api/locks/#symphra_cache.locks.DistributedLock.release","title":"<code>release()</code>","text":"<p>\u91ca\u653e\u9501</p> Source code in <code>src/symphra_cache/locks.py</code> <pre><code>def release(self) -&gt; None:\n    \"\"\"\u91ca\u653e\u9501\"\"\"\n    if not self._locked:\n        return\n\n    # \u9a8c\u8bc1\u662f\u5426\u662f\u81ea\u5df1\u7684\u9501\n    current_value = self.manager.get(self.name)\n    if current_value == self.identifier:\n        self.manager.delete(self.name)\n        self._locked = False\n</code></pre>"},{"location":"zh/api/manager/","title":"\u7ba1\u7406\u5668","text":"<p>\u7f13\u5b58\u7ba1\u7406\u5668\u8d1f\u8d23\u7edf\u4e00\u8c03\u5ea6\u540e\u7aef\u3001\u76d1\u63a7\u4e0e\u7b56\u7565\u3002</p> <p>\u7f13\u5b58\u7ba1\u7406\u5668</p> <p>\u63d0\u4f9b\u7edf\u4e00\u7684\u7f13\u5b58\u64cd\u4f5c\u63a5\u53e3\uff0c\u5c4f\u853d\u5e95\u5c42\u540e\u7aef\u5dee\u5f02\u3002 \u652f\u6301\u540e\u7aef\u52a8\u6001\u5207\u6362\u548c\u914d\u7f6e\u7ba1\u7406\u3002</p> <p>\u6838\u5fc3\u529f\u80fd\uff1a - \u7edf\u4e00\u7684\u540c\u6b65/\u5f02\u6b65 API - \u540e\u7aef\u52a8\u6001\u5207\u6362 - \u6279\u91cf\u64cd\u4f5c\u652f\u6301 - \u7c7b\u578b\u5b89\u5168\uff08\u5b8c\u6574\u7c7b\u578b\u6ce8\u89e3\uff09</p> <p>\u4f7f\u7528\u793a\u4f8b\uff1a     &gt;&gt;&gt; from symphra_cache import CacheManager     &gt;&gt;&gt; from symphra_cache.backends import MemoryBackend     &gt;&gt;&gt;     &gt;&gt;&gt; # \u521b\u5efa\u7f13\u5b58\u7ba1\u7406\u5668     &gt;&gt;&gt; cache = CacheManager(backend=MemoryBackend())     &gt;&gt;&gt;     &gt;&gt;&gt; # \u57fa\u7840\u64cd\u4f5c     &gt;&gt;&gt; cache.set(\"user:123\", {\"name\": \"Alice\"}, ttl=3600)     &gt;&gt;&gt; user = cache.get(\"user:123\")     &gt;&gt;&gt;     &gt;&gt;&gt; # \u5f02\u6b65\u64cd\u4f5c     &gt;&gt;&gt; await cache.aset(\"product:456\", {\"name\": \"Laptop\"})     &gt;&gt;&gt; product = await cache.aget(\"product:456\")     &gt;&gt;&gt;     &gt;&gt;&gt; # \u6279\u91cf\u64cd\u4f5c     &gt;&gt;&gt; cache.set_many({\"key1\": \"value1\", \"key2\": \"value2\"}, ttl=300)     &gt;&gt;&gt; results = cache.get_many([\"key1\", \"key2\"])</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>class CacheManager:\n    \"\"\"\n    \u7f13\u5b58\u7ba1\u7406\u5668\n\n    \u63d0\u4f9b\u7edf\u4e00\u7684\u7f13\u5b58\u64cd\u4f5c\u63a5\u53e3\uff0c\u5c4f\u853d\u5e95\u5c42\u540e\u7aef\u5dee\u5f02\u3002\n    \u652f\u6301\u540e\u7aef\u52a8\u6001\u5207\u6362\u548c\u914d\u7f6e\u7ba1\u7406\u3002\n\n    \u6838\u5fc3\u529f\u80fd\uff1a\n    - \u7edf\u4e00\u7684\u540c\u6b65/\u5f02\u6b65 API\n    - \u540e\u7aef\u52a8\u6001\u5207\u6362\n    - \u6279\u91cf\u64cd\u4f5c\u652f\u6301\n    - \u7c7b\u578b\u5b89\u5168\uff08\u5b8c\u6574\u7c7b\u578b\u6ce8\u89e3\uff09\n\n    \u4f7f\u7528\u793a\u4f8b\uff1a\n        &gt;&gt;&gt; from symphra_cache import CacheManager\n        &gt;&gt;&gt; from symphra_cache.backends import MemoryBackend\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; # \u521b\u5efa\u7f13\u5b58\u7ba1\u7406\u5668\n        &gt;&gt;&gt; cache = CacheManager(backend=MemoryBackend())\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; # \u57fa\u7840\u64cd\u4f5c\n        &gt;&gt;&gt; cache.set(\"user:123\", {\"name\": \"Alice\"}, ttl=3600)\n        &gt;&gt;&gt; user = cache.get(\"user:123\")\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; # \u5f02\u6b65\u64cd\u4f5c\n        &gt;&gt;&gt; await cache.aset(\"product:456\", {\"name\": \"Laptop\"})\n        &gt;&gt;&gt; product = await cache.aget(\"product:456\")\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; # \u6279\u91cf\u64cd\u4f5c\n        &gt;&gt;&gt; cache.set_many({\"key1\": \"value1\", \"key2\": \"value2\"}, ttl=300)\n        &gt;&gt;&gt; results = cache.get_many([\"key1\", \"key2\"])\n    \"\"\"\n\n    def __init__(self, backend: BaseBackend) -&gt; None:\n        \"\"\"\n        \u521d\u59cb\u5316\u7f13\u5b58\u7ba1\u7406\u5668\n\n        Args:\n            backend: \u7f13\u5b58\u540e\u7aef\u5b9e\u4f8b\uff08Memory/File/Redis\uff09\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; backend = MemoryBackend(max_size=10000)\n            &gt;&gt;&gt; cache = CacheManager(backend=backend)\n        \"\"\"\n        self._backend = backend\n\n    # ========== \u540c\u6b65\u57fa\u7840\u64cd\u4f5c ==========\n\n    def get(self, key: CacheKey) -&gt; CacheValue | None:\n        \"\"\"\n        \u83b7\u53d6\u7f13\u5b58\u503c\uff08\u540c\u6b65\uff09\n\n        Args:\n            key: \u7f13\u5b58\u952e\n\n        Returns:\n            \u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u5219\u8fd4\u56de None\n\n        Raises:\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; user = cache.get(\"user:123\")\n            &gt;&gt;&gt; if user is None:\n            ...     print(\"\u7f13\u5b58\u672a\u547d\u4e2d\")\n        \"\"\"\n        return self._backend.get(key)\n\n    def set(\n        self,\n        key: CacheKey,\n        value: CacheValue,\n        ttl: int | None = None,\n        ex: bool = False,\n        nx: bool = False,\n    ) -&gt; bool:\n        \"\"\"\n        \u8bbe\u7f6e\u7f13\u5b58\u503c(\u540c\u6b65)\n\n        Args:\n            key: \u7f13\u5b58\u952e\n            value: \u7f13\u5b58\u503c\n            ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2),None \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n            ex: \u5982\u679c\u4e3a True,ttl \u8868\u793a\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4;False \u8868\u793a\u7edd\u5bf9\u65f6\u95f4\u6233\n            nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n        Returns:\n            \u662f\u5426\u8bbe\u7f6e\u6210\u529f(nx=True \u65f6\u53ef\u80fd\u5931\u8d25)\n\n        Raises:\n            CacheSerializationError: \u5e8f\u5217\u5316\u5931\u8d25\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; # \u8bbe\u7f6e 1 \u5c0f\u65f6\u8fc7\u671f\n            &gt;&gt;&gt; cache.set(\"session:xyz\", {\"user_id\": 123}, ttl=3600)\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; # \u4ec5\u5f53\u4e0d\u5b58\u5728\u65f6\u8bbe\u7f6e(\u7c7b\u4f3c Redis SETNX)\n            &gt;&gt;&gt; success = cache.set(\"lock:resource\", \"owner_id\", ttl=10, nx=True)\n        \"\"\"\n        return self._backend.set(key, value, ttl=ttl, ex=ex, nx=nx)\n\n    def delete(self, key: CacheKey) -&gt; bool:\n        \"\"\"\n        \u5220\u9664\u7f13\u5b58\uff08\u540c\u6b65\uff09\n\n        Args:\n            key: \u7f13\u5b58\u952e\n\n        Returns:\n            \u5982\u679c\u952e\u5b58\u5728\u5e76\u6210\u529f\u5220\u9664\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\n\n        Raises:\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; if cache.delete(\"user:123\"):\n            ...     print(\"\u7f13\u5b58\u5df2\u5220\u9664\")\n        \"\"\"\n        return self._backend.delete(key)\n\n    def exists(self, key: CacheKey) -&gt; bool:\n        \"\"\"\n        \u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728\uff08\u540c\u6b65\uff09\n\n        Args:\n            key: \u7f13\u5b58\u952e\n\n        Returns:\n            \u5982\u679c\u952e\u5b58\u5728\u4e14\u672a\u8fc7\u671f\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\n\n        Raises:\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; if cache.exists(\"user:123\"):\n            ...     print(\"\u7f13\u5b58\u5b58\u5728\")\n        \"\"\"\n        return self._backend.exists(key)\n\n    def clear(self) -&gt; None:\n        \"\"\"\n        \u6e05\u7a7a\u6240\u6709\u7f13\u5b58\uff08\u540c\u6b65\uff09\n\n        \u8b66\u544a:\n            \u6b64\u64cd\u4f5c\u4e0d\u53ef\u9006\uff0c\u4f1a\u5220\u9664\u6240\u6709\u7f13\u5b58\u6570\u636e\n\n        Raises:\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; cache.clear()  # \u5220\u9664\u6240\u6709\u7f13\u5b58\n        \"\"\"\n        self._backend.clear()\n\n    async def aclear(self) -&gt; None:\n        \"\"\"\n        \u6e05\u7a7a\u6240\u6709\u7f13\u5b58\uff08\u5f02\u6b65\uff09\n\n        \u8b66\u544a:\n            \u6b64\u64cd\u4f5c\u4e0d\u53ef\u9006\uff0c\u4f1a\u5220\u9664\u6240\u6709\u7f13\u5b58\u6570\u636e\n\n        Raises:\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; await cache.aclear()  # \u5f02\u6b65\u5220\u9664\u6240\u6709\u7f13\u5b58\n        \"\"\"\n        await self._backend.aclear()\n\n    # ========== \u5f02\u6b65\u57fa\u7840\u64cd\u4f5c ==========\n\n    async def aget(self, key: CacheKey) -&gt; CacheValue | None:\n        \"\"\"\n        \u83b7\u53d6\u7f13\u5b58\u503c\uff08\u5f02\u6b65\uff09\n\n        Args:\n            key: \u7f13\u5b58\u952e\n\n        Returns:\n            \u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u5219\u8fd4\u56de None\n\n        Raises:\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; user = await cache.aget(\"user:123\")\n        \"\"\"\n        return await self._backend.aget(key)\n\n    async def aset(\n        self,\n        key: CacheKey,\n        value: CacheValue,\n        ttl: int | None = None,\n        ex: bool = False,\n        nx: bool = False,\n    ) -&gt; bool:\n        \"\"\"\n        \u8bbe\u7f6e\u7f13\u5b58\u503c(\u5f02\u6b65)\n\n        Args:\n            key: \u7f13\u5b58\u952e\n            value: \u7f13\u5b58\u503c\n            ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2),None \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n            ex: \u5982\u679c\u4e3a True,ttl \u8868\u793a\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4\n            nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n        Returns:\n            \u662f\u5426\u8bbe\u7f6e\u6210\u529f\n\n        Raises:\n            CacheSerializationError: \u5e8f\u5217\u5316\u5931\u8d25\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; await cache.aset(\"product:456\", {\"name\": \"Laptop\"}, ttl=1800)\n        \"\"\"\n        return await self._backend.aset(key, value, ttl=ttl, ex=ex, nx=nx)\n\n    async def adelete(self, key: CacheKey) -&gt; bool:\n        \"\"\"\n        \u5220\u9664\u7f13\u5b58\uff08\u5f02\u6b65\uff09\n\n        Args:\n            key: \u7f13\u5b58\u952e\n\n        Returns:\n            \u5982\u679c\u952e\u5b58\u5728\u5e76\u6210\u529f\u5220\u9664\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\n\n        Raises:\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; deleted = await cache.adelete(\"user:123\")\n        \"\"\"\n        return await self._backend.adelete(key)\n\n    # ========== \u6279\u91cf\u64cd\u4f5c ==========\n\n    def get_many(self, keys: list[CacheKey]) -&gt; dict[CacheKey, CacheValue]:\n        \"\"\"\n        \u6279\u91cf\u83b7\u53d6\u7f13\u5b58\u503c\uff08\u540c\u6b65\uff09\n\n        Args:\n            keys: \u7f13\u5b58\u952e\u5217\u8868\n\n        Returns:\n            \u952e\u503c\u5bf9\u5b57\u5178\uff0c\u4e0d\u5b58\u5728\u7684\u952e\u4e0d\u5305\u542b\u5728\u7ed3\u679c\u4e2d\n\n        Raises:\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; results = cache.get_many([\"user:1\", \"user:2\", \"user:3\"])\n            &gt;&gt;&gt; for key, value in results.items():\n            ...     print(f\"{key}: {value}\")\n        \"\"\"\n        return self._backend.get_many(keys)\n\n    async def aget_many(self, keys: list[CacheKey]) -&gt; dict[CacheKey, CacheValue]:\n        \"\"\"\n        \u6279\u91cf\u83b7\u53d6\u7f13\u5b58\u503c\uff08\u5f02\u6b65\uff09\n\n        Args:\n            keys: \u7f13\u5b58\u952e\u5217\u8868\n\n        Returns:\n            \u952e\u503c\u5bf9\u5b57\u5178\uff0c\u4e0d\u5b58\u5728\u7684\u952e\u4e0d\u5305\u542b\u5728\u7ed3\u679c\u4e2d\n\n        Raises:\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; results = await cache.aget_many([\"user:1\", \"user:2\"])\n        \"\"\"\n        return await self._backend.aget_many(keys)\n\n    def set_many(\n        self,\n        mapping: dict[CacheKey, CacheValue],\n        ttl: int | None = None,\n    ) -&gt; None:\n        \"\"\"\n        \u6279\u91cf\u8bbe\u7f6e\u7f13\u5b58\u503c\uff08\u540c\u6b65\uff09\n\n        Args:\n            mapping: \u952e\u503c\u5bf9\u5b57\u5178\n            ttl: \u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n\n        Raises:\n            CacheSerializationError: \u5e8f\u5217\u5316\u5931\u8d25\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; cache.set_many(\n            ...     {\n            ...         \"user:1\": {\"name\": \"Alice\"},\n            ...         \"user:2\": {\"name\": \"Bob\"},\n            ...     },\n            ...     ttl=600,\n            ... )\n        \"\"\"\n        self._backend.set_many(mapping, ttl=ttl)\n\n    async def aset_many(\n        self,\n        mapping: dict[CacheKey, CacheValue],\n        ttl: int | None = None,\n    ) -&gt; None:\n        \"\"\"\n        \u6279\u91cf\u8bbe\u7f6e\u7f13\u5b58\u503c\uff08\u5f02\u6b65\uff09\n\n        Args:\n            mapping: \u952e\u503c\u5bf9\u5b57\u5178\n            ttl: \u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n\n        Raises:\n            CacheSerializationError: \u5e8f\u5217\u5316\u5931\u8d25\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; await cache.aset_many(\n            ...     {\n            ...         \"product:1\": {\"name\": \"Phone\"},\n            ...         \"product:2\": {\"name\": \"Tablet\"},\n            ...     }\n            ... )\n        \"\"\"\n        await self._backend.aset_many(mapping, ttl=ttl)\n\n    def delete_many(self, keys: list[CacheKey]) -&gt; int:\n        \"\"\"\n        \u6279\u91cf\u5220\u9664\u7f13\u5b58\uff08\u540c\u6b65\uff09\n\n        Args:\n            keys: \u7f13\u5b58\u952e\u5217\u8868\n\n        Returns:\n            \u6210\u529f\u5220\u9664\u7684\u952e\u6570\u91cf\n\n        Raises:\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; count = cache.delete_many([\"user:1\", \"user:2\", \"user:3\"])\n            &gt;&gt;&gt; print(f\"\u5220\u9664\u4e86 {count} \u4e2a\u952e\")\n        \"\"\"\n        return self._backend.delete_many(keys)\n\n    async def adelete_many(self, keys: list[CacheKey]) -&gt; int:\n        \"\"\"\n        \u6279\u91cf\u5220\u9664\u7f13\u5b58\uff08\u5f02\u6b65\uff09\n\n        Args:\n            keys: \u7f13\u5b58\u952e\u5217\u8868\n\n        Returns:\n            \u6210\u529f\u5220\u9664\u7684\u952e\u6570\u91cf\n\n        Raises:\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; count = await cache.adelete_many([\"user:1\", \"user:2\"])\n        \"\"\"\n        return await self._backend.adelete_many(keys)\n\n    # ========== \u540e\u7aef\u7ba1\u7406 ==========\n\n    @property\n    def backend(self) -&gt; BaseBackend:\n        \"\"\"\n        \u83b7\u53d6\u5f53\u524d\u540e\u7aef\u5b9e\u4f8b\n\n        Returns:\n            \u5f53\u524d\u4f7f\u7528\u7684\u540e\u7aef\u5b9e\u4f8b\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; backend = cache.backend\n            &gt;&gt;&gt; print(type(backend).__name__)  # \"MemoryBackend\"\n        \"\"\"\n        return self._backend\n\n    def switch_backend(self, backend: BaseBackend) -&gt; None:\n        \"\"\"\n        \u5207\u6362\u7f13\u5b58\u540e\u7aef\n\n        \u6ce8\u610f:\n            \u5207\u6362\u540e\u7aef\u4e0d\u4f1a\u8fc1\u79fb\u73b0\u6709\u6570\u636e\uff0c\u65b0\u540e\u7aef\u4ece\u7a7a\u767d\u72b6\u6001\u5f00\u59cb\n\n        Args:\n            backend: \u65b0\u7684\u540e\u7aef\u5b9e\u4f8b\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; # \u4ece\u5185\u5b58\u540e\u7aef\u5207\u6362\u5230 Redis \u540e\u7aef\n            &gt;&gt;&gt; from symphra_cache.backends import RedisBackend\n            &gt;&gt;&gt; cache.switch_backend(RedisBackend())\n        \"\"\"\n        self._backend = backend\n\n    # ========== \u9ad8\u7ea7\u529f\u80fd ==========\n\n    def get_or_set(\n        self,\n        key: CacheKey,\n        default_factory: Callable[[], CacheValue],\n        ttl: int | None = None,\n        ex: bool = False,\n        nx: bool = False,\n    ) -&gt; CacheValue:\n        \"\"\"\n        \u83b7\u53d6\u7f13\u5b58\u503c,\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8c03\u7528 default_factory \u8ba1\u7b97\u5e76\u7f13\u5b58\n\n        \u8fd9\u662f\u9632\u6b62\u7f13\u5b58\u7a7f\u900f\u7684\u63a8\u8350\u6a21\u5f0f\u3002\n\n        Args:\n            key: \u7f13\u5b58\u952e\n            default_factory: \u4e0d\u5b58\u5728\u65f6\u8c03\u7528\u7684\u5de5\u5382\u51fd\u6570\n            ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2),None \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n            ex: \u5982\u679c\u4e3a True,ttl \u8868\u793a\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4\n            nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n        Returns:\n            \u7f13\u5b58\u503c\u6216\u8ba1\u7b97\u7684\u65b0\u503c\n\n        Raises:\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; def expensive_compute():\n            ...     return sum(range(1000000))\n            &gt;&gt;&gt; result = cache.get_or_set(\"sum\", expensive_compute, ttl=300)\n        \"\"\"\n        value = self._backend.get(key)\n        if value is not None:\n            return value\n\n        # \u7f13\u5b58\u672a\u547d\u4e2d,\u8ba1\u7b97\u65b0\u503c\n        value = default_factory()\n        self._backend.set(key, value, ttl=ttl, ex=ex, nx=nx)\n        return value\n\n    async def aget_or_set(\n        self,\n        key: CacheKey,\n        default_factory: Callable[[], CacheValue],\n        ttl: int | None = None,\n        ex: bool = False,\n        nx: bool = False,\n    ) -&gt; CacheValue:\n        \"\"\"\n        \u83b7\u53d6\u7f13\u5b58\u503c,\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8c03\u7528 default_factory \u8ba1\u7b97\u5e76\u7f13\u5b58(\u5f02\u6b65)\n\n        Args:\n            key: \u7f13\u5b58\u952e\n            default_factory: \u4e0d\u5b58\u5728\u65f6\u8c03\u7528\u7684\u5de5\u5382\u51fd\u6570\n            ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2),None \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n            ex: \u5982\u679c\u4e3a True,ttl \u8868\u793a\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4\n            nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n        Returns:\n            \u7f13\u5b58\u503c\u6216\u8ba1\u7b97\u7684\u65b0\u503c\n\n        Raises:\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; async def fetch_data():\n            ...     return await client.get(\"/api/data\")\n            &gt;&gt;&gt; result = await cache.aget_or_set(\"data\", fetch_data)\n        \"\"\"\n        value = await self._backend.aget(key)\n        if value is not None:\n            return value\n\n        # \u7f13\u5b58\u672a\u547d\u4e2d,\u8ba1\u7b97\u65b0\u503c\n        value = default_factory()\n        await self._backend.aset(key, value, ttl=ttl, ex=ex, nx=nx)\n        return value\n\n    def increment(self, key: CacheKey, delta: int = 1) -&gt; int:\n        \"\"\"\n        \u539f\u5b50\u9012\u589e\u8ba1\u6570\u5668(\u540c\u6b65)\n\n        Args:\n            key: \u7f13\u5b58\u952e\n            delta: \u589e\u91cf,\u9ed8\u8ba4\u4e3a 1\n\n        Returns:\n            \u9012\u589e\u540e\u7684\u503c\n\n        Raises:\n            ValueError: \u5f53\u524d\u503c\u4e0d\u662f\u6574\u6570\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; cache.set(\"counter\", 10)\n            &gt;&gt;&gt; new_value = cache.increment(\"counter\", 5)\n            &gt;&gt;&gt; print(new_value)  # 15\n        \"\"\"\n        current = self._backend.get(key)\n        if current is None:\n            current = 0\n\n        if not isinstance(current, int):\n            msg = f\"\u952e {key} \u7684\u503c\u4e0d\u662f\u6574\u6570\u7c7b\u578b: {type(current)}\"\n            raise ValueError(msg)\n\n        new_value = current + delta\n        self._backend.set(key, new_value)\n        return new_value\n\n    async def aincrement(self, key: CacheKey, delta: int = 1) -&gt; int:\n        \"\"\"\n        \u539f\u5b50\u9012\u589e\u8ba1\u6570\u5668(\u5f02\u6b65)\n\n        Args:\n            key: \u7f13\u5b58\u952e\n            delta: \u589e\u91cf,\u9ed8\u8ba4\u4e3a 1\n\n        Returns:\n            \u9012\u589e\u540e\u7684\u503c\n\n        Raises:\n            ValueError: \u5f53\u524d\u503c\u4e0d\u662f\u6574\u6570\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; await cache.aset(\"counter\", 10)\n            &gt;&gt;&gt; new_value = await cache.aincrement(\"counter\", 5)\n        \"\"\"\n        current = await self._backend.aget(key)\n        if current is None:\n            current = 0\n\n        if not isinstance(current, int):\n            msg = f\"\u952e {key} \u7684\u503c\u4e0d\u662f\u6574\u6570\u7c7b\u578b: {type(current)}\"\n            raise ValueError(msg)\n\n        new_value = current + delta\n        await self._backend.aset(key, new_value)\n        return new_value\n\n    def decrement(self, key: CacheKey, delta: int = 1) -&gt; int:\n        \"\"\"\n        \u539f\u5b50\u9012\u51cf\u8ba1\u6570\u5668(\u540c\u6b65)\n\n        Args:\n            key: \u7f13\u5b58\u952e\n            delta: \u51cf\u91cf,\u9ed8\u8ba4\u4e3a 1\n\n        Returns:\n            \u9012\u51cf\u540e\u7684\u503c\n\n        Raises:\n            ValueError: \u5f53\u524d\u503c\u4e0d\u662f\u6574\u6570\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; cache.set(\"counter\", 10)\n            &gt;&gt;&gt; new_value = cache.decrement(\"counter\", 3)\n            &gt;&gt;&gt; print(new_value)  # 7\n        \"\"\"\n        return self.increment(key, -delta)\n\n    async def adecrement(self, key: CacheKey, delta: int = 1) -&gt; int:\n        \"\"\"\n        \u539f\u5b50\u9012\u51cf\u8ba1\u6570\u5668(\u5f02\u6b65)\n\n        Args:\n            key: \u7f13\u5b58\u952e\n            delta: \u51cf\u91cf,\u9ed8\u8ba4\u4e3a 1\n\n        Returns:\n            \u9012\u51cf\u540e\u7684\u503c\n\n        Raises:\n            ValueError: \u5f53\u524d\u503c\u4e0d\u662f\u6574\u6570\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; new_value = await cache.adecrement(\"counter\", 3)\n        \"\"\"\n        return await self.aincrement(key, -delta)\n\n    def ttl(self, key: CacheKey) -&gt; int | None:\n        \"\"\"\n        \u83b7\u53d6\u952e\u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4(\u540c\u6b65)\n\n        Args:\n            key: \u7f13\u5b58\u952e\n\n        Returns:\n            \u5269\u4f59\u79d2\u6570,\u5982\u679c\u952e\u4e0d\u5b58\u5728\u6216\u6c38\u4e0d\u8fc7\u671f\u8fd4\u56de None\n\n        Raises:\n            CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n        \u6ce8\u610f:\n            \u4e0d\u540c\u540e\u7aef\u7684\u5b9e\u73b0\u7cbe\u5ea6\u53ef\u80fd\u4e0d\u540c\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; cache.set(\"temp\", \"value\", ttl=60)\n            &gt;&gt;&gt; remaining = cache.ttl(\"temp\")\n            &gt;&gt;&gt; print(f\"\u5269\u4f59 {remaining} \u79d2\")\n        \"\"\"\n        # \u9ed8\u8ba4\u5b9e\u73b0:\u68c0\u67e5\u662f\u5426\u5b58\u5728,\u4f46\u65e0\u6cd5\u83b7\u53d6\u7cbe\u786e TTL\n        # \u5b50\u7c7b\u53ef\u4ee5\u91cd\u5199\u6b64\u65b9\u6cd5\u63d0\u4f9b\u66f4\u7cbe\u786e\u7684\u5b9e\u73b0\n        if not self._backend.exists(key):\n            return None\n\n        # \u5bf9\u4e8e MemoryBackend,\u53ef\u4ee5\u8bbf\u95ee\u5185\u90e8\u6570\u636e\n        if hasattr(self._backend, \"_cache\"):\n            cache_data = self._backend._cache.get(key)\n            if cache_data is None:\n                return None\n            _, expires_at = cache_data\n            if expires_at is None:\n                return None\n            remaining = int(expires_at - time.time())\n            return remaining if remaining &gt; 0 else None\n\n        # \u5176\u4ed6\u540e\u7aef\u65e0\u6cd5\u7cbe\u786e\u83b7\u53d6,\u8fd4\u56de None\n        return None\n\n    # ========== \u4fbf\u6377\u522b\u540d ==========\n\n    def mget(self, keys: list[CacheKey]) -&gt; dict[CacheKey, CacheValue]:\n        \"\"\"\n        \u6279\u91cf\u83b7\u53d6(get_many \u7684\u522b\u540d)\n\n        Args:\n            keys: \u7f13\u5b58\u952e\u5217\u8868\n\n        Returns:\n            \u952e\u503c\u5bf9\u5b57\u5178\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; results = cache.mget([\"key1\", \"key2\", \"key3\"])\n        \"\"\"\n        return self.get_many(keys)\n\n    async def amget(self, keys: list[CacheKey]) -&gt; dict[CacheKey, CacheValue]:\n        \"\"\"\n        \u6279\u91cf\u83b7\u53d6(aget_many \u7684\u522b\u540d)(\u5f02\u6b65)\n\n        Args:\n            keys: \u7f13\u5b58\u952e\u5217\u8868\n\n        Returns:\n            \u952e\u503c\u5bf9\u5b57\u5178\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; results = await cache.amget([\"key1\", \"key2\"])\n        \"\"\"\n        return await self.aget_many(keys)\n\n    def mset(\n        self,\n        mapping: dict[CacheKey, CacheValue],\n        ttl: int | None = None,\n    ) -&gt; None:\n        \"\"\"\n        \u6279\u91cf\u8bbe\u7f6e(set_many \u7684\u522b\u540d)\n\n        Args:\n            mapping: \u952e\u503c\u5bf9\u5b57\u5178\n            ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2)\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; cache.mset({\"key1\": \"val1\", \"key2\": \"val2\"}, ttl=300)\n        \"\"\"\n        self.set_many(mapping, ttl=ttl)\n\n    async def amset(\n        self,\n        mapping: dict[CacheKey, CacheValue],\n        ttl: int | None = None,\n    ) -&gt; None:\n        \"\"\"\n        \u6279\u91cf\u8bbe\u7f6e(aset_many \u7684\u522b\u540d)(\u5f02\u6b65)\n\n        Args:\n            mapping: \u952e\u503c\u5bf9\u5b57\u5178\n            ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2)\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; await cache.amset({\"key1\": \"val1\", \"key2\": \"val2\"})\n        \"\"\"\n        await self.aset_many(mapping, ttl=ttl)\n\n    # ========== \u7edf\u8ba1\u4e0e\u5065\u5eb7\u68c0\u67e5 ==========\n\n    def __len__(self) -&gt; int:\n        \"\"\"\n        \u83b7\u53d6\u7f13\u5b58\u6761\u76ee\u6570\u91cf\n\n        Returns:\n            \u7f13\u5b58\u4e2d\u7684\u952e\u6570\u91cf\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; print(f\"\u7f13\u5b58\u4e2d\u6709 {len(cache)} \u4e2a\u6761\u76ee\")\n        \"\"\"\n        if hasattr(self._backend, \"_cache\"):\n            return len(self._backend._cache)\n        return 0\n\n    def check_health(self) -&gt; bool:\n        \"\"\"\n        \u68c0\u67e5\u540e\u7aef\u5065\u5eb7\u72b6\u6001\n\n        Returns:\n            True \u8868\u793a\u5065\u5eb7,False \u8868\u793a\u5f02\u5e38\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; if cache.check_health():\n            ...     print(\"\u7f13\u5b58\u670d\u52a1\u6b63\u5e38\")\n        \"\"\"\n        try:\n            # \u5c1d\u8bd5\u8bbe\u7f6e\u548c\u83b7\u53d6\u6d4b\u8bd5\u952e\n            test_key = \"__health_check__\"\n            test_value = \"ok\"\n            self._backend.set(test_key, test_value, ttl=1)\n            result = self._backend.get(test_key)\n            self._backend.delete(test_key)\n            return result == test_value\n        except Exception:\n            return False\n\n    async def acheck_health(self) -&gt; bool:\n        \"\"\"\n        \u68c0\u67e5\u540e\u7aef\u5065\u5eb7\u72b6\u6001(\u5f02\u6b65)\n\n        Returns:\n            True \u8868\u793a\u5065\u5eb7,False \u8868\u793a\u5f02\u5e38\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; is_healthy = await cache.acheck_health()\n        \"\"\"\n        try:\n            test_key = \"__health_check__\"\n            test_value = \"ok\"\n            await self._backend.aset(test_key, test_value, ttl=1)\n            result = await self._backend.aget(test_key)\n            await self._backend.adelete(test_key)\n            return result == test_value\n        except Exception:\n            return False\n\n    def keys(\n        self,\n        pattern: str = \"*\",\n        cursor: int = 0,\n        count: int = 100,\n        max_keys: int | None = None,\n    ) -&gt; KeysPage:\n        \"\"\"\n        \u626b\u63cf\u7f13\u5b58\u952e(\u540c\u6b65)\n\n        \u652f\u6301\u6a21\u5f0f\u5339\u914d\u548c\u5206\u9875\u3002\n\n        Args:\n            pattern: \u5339\u914d\u6a21\u5f0f(\u652f\u6301\u901a\u914d\u7b26 * \u548c ?)\n            cursor: \u6e38\u6807\u4f4d\u7f6e(0 \u8868\u793a\u5f00\u59cb)\n            count: \u6bcf\u9875\u8fd4\u56de\u7684\u952e\u6570\u91cf\n            max_keys: \u6700\u591a\u8fd4\u56de\u7684\u952e\u6570\u91cf\n\n        Returns:\n            KeysPage \u5bf9\u8c61\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; page = cache.keys(pattern=\"user:*\", count=100)\n            &gt;&gt;&gt; print(f\"\u627e\u5230 {len(page.keys)} \u4e2a\u952e\")\n            &gt;&gt;&gt; if page.has_more:\n            ...     next_page = cache.keys(cursor=page.cursor)\n        \"\"\"\n\n        return self._backend.keys(pattern=pattern, cursor=cursor, count=count, max_keys=max_keys)\n\n    async def akeys(\n        self,\n        pattern: str = \"*\",\n        cursor: int = 0,\n        count: int = 100,\n        max_keys: int | None = None,\n    ) -&gt; KeysPage:\n        \"\"\"\n        \u626b\u63cf\u7f13\u5b58\u952e(\u5f02\u6b65)\n\n        Args:\n            pattern: \u5339\u914d\u6a21\u5f0f\n            cursor: \u6e38\u6807\u4f4d\u7f6e\n            count: \u6bcf\u9875\u8fd4\u56de\u7684\u952e\u6570\u91cf\n            max_keys: \u6700\u591a\u8fd4\u56de\u7684\u952e\u6570\u91cf\n\n        Returns:\n            KeysPage \u5bf9\u8c61\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; page = await cache.akeys(pattern=\"session:*\")\n        \"\"\"\n        return await self._backend.akeys(\n            pattern=pattern, cursor=cursor, count=count, max_keys=max_keys\n        )\n\n    def close(self) -&gt; None:\n        \"\"\"\n        \u5173\u95ed\u540e\u7aef\u8fde\u63a5(\u540c\u6b65)\n\n        \u91ca\u653e\u6240\u6709\u8d44\u6e90,\u5173\u95ed\u7f51\u7edc\u8fde\u63a5\u7b49\u3002\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; cache.close()\n        \"\"\"\n        self._backend.close()\n\n    async def aclose(self) -&gt; None:\n        \"\"\"\n        \u5173\u95ed\u540e\u7aef\u8fde\u63a5(\u5f02\u6b65)\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; await cache.aclose()\n        \"\"\"\n        await self._backend.aclose()\n\n    # ========== \u5de5\u5382\u65b9\u6cd5 ==========\n\n    # ========== \u88c5\u9970\u5668\u65b9\u6cd5 ==========\n\n    def cache(\n        self,\n        ttl: int | None = None,\n        key_builder: KeyBuilder | None = None,\n        key_prefix: str = \"\",\n    ) -&gt; Callable[[Callable[..., Any]], Callable[..., Any]]:\n        \"\"\"\n        \u7f13\u5b58\u88c5\u9970\u5668\uff08\u7ed1\u5b9a\u5230\u6b64\u7ba1\u7406\u5668\u5b9e\u4f8b\uff09\n\n        \u63d0\u4f9b\u66f4\u4fbf\u5229\u7684\u88c5\u9970\u5668\u65b9\u5f0f\uff0c\u65e0\u9700\u6bcf\u6b21\u90fd\u4f20\u5165 manager \u53c2\u6570\u3002\n\n        Args:\n            ttl: \u7f13\u5b58\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n            key_builder: \u81ea\u5b9a\u4e49\u952e\u751f\u6210\u51fd\u6570\n            key_prefix: \u952e\u524d\u7f00\uff08\u7528\u4e8e\u547d\u540d\u7a7a\u95f4\u9694\u79bb\uff09\n\n        Returns:\n            \u88c5\u9970\u5668\u51fd\u6570\n\n        \u793a\u4f8b\uff1a\n            &gt;&gt;&gt; cache = CacheManager(backend=MemoryBackend())\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; @cache.cache(ttl=3600, key_prefix=\"user:\")\n            &gt;&gt;&gt; def get_user(user_id: int):\n            ...     return db.query(User).get(user_id)\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; user = get_user(123)  # \u7f13\u5b58 1 \u5c0f\u65f6\n        \"\"\"\n        from .decorators import cache as cache_decorator\n\n        def decorator(func: Callable[..., Any]) -&gt; Callable[..., Any]:\n            return cache_decorator(\n                self,\n                ttl=ttl,\n                key_builder=key_builder,\n                key_prefix=key_prefix,\n            )(func)\n\n        return decorator\n\n    def acache(\n        self,\n        ttl: int | None = None,\n        key_builder: KeyBuilder | None = None,\n        key_prefix: str = \"\",\n    ) -&gt; Callable[[Callable[..., Any]], Callable[..., Any]]:\n        \"\"\"\n        \u5f02\u6b65\u7f13\u5b58\u88c5\u9970\u5668\uff08\u7ed1\u5b9a\u5230\u6b64\u7ba1\u7406\u5668\u5b9e\u4f8b\uff09\n\n        \u63d0\u4f9b\u66f4\u4fbf\u5229\u7684\u88c5\u9970\u5668\u65b9\u5f0f\uff0c\u65e0\u9700\u6bcf\u6b21\u90fd\u4f20\u5165 manager \u53c2\u6570\u3002\n\n        Args:\n            ttl: \u7f13\u5b58\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n            key_builder: \u81ea\u5b9a\u4e49\u952e\u751f\u6210\u51fd\u6570\n            key_prefix: \u952e\u524d\u7f00\n\n        Returns:\n            \u88c5\u9970\u5668\u51fd\u6570\n\n        \u793a\u4f8b\uff1a\n            &gt;&gt;&gt; cache = CacheManager(backend=MemoryBackend())\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; @cache.acache(ttl=600)\n            &gt;&gt;&gt; async def fetch_data(api_url: str):\n            ...     async with httpx.AsyncClient() as client:\n            ...         response = await client.get(api_url)\n            ...         return response.json()\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; data = await fetch_data(\"https://api.example.com/users\")\n        \"\"\"\n        from .decorators import acache as acache_decorator\n\n        def decorator(func: Callable[..., Any]) -&gt; Callable[..., Any]:\n            return acache_decorator(\n                self,\n                ttl=ttl,\n                key_builder=key_builder,\n                key_prefix=key_prefix,\n            )(func)\n\n        return decorator\n\n    def cache_invalidate(\n        self,\n        key_builder: KeyBuilder | None = None,\n        key_prefix: str = \"\",\n    ) -&gt; Callable[[Callable[..., Any]], Callable[..., Any]]:\n        \"\"\"\n        \u7f13\u5b58\u5931\u6548\u88c5\u9970\u5668\uff08\u7ed1\u5b9a\u5230\u6b64\u7ba1\u7406\u5668\u5b9e\u4f8b\uff09\n\n        \u5728\u51fd\u6570\u6267\u884c\u540e\uff0c\u5220\u9664\u5bf9\u5e94\u7684\u7f13\u5b58\u3002\n        \u5e38\u7528\u4e8e\u66f4\u65b0\u64cd\u4f5c\uff08\u5982 update_user \u540e\u6e05\u9664 get_user \u7f13\u5b58\uff09\u3002\n\n        Args:\n            key_builder: \u952e\u751f\u6210\u51fd\u6570\uff08\u9700\u4e0e @cache \u4e00\u81f4\uff09\n            key_prefix: \u952e\u524d\u7f00\n\n        Returns:\n            \u88c5\u9970\u5668\u51fd\u6570\n\n        \u793a\u4f8b\uff1a\n            &gt;&gt;&gt; cache = CacheManager(backend=MemoryBackend())\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; @cache.cache(key_prefix=\"user:\")\n            &gt;&gt;&gt; def get_user(user_id: int):\n            ...     return db.query(User).get(user_id)\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; @cache.cache_invalidate(key_prefix=\"user:\")\n            &gt;&gt;&gt; def update_user(user_id: int, **updates):\n            ...     db.query(User).filter_by(id=user_id).update(updates)\n            ...     db.commit()\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; get_user(123)  # \u7f13\u5b58\u7ed3\u679c\n            &gt;&gt;&gt; update_user(123, name=\"Bob\")  # \u6e05\u9664\u7f13\u5b58\n            &gt;&gt;&gt; get_user(123)  # \u91cd\u65b0\u67e5\u8be2\u6570\u636e\u5e93\n        \"\"\"\n        from .decorators import cache_invalidate as cache_invalidate_decorator\n\n        def decorator(func: Callable[..., Any]) -&gt; Callable[..., Any]:\n            return cache_invalidate_decorator(\n                self,\n                key_builder=key_builder,\n                key_prefix=key_prefix,\n            )(func)\n\n        return decorator\n\n    @classmethod\n    def from_config(cls, config: CacheConfig | dict[str, Any] | str | Path) -&gt; CacheManager:\n        \"\"\"\n        \u4ece\u914d\u7f6e\u521b\u5efa\u7f13\u5b58\u7ba1\u7406\u5668\n\n        \u652f\u6301\u591a\u79cd\u8f93\u5165\u7c7b\u578b:\n        - CacheConfig \u5bf9\u8c61\n        - dict \u914d\u7f6e\u5b57\u5178\n        - str/Path \u914d\u7f6e\u6587\u4ef6\u8def\u5f84\n\n        Args:\n            config: \u914d\u7f6e\u5bf9\u8c61\u3001\u5b57\u5178\u6216\u6587\u4ef6\u8def\u5f84\n\n        Returns:\n            \u914d\u7f6e\u597d\u7684 CacheManager \u5b9e\u4f8b\n\n        Raises:\n            CacheConfigError: \u914d\u7f6e\u9a8c\u8bc1\u5931\u8d25\n            ImportError: \u7f3a\u5c11\u5fc5\u9700\u7684\u4f9d\u8d56\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; # \u4ece\u5b57\u5178\u521b\u5efa\n            &gt;&gt;&gt; cache = CacheManager.from_config({\"backend\": \"memory\"})\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; # \u4ece\u6587\u4ef6\u521b\u5efa\n            &gt;&gt;&gt; cache = CacheManager.from_config(\"config/cache.yaml\")\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; # \u4ece CacheConfig \u5bf9\u8c61\u521b\u5efa\n            &gt;&gt;&gt; config = CacheConfig.from_file(\"cache.toml\")\n            &gt;&gt;&gt; cache = CacheManager.from_config(config)\n        \"\"\"\n        from .config import CacheConfig\n\n        # \u7edf\u4e00\u8f6c\u6362\u4e3a CacheConfig \u5bf9\u8c61\n        if isinstance(config, dict):\n            config_obj = CacheConfig(**config)\n        elif isinstance(config, str | Path):\n            config_obj = CacheConfig.from_file(config)\n        elif isinstance(config, CacheConfig):\n            config_obj = config\n        else:\n            msg = f\"\u4e0d\u652f\u6301\u7684\u914d\u7f6e\u7c7b\u578b: {type(config)}\"\n            raise TypeError(msg)\n\n        # \u521b\u5efa\u540e\u7aef\n        backend = config_obj.create_backend()\n\n        # \u521b\u5efa\u7ba1\u7406\u5668\n        return cls(backend=backend)\n\n    @classmethod\n    def from_env(cls, prefix: str = \"SYMPHRA_CACHE_\") -&gt; CacheManager:\n        \"\"\"\n        \u4ece\u73af\u5883\u53d8\u91cf\u521b\u5efa\u7f13\u5b58\u7ba1\u7406\u5668\n\n        \u73af\u5883\u53d8\u91cf\u547d\u540d\u89c4\u5219:\n        - SYMPHRA_CACHE_BACKEND=memory\n        - SYMPHRA_CACHE_MAX_SIZE=10000\n        - SYMPHRA_CACHE_REDIS_HOST=localhost\n        - SYMPHRA_CACHE_REDIS_PORT=6379\n\n        Args:\n            prefix: \u73af\u5883\u53d8\u91cf\u524d\u7f00,\u9ed8\u8ba4\u4e3a \"SYMPHRA_CACHE_\"\n\n        Returns:\n            \u914d\u7f6e\u597d\u7684 CacheManager \u5b9e\u4f8b\n\n        Raises:\n            CacheConfigError: \u914d\u7f6e\u9a8c\u8bc1\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; # \u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\n            &gt;&gt;&gt; os.environ[\"SYMPHRA_CACHE_BACKEND\"] = \"redis\"\n            &gt;&gt;&gt; os.environ[\"SYMPHRA_CACHE_REDIS_HOST\"] = \"localhost\"\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; # \u4ece\u73af\u5883\u53d8\u91cf\u521b\u5efa\n            &gt;&gt;&gt; cache = CacheManager.from_env()\n        \"\"\"\n        from .config import CacheConfig\n\n        config = CacheConfig.from_env(prefix=prefix)\n        backend = config.create_backend()\n        return cls(backend=backend)\n\n    @classmethod\n    def from_file(cls, file_path: str | Path) -&gt; CacheManager:\n        \"\"\"\n        \u4ece\u914d\u7f6e\u6587\u4ef6\u521b\u5efa\u7f13\u5b58\u7ba1\u7406\u5668\n\n        \u652f\u6301\u7684\u683c\u5f0f:\n        - YAML (.yaml, .yml)\n        - TOML (.toml)\n        - JSON (.json)\n\n        Args:\n            file_path: \u914d\u7f6e\u6587\u4ef6\u8def\u5f84\n\n        Returns:\n            \u914d\u7f6e\u597d\u7684 CacheManager \u5b9e\u4f8b\n\n        Raises:\n            CacheConfigError: \u6587\u4ef6\u8bfb\u53d6\u6216\u89e3\u6790\u5931\u8d25\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; # \u4ece YAML \u6587\u4ef6\u521b\u5efa\n            &gt;&gt;&gt; cache = CacheManager.from_file(\"config/cache.yaml\")\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; # \u4ece TOML \u6587\u4ef6\u521b\u5efa\n            &gt;&gt;&gt; cache = CacheManager.from_file(\"config/cache.toml\")\n        \"\"\"\n        from .config import CacheConfig\n\n        config = CacheConfig.from_file(file_path)\n        backend = config.create_backend()\n        return cls(backend=backend)\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.backend","title":"<code>backend</code>  <code>property</code>","text":"<p>\u83b7\u53d6\u5f53\u524d\u540e\u7aef\u5b9e\u4f8b</p> <p>Returns:</p> Type Description <code>BaseBackend</code> <p>\u5f53\u524d\u4f7f\u7528\u7684\u540e\u7aef\u5b9e\u4f8b</p> \u793a\u4f8b <p>backend = cache.backend print(type(backend).name)  # \"MemoryBackend\"</p>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.__init__","title":"<code>__init__(backend)</code>","text":"<p>\u521d\u59cb\u5316\u7f13\u5b58\u7ba1\u7406\u5668</p> <p>Parameters:</p> Name Type Description Default <code>backend</code> <code>BaseBackend</code> <p>\u7f13\u5b58\u540e\u7aef\u5b9e\u4f8b\uff08Memory/File/Redis\uff09</p> required \u793a\u4f8b <p>backend = MemoryBackend(max_size=10000) cache = CacheManager(backend=backend)</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def __init__(self, backend: BaseBackend) -&gt; None:\n    \"\"\"\n    \u521d\u59cb\u5316\u7f13\u5b58\u7ba1\u7406\u5668\n\n    Args:\n        backend: \u7f13\u5b58\u540e\u7aef\u5b9e\u4f8b\uff08Memory/File/Redis\uff09\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; backend = MemoryBackend(max_size=10000)\n        &gt;&gt;&gt; cache = CacheManager(backend=backend)\n    \"\"\"\n    self._backend = backend\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.__len__","title":"<code>__len__()</code>","text":"<p>\u83b7\u53d6\u7f13\u5b58\u6761\u76ee\u6570\u91cf</p> <p>Returns:</p> Type Description <code>int</code> <p>\u7f13\u5b58\u4e2d\u7684\u952e\u6570\u91cf</p> \u793a\u4f8b <p>print(f\"\u7f13\u5b58\u4e2d\u6709 {len(cache)} \u4e2a\u6761\u76ee\")</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def __len__(self) -&gt; int:\n    \"\"\"\n    \u83b7\u53d6\u7f13\u5b58\u6761\u76ee\u6570\u91cf\n\n    Returns:\n        \u7f13\u5b58\u4e2d\u7684\u952e\u6570\u91cf\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; print(f\"\u7f13\u5b58\u4e2d\u6709 {len(cache)} \u4e2a\u6761\u76ee\")\n    \"\"\"\n    if hasattr(self._backend, \"_cache\"):\n        return len(self._backend._cache)\n    return 0\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.acache","title":"<code>acache(ttl=None, key_builder=None, key_prefix='')</code>","text":"<p>\u5f02\u6b65\u7f13\u5b58\u88c5\u9970\u5668\uff08\u7ed1\u5b9a\u5230\u6b64\u7ba1\u7406\u5668\u5b9e\u4f8b\uff09</p> <p>\u63d0\u4f9b\u66f4\u4fbf\u5229\u7684\u88c5\u9970\u5668\u65b9\u5f0f\uff0c\u65e0\u9700\u6bcf\u6b21\u90fd\u4f20\u5165 manager \u53c2\u6570\u3002</p> <p>Parameters:</p> Name Type Description Default <code>ttl</code> <code>int | None</code> <p>\u7f13\u5b58\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u8868\u793a\u6c38\u4e0d\u8fc7\u671f</p> <code>None</code> <code>key_builder</code> <code>KeyBuilder | None</code> <p>\u81ea\u5b9a\u4e49\u952e\u751f\u6210\u51fd\u6570</p> <code>None</code> <code>key_prefix</code> <code>str</code> <p>\u952e\u524d\u7f00</p> <code>''</code> <p>Returns:</p> Type Description <code>Callable[[Callable[..., Any]], Callable[..., Any]]</code> <p>\u88c5\u9970\u5668\u51fd\u6570</p> <p>\u793a\u4f8b\uff1a     &gt;&gt;&gt; cache = CacheManager(backend=MemoryBackend())     &gt;&gt;&gt;     &gt;&gt;&gt; @cache.acache(ttl=600)     &gt;&gt;&gt; async def fetch_data(api_url: str):     ...     async with httpx.AsyncClient() as client:     ...         response = await client.get(api_url)     ...         return response.json()     &gt;&gt;&gt;     &gt;&gt;&gt; data = await fetch_data(\"https://api.example.com/users\")</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def acache(\n    self,\n    ttl: int | None = None,\n    key_builder: KeyBuilder | None = None,\n    key_prefix: str = \"\",\n) -&gt; Callable[[Callable[..., Any]], Callable[..., Any]]:\n    \"\"\"\n    \u5f02\u6b65\u7f13\u5b58\u88c5\u9970\u5668\uff08\u7ed1\u5b9a\u5230\u6b64\u7ba1\u7406\u5668\u5b9e\u4f8b\uff09\n\n    \u63d0\u4f9b\u66f4\u4fbf\u5229\u7684\u88c5\u9970\u5668\u65b9\u5f0f\uff0c\u65e0\u9700\u6bcf\u6b21\u90fd\u4f20\u5165 manager \u53c2\u6570\u3002\n\n    Args:\n        ttl: \u7f13\u5b58\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n        key_builder: \u81ea\u5b9a\u4e49\u952e\u751f\u6210\u51fd\u6570\n        key_prefix: \u952e\u524d\u7f00\n\n    Returns:\n        \u88c5\u9970\u5668\u51fd\u6570\n\n    \u793a\u4f8b\uff1a\n        &gt;&gt;&gt; cache = CacheManager(backend=MemoryBackend())\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; @cache.acache(ttl=600)\n        &gt;&gt;&gt; async def fetch_data(api_url: str):\n        ...     async with httpx.AsyncClient() as client:\n        ...         response = await client.get(api_url)\n        ...         return response.json()\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; data = await fetch_data(\"https://api.example.com/users\")\n    \"\"\"\n    from .decorators import acache as acache_decorator\n\n    def decorator(func: Callable[..., Any]) -&gt; Callable[..., Any]:\n        return acache_decorator(\n            self,\n            ttl=ttl,\n            key_builder=key_builder,\n            key_prefix=key_prefix,\n        )(func)\n\n    return decorator\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.acheck_health","title":"<code>acheck_health()</code>  <code>async</code>","text":"<p>\u68c0\u67e5\u540e\u7aef\u5065\u5eb7\u72b6\u6001(\u5f02\u6b65)</p> <p>Returns:</p> Type Description <code>bool</code> <p>True \u8868\u793a\u5065\u5eb7,False \u8868\u793a\u5f02\u5e38</p> \u793a\u4f8b <p>is_healthy = await cache.acheck_health()</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>async def acheck_health(self) -&gt; bool:\n    \"\"\"\n    \u68c0\u67e5\u540e\u7aef\u5065\u5eb7\u72b6\u6001(\u5f02\u6b65)\n\n    Returns:\n        True \u8868\u793a\u5065\u5eb7,False \u8868\u793a\u5f02\u5e38\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; is_healthy = await cache.acheck_health()\n    \"\"\"\n    try:\n        test_key = \"__health_check__\"\n        test_value = \"ok\"\n        await self._backend.aset(test_key, test_value, ttl=1)\n        result = await self._backend.aget(test_key)\n        await self._backend.adelete(test_key)\n        return result == test_value\n    except Exception:\n        return False\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.aclear","title":"<code>aclear()</code>  <code>async</code>","text":"<p>\u6e05\u7a7a\u6240\u6709\u7f13\u5b58\uff08\u5f02\u6b65\uff09</p> \u8b66\u544a <p>\u6b64\u64cd\u4f5c\u4e0d\u53ef\u9006\uff0c\u4f1a\u5220\u9664\u6240\u6709\u7f13\u5b58\u6570\u636e</p> <p>Raises:</p> Type Description <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>await cache.aclear()  # \u5f02\u6b65\u5220\u9664\u6240\u6709\u7f13\u5b58</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>async def aclear(self) -&gt; None:\n    \"\"\"\n    \u6e05\u7a7a\u6240\u6709\u7f13\u5b58\uff08\u5f02\u6b65\uff09\n\n    \u8b66\u544a:\n        \u6b64\u64cd\u4f5c\u4e0d\u53ef\u9006\uff0c\u4f1a\u5220\u9664\u6240\u6709\u7f13\u5b58\u6570\u636e\n\n    Raises:\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; await cache.aclear()  # \u5f02\u6b65\u5220\u9664\u6240\u6709\u7f13\u5b58\n    \"\"\"\n    await self._backend.aclear()\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.aclose","title":"<code>aclose()</code>  <code>async</code>","text":"<p>\u5173\u95ed\u540e\u7aef\u8fde\u63a5(\u5f02\u6b65)</p> \u793a\u4f8b <p>await cache.aclose()</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>async def aclose(self) -&gt; None:\n    \"\"\"\n    \u5173\u95ed\u540e\u7aef\u8fde\u63a5(\u5f02\u6b65)\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; await cache.aclose()\n    \"\"\"\n    await self._backend.aclose()\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.adecrement","title":"<code>adecrement(key, delta=1)</code>  <code>async</code>","text":"<p>\u539f\u5b50\u9012\u51cf\u8ba1\u6570\u5668(\u5f02\u6b65)</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <code>delta</code> <code>int</code> <p>\u51cf\u91cf,\u9ed8\u8ba4\u4e3a 1</p> <code>1</code> <p>Returns:</p> Type Description <code>int</code> <p>\u9012\u51cf\u540e\u7684\u503c</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5f53\u524d\u503c\u4e0d\u662f\u6574\u6570</p> <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>new_value = await cache.adecrement(\"counter\", 3)</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>async def adecrement(self, key: CacheKey, delta: int = 1) -&gt; int:\n    \"\"\"\n    \u539f\u5b50\u9012\u51cf\u8ba1\u6570\u5668(\u5f02\u6b65)\n\n    Args:\n        key: \u7f13\u5b58\u952e\n        delta: \u51cf\u91cf,\u9ed8\u8ba4\u4e3a 1\n\n    Returns:\n        \u9012\u51cf\u540e\u7684\u503c\n\n    Raises:\n        ValueError: \u5f53\u524d\u503c\u4e0d\u662f\u6574\u6570\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; new_value = await cache.adecrement(\"counter\", 3)\n    \"\"\"\n    return await self.aincrement(key, -delta)\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.adelete","title":"<code>adelete(key)</code>  <code>async</code>","text":"<p>\u5220\u9664\u7f13\u5b58\uff08\u5f02\u6b65\uff09</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <p>Returns:</p> Type Description <code>bool</code> <p>\u5982\u679c\u952e\u5b58\u5728\u5e76\u6210\u529f\u5220\u9664\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False</p> <p>Raises:</p> Type Description <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>deleted = await cache.adelete(\"user:123\")</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>async def adelete(self, key: CacheKey) -&gt; bool:\n    \"\"\"\n    \u5220\u9664\u7f13\u5b58\uff08\u5f02\u6b65\uff09\n\n    Args:\n        key: \u7f13\u5b58\u952e\n\n    Returns:\n        \u5982\u679c\u952e\u5b58\u5728\u5e76\u6210\u529f\u5220\u9664\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\n\n    Raises:\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; deleted = await cache.adelete(\"user:123\")\n    \"\"\"\n    return await self._backend.adelete(key)\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.adelete_many","title":"<code>adelete_many(keys)</code>  <code>async</code>","text":"<p>\u6279\u91cf\u5220\u9664\u7f13\u5b58\uff08\u5f02\u6b65\uff09</p> <p>Parameters:</p> Name Type Description Default <code>keys</code> <code>list[CacheKey]</code> <p>\u7f13\u5b58\u952e\u5217\u8868</p> required <p>Returns:</p> Type Description <code>int</code> <p>\u6210\u529f\u5220\u9664\u7684\u952e\u6570\u91cf</p> <p>Raises:</p> Type Description <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>count = await cache.adelete_many([\"user:1\", \"user:2\"])</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>async def adelete_many(self, keys: list[CacheKey]) -&gt; int:\n    \"\"\"\n    \u6279\u91cf\u5220\u9664\u7f13\u5b58\uff08\u5f02\u6b65\uff09\n\n    Args:\n        keys: \u7f13\u5b58\u952e\u5217\u8868\n\n    Returns:\n        \u6210\u529f\u5220\u9664\u7684\u952e\u6570\u91cf\n\n    Raises:\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; count = await cache.adelete_many([\"user:1\", \"user:2\"])\n    \"\"\"\n    return await self._backend.adelete_many(keys)\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.aget","title":"<code>aget(key)</code>  <code>async</code>","text":"<p>\u83b7\u53d6\u7f13\u5b58\u503c\uff08\u5f02\u6b65\uff09</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <p>Returns:</p> Type Description <code>CacheValue | None</code> <p>\u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u5219\u8fd4\u56de None</p> <p>Raises:</p> Type Description <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>user = await cache.aget(\"user:123\")</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>async def aget(self, key: CacheKey) -&gt; CacheValue | None:\n    \"\"\"\n    \u83b7\u53d6\u7f13\u5b58\u503c\uff08\u5f02\u6b65\uff09\n\n    Args:\n        key: \u7f13\u5b58\u952e\n\n    Returns:\n        \u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u5219\u8fd4\u56de None\n\n    Raises:\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; user = await cache.aget(\"user:123\")\n    \"\"\"\n    return await self._backend.aget(key)\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.aget_many","title":"<code>aget_many(keys)</code>  <code>async</code>","text":"<p>\u6279\u91cf\u83b7\u53d6\u7f13\u5b58\u503c\uff08\u5f02\u6b65\uff09</p> <p>Parameters:</p> Name Type Description Default <code>keys</code> <code>list[CacheKey]</code> <p>\u7f13\u5b58\u952e\u5217\u8868</p> required <p>Returns:</p> Type Description <code>dict[CacheKey, CacheValue]</code> <p>\u952e\u503c\u5bf9\u5b57\u5178\uff0c\u4e0d\u5b58\u5728\u7684\u952e\u4e0d\u5305\u542b\u5728\u7ed3\u679c\u4e2d</p> <p>Raises:</p> Type Description <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>results = await cache.aget_many([\"user:1\", \"user:2\"])</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>async def aget_many(self, keys: list[CacheKey]) -&gt; dict[CacheKey, CacheValue]:\n    \"\"\"\n    \u6279\u91cf\u83b7\u53d6\u7f13\u5b58\u503c\uff08\u5f02\u6b65\uff09\n\n    Args:\n        keys: \u7f13\u5b58\u952e\u5217\u8868\n\n    Returns:\n        \u952e\u503c\u5bf9\u5b57\u5178\uff0c\u4e0d\u5b58\u5728\u7684\u952e\u4e0d\u5305\u542b\u5728\u7ed3\u679c\u4e2d\n\n    Raises:\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; results = await cache.aget_many([\"user:1\", \"user:2\"])\n    \"\"\"\n    return await self._backend.aget_many(keys)\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.aget_or_set","title":"<code>aget_or_set(key, default_factory, ttl=None, ex=False, nx=False)</code>  <code>async</code>","text":"<p>\u83b7\u53d6\u7f13\u5b58\u503c,\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8c03\u7528 default_factory \u8ba1\u7b97\u5e76\u7f13\u5b58(\u5f02\u6b65)</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <code>default_factory</code> <code>Callable[[], CacheValue]</code> <p>\u4e0d\u5b58\u5728\u65f6\u8c03\u7528\u7684\u5de5\u5382\u51fd\u6570</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4(\u79d2),None \u8868\u793a\u6c38\u4e0d\u8fc7\u671f</p> <code>None</code> <code>ex</code> <code>bool</code> <p>\u5982\u679c\u4e3a True,ttl \u8868\u793a\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4</p> <code>False</code> <code>nx</code> <code>bool</code> <p>\u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e</p> <code>False</code> <p>Returns:</p> Type Description <code>CacheValue</code> <p>\u7f13\u5b58\u503c\u6216\u8ba1\u7b97\u7684\u65b0\u503c</p> <p>Raises:</p> Type Description <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>async def fetch_data(): ...     return await client.get(\"/api/data\") result = await cache.aget_or_set(\"data\", fetch_data)</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>async def aget_or_set(\n    self,\n    key: CacheKey,\n    default_factory: Callable[[], CacheValue],\n    ttl: int | None = None,\n    ex: bool = False,\n    nx: bool = False,\n) -&gt; CacheValue:\n    \"\"\"\n    \u83b7\u53d6\u7f13\u5b58\u503c,\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8c03\u7528 default_factory \u8ba1\u7b97\u5e76\u7f13\u5b58(\u5f02\u6b65)\n\n    Args:\n        key: \u7f13\u5b58\u952e\n        default_factory: \u4e0d\u5b58\u5728\u65f6\u8c03\u7528\u7684\u5de5\u5382\u51fd\u6570\n        ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2),None \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n        ex: \u5982\u679c\u4e3a True,ttl \u8868\u793a\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4\n        nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n    Returns:\n        \u7f13\u5b58\u503c\u6216\u8ba1\u7b97\u7684\u65b0\u503c\n\n    Raises:\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; async def fetch_data():\n        ...     return await client.get(\"/api/data\")\n        &gt;&gt;&gt; result = await cache.aget_or_set(\"data\", fetch_data)\n    \"\"\"\n    value = await self._backend.aget(key)\n    if value is not None:\n        return value\n\n    # \u7f13\u5b58\u672a\u547d\u4e2d,\u8ba1\u7b97\u65b0\u503c\n    value = default_factory()\n    await self._backend.aset(key, value, ttl=ttl, ex=ex, nx=nx)\n    return value\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.aincrement","title":"<code>aincrement(key, delta=1)</code>  <code>async</code>","text":"<p>\u539f\u5b50\u9012\u589e\u8ba1\u6570\u5668(\u5f02\u6b65)</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <code>delta</code> <code>int</code> <p>\u589e\u91cf,\u9ed8\u8ba4\u4e3a 1</p> <code>1</code> <p>Returns:</p> Type Description <code>int</code> <p>\u9012\u589e\u540e\u7684\u503c</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5f53\u524d\u503c\u4e0d\u662f\u6574\u6570</p> <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>await cache.aset(\"counter\", 10) new_value = await cache.aincrement(\"counter\", 5)</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>async def aincrement(self, key: CacheKey, delta: int = 1) -&gt; int:\n    \"\"\"\n    \u539f\u5b50\u9012\u589e\u8ba1\u6570\u5668(\u5f02\u6b65)\n\n    Args:\n        key: \u7f13\u5b58\u952e\n        delta: \u589e\u91cf,\u9ed8\u8ba4\u4e3a 1\n\n    Returns:\n        \u9012\u589e\u540e\u7684\u503c\n\n    Raises:\n        ValueError: \u5f53\u524d\u503c\u4e0d\u662f\u6574\u6570\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; await cache.aset(\"counter\", 10)\n        &gt;&gt;&gt; new_value = await cache.aincrement(\"counter\", 5)\n    \"\"\"\n    current = await self._backend.aget(key)\n    if current is None:\n        current = 0\n\n    if not isinstance(current, int):\n        msg = f\"\u952e {key} \u7684\u503c\u4e0d\u662f\u6574\u6570\u7c7b\u578b: {type(current)}\"\n        raise ValueError(msg)\n\n    new_value = current + delta\n    await self._backend.aset(key, new_value)\n    return new_value\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.akeys","title":"<code>akeys(pattern='*', cursor=0, count=100, max_keys=None)</code>  <code>async</code>","text":"<p>\u626b\u63cf\u7f13\u5b58\u952e(\u5f02\u6b65)</p> <p>Parameters:</p> Name Type Description Default <code>pattern</code> <code>str</code> <p>\u5339\u914d\u6a21\u5f0f</p> <code>'*'</code> <code>cursor</code> <code>int</code> <p>\u6e38\u6807\u4f4d\u7f6e</p> <code>0</code> <code>count</code> <code>int</code> <p>\u6bcf\u9875\u8fd4\u56de\u7684\u952e\u6570\u91cf</p> <code>100</code> <code>max_keys</code> <code>int | None</code> <p>\u6700\u591a\u8fd4\u56de\u7684\u952e\u6570\u91cf</p> <code>None</code> <p>Returns:</p> Type Description <code>KeysPage</code> <p>KeysPage \u5bf9\u8c61</p> \u793a\u4f8b <p>page = await cache.akeys(pattern=\"session:*\")</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>async def akeys(\n    self,\n    pattern: str = \"*\",\n    cursor: int = 0,\n    count: int = 100,\n    max_keys: int | None = None,\n) -&gt; KeysPage:\n    \"\"\"\n    \u626b\u63cf\u7f13\u5b58\u952e(\u5f02\u6b65)\n\n    Args:\n        pattern: \u5339\u914d\u6a21\u5f0f\n        cursor: \u6e38\u6807\u4f4d\u7f6e\n        count: \u6bcf\u9875\u8fd4\u56de\u7684\u952e\u6570\u91cf\n        max_keys: \u6700\u591a\u8fd4\u56de\u7684\u952e\u6570\u91cf\n\n    Returns:\n        KeysPage \u5bf9\u8c61\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; page = await cache.akeys(pattern=\"session:*\")\n    \"\"\"\n    return await self._backend.akeys(\n        pattern=pattern, cursor=cursor, count=count, max_keys=max_keys\n    )\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.amget","title":"<code>amget(keys)</code>  <code>async</code>","text":"<p>\u6279\u91cf\u83b7\u53d6(aget_many \u7684\u522b\u540d)(\u5f02\u6b65)</p> <p>Parameters:</p> Name Type Description Default <code>keys</code> <code>list[CacheKey]</code> <p>\u7f13\u5b58\u952e\u5217\u8868</p> required <p>Returns:</p> Type Description <code>dict[CacheKey, CacheValue]</code> <p>\u952e\u503c\u5bf9\u5b57\u5178</p> \u793a\u4f8b <p>results = await cache.amget([\"key1\", \"key2\"])</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>async def amget(self, keys: list[CacheKey]) -&gt; dict[CacheKey, CacheValue]:\n    \"\"\"\n    \u6279\u91cf\u83b7\u53d6(aget_many \u7684\u522b\u540d)(\u5f02\u6b65)\n\n    Args:\n        keys: \u7f13\u5b58\u952e\u5217\u8868\n\n    Returns:\n        \u952e\u503c\u5bf9\u5b57\u5178\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; results = await cache.amget([\"key1\", \"key2\"])\n    \"\"\"\n    return await self.aget_many(keys)\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.amset","title":"<code>amset(mapping, ttl=None)</code>  <code>async</code>","text":"<p>\u6279\u91cf\u8bbe\u7f6e(aset_many \u7684\u522b\u540d)(\u5f02\u6b65)</p> <p>Parameters:</p> Name Type Description Default <code>mapping</code> <code>dict[CacheKey, CacheValue]</code> <p>\u952e\u503c\u5bf9\u5b57\u5178</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4(\u79d2)</p> <code>None</code> \u793a\u4f8b <p>await cache.amset({\"key1\": \"val1\", \"key2\": \"val2\"})</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>async def amset(\n    self,\n    mapping: dict[CacheKey, CacheValue],\n    ttl: int | None = None,\n) -&gt; None:\n    \"\"\"\n    \u6279\u91cf\u8bbe\u7f6e(aset_many \u7684\u522b\u540d)(\u5f02\u6b65)\n\n    Args:\n        mapping: \u952e\u503c\u5bf9\u5b57\u5178\n        ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2)\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; await cache.amset({\"key1\": \"val1\", \"key2\": \"val2\"})\n    \"\"\"\n    await self.aset_many(mapping, ttl=ttl)\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.aset","title":"<code>aset(key, value, ttl=None, ex=False, nx=False)</code>  <code>async</code>","text":"<p>\u8bbe\u7f6e\u7f13\u5b58\u503c(\u5f02\u6b65)</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <code>value</code> <code>CacheValue</code> <p>\u7f13\u5b58\u503c</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4(\u79d2),None \u8868\u793a\u6c38\u4e0d\u8fc7\u671f</p> <code>None</code> <code>ex</code> <code>bool</code> <p>\u5982\u679c\u4e3a True,ttl \u8868\u793a\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4</p> <code>False</code> <code>nx</code> <code>bool</code> <p>\u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>\u662f\u5426\u8bbe\u7f6e\u6210\u529f</p> <p>Raises:</p> Type Description <code>CacheSerializationError</code> <p>\u5e8f\u5217\u5316\u5931\u8d25</p> <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>await cache.aset(\"product:456\", {\"name\": \"Laptop\"}, ttl=1800)</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>async def aset(\n    self,\n    key: CacheKey,\n    value: CacheValue,\n    ttl: int | None = None,\n    ex: bool = False,\n    nx: bool = False,\n) -&gt; bool:\n    \"\"\"\n    \u8bbe\u7f6e\u7f13\u5b58\u503c(\u5f02\u6b65)\n\n    Args:\n        key: \u7f13\u5b58\u952e\n        value: \u7f13\u5b58\u503c\n        ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2),None \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n        ex: \u5982\u679c\u4e3a True,ttl \u8868\u793a\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4\n        nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n    Returns:\n        \u662f\u5426\u8bbe\u7f6e\u6210\u529f\n\n    Raises:\n        CacheSerializationError: \u5e8f\u5217\u5316\u5931\u8d25\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; await cache.aset(\"product:456\", {\"name\": \"Laptop\"}, ttl=1800)\n    \"\"\"\n    return await self._backend.aset(key, value, ttl=ttl, ex=ex, nx=nx)\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.aset_many","title":"<code>aset_many(mapping, ttl=None)</code>  <code>async</code>","text":"<p>\u6279\u91cf\u8bbe\u7f6e\u7f13\u5b58\u503c\uff08\u5f02\u6b65\uff09</p> <p>Parameters:</p> Name Type Description Default <code>mapping</code> <code>dict[CacheKey, CacheValue]</code> <p>\u952e\u503c\u5bf9\u5b57\u5178</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u8868\u793a\u6c38\u4e0d\u8fc7\u671f</p> <code>None</code> <p>Raises:</p> Type Description <code>CacheSerializationError</code> <p>\u5e8f\u5217\u5316\u5931\u8d25</p> <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>await cache.aset_many( ...     { ...         \"product:1\": {\"name\": \"Phone\"}, ...         \"product:2\": {\"name\": \"Tablet\"}, ...     } ... )</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>async def aset_many(\n    self,\n    mapping: dict[CacheKey, CacheValue],\n    ttl: int | None = None,\n) -&gt; None:\n    \"\"\"\n    \u6279\u91cf\u8bbe\u7f6e\u7f13\u5b58\u503c\uff08\u5f02\u6b65\uff09\n\n    Args:\n        mapping: \u952e\u503c\u5bf9\u5b57\u5178\n        ttl: \u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n\n    Raises:\n        CacheSerializationError: \u5e8f\u5217\u5316\u5931\u8d25\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; await cache.aset_many(\n        ...     {\n        ...         \"product:1\": {\"name\": \"Phone\"},\n        ...         \"product:2\": {\"name\": \"Tablet\"},\n        ...     }\n        ... )\n    \"\"\"\n    await self._backend.aset_many(mapping, ttl=ttl)\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.cache","title":"<code>cache(ttl=None, key_builder=None, key_prefix='')</code>","text":"<p>\u7f13\u5b58\u88c5\u9970\u5668\uff08\u7ed1\u5b9a\u5230\u6b64\u7ba1\u7406\u5668\u5b9e\u4f8b\uff09</p> <p>\u63d0\u4f9b\u66f4\u4fbf\u5229\u7684\u88c5\u9970\u5668\u65b9\u5f0f\uff0c\u65e0\u9700\u6bcf\u6b21\u90fd\u4f20\u5165 manager \u53c2\u6570\u3002</p> <p>Parameters:</p> Name Type Description Default <code>ttl</code> <code>int | None</code> <p>\u7f13\u5b58\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u8868\u793a\u6c38\u4e0d\u8fc7\u671f</p> <code>None</code> <code>key_builder</code> <code>KeyBuilder | None</code> <p>\u81ea\u5b9a\u4e49\u952e\u751f\u6210\u51fd\u6570</p> <code>None</code> <code>key_prefix</code> <code>str</code> <p>\u952e\u524d\u7f00\uff08\u7528\u4e8e\u547d\u540d\u7a7a\u95f4\u9694\u79bb\uff09</p> <code>''</code> <p>Returns:</p> Type Description <code>Callable[[Callable[..., Any]], Callable[..., Any]]</code> <p>\u88c5\u9970\u5668\u51fd\u6570</p> <p>\u793a\u4f8b\uff1a     &gt;&gt;&gt; cache = CacheManager(backend=MemoryBackend())     &gt;&gt;&gt;     &gt;&gt;&gt; @cache.cache(ttl=3600, key_prefix=\"user:\")     &gt;&gt;&gt; def get_user(user_id: int):     ...     return db.query(User).get(user_id)     &gt;&gt;&gt;     &gt;&gt;&gt; user = get_user(123)  # \u7f13\u5b58 1 \u5c0f\u65f6</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def cache(\n    self,\n    ttl: int | None = None,\n    key_builder: KeyBuilder | None = None,\n    key_prefix: str = \"\",\n) -&gt; Callable[[Callable[..., Any]], Callable[..., Any]]:\n    \"\"\"\n    \u7f13\u5b58\u88c5\u9970\u5668\uff08\u7ed1\u5b9a\u5230\u6b64\u7ba1\u7406\u5668\u5b9e\u4f8b\uff09\n\n    \u63d0\u4f9b\u66f4\u4fbf\u5229\u7684\u88c5\u9970\u5668\u65b9\u5f0f\uff0c\u65e0\u9700\u6bcf\u6b21\u90fd\u4f20\u5165 manager \u53c2\u6570\u3002\n\n    Args:\n        ttl: \u7f13\u5b58\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n        key_builder: \u81ea\u5b9a\u4e49\u952e\u751f\u6210\u51fd\u6570\n        key_prefix: \u952e\u524d\u7f00\uff08\u7528\u4e8e\u547d\u540d\u7a7a\u95f4\u9694\u79bb\uff09\n\n    Returns:\n        \u88c5\u9970\u5668\u51fd\u6570\n\n    \u793a\u4f8b\uff1a\n        &gt;&gt;&gt; cache = CacheManager(backend=MemoryBackend())\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; @cache.cache(ttl=3600, key_prefix=\"user:\")\n        &gt;&gt;&gt; def get_user(user_id: int):\n        ...     return db.query(User).get(user_id)\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; user = get_user(123)  # \u7f13\u5b58 1 \u5c0f\u65f6\n    \"\"\"\n    from .decorators import cache as cache_decorator\n\n    def decorator(func: Callable[..., Any]) -&gt; Callable[..., Any]:\n        return cache_decorator(\n            self,\n            ttl=ttl,\n            key_builder=key_builder,\n            key_prefix=key_prefix,\n        )(func)\n\n    return decorator\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.cache_invalidate","title":"<code>cache_invalidate(key_builder=None, key_prefix='')</code>","text":"<p>\u7f13\u5b58\u5931\u6548\u88c5\u9970\u5668\uff08\u7ed1\u5b9a\u5230\u6b64\u7ba1\u7406\u5668\u5b9e\u4f8b\uff09</p> <p>\u5728\u51fd\u6570\u6267\u884c\u540e\uff0c\u5220\u9664\u5bf9\u5e94\u7684\u7f13\u5b58\u3002 \u5e38\u7528\u4e8e\u66f4\u65b0\u64cd\u4f5c\uff08\u5982 update_user \u540e\u6e05\u9664 get_user \u7f13\u5b58\uff09\u3002</p> <p>Parameters:</p> Name Type Description Default <code>key_builder</code> <code>KeyBuilder | None</code> <p>\u952e\u751f\u6210\u51fd\u6570\uff08\u9700\u4e0e @cache \u4e00\u81f4\uff09</p> <code>None</code> <code>key_prefix</code> <code>str</code> <p>\u952e\u524d\u7f00</p> <code>''</code> <p>Returns:</p> Type Description <code>Callable[[Callable[..., Any]], Callable[..., Any]]</code> <p>\u88c5\u9970\u5668\u51fd\u6570</p> <p>\u793a\u4f8b\uff1a     &gt;&gt;&gt; cache = CacheManager(backend=MemoryBackend())     &gt;&gt;&gt;     &gt;&gt;&gt; @cache.cache(key_prefix=\"user:\")     &gt;&gt;&gt; def get_user(user_id: int):     ...     return db.query(User).get(user_id)     &gt;&gt;&gt;     &gt;&gt;&gt; @cache.cache_invalidate(key_prefix=\"user:\")     &gt;&gt;&gt; def update_user(user_id: int, **updates):     ...     db.query(User).filter_by(id=user_id).update(updates)     ...     db.commit()     &gt;&gt;&gt;     &gt;&gt;&gt; get_user(123)  # \u7f13\u5b58\u7ed3\u679c     &gt;&gt;&gt; update_user(123, name=\"Bob\")  # \u6e05\u9664\u7f13\u5b58     &gt;&gt;&gt; get_user(123)  # \u91cd\u65b0\u67e5\u8be2\u6570\u636e\u5e93</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def cache_invalidate(\n    self,\n    key_builder: KeyBuilder | None = None,\n    key_prefix: str = \"\",\n) -&gt; Callable[[Callable[..., Any]], Callable[..., Any]]:\n    \"\"\"\n    \u7f13\u5b58\u5931\u6548\u88c5\u9970\u5668\uff08\u7ed1\u5b9a\u5230\u6b64\u7ba1\u7406\u5668\u5b9e\u4f8b\uff09\n\n    \u5728\u51fd\u6570\u6267\u884c\u540e\uff0c\u5220\u9664\u5bf9\u5e94\u7684\u7f13\u5b58\u3002\n    \u5e38\u7528\u4e8e\u66f4\u65b0\u64cd\u4f5c\uff08\u5982 update_user \u540e\u6e05\u9664 get_user \u7f13\u5b58\uff09\u3002\n\n    Args:\n        key_builder: \u952e\u751f\u6210\u51fd\u6570\uff08\u9700\u4e0e @cache \u4e00\u81f4\uff09\n        key_prefix: \u952e\u524d\u7f00\n\n    Returns:\n        \u88c5\u9970\u5668\u51fd\u6570\n\n    \u793a\u4f8b\uff1a\n        &gt;&gt;&gt; cache = CacheManager(backend=MemoryBackend())\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; @cache.cache(key_prefix=\"user:\")\n        &gt;&gt;&gt; def get_user(user_id: int):\n        ...     return db.query(User).get(user_id)\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; @cache.cache_invalidate(key_prefix=\"user:\")\n        &gt;&gt;&gt; def update_user(user_id: int, **updates):\n        ...     db.query(User).filter_by(id=user_id).update(updates)\n        ...     db.commit()\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; get_user(123)  # \u7f13\u5b58\u7ed3\u679c\n        &gt;&gt;&gt; update_user(123, name=\"Bob\")  # \u6e05\u9664\u7f13\u5b58\n        &gt;&gt;&gt; get_user(123)  # \u91cd\u65b0\u67e5\u8be2\u6570\u636e\u5e93\n    \"\"\"\n    from .decorators import cache_invalidate as cache_invalidate_decorator\n\n    def decorator(func: Callable[..., Any]) -&gt; Callable[..., Any]:\n        return cache_invalidate_decorator(\n            self,\n            key_builder=key_builder,\n            key_prefix=key_prefix,\n        )(func)\n\n    return decorator\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.check_health","title":"<code>check_health()</code>","text":"<p>\u68c0\u67e5\u540e\u7aef\u5065\u5eb7\u72b6\u6001</p> <p>Returns:</p> Type Description <code>bool</code> <p>True \u8868\u793a\u5065\u5eb7,False \u8868\u793a\u5f02\u5e38</p> \u793a\u4f8b <p>if cache.check_health(): ...     print(\"\u7f13\u5b58\u670d\u52a1\u6b63\u5e38\")</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def check_health(self) -&gt; bool:\n    \"\"\"\n    \u68c0\u67e5\u540e\u7aef\u5065\u5eb7\u72b6\u6001\n\n    Returns:\n        True \u8868\u793a\u5065\u5eb7,False \u8868\u793a\u5f02\u5e38\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; if cache.check_health():\n        ...     print(\"\u7f13\u5b58\u670d\u52a1\u6b63\u5e38\")\n    \"\"\"\n    try:\n        # \u5c1d\u8bd5\u8bbe\u7f6e\u548c\u83b7\u53d6\u6d4b\u8bd5\u952e\n        test_key = \"__health_check__\"\n        test_value = \"ok\"\n        self._backend.set(test_key, test_value, ttl=1)\n        result = self._backend.get(test_key)\n        self._backend.delete(test_key)\n        return result == test_value\n    except Exception:\n        return False\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.clear","title":"<code>clear()</code>","text":"<p>\u6e05\u7a7a\u6240\u6709\u7f13\u5b58\uff08\u540c\u6b65\uff09</p> \u8b66\u544a <p>\u6b64\u64cd\u4f5c\u4e0d\u53ef\u9006\uff0c\u4f1a\u5220\u9664\u6240\u6709\u7f13\u5b58\u6570\u636e</p> <p>Raises:</p> Type Description <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>cache.clear()  # \u5220\u9664\u6240\u6709\u7f13\u5b58</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def clear(self) -&gt; None:\n    \"\"\"\n    \u6e05\u7a7a\u6240\u6709\u7f13\u5b58\uff08\u540c\u6b65\uff09\n\n    \u8b66\u544a:\n        \u6b64\u64cd\u4f5c\u4e0d\u53ef\u9006\uff0c\u4f1a\u5220\u9664\u6240\u6709\u7f13\u5b58\u6570\u636e\n\n    Raises:\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; cache.clear()  # \u5220\u9664\u6240\u6709\u7f13\u5b58\n    \"\"\"\n    self._backend.clear()\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.close","title":"<code>close()</code>","text":"<p>\u5173\u95ed\u540e\u7aef\u8fde\u63a5(\u540c\u6b65)</p> <p>\u91ca\u653e\u6240\u6709\u8d44\u6e90,\u5173\u95ed\u7f51\u7edc\u8fde\u63a5\u7b49\u3002</p> \u793a\u4f8b <p>cache.close()</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def close(self) -&gt; None:\n    \"\"\"\n    \u5173\u95ed\u540e\u7aef\u8fde\u63a5(\u540c\u6b65)\n\n    \u91ca\u653e\u6240\u6709\u8d44\u6e90,\u5173\u95ed\u7f51\u7edc\u8fde\u63a5\u7b49\u3002\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; cache.close()\n    \"\"\"\n    self._backend.close()\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.decrement","title":"<code>decrement(key, delta=1)</code>","text":"<p>\u539f\u5b50\u9012\u51cf\u8ba1\u6570\u5668(\u540c\u6b65)</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <code>delta</code> <code>int</code> <p>\u51cf\u91cf,\u9ed8\u8ba4\u4e3a 1</p> <code>1</code> <p>Returns:</p> Type Description <code>int</code> <p>\u9012\u51cf\u540e\u7684\u503c</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5f53\u524d\u503c\u4e0d\u662f\u6574\u6570</p> <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>cache.set(\"counter\", 10) new_value = cache.decrement(\"counter\", 3) print(new_value)  # 7</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def decrement(self, key: CacheKey, delta: int = 1) -&gt; int:\n    \"\"\"\n    \u539f\u5b50\u9012\u51cf\u8ba1\u6570\u5668(\u540c\u6b65)\n\n    Args:\n        key: \u7f13\u5b58\u952e\n        delta: \u51cf\u91cf,\u9ed8\u8ba4\u4e3a 1\n\n    Returns:\n        \u9012\u51cf\u540e\u7684\u503c\n\n    Raises:\n        ValueError: \u5f53\u524d\u503c\u4e0d\u662f\u6574\u6570\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; cache.set(\"counter\", 10)\n        &gt;&gt;&gt; new_value = cache.decrement(\"counter\", 3)\n        &gt;&gt;&gt; print(new_value)  # 7\n    \"\"\"\n    return self.increment(key, -delta)\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.delete","title":"<code>delete(key)</code>","text":"<p>\u5220\u9664\u7f13\u5b58\uff08\u540c\u6b65\uff09</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <p>Returns:</p> Type Description <code>bool</code> <p>\u5982\u679c\u952e\u5b58\u5728\u5e76\u6210\u529f\u5220\u9664\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False</p> <p>Raises:</p> Type Description <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>if cache.delete(\"user:123\"): ...     print(\"\u7f13\u5b58\u5df2\u5220\u9664\")</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def delete(self, key: CacheKey) -&gt; bool:\n    \"\"\"\n    \u5220\u9664\u7f13\u5b58\uff08\u540c\u6b65\uff09\n\n    Args:\n        key: \u7f13\u5b58\u952e\n\n    Returns:\n        \u5982\u679c\u952e\u5b58\u5728\u5e76\u6210\u529f\u5220\u9664\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\n\n    Raises:\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; if cache.delete(\"user:123\"):\n        ...     print(\"\u7f13\u5b58\u5df2\u5220\u9664\")\n    \"\"\"\n    return self._backend.delete(key)\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.delete_many","title":"<code>delete_many(keys)</code>","text":"<p>\u6279\u91cf\u5220\u9664\u7f13\u5b58\uff08\u540c\u6b65\uff09</p> <p>Parameters:</p> Name Type Description Default <code>keys</code> <code>list[CacheKey]</code> <p>\u7f13\u5b58\u952e\u5217\u8868</p> required <p>Returns:</p> Type Description <code>int</code> <p>\u6210\u529f\u5220\u9664\u7684\u952e\u6570\u91cf</p> <p>Raises:</p> Type Description <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>count = cache.delete_many([\"user:1\", \"user:2\", \"user:3\"]) print(f\"\u5220\u9664\u4e86 {count} \u4e2a\u952e\")</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def delete_many(self, keys: list[CacheKey]) -&gt; int:\n    \"\"\"\n    \u6279\u91cf\u5220\u9664\u7f13\u5b58\uff08\u540c\u6b65\uff09\n\n    Args:\n        keys: \u7f13\u5b58\u952e\u5217\u8868\n\n    Returns:\n        \u6210\u529f\u5220\u9664\u7684\u952e\u6570\u91cf\n\n    Raises:\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; count = cache.delete_many([\"user:1\", \"user:2\", \"user:3\"])\n        &gt;&gt;&gt; print(f\"\u5220\u9664\u4e86 {count} \u4e2a\u952e\")\n    \"\"\"\n    return self._backend.delete_many(keys)\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.exists","title":"<code>exists(key)</code>","text":"<p>\u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728\uff08\u540c\u6b65\uff09</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <p>Returns:</p> Type Description <code>bool</code> <p>\u5982\u679c\u952e\u5b58\u5728\u4e14\u672a\u8fc7\u671f\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False</p> <p>Raises:</p> Type Description <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>if cache.exists(\"user:123\"): ...     print(\"\u7f13\u5b58\u5b58\u5728\")</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def exists(self, key: CacheKey) -&gt; bool:\n    \"\"\"\n    \u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728\uff08\u540c\u6b65\uff09\n\n    Args:\n        key: \u7f13\u5b58\u952e\n\n    Returns:\n        \u5982\u679c\u952e\u5b58\u5728\u4e14\u672a\u8fc7\u671f\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\n\n    Raises:\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; if cache.exists(\"user:123\"):\n        ...     print(\"\u7f13\u5b58\u5b58\u5728\")\n    \"\"\"\n    return self._backend.exists(key)\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.from_config","title":"<code>from_config(config)</code>  <code>classmethod</code>","text":"<p>\u4ece\u914d\u7f6e\u521b\u5efa\u7f13\u5b58\u7ba1\u7406\u5668</p> <p>\u652f\u6301\u591a\u79cd\u8f93\u5165\u7c7b\u578b: - CacheConfig \u5bf9\u8c61 - dict \u914d\u7f6e\u5b57\u5178 - str/Path \u914d\u7f6e\u6587\u4ef6\u8def\u5f84</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>CacheConfig | dict[str, Any] | str | Path</code> <p>\u914d\u7f6e\u5bf9\u8c61\u3001\u5b57\u5178\u6216\u6587\u4ef6\u8def\u5f84</p> required <p>Returns:</p> Type Description <code>CacheManager</code> <p>\u914d\u7f6e\u597d\u7684 CacheManager \u5b9e\u4f8b</p> <p>Raises:</p> Type Description <code>CacheConfigError</code> <p>\u914d\u7f6e\u9a8c\u8bc1\u5931\u8d25</p> <code>ImportError</code> <p>\u7f3a\u5c11\u5fc5\u9700\u7684\u4f9d\u8d56</p> \u793a\u4f8b Source code in <code>src/symphra_cache/manager.py</code> <pre><code>@classmethod\ndef from_config(cls, config: CacheConfig | dict[str, Any] | str | Path) -&gt; CacheManager:\n    \"\"\"\n    \u4ece\u914d\u7f6e\u521b\u5efa\u7f13\u5b58\u7ba1\u7406\u5668\n\n    \u652f\u6301\u591a\u79cd\u8f93\u5165\u7c7b\u578b:\n    - CacheConfig \u5bf9\u8c61\n    - dict \u914d\u7f6e\u5b57\u5178\n    - str/Path \u914d\u7f6e\u6587\u4ef6\u8def\u5f84\n\n    Args:\n        config: \u914d\u7f6e\u5bf9\u8c61\u3001\u5b57\u5178\u6216\u6587\u4ef6\u8def\u5f84\n\n    Returns:\n        \u914d\u7f6e\u597d\u7684 CacheManager \u5b9e\u4f8b\n\n    Raises:\n        CacheConfigError: \u914d\u7f6e\u9a8c\u8bc1\u5931\u8d25\n        ImportError: \u7f3a\u5c11\u5fc5\u9700\u7684\u4f9d\u8d56\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; # \u4ece\u5b57\u5178\u521b\u5efa\n        &gt;&gt;&gt; cache = CacheManager.from_config({\"backend\": \"memory\"})\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; # \u4ece\u6587\u4ef6\u521b\u5efa\n        &gt;&gt;&gt; cache = CacheManager.from_config(\"config/cache.yaml\")\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; # \u4ece CacheConfig \u5bf9\u8c61\u521b\u5efa\n        &gt;&gt;&gt; config = CacheConfig.from_file(\"cache.toml\")\n        &gt;&gt;&gt; cache = CacheManager.from_config(config)\n    \"\"\"\n    from .config import CacheConfig\n\n    # \u7edf\u4e00\u8f6c\u6362\u4e3a CacheConfig \u5bf9\u8c61\n    if isinstance(config, dict):\n        config_obj = CacheConfig(**config)\n    elif isinstance(config, str | Path):\n        config_obj = CacheConfig.from_file(config)\n    elif isinstance(config, CacheConfig):\n        config_obj = config\n    else:\n        msg = f\"\u4e0d\u652f\u6301\u7684\u914d\u7f6e\u7c7b\u578b: {type(config)}\"\n        raise TypeError(msg)\n\n    # \u521b\u5efa\u540e\u7aef\n    backend = config_obj.create_backend()\n\n    # \u521b\u5efa\u7ba1\u7406\u5668\n    return cls(backend=backend)\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.from_config--_1","title":"\u4ece\u5b57\u5178\u521b\u5efa","text":"<p>cache = CacheManager.from_config({\"backend\": \"memory\"})</p>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.from_config--_2","title":"\u4ece\u6587\u4ef6\u521b\u5efa","text":"<p>cache = CacheManager.from_config(\"config/cache.yaml\")</p>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.from_config--cacheconfig","title":"\u4ece CacheConfig \u5bf9\u8c61\u521b\u5efa","text":"<p>config = CacheConfig.from_file(\"cache.toml\") cache = CacheManager.from_config(config)</p>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.from_env","title":"<code>from_env(prefix='SYMPHRA_CACHE_')</code>  <code>classmethod</code>","text":"<p>\u4ece\u73af\u5883\u53d8\u91cf\u521b\u5efa\u7f13\u5b58\u7ba1\u7406\u5668</p> <p>\u73af\u5883\u53d8\u91cf\u547d\u540d\u89c4\u5219: - SYMPHRA_CACHE_BACKEND=memory - SYMPHRA_CACHE_MAX_SIZE=10000 - SYMPHRA_CACHE_REDIS_HOST=localhost - SYMPHRA_CACHE_REDIS_PORT=6379</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>\u73af\u5883\u53d8\u91cf\u524d\u7f00,\u9ed8\u8ba4\u4e3a \"SYMPHRA_CACHE_\"</p> <code>'SYMPHRA_CACHE_'</code> <p>Returns:</p> Type Description <code>CacheManager</code> <p>\u914d\u7f6e\u597d\u7684 CacheManager \u5b9e\u4f8b</p> <p>Raises:</p> Type Description <code>CacheConfigError</code> <p>\u914d\u7f6e\u9a8c\u8bc1\u5931\u8d25</p> \u793a\u4f8b Source code in <code>src/symphra_cache/manager.py</code> <pre><code>@classmethod\ndef from_env(cls, prefix: str = \"SYMPHRA_CACHE_\") -&gt; CacheManager:\n    \"\"\"\n    \u4ece\u73af\u5883\u53d8\u91cf\u521b\u5efa\u7f13\u5b58\u7ba1\u7406\u5668\n\n    \u73af\u5883\u53d8\u91cf\u547d\u540d\u89c4\u5219:\n    - SYMPHRA_CACHE_BACKEND=memory\n    - SYMPHRA_CACHE_MAX_SIZE=10000\n    - SYMPHRA_CACHE_REDIS_HOST=localhost\n    - SYMPHRA_CACHE_REDIS_PORT=6379\n\n    Args:\n        prefix: \u73af\u5883\u53d8\u91cf\u524d\u7f00,\u9ed8\u8ba4\u4e3a \"SYMPHRA_CACHE_\"\n\n    Returns:\n        \u914d\u7f6e\u597d\u7684 CacheManager \u5b9e\u4f8b\n\n    Raises:\n        CacheConfigError: \u914d\u7f6e\u9a8c\u8bc1\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; # \u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\n        &gt;&gt;&gt; os.environ[\"SYMPHRA_CACHE_BACKEND\"] = \"redis\"\n        &gt;&gt;&gt; os.environ[\"SYMPHRA_CACHE_REDIS_HOST\"] = \"localhost\"\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; # \u4ece\u73af\u5883\u53d8\u91cf\u521b\u5efa\n        &gt;&gt;&gt; cache = CacheManager.from_env()\n    \"\"\"\n    from .config import CacheConfig\n\n    config = CacheConfig.from_env(prefix=prefix)\n    backend = config.create_backend()\n    return cls(backend=backend)\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.from_env--_1","title":"\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf","text":"<p>os.environ[\"SYMPHRA_CACHE_BACKEND\"] = \"redis\" os.environ[\"SYMPHRA_CACHE_REDIS_HOST\"] = \"localhost\"</p>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.from_env--_2","title":"\u4ece\u73af\u5883\u53d8\u91cf\u521b\u5efa","text":"<p>cache = CacheManager.from_env()</p>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.from_file","title":"<code>from_file(file_path)</code>  <code>classmethod</code>","text":"<p>\u4ece\u914d\u7f6e\u6587\u4ef6\u521b\u5efa\u7f13\u5b58\u7ba1\u7406\u5668</p> <p>\u652f\u6301\u7684\u683c\u5f0f: - YAML (.yaml, .yml) - TOML (.toml) - JSON (.json)</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str | Path</code> <p>\u914d\u7f6e\u6587\u4ef6\u8def\u5f84</p> required <p>Returns:</p> Type Description <code>CacheManager</code> <p>\u914d\u7f6e\u597d\u7684 CacheManager \u5b9e\u4f8b</p> <p>Raises:</p> Type Description <code>CacheConfigError</code> <p>\u6587\u4ef6\u8bfb\u53d6\u6216\u89e3\u6790\u5931\u8d25</p> \u793a\u4f8b Source code in <code>src/symphra_cache/manager.py</code> <pre><code>@classmethod\ndef from_file(cls, file_path: str | Path) -&gt; CacheManager:\n    \"\"\"\n    \u4ece\u914d\u7f6e\u6587\u4ef6\u521b\u5efa\u7f13\u5b58\u7ba1\u7406\u5668\n\n    \u652f\u6301\u7684\u683c\u5f0f:\n    - YAML (.yaml, .yml)\n    - TOML (.toml)\n    - JSON (.json)\n\n    Args:\n        file_path: \u914d\u7f6e\u6587\u4ef6\u8def\u5f84\n\n    Returns:\n        \u914d\u7f6e\u597d\u7684 CacheManager \u5b9e\u4f8b\n\n    Raises:\n        CacheConfigError: \u6587\u4ef6\u8bfb\u53d6\u6216\u89e3\u6790\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; # \u4ece YAML \u6587\u4ef6\u521b\u5efa\n        &gt;&gt;&gt; cache = CacheManager.from_file(\"config/cache.yaml\")\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; # \u4ece TOML \u6587\u4ef6\u521b\u5efa\n        &gt;&gt;&gt; cache = CacheManager.from_file(\"config/cache.toml\")\n    \"\"\"\n    from .config import CacheConfig\n\n    config = CacheConfig.from_file(file_path)\n    backend = config.create_backend()\n    return cls(backend=backend)\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.from_file--yaml","title":"\u4ece YAML \u6587\u4ef6\u521b\u5efa","text":"<p>cache = CacheManager.from_file(\"config/cache.yaml\")</p>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.from_file--toml","title":"\u4ece TOML \u6587\u4ef6\u521b\u5efa","text":"<p>cache = CacheManager.from_file(\"config/cache.toml\")</p>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.get","title":"<code>get(key)</code>","text":"<p>\u83b7\u53d6\u7f13\u5b58\u503c\uff08\u540c\u6b65\uff09</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <p>Returns:</p> Type Description <code>CacheValue | None</code> <p>\u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u5219\u8fd4\u56de None</p> <p>Raises:</p> Type Description <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>user = cache.get(\"user:123\") if user is None: ...     print(\"\u7f13\u5b58\u672a\u547d\u4e2d\")</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def get(self, key: CacheKey) -&gt; CacheValue | None:\n    \"\"\"\n    \u83b7\u53d6\u7f13\u5b58\u503c\uff08\u540c\u6b65\uff09\n\n    Args:\n        key: \u7f13\u5b58\u952e\n\n    Returns:\n        \u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u5219\u8fd4\u56de None\n\n    Raises:\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; user = cache.get(\"user:123\")\n        &gt;&gt;&gt; if user is None:\n        ...     print(\"\u7f13\u5b58\u672a\u547d\u4e2d\")\n    \"\"\"\n    return self._backend.get(key)\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.get_many","title":"<code>get_many(keys)</code>","text":"<p>\u6279\u91cf\u83b7\u53d6\u7f13\u5b58\u503c\uff08\u540c\u6b65\uff09</p> <p>Parameters:</p> Name Type Description Default <code>keys</code> <code>list[CacheKey]</code> <p>\u7f13\u5b58\u952e\u5217\u8868</p> required <p>Returns:</p> Type Description <code>dict[CacheKey, CacheValue]</code> <p>\u952e\u503c\u5bf9\u5b57\u5178\uff0c\u4e0d\u5b58\u5728\u7684\u952e\u4e0d\u5305\u542b\u5728\u7ed3\u679c\u4e2d</p> <p>Raises:</p> Type Description <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>results = cache.get_many([\"user:1\", \"user:2\", \"user:3\"]) for key, value in results.items(): ...     print(f\"{key}: {value}\")</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def get_many(self, keys: list[CacheKey]) -&gt; dict[CacheKey, CacheValue]:\n    \"\"\"\n    \u6279\u91cf\u83b7\u53d6\u7f13\u5b58\u503c\uff08\u540c\u6b65\uff09\n\n    Args:\n        keys: \u7f13\u5b58\u952e\u5217\u8868\n\n    Returns:\n        \u952e\u503c\u5bf9\u5b57\u5178\uff0c\u4e0d\u5b58\u5728\u7684\u952e\u4e0d\u5305\u542b\u5728\u7ed3\u679c\u4e2d\n\n    Raises:\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; results = cache.get_many([\"user:1\", \"user:2\", \"user:3\"])\n        &gt;&gt;&gt; for key, value in results.items():\n        ...     print(f\"{key}: {value}\")\n    \"\"\"\n    return self._backend.get_many(keys)\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.get_or_set","title":"<code>get_or_set(key, default_factory, ttl=None, ex=False, nx=False)</code>","text":"<p>\u83b7\u53d6\u7f13\u5b58\u503c,\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8c03\u7528 default_factory \u8ba1\u7b97\u5e76\u7f13\u5b58</p> <p>\u8fd9\u662f\u9632\u6b62\u7f13\u5b58\u7a7f\u900f\u7684\u63a8\u8350\u6a21\u5f0f\u3002</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <code>default_factory</code> <code>Callable[[], CacheValue]</code> <p>\u4e0d\u5b58\u5728\u65f6\u8c03\u7528\u7684\u5de5\u5382\u51fd\u6570</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4(\u79d2),None \u8868\u793a\u6c38\u4e0d\u8fc7\u671f</p> <code>None</code> <code>ex</code> <code>bool</code> <p>\u5982\u679c\u4e3a True,ttl \u8868\u793a\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4</p> <code>False</code> <code>nx</code> <code>bool</code> <p>\u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e</p> <code>False</code> <p>Returns:</p> Type Description <code>CacheValue</code> <p>\u7f13\u5b58\u503c\u6216\u8ba1\u7b97\u7684\u65b0\u503c</p> <p>Raises:</p> Type Description <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>def expensive_compute(): ...     return sum(range(1000000)) result = cache.get_or_set(\"sum\", expensive_compute, ttl=300)</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def get_or_set(\n    self,\n    key: CacheKey,\n    default_factory: Callable[[], CacheValue],\n    ttl: int | None = None,\n    ex: bool = False,\n    nx: bool = False,\n) -&gt; CacheValue:\n    \"\"\"\n    \u83b7\u53d6\u7f13\u5b58\u503c,\u5982\u679c\u4e0d\u5b58\u5728\u5219\u8c03\u7528 default_factory \u8ba1\u7b97\u5e76\u7f13\u5b58\n\n    \u8fd9\u662f\u9632\u6b62\u7f13\u5b58\u7a7f\u900f\u7684\u63a8\u8350\u6a21\u5f0f\u3002\n\n    Args:\n        key: \u7f13\u5b58\u952e\n        default_factory: \u4e0d\u5b58\u5728\u65f6\u8c03\u7528\u7684\u5de5\u5382\u51fd\u6570\n        ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2),None \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n        ex: \u5982\u679c\u4e3a True,ttl \u8868\u793a\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4\n        nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n    Returns:\n        \u7f13\u5b58\u503c\u6216\u8ba1\u7b97\u7684\u65b0\u503c\n\n    Raises:\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; def expensive_compute():\n        ...     return sum(range(1000000))\n        &gt;&gt;&gt; result = cache.get_or_set(\"sum\", expensive_compute, ttl=300)\n    \"\"\"\n    value = self._backend.get(key)\n    if value is not None:\n        return value\n\n    # \u7f13\u5b58\u672a\u547d\u4e2d,\u8ba1\u7b97\u65b0\u503c\n    value = default_factory()\n    self._backend.set(key, value, ttl=ttl, ex=ex, nx=nx)\n    return value\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.increment","title":"<code>increment(key, delta=1)</code>","text":"<p>\u539f\u5b50\u9012\u589e\u8ba1\u6570\u5668(\u540c\u6b65)</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <code>delta</code> <code>int</code> <p>\u589e\u91cf,\u9ed8\u8ba4\u4e3a 1</p> <code>1</code> <p>Returns:</p> Type Description <code>int</code> <p>\u9012\u589e\u540e\u7684\u503c</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5f53\u524d\u503c\u4e0d\u662f\u6574\u6570</p> <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>cache.set(\"counter\", 10) new_value = cache.increment(\"counter\", 5) print(new_value)  # 15</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def increment(self, key: CacheKey, delta: int = 1) -&gt; int:\n    \"\"\"\n    \u539f\u5b50\u9012\u589e\u8ba1\u6570\u5668(\u540c\u6b65)\n\n    Args:\n        key: \u7f13\u5b58\u952e\n        delta: \u589e\u91cf,\u9ed8\u8ba4\u4e3a 1\n\n    Returns:\n        \u9012\u589e\u540e\u7684\u503c\n\n    Raises:\n        ValueError: \u5f53\u524d\u503c\u4e0d\u662f\u6574\u6570\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; cache.set(\"counter\", 10)\n        &gt;&gt;&gt; new_value = cache.increment(\"counter\", 5)\n        &gt;&gt;&gt; print(new_value)  # 15\n    \"\"\"\n    current = self._backend.get(key)\n    if current is None:\n        current = 0\n\n    if not isinstance(current, int):\n        msg = f\"\u952e {key} \u7684\u503c\u4e0d\u662f\u6574\u6570\u7c7b\u578b: {type(current)}\"\n        raise ValueError(msg)\n\n    new_value = current + delta\n    self._backend.set(key, new_value)\n    return new_value\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.keys","title":"<code>keys(pattern='*', cursor=0, count=100, max_keys=None)</code>","text":"<p>\u626b\u63cf\u7f13\u5b58\u952e(\u540c\u6b65)</p> <p>\u652f\u6301\u6a21\u5f0f\u5339\u914d\u548c\u5206\u9875\u3002</p> <p>Parameters:</p> Name Type Description Default <code>pattern</code> <code>str</code> <p>\u5339\u914d\u6a21\u5f0f(\u652f\u6301\u901a\u914d\u7b26 * \u548c ?)</p> <code>'*'</code> <code>cursor</code> <code>int</code> <p>\u6e38\u6807\u4f4d\u7f6e(0 \u8868\u793a\u5f00\u59cb)</p> <code>0</code> <code>count</code> <code>int</code> <p>\u6bcf\u9875\u8fd4\u56de\u7684\u952e\u6570\u91cf</p> <code>100</code> <code>max_keys</code> <code>int | None</code> <p>\u6700\u591a\u8fd4\u56de\u7684\u952e\u6570\u91cf</p> <code>None</code> <p>Returns:</p> Type Description <code>KeysPage</code> <p>KeysPage \u5bf9\u8c61</p> \u793a\u4f8b <p>page = cache.keys(pattern=\"user:*\", count=100) print(f\"\u627e\u5230 {len(page.keys)} \u4e2a\u952e\") if page.has_more: ...     next_page = cache.keys(cursor=page.cursor)</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def keys(\n    self,\n    pattern: str = \"*\",\n    cursor: int = 0,\n    count: int = 100,\n    max_keys: int | None = None,\n) -&gt; KeysPage:\n    \"\"\"\n    \u626b\u63cf\u7f13\u5b58\u952e(\u540c\u6b65)\n\n    \u652f\u6301\u6a21\u5f0f\u5339\u914d\u548c\u5206\u9875\u3002\n\n    Args:\n        pattern: \u5339\u914d\u6a21\u5f0f(\u652f\u6301\u901a\u914d\u7b26 * \u548c ?)\n        cursor: \u6e38\u6807\u4f4d\u7f6e(0 \u8868\u793a\u5f00\u59cb)\n        count: \u6bcf\u9875\u8fd4\u56de\u7684\u952e\u6570\u91cf\n        max_keys: \u6700\u591a\u8fd4\u56de\u7684\u952e\u6570\u91cf\n\n    Returns:\n        KeysPage \u5bf9\u8c61\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; page = cache.keys(pattern=\"user:*\", count=100)\n        &gt;&gt;&gt; print(f\"\u627e\u5230 {len(page.keys)} \u4e2a\u952e\")\n        &gt;&gt;&gt; if page.has_more:\n        ...     next_page = cache.keys(cursor=page.cursor)\n    \"\"\"\n\n    return self._backend.keys(pattern=pattern, cursor=cursor, count=count, max_keys=max_keys)\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.mget","title":"<code>mget(keys)</code>","text":"<p>\u6279\u91cf\u83b7\u53d6(get_many \u7684\u522b\u540d)</p> <p>Parameters:</p> Name Type Description Default <code>keys</code> <code>list[CacheKey]</code> <p>\u7f13\u5b58\u952e\u5217\u8868</p> required <p>Returns:</p> Type Description <code>dict[CacheKey, CacheValue]</code> <p>\u952e\u503c\u5bf9\u5b57\u5178</p> \u793a\u4f8b <p>results = cache.mget([\"key1\", \"key2\", \"key3\"])</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def mget(self, keys: list[CacheKey]) -&gt; dict[CacheKey, CacheValue]:\n    \"\"\"\n    \u6279\u91cf\u83b7\u53d6(get_many \u7684\u522b\u540d)\n\n    Args:\n        keys: \u7f13\u5b58\u952e\u5217\u8868\n\n    Returns:\n        \u952e\u503c\u5bf9\u5b57\u5178\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; results = cache.mget([\"key1\", \"key2\", \"key3\"])\n    \"\"\"\n    return self.get_many(keys)\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.mset","title":"<code>mset(mapping, ttl=None)</code>","text":"<p>\u6279\u91cf\u8bbe\u7f6e(set_many \u7684\u522b\u540d)</p> <p>Parameters:</p> Name Type Description Default <code>mapping</code> <code>dict[CacheKey, CacheValue]</code> <p>\u952e\u503c\u5bf9\u5b57\u5178</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4(\u79d2)</p> <code>None</code> \u793a\u4f8b <p>cache.mset({\"key1\": \"val1\", \"key2\": \"val2\"}, ttl=300)</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def mset(\n    self,\n    mapping: dict[CacheKey, CacheValue],\n    ttl: int | None = None,\n) -&gt; None:\n    \"\"\"\n    \u6279\u91cf\u8bbe\u7f6e(set_many \u7684\u522b\u540d)\n\n    Args:\n        mapping: \u952e\u503c\u5bf9\u5b57\u5178\n        ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2)\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; cache.mset({\"key1\": \"val1\", \"key2\": \"val2\"}, ttl=300)\n    \"\"\"\n    self.set_many(mapping, ttl=ttl)\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.set","title":"<code>set(key, value, ttl=None, ex=False, nx=False)</code>","text":"<p>\u8bbe\u7f6e\u7f13\u5b58\u503c(\u540c\u6b65)</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <code>value</code> <code>CacheValue</code> <p>\u7f13\u5b58\u503c</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4(\u79d2),None \u8868\u793a\u6c38\u4e0d\u8fc7\u671f</p> <code>None</code> <code>ex</code> <code>bool</code> <p>\u5982\u679c\u4e3a True,ttl \u8868\u793a\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4;False \u8868\u793a\u7edd\u5bf9\u65f6\u95f4\u6233</p> <code>False</code> <code>nx</code> <code>bool</code> <p>\u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>\u662f\u5426\u8bbe\u7f6e\u6210\u529f(nx=True \u65f6\u53ef\u80fd\u5931\u8d25)</p> <p>Raises:</p> Type Description <code>CacheSerializationError</code> <p>\u5e8f\u5217\u5316\u5931\u8d25</p> <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def set(\n    self,\n    key: CacheKey,\n    value: CacheValue,\n    ttl: int | None = None,\n    ex: bool = False,\n    nx: bool = False,\n) -&gt; bool:\n    \"\"\"\n    \u8bbe\u7f6e\u7f13\u5b58\u503c(\u540c\u6b65)\n\n    Args:\n        key: \u7f13\u5b58\u952e\n        value: \u7f13\u5b58\u503c\n        ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2),None \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n        ex: \u5982\u679c\u4e3a True,ttl \u8868\u793a\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4;False \u8868\u793a\u7edd\u5bf9\u65f6\u95f4\u6233\n        nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n    Returns:\n        \u662f\u5426\u8bbe\u7f6e\u6210\u529f(nx=True \u65f6\u53ef\u80fd\u5931\u8d25)\n\n    Raises:\n        CacheSerializationError: \u5e8f\u5217\u5316\u5931\u8d25\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; # \u8bbe\u7f6e 1 \u5c0f\u65f6\u8fc7\u671f\n        &gt;&gt;&gt; cache.set(\"session:xyz\", {\"user_id\": 123}, ttl=3600)\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; # \u4ec5\u5f53\u4e0d\u5b58\u5728\u65f6\u8bbe\u7f6e(\u7c7b\u4f3c Redis SETNX)\n        &gt;&gt;&gt; success = cache.set(\"lock:resource\", \"owner_id\", ttl=10, nx=True)\n    \"\"\"\n    return self._backend.set(key, value, ttl=ttl, ex=ex, nx=nx)\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.set--1","title":"\u8bbe\u7f6e 1 \u5c0f\u65f6\u8fc7\u671f","text":"<p>cache.set(\"session:xyz\", {\"user_id\": 123}, ttl=3600)</p>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.set--redis-setnx","title":"\u4ec5\u5f53\u4e0d\u5b58\u5728\u65f6\u8bbe\u7f6e(\u7c7b\u4f3c Redis SETNX)","text":"<p>success = cache.set(\"lock:resource\", \"owner_id\", ttl=10, nx=True)</p>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.set_many","title":"<code>set_many(mapping, ttl=None)</code>","text":"<p>\u6279\u91cf\u8bbe\u7f6e\u7f13\u5b58\u503c\uff08\u540c\u6b65\uff09</p> <p>Parameters:</p> Name Type Description Default <code>mapping</code> <code>dict[CacheKey, CacheValue]</code> <p>\u952e\u503c\u5bf9\u5b57\u5178</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u8868\u793a\u6c38\u4e0d\u8fc7\u671f</p> <code>None</code> <p>Raises:</p> Type Description <code>CacheSerializationError</code> <p>\u5e8f\u5217\u5316\u5931\u8d25</p> <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u793a\u4f8b <p>cache.set_many( ...     { ...         \"user:1\": {\"name\": \"Alice\"}, ...         \"user:2\": {\"name\": \"Bob\"}, ...     }, ...     ttl=600, ... )</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def set_many(\n    self,\n    mapping: dict[CacheKey, CacheValue],\n    ttl: int | None = None,\n) -&gt; None:\n    \"\"\"\n    \u6279\u91cf\u8bbe\u7f6e\u7f13\u5b58\u503c\uff08\u540c\u6b65\uff09\n\n    Args:\n        mapping: \u952e\u503c\u5bf9\u5b57\u5178\n        ttl: \u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n\n    Raises:\n        CacheSerializationError: \u5e8f\u5217\u5316\u5931\u8d25\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; cache.set_many(\n        ...     {\n        ...         \"user:1\": {\"name\": \"Alice\"},\n        ...         \"user:2\": {\"name\": \"Bob\"},\n        ...     },\n        ...     ttl=600,\n        ... )\n    \"\"\"\n    self._backend.set_many(mapping, ttl=ttl)\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.switch_backend","title":"<code>switch_backend(backend)</code>","text":"<p>\u5207\u6362\u7f13\u5b58\u540e\u7aef</p> \u6ce8\u610f <p>\u5207\u6362\u540e\u7aef\u4e0d\u4f1a\u8fc1\u79fb\u73b0\u6709\u6570\u636e\uff0c\u65b0\u540e\u7aef\u4ece\u7a7a\u767d\u72b6\u6001\u5f00\u59cb</p> <p>Parameters:</p> Name Type Description Default <code>backend</code> <code>BaseBackend</code> <p>\u65b0\u7684\u540e\u7aef\u5b9e\u4f8b</p> required \u793a\u4f8b Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def switch_backend(self, backend: BaseBackend) -&gt; None:\n    \"\"\"\n    \u5207\u6362\u7f13\u5b58\u540e\u7aef\n\n    \u6ce8\u610f:\n        \u5207\u6362\u540e\u7aef\u4e0d\u4f1a\u8fc1\u79fb\u73b0\u6709\u6570\u636e\uff0c\u65b0\u540e\u7aef\u4ece\u7a7a\u767d\u72b6\u6001\u5f00\u59cb\n\n    Args:\n        backend: \u65b0\u7684\u540e\u7aef\u5b9e\u4f8b\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; # \u4ece\u5185\u5b58\u540e\u7aef\u5207\u6362\u5230 Redis \u540e\u7aef\n        &gt;&gt;&gt; from symphra_cache.backends import RedisBackend\n        &gt;&gt;&gt; cache.switch_backend(RedisBackend())\n    \"\"\"\n    self._backend = backend\n</code></pre>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.switch_backend--redis","title":"\u4ece\u5185\u5b58\u540e\u7aef\u5207\u6362\u5230 Redis \u540e\u7aef","text":"<p>from symphra_cache.backends import RedisBackend cache.switch_backend(RedisBackend())</p>"},{"location":"zh/api/manager/#symphra_cache.manager.CacheManager.ttl","title":"<code>ttl(key)</code>","text":"<p>\u83b7\u53d6\u952e\u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4(\u540c\u6b65)</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <p>Returns:</p> Type Description <code>int | None</code> <p>\u5269\u4f59\u79d2\u6570,\u5982\u679c\u952e\u4e0d\u5b58\u5728\u6216\u6c38\u4e0d\u8fc7\u671f\u8fd4\u56de None</p> <p>Raises:</p> Type Description <code>CacheBackendError</code> <p>\u540e\u7aef\u64cd\u4f5c\u5931\u8d25</p> \u6ce8\u610f <p>\u4e0d\u540c\u540e\u7aef\u7684\u5b9e\u73b0\u7cbe\u5ea6\u53ef\u80fd\u4e0d\u540c</p> \u793a\u4f8b <p>cache.set(\"temp\", \"value\", ttl=60) remaining = cache.ttl(\"temp\") print(f\"\u5269\u4f59 {remaining} \u79d2\")</p> Source code in <code>src/symphra_cache/manager.py</code> <pre><code>def ttl(self, key: CacheKey) -&gt; int | None:\n    \"\"\"\n    \u83b7\u53d6\u952e\u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4(\u540c\u6b65)\n\n    Args:\n        key: \u7f13\u5b58\u952e\n\n    Returns:\n        \u5269\u4f59\u79d2\u6570,\u5982\u679c\u952e\u4e0d\u5b58\u5728\u6216\u6c38\u4e0d\u8fc7\u671f\u8fd4\u56de None\n\n    Raises:\n        CacheBackendError: \u540e\u7aef\u64cd\u4f5c\u5931\u8d25\n\n    \u6ce8\u610f:\n        \u4e0d\u540c\u540e\u7aef\u7684\u5b9e\u73b0\u7cbe\u5ea6\u53ef\u80fd\u4e0d\u540c\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; cache.set(\"temp\", \"value\", ttl=60)\n        &gt;&gt;&gt; remaining = cache.ttl(\"temp\")\n        &gt;&gt;&gt; print(f\"\u5269\u4f59 {remaining} \u79d2\")\n    \"\"\"\n    # \u9ed8\u8ba4\u5b9e\u73b0:\u68c0\u67e5\u662f\u5426\u5b58\u5728,\u4f46\u65e0\u6cd5\u83b7\u53d6\u7cbe\u786e TTL\n    # \u5b50\u7c7b\u53ef\u4ee5\u91cd\u5199\u6b64\u65b9\u6cd5\u63d0\u4f9b\u66f4\u7cbe\u786e\u7684\u5b9e\u73b0\n    if not self._backend.exists(key):\n        return None\n\n    # \u5bf9\u4e8e MemoryBackend,\u53ef\u4ee5\u8bbf\u95ee\u5185\u90e8\u6570\u636e\n    if hasattr(self._backend, \"_cache\"):\n        cache_data = self._backend._cache.get(key)\n        if cache_data is None:\n            return None\n        _, expires_at = cache_data\n        if expires_at is None:\n            return None\n        remaining = int(expires_at - time.time())\n        return remaining if remaining &gt; 0 else None\n\n    # \u5176\u4ed6\u540e\u7aef\u65e0\u6cd5\u7cbe\u786e\u83b7\u53d6,\u8fd4\u56de None\n    return None\n</code></pre>"},{"location":"zh/api/monitoring/","title":"\u76d1\u63a7","text":"<p>\u6307\u6807\u91c7\u96c6\u4e0e\u5bfc\u51fa\u96c6\u6210\u3002</p>"},{"location":"zh/api/monitoring/#_2","title":"\u4f7f\u7528\u793a\u4f8b","text":"<pre><code>from symphra_cache import CacheManager, CacheMonitor\nfrom symphra_cache.monitoring.prometheus import PrometheusExporter\nfrom symphra_cache.monitoring.statsd import StatsDExporter\n\n# \u521b\u5efa\u7f13\u5b58\u4e0e\u76d1\u63a7\u5668\ncache = CacheManager.from_config({\"backend\": \"memory\"})\nmonitor = CacheMonitor(cache)\n\n# \u6267\u884c\u4e00\u4e9b\u64cd\u4f5c\ncache.set(\"user:1\", {\"name\": \"\u5f20\u4e09\"})\ncache.get(\"user:1\")\n\n# \u7edf\u4e00\u6307\u6807\u63a5\u53e3\nmetrics = monitor.metrics\nprint(metrics.get_latency_stats(\"get\"))  # {\"min\": ..., \"max\": ..., \"avg\": ...}\n\n# Prometheus \u5bfc\u51fa\uff08\u6587\u672c\u683c\u5f0f\uff09\nprom = PrometheusExporter(monitor, namespace=\"myapp\", subsystem=\"cache\")\nprint(prom.generate_metrics())\n\n# StatsD \u5bfc\u51fa\uff08\u53d1\u9001\u5230\u670d\u52a1\u5668\uff09\n# \u6ce8\u610f\uff1a\u8c03\u7528 send_metrics() \u9700\u8981\u53ef\u8fbe\u7684 StatsD \u670d\u52a1\u5668\nstatsd = StatsDExporter(monitor, prefix=\"myapp.cache\")\n# await statsd.send_metrics()  # \u5728\u5f02\u6b65\u4e0a\u4e0b\u6587\u4e2d\u8c03\u7528\n</code></pre>"},{"location":"zh/api/monitoring/#_3","title":"\u6307\u6807\u63a5\u53e3\u8bf4\u660e","text":"<ul> <li><code>CacheMonitor.is_enabled()</code> \u63a7\u5236\u76d1\u63a7\u5f00\u5173\uff08\u5173\u95ed\u65f6\u51e0\u4e4e\u96f6\u5f00\u9500\uff09\u3002</li> <li><code>CacheMonitor.metrics</code> \u63d0\u4f9b\u5bfc\u51fa\u5668\u671f\u671b\u7684\u5b57\u6bb5\uff1a<code>get_count</code>\u3001<code>set_count</code>\u3001<code>delete_count</code>\u3001<code>hit_count</code>\u3001<code>miss_count</code>\u3002</li> <li><code>get_hit_rate()</code> \u4e0e <code>get_total_operations()</code> \u8fd4\u56de\u547d\u4e2d\u7387\u4e0e\u603b\u64cd\u4f5c\u6570\u3002</li> <li><code>get_average_latency(operation)</code> \u8fd4\u56de <code>get</code>/<code>set</code> \u7684\u5e73\u5747\u5ef6\u8fdf\uff08\u6beb\u79d2\uff09\u3002</li> <li><code>get_latency_stats(operation)</code> \u8fd4\u56de <code>{min, max, avg}</code> \u7684\u5ef6\u8fdf\u7edf\u8ba1\uff08\u6beb\u79d2\uff09\u3002</li> </ul> <p>\u7f13\u5b58\u76d1\u63a7\u5668</p> <p>\u63d0\u4f9b\u7f13\u5b58\u7edf\u8ba1\u3001\u76d1\u63a7\u548c\u5065\u5eb7\u68c0\u67e5\u529f\u80fd\u3002 \u7ebf\u7a0b\u5b89\u5168\u3002</p> <p>\u4f7f\u7528\u793a\u4f8b\uff1a     &gt;&gt;&gt; cache = CacheManager.from_config({\"backend\": \"memory\"})     &gt;&gt;&gt; monitor = CacheMonitor(cache)     &gt;&gt;&gt;     &gt;&gt;&gt; # \u6267\u884c\u7f13\u5b58\u64cd\u4f5c     &gt;&gt;&gt; cache.set(\"key\", \"value\")     &gt;&gt;&gt; cache.get(\"key\")     &gt;&gt;&gt;     &gt;&gt;&gt; # \u67e5\u770b\u7edf\u8ba1     &gt;&gt;&gt; stats = monitor.get_stats()     &gt;&gt;&gt; print(f\"\u547d\u4e2d\u7387: {stats.hit_rate:.2%}\")</p> Source code in <code>src/symphra_cache/monitor.py</code> <pre><code>class CacheMonitor:\n    \"\"\"\n    \u7f13\u5b58\u76d1\u63a7\u5668\n\n    \u63d0\u4f9b\u7f13\u5b58\u7edf\u8ba1\u3001\u76d1\u63a7\u548c\u5065\u5eb7\u68c0\u67e5\u529f\u80fd\u3002\n    \u7ebf\u7a0b\u5b89\u5168\u3002\n\n    \u4f7f\u7528\u793a\u4f8b\uff1a\n        &gt;&gt;&gt; cache = CacheManager.from_config({\"backend\": \"memory\"})\n        &gt;&gt;&gt; monitor = CacheMonitor(cache)\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; # \u6267\u884c\u7f13\u5b58\u64cd\u4f5c\n        &gt;&gt;&gt; cache.set(\"key\", \"value\")\n        &gt;&gt;&gt; cache.get(\"key\")\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; # \u67e5\u770b\u7edf\u8ba1\n        &gt;&gt;&gt; stats = monitor.get_stats()\n        &gt;&gt;&gt; print(f\"\u547d\u4e2d\u7387: {stats.hit_rate:.2%}\")\n    \"\"\"\n\n    def __init__(self, cache_manager: CacheManager, *, enabled: bool = True) -&gt; None:\n        \"\"\"\n        \u521d\u59cb\u5316\u76d1\u63a7\u5668\n\n        Args:\n            cache_manager: \u7f13\u5b58\u7ba1\u7406\u5668\u5b9e\u4f8b\n            enabled: \u662f\u5426\u542f\u7528\u76d1\u63a7\uff08\u7981\u7528\u65f6\u6027\u80fd\u5f00\u9500\u4e3a\u96f6\uff09\n        \"\"\"\n        self._cache = cache_manager\n        # \u4e3a\u517c\u5bb9\u5bfc\u51fa\u5668\uff0c\u516c\u5f00 cache \u5c5e\u6027\n        self.cache = cache_manager\n\n        self._enabled = enabled\n        self._stats = CacheStats()\n        self._lock = threading.RLock()\n\n        # \u8bb0\u5f55\u5ef6\u8fdf\u7684 min/max\uff08\u6beb\u79d2\uff09\u4ee5\u4f9b\u5bfc\u51fa\u5668\u4f7f\u7528\n        self._latency_min: dict[str, float] = {}\n        self._latency_max: dict[str, float] = {}\n\n        # \u5982\u679c\u542f\u7528\uff0c\u66ff\u6362\u7f13\u5b58\u7ba1\u7406\u5668\u7684\u65b9\u6cd5\n        if self._enabled:\n            self._wrap_cache_methods()\n\n    def is_enabled(self) -&gt; bool:\n        \"\"\"\u662f\u5426\u542f\u7528\u76d1\u63a7\uff08\u4e3a\u5bfc\u51fa\u5668\u517c\u5bb9\u63d0\u4f9b\uff09\"\"\"\n        return self._enabled\n\n    @property\n    def metrics(self) -&gt; CacheMetricsAdapter:\n        \"\"\"\u63d0\u4f9b\u4e0e\u5bfc\u51fa\u5668\u517c\u5bb9\u7684\u6307\u6807\u63a5\u53e3\"\"\"\n        return CacheMetricsAdapter(self._stats, self)\n\n    def _wrap_cache_methods(self) -&gt; None:\n        \"\"\"\u5305\u88c5\u7f13\u5b58\u7ba1\u7406\u5668\u65b9\u6cd5\u4ee5\u6536\u96c6\u7edf\u8ba1\u4fe1\u606f\"\"\"\n        original_get = self._cache.get\n        original_set = self._cache.set\n        original_delete = self._cache.delete\n\n        def monitored_get(key):\n            start = time.perf_counter()\n            try:\n                result = original_get(key)\n                elapsed_s = time.perf_counter() - start\n                latency_ms = elapsed_s * 1000.0\n                with self._lock:\n                    self._stats.gets += 1\n                    self._stats.total_get_time += elapsed_s\n                    # \u66f4\u65b0 min/max\uff08\u6beb\u79d2\uff09\n                    prev_min = self._latency_min.get(\"get\")\n                    prev_max = self._latency_max.get(\"get\")\n                    if prev_min is None or latency_ms &lt; prev_min:\n                        self._latency_min[\"get\"] = latency_ms\n                    if prev_max is None or latency_ms &gt; prev_max:\n                        self._latency_max[\"get\"] = latency_ms\n                    if result is not None:\n                        self._stats.hits += 1\n                    else:\n                        self._stats.misses += 1\n                return result\n            except Exception as e:\n                with self._lock:\n                    self._stats.errors += 1\n                raise e\n\n        def monitored_set(key, value, ttl=None, ex=False, nx=False):\n            start = time.perf_counter()\n            try:\n                result = original_set(key, value, ttl, ex, nx)\n                elapsed_s = time.perf_counter() - start\n                latency_ms = elapsed_s * 1000.0\n                with self._lock:\n                    self._stats.sets += 1\n                    self._stats.total_set_time += elapsed_s\n                    # \u66f4\u65b0 min/max\uff08\u6beb\u79d2\uff09\n                    prev_min = self._latency_min.get(\"set\")\n                    prev_max = self._latency_max.get(\"set\")\n                    if prev_min is None or latency_ms &lt; prev_min:\n                        self._latency_min[\"set\"] = latency_ms\n                    if prev_max is None or latency_ms &gt; prev_max:\n                        self._latency_max[\"set\"] = latency_ms\n                return result\n            except Exception as e:\n                with self._lock:\n                    self._stats.errors += 1\n                raise e\n\n        def monitored_delete(key):\n            try:\n                result = original_delete(key)\n                with self._lock:\n                    self._stats.deletes += 1\n                return result\n            except Exception as e:\n                with self._lock:\n                    self._stats.errors += 1\n                raise e\n\n        # \u66ff\u6362\u65b9\u6cd5\n        self._cache.get = monitored_get\n        self._cache.set = monitored_set\n        self._cache.delete = monitored_delete\n\n    def get_stats(self) -&gt; CacheStats:\n        \"\"\"\n        \u83b7\u53d6\u7edf\u8ba1\u4fe1\u606f\n\n        Returns:\n            CacheStats \u5bf9\u8c61\uff08\u526f\u672c\uff09\n\n        \u793a\u4f8b\uff1a\n            &gt;&gt;&gt; stats = monitor.get_stats()\n            &gt;&gt;&gt; print(f\"\u547d\u4e2d\u7387: {stats.hit_rate:.2%}\")\n            &gt;&gt;&gt; print(f\"\u5e73\u5747\u54cd\u5e94\u65f6\u95f4: {stats.avg_get_time:.2f}ms\")\n        \"\"\"\n        with self._lock:\n            # \u8fd4\u56de\u526f\u672c\n            return CacheStats(\n                hits=self._stats.hits,\n                misses=self._stats.misses,\n                gets=self._stats.gets,\n                sets=self._stats.sets,\n                deletes=self._stats.deletes,\n                errors=self._stats.errors,\n                total_get_time=self._stats.total_get_time,\n                total_set_time=self._stats.total_set_time,\n                start_time=self._stats.start_time,\n                last_reset=self._stats.last_reset,\n            )\n\n    def reset_stats(self) -&gt; None:\n        \"\"\"\n        \u91cd\u7f6e\u7edf\u8ba1\u4fe1\u606f\n\n        \u4fdd\u7559 start_time\uff0c\u66f4\u65b0 last_reset\u3002\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; monitor.reset_stats()  # \u91cd\u65b0\u5f00\u59cb\u7edf\u8ba1\n        \"\"\"\n        with self._lock:\n            start_time = self._stats.start_time\n            self._stats = CacheStats(start_time=start_time)\n            # \u6e05\u7406\u5ef6\u8fdf\u7edf\u8ba1\n            self._latency_min.clear()\n            self._latency_max.clear()\n\n    def check_health(self) -&gt; dict:\n        \"\"\"\n        \u6267\u884c\u5065\u5eb7\u68c0\u67e5\n\n        Returns:\n            \u5065\u5eb7\u68c0\u67e5\u7ed3\u679c\u5b57\u5178\n\n        \u793a\u4f8b\uff1a\n            &gt;&gt;&gt; health = monitor.check_health()\n            &gt;&gt;&gt; if health[\"healthy\"]:\n            ...     print(\"\u7f13\u5b58\u5065\u5eb7\")\n        \"\"\"\n        try:\n            # \u6d4b\u8bd5\u57fa\u672c\u64cd\u4f5c\n            test_key = \"__health_check__\"\n            test_value = f\"health_check_{time.time()}\"\n\n            # \u6d4b\u8bd5\u5199\u5165\n            self._cache.set(test_key, test_value, ttl=1)\n\n            # \u6d4b\u8bd5\u8bfb\u53d6\n            result = self._cache.get(test_key)\n            read_ok = result == test_value\n\n            # \u6e05\u7406\n            self._cache.delete(test_key)\n\n            # \u83b7\u53d6\u540e\u7aef\u5065\u5eb7\u72b6\u6001\n            backend_healthy = self._cache.backend.check_health()\n\n            return {\n                \"healthy\": read_ok and backend_healthy,\n                \"backend_healthy\": backend_healthy,\n                \"test_passed\": read_ok,\n                \"timestamp\": time.time(),\n            }\n        except Exception as e:\n            return {\n                \"healthy\": False,\n                \"backend_healthy\": False,\n                \"test_passed\": False,\n                \"error\": str(e),\n                \"timestamp\": time.time(),\n            }\n\n    def get_summary(self) -&gt; dict:\n        \"\"\"\n        \u83b7\u53d6\u76d1\u63a7\u6458\u8981\n\n        \u8fd4\u56de\u7edf\u8ba1\u4fe1\u606f\u548c\u5065\u5eb7\u72b6\u6001\u7684\u6c47\u603b\u3002\n\n        Returns:\n            \u6458\u8981\u5b57\u5178\n\n        \u793a\u4f8b\uff1a\n            &gt;&gt;&gt; summary = monitor.get_summary()\n            &gt;&gt;&gt; print(summary)\n        \"\"\"\n        stats = self.get_stats()\n        health = self.check_health()\n\n        return {\n            \"stats\": stats.to_dict(),\n            \"health\": health,\n        }\n\n    def __repr__(self) -&gt; str:\n        \"\"\"\u5b57\u7b26\u4e32\u8868\u793a\"\"\"\n        stats = self.get_stats()\n        return (\n            f\"CacheMonitor(enabled={self._enabled}, \"\n            f\"hit_rate={stats.hit_rate:.2%}, \"\n            f\"operations={stats.gets + stats.sets + stats.deletes}, \"\n            f\"errors={stats.errors})\"\n        )\n</code></pre> <p>\u7f13\u5b58\u7edf\u8ba1\u4fe1\u606f</p> <p>\u6240\u6709\u8ba1\u6570\u5668\u90fd\u662f\u7d2f\u79ef\u503c\uff0c\u53ef\u901a\u8fc7 reset() \u91cd\u7f6e\u3002</p> Source code in <code>src/symphra_cache/monitor.py</code> <pre><code>@dataclass\nclass CacheStats:\n    \"\"\"\n    \u7f13\u5b58\u7edf\u8ba1\u4fe1\u606f\n\n    \u6240\u6709\u8ba1\u6570\u5668\u90fd\u662f\u7d2f\u79ef\u503c\uff0c\u53ef\u901a\u8fc7 reset() \u91cd\u7f6e\u3002\n    \"\"\"\n\n    # \u547d\u4e2d\u7edf\u8ba1\n    hits: int = 0  # \u7f13\u5b58\u547d\u4e2d\u6b21\u6570\n    misses: int = 0  # \u7f13\u5b58\u672a\u547d\u4e2d\u6b21\u6570\n\n    # \u64cd\u4f5c\u7edf\u8ba1\n    gets: int = 0  # get \u64cd\u4f5c\u6b21\u6570\n    sets: int = 0  # set \u64cd\u4f5c\u6b21\u6570\n    deletes: int = 0  # delete \u64cd\u4f5c\u6b21\u6570\n\n    # \u9519\u8bef\u7edf\u8ba1\n    errors: int = 0  # \u9519\u8bef\u6b21\u6570\n\n    # \u6027\u80fd\u7edf\u8ba1\n    total_get_time: float = 0.0  # get \u64cd\u4f5c\u603b\u8017\u65f6\uff08\u79d2\uff09\n    total_set_time: float = 0.0  # set \u64cd\u4f5c\u603b\u8017\u65f6\uff08\u79d2\uff09\n\n    # \u65f6\u95f4\u6233\n    start_time: float = field(default_factory=time.time)  # \u7edf\u8ba1\u5f00\u59cb\u65f6\u95f4\n    last_reset: float = field(default_factory=time.time)  # \u4e0a\u6b21\u91cd\u7f6e\u65f6\u95f4\n\n    @property\n    def hit_rate(self) -&gt; float:\n        \"\"\"\u547d\u4e2d\u7387\uff080-1\uff09\"\"\"\n        total = self.hits + self.misses\n        return self.hits / total if total &gt; 0 else 0.0\n\n    @property\n    def miss_rate(self) -&gt; float:\n        \"\"\"\u672a\u547d\u4e2d\u7387(0-1)\"\"\"\n        total = self.hits + self.misses\n        return self.misses / total if total &gt; 0 else 0.0\n\n    @property\n    def avg_get_time(self) -&gt; float:\n        \"\"\"\u5e73\u5747 get \u64cd\u4f5c\u8017\u65f6\uff08\u6beb\u79d2\uff09\"\"\"\n        return (self.total_get_time / self.gets * 1000) if self.gets &gt; 0 else 0.0\n\n    @property\n    def avg_set_time(self) -&gt; float:\n        \"\"\"\u5e73\u5747 set \u64cd\u4f5c\u8017\u65f6\uff08\u6beb\u79d2\uff09\"\"\"\n        return (self.total_set_time / self.sets * 1000) if self.sets &gt; 0 else 0.0\n\n    @property\n    def uptime(self) -&gt; float:\n        \"\"\"\u8fd0\u884c\u65f6\u95f4\uff08\u79d2\uff09\"\"\"\n        return time.time() - self.start_time\n\n    def to_dict(self) -&gt; dict:\n        \"\"\"\u8f6c\u6362\u4e3a\u5b57\u5178\"\"\"\n        return {\n            \"hits\": self.hits,\n            \"misses\": self.misses,\n            \"hit_rate\": self.hit_rate,\n            \"miss_rate\": self.miss_rate,\n            \"gets\": self.gets,\n            \"sets\": self.sets,\n            \"deletes\": self.deletes,\n            \"errors\": self.errors,\n            \"avg_get_time_ms\": self.avg_get_time,\n            \"avg_set_time_ms\": self.avg_set_time,\n            \"uptime_seconds\": self.uptime,\n            \"start_time\": self.start_time,\n            \"last_reset\": self.last_reset,\n        }\n</code></pre> <p>Prometheus \u6307\u6807\u5bfc\u51fa\u5668</p> <p>\u5c06\u7f13\u5b58\u76d1\u63a7\u6307\u6807\u8f6c\u6362\u4e3a Prometheus \u683c\u5f0f\u3002</p> <p>\u652f\u6301\u7684\u6307\u6807\u7c7b\u578b\uff1a - Counter: \u7d2f\u79ef\u8ba1\u6570\u5668\uff08\u64cd\u4f5c\u6b21\u6570\uff09 - Gauge: \u77ac\u65f6\u503c\uff08\u7f13\u5b58\u5927\u5c0f\u3001\u547d\u4e2d\u7387\uff09 - Histogram: \u5206\u5e03\u7edf\u8ba1\uff08\u5ef6\u8fdf\u5206\u5e03\uff09</p> <p>\u4f7f\u7528\u793a\u4f8b\uff1a     &gt;&gt;&gt; exporter = PrometheusExporter(monitor)     &gt;&gt;&gt; metrics_text = exporter.generate_metrics()</p> Source code in <code>src/symphra_cache/monitoring/prometheus.py</code> <pre><code>class PrometheusExporter:\n    \"\"\"\n    Prometheus \u6307\u6807\u5bfc\u51fa\u5668\n\n    \u5c06\u7f13\u5b58\u76d1\u63a7\u6307\u6807\u8f6c\u6362\u4e3a Prometheus \u683c\u5f0f\u3002\n\n    \u652f\u6301\u7684\u6307\u6807\u7c7b\u578b\uff1a\n    - Counter: \u7d2f\u79ef\u8ba1\u6570\u5668\uff08\u64cd\u4f5c\u6b21\u6570\uff09\n    - Gauge: \u77ac\u65f6\u503c\uff08\u7f13\u5b58\u5927\u5c0f\u3001\u547d\u4e2d\u7387\uff09\n    - Histogram: \u5206\u5e03\u7edf\u8ba1\uff08\u5ef6\u8fdf\u5206\u5e03\uff09\n\n    \u4f7f\u7528\u793a\u4f8b\uff1a\n        &gt;&gt;&gt; exporter = PrometheusExporter(monitor)\n        &gt;&gt;&gt; metrics_text = exporter.generate_metrics()\n    \"\"\"\n\n    def __init__(\n        self,\n        monitor: CacheMonitor,\n        namespace: str = \"symphra_cache\",\n        subsystem: str = \"cache\",\n        labels: dict[str, str] | None = None,\n    ) -&gt; None:\n        \"\"\"\n        \u521d\u59cb\u5316 Prometheus \u5bfc\u51fa\u5668\n\n        Args:\n            monitor: \u7f13\u5b58\u76d1\u63a7\u5668\n            namespace: \u6307\u6807\u547d\u540d\u7a7a\u95f4\n            subsystem: \u5b50\u7cfb\u7edf\u540d\u79f0\n            labels: \u5168\u5c40\u6807\u7b7e\n        \"\"\"\n        self.monitor = monitor\n        self.namespace = namespace\n        self.subsystem = subsystem\n        self.labels = labels or {}\n        self._start_time = time.time()\n\n    def _format_labels(self, extra_labels: dict[str, str] | None = None) -&gt; str:\n        \"\"\"\n        \u683c\u5f0f\u5316\u6807\u7b7e\n\n        Args:\n            extra_labels: \u989d\u5916\u6807\u7b7e\n\n        Returns:\n            \u683c\u5f0f\u5316\u7684\u6807\u7b7e\u5b57\u7b26\u4e32\n        \"\"\"\n        all_labels = self.labels.copy()\n        if extra_labels:\n            all_labels.update(extra_labels)\n\n        if not all_labels:\n            return \"\"\n\n        label_strs = []\n        for key, value in all_labels.items():\n            # \u8f6c\u4e49\u7279\u6b8a\u5b57\u7b26\n            escaped_value = str(value).replace('\"', '\\\\\"').replace(\"\\n\", \"\\\\n\")\n            label_strs.append(f'{key}=\"{escaped_value}\"')\n\n        return \"{\" + \",\".join(label_strs) + \"}\"\n\n    def _generate_counter_metrics(self) -&gt; str:\n        \"\"\"\n        \u751f\u6210 Counter \u6307\u6807\n\n        Returns:\n            Counter \u6307\u6807\u6587\u672c\n        \"\"\"\n        metrics = self.monitor.metrics\n        lines = []\n\n        # \u64cd\u4f5c\u8ba1\u6570\u5668\n        lines.append(f\"# HELP {self._metric_name('operations_total')} Total cache operations\")\n        lines.append(f\"# TYPE {self._metric_name('operations_total')} counter\")\n\n        operations = [\n            (\"get\", metrics.get_count),\n            (\"set\", metrics.set_count),\n            (\"delete\", metrics.delete_count),\n            (\"hit\", metrics.hit_count),\n            (\"miss\", metrics.miss_count),\n        ]\n\n        for operation, count in operations:\n            if count &gt; 0:\n                labels = self._format_labels({\"operation\": operation})\n                lines.append(f\"{self._metric_name('operations_total')}{labels} {count}\")\n\n        return \"\\n\".join(lines)\n\n    def _generate_gauge_metrics(self) -&gt; str:\n        \"\"\"\n        \u751f\u6210 Gauge \u6307\u6807\n\n        Returns:\n            Gauge \u6307\u6807\u6587\u672c\n        \"\"\"\n        metrics = self.monitor.metrics\n        lines = []\n\n        # \u7f13\u5b58\u5927\u5c0f\n        lines.append(f\"# HELP {self._metric_name('size')} Current cache size\")\n        lines.append(f\"# TYPE {self._metric_name('size')} gauge\")\n        try:\n            cache_size = len(self.monitor.cache)\n            lines.append(f\"{self._metric_name('size')}{self._format_labels()} {cache_size}\")\n        except Exception:\n            lines.append(f\"{self._metric_name('size')}{self._format_labels()} 0\")\n\n        # \u547d\u4e2d\u7387\n        lines.append(f\"# HELP {self._metric_name('hit_rate')} Cache hit rate\")\n        lines.append(f\"# TYPE {self._metric_name('hit_rate')} gauge\")\n        hit_rate = metrics.get_hit_rate()\n        lines.append(f\"{self._metric_name('hit_rate')}{self._format_labels()} {hit_rate}\")\n\n        # \u8fd0\u884c\u65f6\u95f4\n        lines.append(f\"# HELP {self._metric_name('uptime_seconds')} Cache uptime in seconds\")\n        lines.append(f\"# TYPE {self._metric_name('uptime_seconds')} gauge\")\n        uptime = time.time() - self._start_time\n        lines.append(f\"{self._metric_name('uptime_seconds')}{self._format_labels()} {uptime}\")\n\n        return \"\\n\".join(lines)\n\n    def _generate_histogram_metrics(self) -&gt; str:\n        \"\"\"\n        \u751f\u6210 Histogram \u6307\u6807\n\n        Returns:\n            Histogram \u6307\u6807\u6587\u672c\n        \"\"\"\n        metrics = self.monitor.metrics\n        lines = []\n\n        # GET \u64cd\u4f5c\u5ef6\u8fdf\u5206\u5e03\n        lines.append(\n            f\"# HELP {self._metric_name('get_duration_seconds')} Time spent on GET operations\"\n        )\n        lines.append(f\"# TYPE {self._metric_name('get_duration_seconds')} histogram\")\n\n        # Prometheus histogram buckets (\u79d2)\n        buckets = [0.001, 0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1.0, 2.5, 5.0, 10.0]\n\n        get_count = metrics.get_count\n        if get_count &gt; 0:\n            avg_latency = metrics.get_average_latency(\"get\") / 1000  # \u8f6c\u6362\u4e3a\u79d2\n\n            # \u751f\u6210 bucket \u8ba1\u6570\uff08\u7b80\u5316\u5b9e\u73b0\uff09\n            for bucket in buckets:\n                # \u5047\u8bbe\u6b63\u6001\u5206\u5e03\uff0c\u8ba1\u7b97 bucket \u5185\u7684\u8bf7\u6c42\u6570\n                bucket_count = int(\n                    get_count * self._normal_cdf(bucket, avg_latency, avg_latency * 0.5)\n                )\n                labels = self._format_labels({\"le\": str(bucket)})\n                lines.append(\n                    f\"{self._metric_name('get_duration_seconds')}_bucket{labels} {bucket_count}\"\n                )\n\n            # \u603b\u8ba1\u6570\u548c\u603b\u548c\n            lines.append(\n                f\"{self._metric_name('get_duration_seconds')}_count{self._format_labels()} {get_count}\"\n            )\n            lines.append(\n                f\"{self._metric_name('get_duration_seconds')}_sum{self._format_labels()} {avg_latency * get_count}\"\n            )\n\n        # SET \u64cd\u4f5c\u5ef6\u8fdf\u5206\u5e03\n        lines.append(\n            f\"# HELP {self._metric_name('set_duration_seconds')} Time spent on SET operations\"\n        )\n        lines.append(f\"# TYPE {self._metric_name('set_duration_seconds')} histogram\")\n\n        set_count = metrics.set_count\n        if set_count &gt; 0:\n            avg_latency = metrics.get_average_latency(\"set\") / 1000\n\n            for bucket in buckets:\n                bucket_count = int(\n                    set_count * self._normal_cdf(bucket, avg_latency, avg_latency * 0.5)\n                )\n                labels = self._format_labels({\"le\": str(bucket)})\n                lines.append(\n                    f\"{self._metric_name('set_duration_seconds')}_bucket{labels} {bucket_count}\"\n                )\n\n            lines.append(\n                f\"{self._metric_name('set_duration_seconds')}_count{self._format_labels()} {set_count}\"\n            )\n            lines.append(\n                f\"{self._metric_name('set_duration_seconds')}_sum{self._format_labels()} {avg_latency * set_count}\"\n            )\n\n        return \"\\n\".join(lines)\n\n    def _normal_cdf(self, x: float, mean: float, std: float) -&gt; float:\n        \"\"\"\n        \u6b63\u6001\u5206\u5e03\u7d2f\u79ef\u5206\u5e03\u51fd\u6570\uff08\u7b80\u5316\u5b9e\u73b0\uff09\n\n        Args:\n            x: \u8f93\u5165\u503c\n            mean: \u5747\u503c\n            std: \u6807\u51c6\u5dee\n\n        Returns:\n            CDF \u503c\n        \"\"\"\n        import math\n\n        return 0.5 * (1 + math.erf((x - mean) / (std * math.sqrt(2))))\n\n    def _metric_name(self, name: str) -&gt; str:\n        \"\"\"\n        \u751f\u6210\u5b8c\u6574\u7684\u6307\u6807\u540d\u79f0\n\n        Args:\n            name: \u6307\u6807\u540d\u79f0\n\n        Returns:\n            \u5b8c\u6574\u7684\u6307\u6807\u540d\u79f0\n        \"\"\"\n        parts = []\n        if self.namespace:\n            parts.append(self.namespace)\n        if self.subsystem:\n            parts.append(self.subsystem)\n        parts.append(name)\n        return \"_\".join(parts)\n\n    def generate_metrics(self) -&gt; str:\n        \"\"\"\n        \u751f\u6210 Prometheus \u683c\u5f0f\u7684\u6307\u6807\u6587\u672c\n\n        Returns:\n            Prometheus \u6307\u6807\u6587\u672c\n        \"\"\"\n        if not self.monitor.is_enabled():\n            return \"# Cache monitoring is disabled\"\n\n        lines = []\n\n        # \u6dfb\u52a0\u5143\u4fe1\u606f\n        lines.append(f\"# Symphra Cache Metrics - {time.strftime('%Y-%m-%d %H:%M:%S')}\")\n        lines.append(\"# Generated by PrometheusExporter\")\n        lines.append(\"\")\n\n        # \u751f\u6210\u4e0d\u540c\u7c7b\u578b\u7684\u6307\u6807\n        lines.append(self._generate_counter_metrics())\n        lines.append(\"\")\n        lines.append(self._generate_gauge_metrics())\n        lines.append(\"\")\n        lines.append(self._generate_histogram_metrics())\n\n        return \"\\n\".join(lines)\n\n    def get_metrics_handler(self) -&gt; Callable[[], str]:\n        \"\"\"\n        \u83b7\u53d6\u6307\u6807\u5904\u7406\u5668\u51fd\u6570\n\n        Returns:\n            \u8fd4\u56de\u6307\u6807\u6587\u672c\u7684\u51fd\u6570\n        \"\"\"\n        return self.generate_metrics\n\n    def create_pushgateway_client(\n        self,\n        gateway_url: str,\n        job_name: str,\n        instance: str = \"\",\n    ) -&gt; PrometheusPushgatewayClient:\n        \"\"\"\n        \u521b\u5efa Pushgateway \u5ba2\u6237\u7aef\n\n        Args:\n            gateway_url: Pushgateway URL\n            job_name: \u4f5c\u4e1a\u540d\u79f0\n            instance: \u5b9e\u4f8b\u6807\u8bc6\u7b26\n\n        Returns:\n            Pushgateway \u5ba2\u6237\u7aef\n        \"\"\"\n        return PrometheusPushgatewayClient(\n            exporter=self,\n            gateway_url=gateway_url,\n            job_name=job_name,\n            instance=instance or self._get_default_instance(),\n        )\n\n    def _get_default_instance(self) -&gt; str:\n        \"\"\"\n        \u83b7\u53d6\u9ed8\u8ba4\u5b9e\u4f8b\u6807\u8bc6\u7b26\n\n        Returns:\n            \u5b9e\u4f8b\u6807\u8bc6\u7b26\n        \"\"\"\n        import os\n        import socket\n\n        hostname = socket.gethostname()\n        pid = os.getpid()\n        return f\"{hostname}:{pid}\"\n\n    def update_labels(self, labels: dict[str, str]) -&gt; None:\n        \"\"\"\n        \u66f4\u65b0\u5168\u5c40\u6807\u7b7e\n\n        Args:\n            labels: \u65b0\u7684\u6807\u7b7e\u5b57\u5178\n        \"\"\"\n        self.labels.update(labels)\n</code></pre> <p>StatsD \u6307\u6807\u5bfc\u51fa\u5668</p> <p>\u5c06\u7f13\u5b58\u76d1\u63a7\u6307\u6807\u8f6c\u6362\u4e3a StatsD \u683c\u5f0f\u5e76\u901a\u8fc7 UDP \u53d1\u9001\u3002</p> <p>\u652f\u6301\u7684\u6307\u6807\u7c7b\u578b\uff1a - Counter: \u8ba1\u6570\u5668\uff08\u64cd\u4f5c\u6b21\u6570\uff09 - Timer: \u8ba1\u65f6\u5668\uff08\u5ef6\u8fdf\uff09 - Gauge: \u77ac\u65f6\u503c\uff08\u7f13\u5b58\u5927\u5c0f\u3001\u547d\u4e2d\u7387\uff09</p> <p>\u4f7f\u7528\u793a\u4f8b\uff1a     &gt;&gt;&gt; exporter = StatsDExporter(monitor, host=\"localhost\", port=8125)     &gt;&gt;&gt; await exporter.send_metrics()</p> Source code in <code>src/symphra_cache/monitoring/statsd.py</code> <pre><code>class StatsDExporter:\n    \"\"\"\n    StatsD \u6307\u6807\u5bfc\u51fa\u5668\n\n    \u5c06\u7f13\u5b58\u76d1\u63a7\u6307\u6807\u8f6c\u6362\u4e3a StatsD \u683c\u5f0f\u5e76\u901a\u8fc7 UDP \u53d1\u9001\u3002\n\n    \u652f\u6301\u7684\u6307\u6807\u7c7b\u578b\uff1a\n    - Counter: \u8ba1\u6570\u5668\uff08\u64cd\u4f5c\u6b21\u6570\uff09\n    - Timer: \u8ba1\u65f6\u5668\uff08\u5ef6\u8fdf\uff09\n    - Gauge: \u77ac\u65f6\u503c\uff08\u7f13\u5b58\u5927\u5c0f\u3001\u547d\u4e2d\u7387\uff09\n\n    \u4f7f\u7528\u793a\u4f8b\uff1a\n        &gt;&gt;&gt; exporter = StatsDExporter(monitor, host=\"localhost\", port=8125)\n        &gt;&gt;&gt; await exporter.send_metrics()\n    \"\"\"\n\n    def __init__(\n        self,\n        monitor: CacheMonitor,\n        host: str = \"localhost\",\n        port: int = 8125,\n        prefix: str = \"symphra.cache\",\n        sample_rate: float = 1.0,\n        protocol: str = \"udp\",\n        batch_size: int = 10,\n    ) -&gt; None:\n        \"\"\"\n        \u521d\u59cb\u5316 StatsD \u5bfc\u51fa\u5668\n\n        Args:\n            monitor: \u7f13\u5b58\u76d1\u63a7\u5668\n            host: StatsD \u670d\u52a1\u5668\u4e3b\u673a\n            port: StatsD \u670d\u52a1\u5668\u7aef\u53e3\n            prefix: \u6307\u6807\u524d\u7f00\n            sample_rate: \u91c7\u6837\u7387 (0.0-1.0)\n            protocol: \u4f20\u8f93\u534f\u8bae (\"udp\", \"tcp\")\n            batch_size: \u6279\u91cf\u53d1\u9001\u5927\u5c0f\n        \"\"\"\n        self.monitor = monitor\n        self.host = host\n        self.port = port\n        self.prefix = prefix\n        self.sample_rate = max(0.0, min(1.0, sample_rate))  # \u786e\u4fdd\u5728\u6709\u6548\u8303\u56f4\u5185\n        self.protocol = protocol.lower()\n        self.batch_size = batch_size\n        self._socket: socket.socket | None = None\n        self._tcp_writer: asyncio.StreamWriter | None = None\n        self._tcp_reader: asyncio.StreamReader | None = None\n        self._is_connected = False\n        self._pending_metrics: list[str] = []\n        self._lock = asyncio.Lock()\n\n    async def connect(self) -&gt; None:\n        \"\"\"\n        \u5efa\u7acb\u5230 StatsD \u670d\u52a1\u5668\u7684\u8fde\u63a5\n        \"\"\"\n        if self._is_connected:\n            return\n\n        try:\n            if self.protocol == \"udp\":\n                self._socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n                self._socket.setblocking(False)\n            elif self.protocol == \"tcp\":\n                reader, writer = await asyncio.open_connection(self.host, self.port)\n                self._tcp_reader = reader\n                self._tcp_writer = writer\n            else:\n                raise ValueError(f\"\u4e0d\u652f\u6301\u7684\u534f\u8bae: {self.protocol}\")\n\n            self._is_connected = True\n\n        except Exception as e:\n            print(f\"\u8fde\u63a5 StatsD \u670d\u52a1\u5668\u5931\u8d25: {e}\")\n            self._is_connected = False\n\n    async def disconnect(self) -&gt; None:\n        \"\"\"\n        \u65ad\u5f00\u8fde\u63a5\n        \"\"\"\n        if self.protocol == \"udp\" and self._socket:\n            self._socket.close()\n        elif self.protocol == \"tcp\" and self._tcp_writer:\n            self._tcp_writer.close()\n            await self._tcp_writer.wait_closed()\n\n        self._is_connected = False\n        self._socket = None\n        self._tcp_writer = None\n        self._tcp_reader = None\n\n    def _format_metric_name(self, name: str) -&gt; str:\n        \"\"\"\n        \u683c\u5f0f\u5316\u6307\u6807\u540d\u79f0\n\n        Args:\n            name: \u539f\u59cb\u6307\u6807\u540d\u79f0\n\n        Returns:\n            \u683c\u5f0f\u5316\u7684\u6307\u6807\u540d\u79f0\n        \"\"\"\n        return f\"{self.prefix}.{name}\"\n\n    def _generate_counter_metrics(self) -&gt; list[str]:\n        \"\"\"\n        \u751f\u6210\u8ba1\u6570\u5668\u6307\u6807\n\n        Returns:\n            \u8ba1\u6570\u5668\u6307\u6807\u5217\u8868\n        \"\"\"\n        metrics = self.monitor.metrics\n        metric_lines = []\n\n        # \u64cd\u4f5c\u8ba1\u6570\u5668\n        operations = [\n            (\"get\", metrics.get_count),\n            (\"set\", metrics.set_count),\n            (\"delete\", metrics.delete_count),\n            (\"hit\", metrics.hit_count),\n            (\"miss\", metrics.miss_count),\n        ]\n\n        for operation, count in operations:\n            if count &gt; 0:\n                metric_name = self._format_metric_name(f\"operations.{operation}\")\n                metric_lines.append(f\"{metric_name}:{count}|c\")\n\n        return metric_lines\n\n    def _generate_timer_metrics(self) -&gt; list[str]:\n        \"\"\"\n        \u751f\u6210\u8ba1\u65f6\u5668\u6307\u6807\n\n        Returns:\n            \u8ba1\u65f6\u5668\u6307\u6807\u5217\u8868\n        \"\"\"\n        metrics = self.monitor.metrics\n        metric_lines = []\n\n        # GET \u64cd\u4f5c\u5ef6\u8fdf\n        if metrics.get_count &gt; 0:\n            avg_latency = metrics.get_average_latency(\"get\")\n            min_latency = metrics.get_latency_stats(\"get\")[\"min\"]\n            max_latency = metrics.get_latency_stats(\"get\")[\"max\"]\n\n            metric_lines.extend(\n                [\n                    f\"{self._format_metric_name('get.latency.avg')}:{avg_latency:.3f}|ms\",\n                    f\"{self._format_metric_name('get.latency.min')}:{min_latency:.3f}|ms\",\n                    f\"{self._format_metric_name('get.latency.max')}:{max_latency:.3f}|ms\",\n                ]\n            )\n\n        # SET \u64cd\u4f5c\u5ef6\u8fdf\n        if metrics.set_count &gt; 0:\n            avg_latency = metrics.get_average_latency(\"set\")\n            min_latency = metrics.get_latency_stats(\"set\")[\"min\"]\n            max_latency = metrics.get_latency_stats(\"set\")[\"max\"]\n\n            metric_lines.extend(\n                [\n                    f\"{self._format_metric_name('set.latency.avg')}:{avg_latency:.3f}|ms\",\n                    f\"{self._format_metric_name('set.latency.min')}:{min_latency:.3f}|ms\",\n                    f\"{self._format_metric_name('set.latency.max')}:{max_latency:.3f}|ms\",\n                ]\n            )\n\n        return metric_lines\n\n    def _generate_gauge_metrics(self) -&gt; list[str]:\n        \"\"\"\n        \u751f\u6210 Gauge \u6307\u6807\n\n        Returns:\n            Gauge \u6307\u6807\u5217\u8868\n        \"\"\"\n        metrics = self.monitor.metrics\n        metric_lines = []\n\n        # \u7f13\u5b58\u5927\u5c0f\n        try:\n            cache_size = len(self.monitor.cache)\n            metric_lines.append(f\"{self._format_metric_name('size')}:{cache_size}|g\")\n        except Exception:\n            metric_lines.append(f\"{self._format_metric_name('size')}:0|g\")\n\n        # \u547d\u4e2d\u7387\n        hit_rate = metrics.get_hit_rate()\n        metric_lines.append(f\"{self._format_metric_name('hit_rate')}:{hit_rate:.3f}|g\")\n\n        # \u603b\u64cd\u4f5c\u6570\n        total_ops = metrics.get_total_operations()\n        metric_lines.append(f\"{self._format_metric_name('operations.total')}:{total_ops}|g\")\n\n        return metric_lines\n\n    async def _send_udp_metrics(self, metric_lines: list[str]) -&gt; bool:\n        \"\"\"\n        \u901a\u8fc7 UDP \u53d1\u9001\u6307\u6807\n\n        Args:\n            metric_lines: \u6307\u6807\u884c\u5217\u8868\n\n        Returns:\n            \u53d1\u9001\u662f\u5426\u6210\u529f\n        \"\"\"\n        if not self._socket or not self._is_connected:\n            return False\n\n        try:\n            # \u5408\u5e76\u6307\u6807\u4e3a\u5355\u4e2a\u6570\u636e\u62a5\uff08\u6ce8\u610f UDP \u6570\u636e\u62a5\u5927\u5c0f\u9650\u5236\uff09\n            for i in range(0, len(metric_lines), 10):  # \u6bcf10\u4e2a\u6307\u6807\u4e00\u4e2a\u6570\u636e\u62a5\n                batch = metric_lines[i : i + 10]\n                if not batch:\n                    continue\n\n                message = \"\\n\".join(batch).encode(\"utf-8\")\n\n                # \u68c0\u67e5\u6570\u636e\u62a5\u5927\u5c0f\uff08\u901a\u5e38\u9650\u5236\u4e3a 1500 \u5b57\u8282\uff09\n                if len(message) &gt; 1400:  # \u7559\u4e00\u4e9b\u4f59\u91cf\n                    # \u5206\u5272\u5927\u6570\u636e\u62a5\n                    for line in batch:\n                        if len(line.encode(\"utf-8\")) &lt;= 1400:\n                            await asyncio.get_event_loop().sock_sendto(\n                                self._socket, line.encode(\"utf-8\"), (self.host, self.port)\n                            )\n                else:\n                    await asyncio.get_event_loop().sock_sendto(\n                        self._socket, message, (self.host, self.port)\n                    )\n\n            return True\n\n        except Exception as e:\n            print(f\"UDP \u53d1\u9001\u5931\u8d25: {e}\")\n            return False\n\n    async def _send_tcp_metrics(self, metric_lines: list[str]) -&gt; bool:\n        \"\"\"\n        \u901a\u8fc7 TCP \u53d1\u9001\u6307\u6807\n\n        Args:\n            metric_lines: \u6307\u6807\u884c\u5217\u8868\n\n        Returns:\n            \u53d1\u9001\u662f\u5426\u6210\u529f\n        \"\"\"\n        if not self._tcp_writer or not self._is_connected:\n            return False\n\n        try:\n            # \u5408\u5e76\u6307\u6807\u4e3a\u5355\u4e2a\u6d88\u606f\n            message = \"\\n\".join(metric_lines).encode(\"utf-8\") + b\"\\n\"\n            self._tcp_writer.write(message)\n            await self._tcp_writer.drain()\n            return True\n\n        except Exception as e:\n            print(f\"TCP \u53d1\u9001\u5931\u8d25: {e}\")\n            return False\n\n    async def send_metrics(self, metric_lines: list[str] | None = None) -&gt; bool:\n        \"\"\"\n        \u53d1\u9001\u6307\u6807\u5230 StatsD \u670d\u52a1\u5668\n\n        Args:\n            metric_lines: \u8981\u53d1\u9001\u7684\u6307\u6807\u884c\u5217\u8868\uff0cNone \u8868\u793a\u53d1\u9001\u6240\u6709\u6307\u6807\n\n        Returns:\n            \u53d1\u9001\u662f\u5426\u6210\u529f\n        \"\"\"\n        if not self.monitor.is_enabled():\n            return True\n\n        if metric_lines is None:\n            metric_lines = self.generate_all_metrics()\n\n        if not metric_lines:\n            return True\n\n        # \u5efa\u7acb\u8fde\u63a5\n        if not self._is_connected:\n            await self.connect()\n            if not self._is_connected:\n                return False\n\n        # \u5e94\u7528\u91c7\u6837\u7387\n        if self.sample_rate &lt; 1.0:\n            import random\n\n            metric_lines = [line for line in metric_lines if random.random() &lt; self.sample_rate]\n\n        try:\n            if self.protocol == \"udp\":\n                return await self._send_udp_metrics(metric_lines)\n            else:\n                return await self._send_tcp_metrics(metric_lines)\n\n        except Exception as e:\n            print(f\"\u53d1\u9001\u6307\u6807\u5931\u8d25: {e}\")\n            await self.disconnect()\n            return False\n\n    def generate_all_metrics(self) -&gt; list[str]:\n        \"\"\"\n        \u751f\u6210\u6240\u6709\u6307\u6807\n\n        Returns:\n            \u6307\u6807\u884c\u5217\u8868\n        \"\"\"\n        all_metrics = []\n        all_metrics.extend(self._generate_counter_metrics())\n        all_metrics.extend(self._generate_timer_metrics())\n        all_metrics.extend(self._generate_gauge_metrics())\n        return all_metrics\n\n    async def schedule_periodic_send(self, interval: float = 30.0) -&gt; None:\n        \"\"\"\n        \u5b89\u6392\u5468\u671f\u6027\u53d1\u9001\u6307\u6807\n\n        Args:\n            interval: \u53d1\u9001\u95f4\u9694\uff08\u79d2\uff09\n        \"\"\"\n        while True:\n            try:\n                await asyncio.sleep(interval)\n                await self.send_metrics()\n            except asyncio.CancelledError:\n                break\n            except Exception as e:\n                print(f\"\u5468\u671f\u6027\u53d1\u9001\u5931\u8d25: {e}\")\n\n    def add_custom_metric(self, name: str, value: float, metric_type: str = \"g\") -&gt; None:\n        \"\"\"\n        \u6dfb\u52a0\u81ea\u5b9a\u4e49\u6307\u6807\n\n        Args:\n            name: \u6307\u6807\u540d\u79f0\n            value: \u6307\u6807\u503c\n            metric_type: \u6307\u6807\u7c7b\u578b (\"c\", \"g\", \"ms\")\n        \"\"\"\n        metric_line = f\"{self._format_metric_name(name)}:{value}|{metric_type}\"\n        self._pending_metrics.append(metric_line)\n\n    async def flush_pending_metrics(self) -&gt; bool:\n        \"\"\"\n        \u5237\u65b0\u5f85\u53d1\u9001\u7684\u6307\u6807\n\n        Returns:\n            \u5237\u65b0\u662f\u5426\u6210\u529f\n        \"\"\"\n        if not self._pending_metrics:\n            return True\n\n        success = await self.send_metrics(self._pending_metrics)\n        if success:\n            self._pending_metrics.clear()\n\n        return success\n\n    def get_connection_status(self) -&gt; dict[str, Any]:\n        \"\"\"\n        \u83b7\u53d6\u8fde\u63a5\u72b6\u6001\n\n        Returns:\n            \u8fde\u63a5\u72b6\u6001\u4fe1\u606f\n        \"\"\"\n        return {\n            \"connected\": self._is_connected,\n            \"protocol\": self.protocol,\n            \"host\": self.host,\n            \"port\": self.port,\n            \"pending_metrics\": len(self._pending_metrics),\n        }\n\n    async def __aenter__(self) -&gt; StatsDExporter:\n        \"\"\"\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5165\u53e3\"\"\"\n        await self.connect()\n        return self\n\n    async def __aexit__(\n        self,\n        exc_type: type[BaseException] | None,\n        exc_val: BaseException | None,\n        exc_tb: Any | None,\n    ) -&gt; None:\n        \"\"\"\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u51fa\u53e3\"\"\"\n        await self.disconnect()\n\n    def __del__(self) -&gt; None:\n        \"\"\"\u6790\u6784\u51fd\u6570\"\"\"\n        if self._socket:\n            self._socket.close()\n</code></pre>"},{"location":"zh/api/monitoring/#symphra_cache.monitor.CacheMonitor.metrics","title":"<code>metrics</code>  <code>property</code>","text":"<p>\u63d0\u4f9b\u4e0e\u5bfc\u51fa\u5668\u517c\u5bb9\u7684\u6307\u6807\u63a5\u53e3</p>"},{"location":"zh/api/monitoring/#symphra_cache.monitor.CacheMonitor.__init__","title":"<code>__init__(cache_manager, *, enabled=True)</code>","text":"<p>\u521d\u59cb\u5316\u76d1\u63a7\u5668</p> <p>Parameters:</p> Name Type Description Default <code>cache_manager</code> <code>CacheManager</code> <p>\u7f13\u5b58\u7ba1\u7406\u5668\u5b9e\u4f8b</p> required <code>enabled</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528\u76d1\u63a7\uff08\u7981\u7528\u65f6\u6027\u80fd\u5f00\u9500\u4e3a\u96f6\uff09</p> <code>True</code> Source code in <code>src/symphra_cache/monitor.py</code> <pre><code>def __init__(self, cache_manager: CacheManager, *, enabled: bool = True) -&gt; None:\n    \"\"\"\n    \u521d\u59cb\u5316\u76d1\u63a7\u5668\n\n    Args:\n        cache_manager: \u7f13\u5b58\u7ba1\u7406\u5668\u5b9e\u4f8b\n        enabled: \u662f\u5426\u542f\u7528\u76d1\u63a7\uff08\u7981\u7528\u65f6\u6027\u80fd\u5f00\u9500\u4e3a\u96f6\uff09\n    \"\"\"\n    self._cache = cache_manager\n    # \u4e3a\u517c\u5bb9\u5bfc\u51fa\u5668\uff0c\u516c\u5f00 cache \u5c5e\u6027\n    self.cache = cache_manager\n\n    self._enabled = enabled\n    self._stats = CacheStats()\n    self._lock = threading.RLock()\n\n    # \u8bb0\u5f55\u5ef6\u8fdf\u7684 min/max\uff08\u6beb\u79d2\uff09\u4ee5\u4f9b\u5bfc\u51fa\u5668\u4f7f\u7528\n    self._latency_min: dict[str, float] = {}\n    self._latency_max: dict[str, float] = {}\n\n    # \u5982\u679c\u542f\u7528\uff0c\u66ff\u6362\u7f13\u5b58\u7ba1\u7406\u5668\u7684\u65b9\u6cd5\n    if self._enabled:\n        self._wrap_cache_methods()\n</code></pre>"},{"location":"zh/api/monitoring/#symphra_cache.monitor.CacheMonitor.__repr__","title":"<code>__repr__()</code>","text":"<p>\u5b57\u7b26\u4e32\u8868\u793a</p> Source code in <code>src/symphra_cache/monitor.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"\u5b57\u7b26\u4e32\u8868\u793a\"\"\"\n    stats = self.get_stats()\n    return (\n        f\"CacheMonitor(enabled={self._enabled}, \"\n        f\"hit_rate={stats.hit_rate:.2%}, \"\n        f\"operations={stats.gets + stats.sets + stats.deletes}, \"\n        f\"errors={stats.errors})\"\n    )\n</code></pre>"},{"location":"zh/api/monitoring/#symphra_cache.monitor.CacheMonitor.check_health","title":"<code>check_health()</code>","text":"<p>\u6267\u884c\u5065\u5eb7\u68c0\u67e5</p> <p>Returns:</p> Type Description <code>dict</code> <p>\u5065\u5eb7\u68c0\u67e5\u7ed3\u679c\u5b57\u5178</p> <p>\u793a\u4f8b\uff1a     &gt;&gt;&gt; health = monitor.check_health()     &gt;&gt;&gt; if health[\"healthy\"]:     ...     print(\"\u7f13\u5b58\u5065\u5eb7\")</p> Source code in <code>src/symphra_cache/monitor.py</code> <pre><code>def check_health(self) -&gt; dict:\n    \"\"\"\n    \u6267\u884c\u5065\u5eb7\u68c0\u67e5\n\n    Returns:\n        \u5065\u5eb7\u68c0\u67e5\u7ed3\u679c\u5b57\u5178\n\n    \u793a\u4f8b\uff1a\n        &gt;&gt;&gt; health = monitor.check_health()\n        &gt;&gt;&gt; if health[\"healthy\"]:\n        ...     print(\"\u7f13\u5b58\u5065\u5eb7\")\n    \"\"\"\n    try:\n        # \u6d4b\u8bd5\u57fa\u672c\u64cd\u4f5c\n        test_key = \"__health_check__\"\n        test_value = f\"health_check_{time.time()}\"\n\n        # \u6d4b\u8bd5\u5199\u5165\n        self._cache.set(test_key, test_value, ttl=1)\n\n        # \u6d4b\u8bd5\u8bfb\u53d6\n        result = self._cache.get(test_key)\n        read_ok = result == test_value\n\n        # \u6e05\u7406\n        self._cache.delete(test_key)\n\n        # \u83b7\u53d6\u540e\u7aef\u5065\u5eb7\u72b6\u6001\n        backend_healthy = self._cache.backend.check_health()\n\n        return {\n            \"healthy\": read_ok and backend_healthy,\n            \"backend_healthy\": backend_healthy,\n            \"test_passed\": read_ok,\n            \"timestamp\": time.time(),\n        }\n    except Exception as e:\n        return {\n            \"healthy\": False,\n            \"backend_healthy\": False,\n            \"test_passed\": False,\n            \"error\": str(e),\n            \"timestamp\": time.time(),\n        }\n</code></pre>"},{"location":"zh/api/monitoring/#symphra_cache.monitor.CacheMonitor.get_stats","title":"<code>get_stats()</code>","text":"<p>\u83b7\u53d6\u7edf\u8ba1\u4fe1\u606f</p> <p>Returns:</p> Type Description <code>CacheStats</code> <p>CacheStats \u5bf9\u8c61\uff08\u526f\u672c\uff09</p> <p>\u793a\u4f8b\uff1a     &gt;&gt;&gt; stats = monitor.get_stats()     &gt;&gt;&gt; print(f\"\u547d\u4e2d\u7387: {stats.hit_rate:.2%}\")     &gt;&gt;&gt; print(f\"\u5e73\u5747\u54cd\u5e94\u65f6\u95f4: {stats.avg_get_time:.2f}ms\")</p> Source code in <code>src/symphra_cache/monitor.py</code> <pre><code>def get_stats(self) -&gt; CacheStats:\n    \"\"\"\n    \u83b7\u53d6\u7edf\u8ba1\u4fe1\u606f\n\n    Returns:\n        CacheStats \u5bf9\u8c61\uff08\u526f\u672c\uff09\n\n    \u793a\u4f8b\uff1a\n        &gt;&gt;&gt; stats = monitor.get_stats()\n        &gt;&gt;&gt; print(f\"\u547d\u4e2d\u7387: {stats.hit_rate:.2%}\")\n        &gt;&gt;&gt; print(f\"\u5e73\u5747\u54cd\u5e94\u65f6\u95f4: {stats.avg_get_time:.2f}ms\")\n    \"\"\"\n    with self._lock:\n        # \u8fd4\u56de\u526f\u672c\n        return CacheStats(\n            hits=self._stats.hits,\n            misses=self._stats.misses,\n            gets=self._stats.gets,\n            sets=self._stats.sets,\n            deletes=self._stats.deletes,\n            errors=self._stats.errors,\n            total_get_time=self._stats.total_get_time,\n            total_set_time=self._stats.total_set_time,\n            start_time=self._stats.start_time,\n            last_reset=self._stats.last_reset,\n        )\n</code></pre>"},{"location":"zh/api/monitoring/#symphra_cache.monitor.CacheMonitor.get_summary","title":"<code>get_summary()</code>","text":"<p>\u83b7\u53d6\u76d1\u63a7\u6458\u8981</p> <p>\u8fd4\u56de\u7edf\u8ba1\u4fe1\u606f\u548c\u5065\u5eb7\u72b6\u6001\u7684\u6c47\u603b\u3002</p> <p>Returns:</p> Type Description <code>dict</code> <p>\u6458\u8981\u5b57\u5178</p> <p>\u793a\u4f8b\uff1a     &gt;&gt;&gt; summary = monitor.get_summary()     &gt;&gt;&gt; print(summary)</p> Source code in <code>src/symphra_cache/monitor.py</code> <pre><code>def get_summary(self) -&gt; dict:\n    \"\"\"\n    \u83b7\u53d6\u76d1\u63a7\u6458\u8981\n\n    \u8fd4\u56de\u7edf\u8ba1\u4fe1\u606f\u548c\u5065\u5eb7\u72b6\u6001\u7684\u6c47\u603b\u3002\n\n    Returns:\n        \u6458\u8981\u5b57\u5178\n\n    \u793a\u4f8b\uff1a\n        &gt;&gt;&gt; summary = monitor.get_summary()\n        &gt;&gt;&gt; print(summary)\n    \"\"\"\n    stats = self.get_stats()\n    health = self.check_health()\n\n    return {\n        \"stats\": stats.to_dict(),\n        \"health\": health,\n    }\n</code></pre>"},{"location":"zh/api/monitoring/#symphra_cache.monitor.CacheMonitor.is_enabled","title":"<code>is_enabled()</code>","text":"<p>\u662f\u5426\u542f\u7528\u76d1\u63a7\uff08\u4e3a\u5bfc\u51fa\u5668\u517c\u5bb9\u63d0\u4f9b\uff09</p> Source code in <code>src/symphra_cache/monitor.py</code> <pre><code>def is_enabled(self) -&gt; bool:\n    \"\"\"\u662f\u5426\u542f\u7528\u76d1\u63a7\uff08\u4e3a\u5bfc\u51fa\u5668\u517c\u5bb9\u63d0\u4f9b\uff09\"\"\"\n    return self._enabled\n</code></pre>"},{"location":"zh/api/monitoring/#symphra_cache.monitor.CacheMonitor.reset_stats","title":"<code>reset_stats()</code>","text":"<p>\u91cd\u7f6e\u7edf\u8ba1\u4fe1\u606f</p> <p>\u4fdd\u7559 start_time\uff0c\u66f4\u65b0 last_reset\u3002</p> \u793a\u4f8b <p>monitor.reset_stats()  # \u91cd\u65b0\u5f00\u59cb\u7edf\u8ba1</p> Source code in <code>src/symphra_cache/monitor.py</code> <pre><code>def reset_stats(self) -&gt; None:\n    \"\"\"\n    \u91cd\u7f6e\u7edf\u8ba1\u4fe1\u606f\n\n    \u4fdd\u7559 start_time\uff0c\u66f4\u65b0 last_reset\u3002\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; monitor.reset_stats()  # \u91cd\u65b0\u5f00\u59cb\u7edf\u8ba1\n    \"\"\"\n    with self._lock:\n        start_time = self._stats.start_time\n        self._stats = CacheStats(start_time=start_time)\n        # \u6e05\u7406\u5ef6\u8fdf\u7edf\u8ba1\n        self._latency_min.clear()\n        self._latency_max.clear()\n</code></pre>"},{"location":"zh/api/monitoring/#symphra_cache.monitor.CacheStats.avg_get_time","title":"<code>avg_get_time</code>  <code>property</code>","text":"<p>\u5e73\u5747 get \u64cd\u4f5c\u8017\u65f6\uff08\u6beb\u79d2\uff09</p>"},{"location":"zh/api/monitoring/#symphra_cache.monitor.CacheStats.avg_set_time","title":"<code>avg_set_time</code>  <code>property</code>","text":"<p>\u5e73\u5747 set \u64cd\u4f5c\u8017\u65f6\uff08\u6beb\u79d2\uff09</p>"},{"location":"zh/api/monitoring/#symphra_cache.monitor.CacheStats.hit_rate","title":"<code>hit_rate</code>  <code>property</code>","text":"<p>\u547d\u4e2d\u7387\uff080-1\uff09</p>"},{"location":"zh/api/monitoring/#symphra_cache.monitor.CacheStats.miss_rate","title":"<code>miss_rate</code>  <code>property</code>","text":"<p>\u672a\u547d\u4e2d\u7387(0-1)</p>"},{"location":"zh/api/monitoring/#symphra_cache.monitor.CacheStats.uptime","title":"<code>uptime</code>  <code>property</code>","text":"<p>\u8fd0\u884c\u65f6\u95f4\uff08\u79d2\uff09</p>"},{"location":"zh/api/monitoring/#symphra_cache.monitor.CacheStats.to_dict","title":"<code>to_dict()</code>","text":"<p>\u8f6c\u6362\u4e3a\u5b57\u5178</p> Source code in <code>src/symphra_cache/monitor.py</code> <pre><code>def to_dict(self) -&gt; dict:\n    \"\"\"\u8f6c\u6362\u4e3a\u5b57\u5178\"\"\"\n    return {\n        \"hits\": self.hits,\n        \"misses\": self.misses,\n        \"hit_rate\": self.hit_rate,\n        \"miss_rate\": self.miss_rate,\n        \"gets\": self.gets,\n        \"sets\": self.sets,\n        \"deletes\": self.deletes,\n        \"errors\": self.errors,\n        \"avg_get_time_ms\": self.avg_get_time,\n        \"avg_set_time_ms\": self.avg_set_time,\n        \"uptime_seconds\": self.uptime,\n        \"start_time\": self.start_time,\n        \"last_reset\": self.last_reset,\n    }\n</code></pre>"},{"location":"zh/api/monitoring/#symphra_cache.monitoring.prometheus.PrometheusExporter.__init__","title":"<code>__init__(monitor, namespace='symphra_cache', subsystem='cache', labels=None)</code>","text":"<p>\u521d\u59cb\u5316 Prometheus \u5bfc\u51fa\u5668</p> <p>Parameters:</p> Name Type Description Default <code>monitor</code> <code>CacheMonitor</code> <p>\u7f13\u5b58\u76d1\u63a7\u5668</p> required <code>namespace</code> <code>str</code> <p>\u6307\u6807\u547d\u540d\u7a7a\u95f4</p> <code>'symphra_cache'</code> <code>subsystem</code> <code>str</code> <p>\u5b50\u7cfb\u7edf\u540d\u79f0</p> <code>'cache'</code> <code>labels</code> <code>dict[str, str] | None</code> <p>\u5168\u5c40\u6807\u7b7e</p> <code>None</code> Source code in <code>src/symphra_cache/monitoring/prometheus.py</code> <pre><code>def __init__(\n    self,\n    monitor: CacheMonitor,\n    namespace: str = \"symphra_cache\",\n    subsystem: str = \"cache\",\n    labels: dict[str, str] | None = None,\n) -&gt; None:\n    \"\"\"\n    \u521d\u59cb\u5316 Prometheus \u5bfc\u51fa\u5668\n\n    Args:\n        monitor: \u7f13\u5b58\u76d1\u63a7\u5668\n        namespace: \u6307\u6807\u547d\u540d\u7a7a\u95f4\n        subsystem: \u5b50\u7cfb\u7edf\u540d\u79f0\n        labels: \u5168\u5c40\u6807\u7b7e\n    \"\"\"\n    self.monitor = monitor\n    self.namespace = namespace\n    self.subsystem = subsystem\n    self.labels = labels or {}\n    self._start_time = time.time()\n</code></pre>"},{"location":"zh/api/monitoring/#symphra_cache.monitoring.prometheus.PrometheusExporter.create_pushgateway_client","title":"<code>create_pushgateway_client(gateway_url, job_name, instance='')</code>","text":"<p>\u521b\u5efa Pushgateway \u5ba2\u6237\u7aef</p> <p>Parameters:</p> Name Type Description Default <code>gateway_url</code> <code>str</code> <p>Pushgateway URL</p> required <code>job_name</code> <code>str</code> <p>\u4f5c\u4e1a\u540d\u79f0</p> required <code>instance</code> <code>str</code> <p>\u5b9e\u4f8b\u6807\u8bc6\u7b26</p> <code>''</code> <p>Returns:</p> Type Description <code>PrometheusPushgatewayClient</code> <p>Pushgateway \u5ba2\u6237\u7aef</p> Source code in <code>src/symphra_cache/monitoring/prometheus.py</code> <pre><code>def create_pushgateway_client(\n    self,\n    gateway_url: str,\n    job_name: str,\n    instance: str = \"\",\n) -&gt; PrometheusPushgatewayClient:\n    \"\"\"\n    \u521b\u5efa Pushgateway \u5ba2\u6237\u7aef\n\n    Args:\n        gateway_url: Pushgateway URL\n        job_name: \u4f5c\u4e1a\u540d\u79f0\n        instance: \u5b9e\u4f8b\u6807\u8bc6\u7b26\n\n    Returns:\n        Pushgateway \u5ba2\u6237\u7aef\n    \"\"\"\n    return PrometheusPushgatewayClient(\n        exporter=self,\n        gateway_url=gateway_url,\n        job_name=job_name,\n        instance=instance or self._get_default_instance(),\n    )\n</code></pre>"},{"location":"zh/api/monitoring/#symphra_cache.monitoring.prometheus.PrometheusExporter.generate_metrics","title":"<code>generate_metrics()</code>","text":"<p>\u751f\u6210 Prometheus \u683c\u5f0f\u7684\u6307\u6807\u6587\u672c</p> <p>Returns:</p> Type Description <code>str</code> <p>Prometheus \u6307\u6807\u6587\u672c</p> Source code in <code>src/symphra_cache/monitoring/prometheus.py</code> <pre><code>def generate_metrics(self) -&gt; str:\n    \"\"\"\n    \u751f\u6210 Prometheus \u683c\u5f0f\u7684\u6307\u6807\u6587\u672c\n\n    Returns:\n        Prometheus \u6307\u6807\u6587\u672c\n    \"\"\"\n    if not self.monitor.is_enabled():\n        return \"# Cache monitoring is disabled\"\n\n    lines = []\n\n    # \u6dfb\u52a0\u5143\u4fe1\u606f\n    lines.append(f\"# Symphra Cache Metrics - {time.strftime('%Y-%m-%d %H:%M:%S')}\")\n    lines.append(\"# Generated by PrometheusExporter\")\n    lines.append(\"\")\n\n    # \u751f\u6210\u4e0d\u540c\u7c7b\u578b\u7684\u6307\u6807\n    lines.append(self._generate_counter_metrics())\n    lines.append(\"\")\n    lines.append(self._generate_gauge_metrics())\n    lines.append(\"\")\n    lines.append(self._generate_histogram_metrics())\n\n    return \"\\n\".join(lines)\n</code></pre>"},{"location":"zh/api/monitoring/#symphra_cache.monitoring.prometheus.PrometheusExporter.get_metrics_handler","title":"<code>get_metrics_handler()</code>","text":"<p>\u83b7\u53d6\u6307\u6807\u5904\u7406\u5668\u51fd\u6570</p> <p>Returns:</p> Type Description <code>Callable[[], str]</code> <p>\u8fd4\u56de\u6307\u6807\u6587\u672c\u7684\u51fd\u6570</p> Source code in <code>src/symphra_cache/monitoring/prometheus.py</code> <pre><code>def get_metrics_handler(self) -&gt; Callable[[], str]:\n    \"\"\"\n    \u83b7\u53d6\u6307\u6807\u5904\u7406\u5668\u51fd\u6570\n\n    Returns:\n        \u8fd4\u56de\u6307\u6807\u6587\u672c\u7684\u51fd\u6570\n    \"\"\"\n    return self.generate_metrics\n</code></pre>"},{"location":"zh/api/monitoring/#symphra_cache.monitoring.prometheus.PrometheusExporter.update_labels","title":"<code>update_labels(labels)</code>","text":"<p>\u66f4\u65b0\u5168\u5c40\u6807\u7b7e</p> <p>Parameters:</p> Name Type Description Default <code>labels</code> <code>dict[str, str]</code> <p>\u65b0\u7684\u6807\u7b7e\u5b57\u5178</p> required Source code in <code>src/symphra_cache/monitoring/prometheus.py</code> <pre><code>def update_labels(self, labels: dict[str, str]) -&gt; None:\n    \"\"\"\n    \u66f4\u65b0\u5168\u5c40\u6807\u7b7e\n\n    Args:\n        labels: \u65b0\u7684\u6807\u7b7e\u5b57\u5178\n    \"\"\"\n    self.labels.update(labels)\n</code></pre>"},{"location":"zh/api/monitoring/#symphra_cache.monitoring.statsd.StatsDExporter.__aenter__","title":"<code>__aenter__()</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5165\u53e3</p> Source code in <code>src/symphra_cache/monitoring/statsd.py</code> <pre><code>async def __aenter__(self) -&gt; StatsDExporter:\n    \"\"\"\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5165\u53e3\"\"\"\n    await self.connect()\n    return self\n</code></pre>"},{"location":"zh/api/monitoring/#symphra_cache.monitoring.statsd.StatsDExporter.__aexit__","title":"<code>__aexit__(exc_type, exc_val, exc_tb)</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u51fa\u53e3</p> Source code in <code>src/symphra_cache/monitoring/statsd.py</code> <pre><code>async def __aexit__(\n    self,\n    exc_type: type[BaseException] | None,\n    exc_val: BaseException | None,\n    exc_tb: Any | None,\n) -&gt; None:\n    \"\"\"\u5f02\u6b65\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u51fa\u53e3\"\"\"\n    await self.disconnect()\n</code></pre>"},{"location":"zh/api/monitoring/#symphra_cache.monitoring.statsd.StatsDExporter.__del__","title":"<code>__del__()</code>","text":"<p>\u6790\u6784\u51fd\u6570</p> Source code in <code>src/symphra_cache/monitoring/statsd.py</code> <pre><code>def __del__(self) -&gt; None:\n    \"\"\"\u6790\u6784\u51fd\u6570\"\"\"\n    if self._socket:\n        self._socket.close()\n</code></pre>"},{"location":"zh/api/monitoring/#symphra_cache.monitoring.statsd.StatsDExporter.__init__","title":"<code>__init__(monitor, host='localhost', port=8125, prefix='symphra.cache', sample_rate=1.0, protocol='udp', batch_size=10)</code>","text":"<p>\u521d\u59cb\u5316 StatsD \u5bfc\u51fa\u5668</p> <p>Parameters:</p> Name Type Description Default <code>monitor</code> <code>CacheMonitor</code> <p>\u7f13\u5b58\u76d1\u63a7\u5668</p> required <code>host</code> <code>str</code> <p>StatsD \u670d\u52a1\u5668\u4e3b\u673a</p> <code>'localhost'</code> <code>port</code> <code>int</code> <p>StatsD \u670d\u52a1\u5668\u7aef\u53e3</p> <code>8125</code> <code>prefix</code> <code>str</code> <p>\u6307\u6807\u524d\u7f00</p> <code>'symphra.cache'</code> <code>sample_rate</code> <code>float</code> <p>\u91c7\u6837\u7387 (0.0-1.0)</p> <code>1.0</code> <code>protocol</code> <code>str</code> <p>\u4f20\u8f93\u534f\u8bae (\"udp\", \"tcp\")</p> <code>'udp'</code> <code>batch_size</code> <code>int</code> <p>\u6279\u91cf\u53d1\u9001\u5927\u5c0f</p> <code>10</code> Source code in <code>src/symphra_cache/monitoring/statsd.py</code> <pre><code>def __init__(\n    self,\n    monitor: CacheMonitor,\n    host: str = \"localhost\",\n    port: int = 8125,\n    prefix: str = \"symphra.cache\",\n    sample_rate: float = 1.0,\n    protocol: str = \"udp\",\n    batch_size: int = 10,\n) -&gt; None:\n    \"\"\"\n    \u521d\u59cb\u5316 StatsD \u5bfc\u51fa\u5668\n\n    Args:\n        monitor: \u7f13\u5b58\u76d1\u63a7\u5668\n        host: StatsD \u670d\u52a1\u5668\u4e3b\u673a\n        port: StatsD \u670d\u52a1\u5668\u7aef\u53e3\n        prefix: \u6307\u6807\u524d\u7f00\n        sample_rate: \u91c7\u6837\u7387 (0.0-1.0)\n        protocol: \u4f20\u8f93\u534f\u8bae (\"udp\", \"tcp\")\n        batch_size: \u6279\u91cf\u53d1\u9001\u5927\u5c0f\n    \"\"\"\n    self.monitor = monitor\n    self.host = host\n    self.port = port\n    self.prefix = prefix\n    self.sample_rate = max(0.0, min(1.0, sample_rate))  # \u786e\u4fdd\u5728\u6709\u6548\u8303\u56f4\u5185\n    self.protocol = protocol.lower()\n    self.batch_size = batch_size\n    self._socket: socket.socket | None = None\n    self._tcp_writer: asyncio.StreamWriter | None = None\n    self._tcp_reader: asyncio.StreamReader | None = None\n    self._is_connected = False\n    self._pending_metrics: list[str] = []\n    self._lock = asyncio.Lock()\n</code></pre>"},{"location":"zh/api/monitoring/#symphra_cache.monitoring.statsd.StatsDExporter.add_custom_metric","title":"<code>add_custom_metric(name, value, metric_type='g')</code>","text":"<p>\u6dfb\u52a0\u81ea\u5b9a\u4e49\u6307\u6807</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>\u6307\u6807\u540d\u79f0</p> required <code>value</code> <code>float</code> <p>\u6307\u6807\u503c</p> required <code>metric_type</code> <code>str</code> <p>\u6307\u6807\u7c7b\u578b (\"c\", \"g\", \"ms\")</p> <code>'g'</code> Source code in <code>src/symphra_cache/monitoring/statsd.py</code> <pre><code>def add_custom_metric(self, name: str, value: float, metric_type: str = \"g\") -&gt; None:\n    \"\"\"\n    \u6dfb\u52a0\u81ea\u5b9a\u4e49\u6307\u6807\n\n    Args:\n        name: \u6307\u6807\u540d\u79f0\n        value: \u6307\u6807\u503c\n        metric_type: \u6307\u6807\u7c7b\u578b (\"c\", \"g\", \"ms\")\n    \"\"\"\n    metric_line = f\"{self._format_metric_name(name)}:{value}|{metric_type}\"\n    self._pending_metrics.append(metric_line)\n</code></pre>"},{"location":"zh/api/monitoring/#symphra_cache.monitoring.statsd.StatsDExporter.connect","title":"<code>connect()</code>  <code>async</code>","text":"<p>\u5efa\u7acb\u5230 StatsD \u670d\u52a1\u5668\u7684\u8fde\u63a5</p> Source code in <code>src/symphra_cache/monitoring/statsd.py</code> <pre><code>async def connect(self) -&gt; None:\n    \"\"\"\n    \u5efa\u7acb\u5230 StatsD \u670d\u52a1\u5668\u7684\u8fde\u63a5\n    \"\"\"\n    if self._is_connected:\n        return\n\n    try:\n        if self.protocol == \"udp\":\n            self._socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n            self._socket.setblocking(False)\n        elif self.protocol == \"tcp\":\n            reader, writer = await asyncio.open_connection(self.host, self.port)\n            self._tcp_reader = reader\n            self._tcp_writer = writer\n        else:\n            raise ValueError(f\"\u4e0d\u652f\u6301\u7684\u534f\u8bae: {self.protocol}\")\n\n        self._is_connected = True\n\n    except Exception as e:\n        print(f\"\u8fde\u63a5 StatsD \u670d\u52a1\u5668\u5931\u8d25: {e}\")\n        self._is_connected = False\n</code></pre>"},{"location":"zh/api/monitoring/#symphra_cache.monitoring.statsd.StatsDExporter.disconnect","title":"<code>disconnect()</code>  <code>async</code>","text":"<p>\u65ad\u5f00\u8fde\u63a5</p> Source code in <code>src/symphra_cache/monitoring/statsd.py</code> <pre><code>async def disconnect(self) -&gt; None:\n    \"\"\"\n    \u65ad\u5f00\u8fde\u63a5\n    \"\"\"\n    if self.protocol == \"udp\" and self._socket:\n        self._socket.close()\n    elif self.protocol == \"tcp\" and self._tcp_writer:\n        self._tcp_writer.close()\n        await self._tcp_writer.wait_closed()\n\n    self._is_connected = False\n    self._socket = None\n    self._tcp_writer = None\n    self._tcp_reader = None\n</code></pre>"},{"location":"zh/api/monitoring/#symphra_cache.monitoring.statsd.StatsDExporter.flush_pending_metrics","title":"<code>flush_pending_metrics()</code>  <code>async</code>","text":"<p>\u5237\u65b0\u5f85\u53d1\u9001\u7684\u6307\u6807</p> <p>Returns:</p> Type Description <code>bool</code> <p>\u5237\u65b0\u662f\u5426\u6210\u529f</p> Source code in <code>src/symphra_cache/monitoring/statsd.py</code> <pre><code>async def flush_pending_metrics(self) -&gt; bool:\n    \"\"\"\n    \u5237\u65b0\u5f85\u53d1\u9001\u7684\u6307\u6807\n\n    Returns:\n        \u5237\u65b0\u662f\u5426\u6210\u529f\n    \"\"\"\n    if not self._pending_metrics:\n        return True\n\n    success = await self.send_metrics(self._pending_metrics)\n    if success:\n        self._pending_metrics.clear()\n\n    return success\n</code></pre>"},{"location":"zh/api/monitoring/#symphra_cache.monitoring.statsd.StatsDExporter.generate_all_metrics","title":"<code>generate_all_metrics()</code>","text":"<p>\u751f\u6210\u6240\u6709\u6307\u6807</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>\u6307\u6807\u884c\u5217\u8868</p> Source code in <code>src/symphra_cache/monitoring/statsd.py</code> <pre><code>def generate_all_metrics(self) -&gt; list[str]:\n    \"\"\"\n    \u751f\u6210\u6240\u6709\u6307\u6807\n\n    Returns:\n        \u6307\u6807\u884c\u5217\u8868\n    \"\"\"\n    all_metrics = []\n    all_metrics.extend(self._generate_counter_metrics())\n    all_metrics.extend(self._generate_timer_metrics())\n    all_metrics.extend(self._generate_gauge_metrics())\n    return all_metrics\n</code></pre>"},{"location":"zh/api/monitoring/#symphra_cache.monitoring.statsd.StatsDExporter.get_connection_status","title":"<code>get_connection_status()</code>","text":"<p>\u83b7\u53d6\u8fde\u63a5\u72b6\u6001</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>\u8fde\u63a5\u72b6\u6001\u4fe1\u606f</p> Source code in <code>src/symphra_cache/monitoring/statsd.py</code> <pre><code>def get_connection_status(self) -&gt; dict[str, Any]:\n    \"\"\"\n    \u83b7\u53d6\u8fde\u63a5\u72b6\u6001\n\n    Returns:\n        \u8fde\u63a5\u72b6\u6001\u4fe1\u606f\n    \"\"\"\n    return {\n        \"connected\": self._is_connected,\n        \"protocol\": self.protocol,\n        \"host\": self.host,\n        \"port\": self.port,\n        \"pending_metrics\": len(self._pending_metrics),\n    }\n</code></pre>"},{"location":"zh/api/monitoring/#symphra_cache.monitoring.statsd.StatsDExporter.schedule_periodic_send","title":"<code>schedule_periodic_send(interval=30.0)</code>  <code>async</code>","text":"<p>\u5b89\u6392\u5468\u671f\u6027\u53d1\u9001\u6307\u6807</p> <p>Parameters:</p> Name Type Description Default <code>interval</code> <code>float</code> <p>\u53d1\u9001\u95f4\u9694\uff08\u79d2\uff09</p> <code>30.0</code> Source code in <code>src/symphra_cache/monitoring/statsd.py</code> <pre><code>async def schedule_periodic_send(self, interval: float = 30.0) -&gt; None:\n    \"\"\"\n    \u5b89\u6392\u5468\u671f\u6027\u53d1\u9001\u6307\u6807\n\n    Args:\n        interval: \u53d1\u9001\u95f4\u9694\uff08\u79d2\uff09\n    \"\"\"\n    while True:\n        try:\n            await asyncio.sleep(interval)\n            await self.send_metrics()\n        except asyncio.CancelledError:\n            break\n        except Exception as e:\n            print(f\"\u5468\u671f\u6027\u53d1\u9001\u5931\u8d25: {e}\")\n</code></pre>"},{"location":"zh/api/monitoring/#symphra_cache.monitoring.statsd.StatsDExporter.send_metrics","title":"<code>send_metrics(metric_lines=None)</code>  <code>async</code>","text":"<p>\u53d1\u9001\u6307\u6807\u5230 StatsD \u670d\u52a1\u5668</p> <p>Parameters:</p> Name Type Description Default <code>metric_lines</code> <code>list[str] | None</code> <p>\u8981\u53d1\u9001\u7684\u6307\u6807\u884c\u5217\u8868\uff0cNone \u8868\u793a\u53d1\u9001\u6240\u6709\u6307\u6807</p> <code>None</code> <p>Returns:</p> Type Description <code>bool</code> <p>\u53d1\u9001\u662f\u5426\u6210\u529f</p> Source code in <code>src/symphra_cache/monitoring/statsd.py</code> <pre><code>async def send_metrics(self, metric_lines: list[str] | None = None) -&gt; bool:\n    \"\"\"\n    \u53d1\u9001\u6307\u6807\u5230 StatsD \u670d\u52a1\u5668\n\n    Args:\n        metric_lines: \u8981\u53d1\u9001\u7684\u6307\u6807\u884c\u5217\u8868\uff0cNone \u8868\u793a\u53d1\u9001\u6240\u6709\u6307\u6807\n\n    Returns:\n        \u53d1\u9001\u662f\u5426\u6210\u529f\n    \"\"\"\n    if not self.monitor.is_enabled():\n        return True\n\n    if metric_lines is None:\n        metric_lines = self.generate_all_metrics()\n\n    if not metric_lines:\n        return True\n\n    # \u5efa\u7acb\u8fde\u63a5\n    if not self._is_connected:\n        await self.connect()\n        if not self._is_connected:\n            return False\n\n    # \u5e94\u7528\u91c7\u6837\u7387\n    if self.sample_rate &lt; 1.0:\n        import random\n\n        metric_lines = [line for line in metric_lines if random.random() &lt; self.sample_rate]\n\n    try:\n        if self.protocol == \"udp\":\n            return await self._send_udp_metrics(metric_lines)\n        else:\n            return await self._send_tcp_metrics(metric_lines)\n\n    except Exception as e:\n        print(f\"\u53d1\u9001\u6307\u6807\u5931\u8d25: {e}\")\n        await self.disconnect()\n        return False\n</code></pre>"},{"location":"zh/api/serializers/","title":"\u5e8f\u5217\u5316","text":"<p>\u5185\u7f6e JSON / Pickle / MessagePack \u5e8f\u5217\u5316\u5668\uff0c\u652f\u6301\u81ea\u5b9a\u4e49\u3002</p> <p>               Bases: <code>ABC</code></p> <p>\u5e8f\u5217\u5316\u5668\u62bd\u8c61\u57fa\u7c7b</p> <p>\u5b9a\u4e49\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u63a5\u53e3\u3002</p> Source code in <code>src/symphra_cache/serializers.py</code> <pre><code>class BaseSerializer(ABC):\n    \"\"\"\n    \u5e8f\u5217\u5316\u5668\u62bd\u8c61\u57fa\u7c7b\n\n    \u5b9a\u4e49\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u63a5\u53e3\u3002\n    \"\"\"\n\n    @abstractmethod\n    def serialize(self, value: CacheValue) -&gt; bytes:\n        \"\"\"\n        \u5e8f\u5217\u5316\u503c\u4e3a\u5b57\u8282\n\n        Args:\n            value: \u8981\u5e8f\u5217\u5316\u7684\u503c\n\n        Returns:\n            \u5e8f\u5217\u5316\u540e\u7684\u5b57\u8282\u6570\u636e\n\n        Raises:\n            CacheSerializationError: \u5e8f\u5217\u5316\u5931\u8d25\n        \"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    def deserialize(self, data: bytes) -&gt; CacheValue:\n        \"\"\"\n        \u53cd\u5e8f\u5217\u5316\u5b57\u8282\u4e3a\u503c\n\n        Args:\n            data: \u8981\u53cd\u5e8f\u5217\u5316\u7684\u5b57\u8282\u6570\u636e\n\n        Returns:\n            \u53cd\u5e8f\u5217\u5316\u540e\u7684\u503c\n\n        Raises:\n            CacheSerializationError: \u53cd\u5e8f\u5217\u5316\u5931\u8d25\n        \"\"\"\n        raise NotImplementedError\n</code></pre> <p>               Bases: <code>BaseSerializer</code></p> <p>JSON \u5e8f\u5217\u5316\u5668</p> <p>\u4f18\u70b9\uff1a - \u53ef\u8bfb\u6027\u597d - \u8de8\u8bed\u8a00\u517c\u5bb9 - \u9002\u5408\u7b80\u5355\u6570\u636e\u7ed3\u6784</p> <p>\u7f3a\u70b9\uff1a - \u4e0d\u652f\u6301\u590d\u6742 Python \u5bf9\u8c61\uff08\u5982 datetime\u3001bytes\uff09 - \u6027\u80fd\u76f8\u5bf9\u8f83\u4f4e</p> <p>\u793a\u4f8b\uff1a     &gt;&gt;&gt; serializer = JSONSerializer()     &gt;&gt;&gt; data = {\"key\": \"value\", \"count\": 123}     &gt;&gt;&gt; bytes_data = serializer.serialize(data)     &gt;&gt;&gt; original = serializer.deserialize(bytes_data)</p> Source code in <code>src/symphra_cache/serializers.py</code> <pre><code>class JSONSerializer(BaseSerializer):\n    \"\"\"\n    JSON \u5e8f\u5217\u5316\u5668\n\n    \u4f18\u70b9\uff1a\n    - \u53ef\u8bfb\u6027\u597d\n    - \u8de8\u8bed\u8a00\u517c\u5bb9\n    - \u9002\u5408\u7b80\u5355\u6570\u636e\u7ed3\u6784\n\n    \u7f3a\u70b9\uff1a\n    - \u4e0d\u652f\u6301\u590d\u6742 Python \u5bf9\u8c61\uff08\u5982 datetime\u3001bytes\uff09\n    - \u6027\u80fd\u76f8\u5bf9\u8f83\u4f4e\n\n    \u793a\u4f8b\uff1a\n        &gt;&gt;&gt; serializer = JSONSerializer()\n        &gt;&gt;&gt; data = {\"key\": \"value\", \"count\": 123}\n        &gt;&gt;&gt; bytes_data = serializer.serialize(data)\n        &gt;&gt;&gt; original = serializer.deserialize(bytes_data)\n    \"\"\"\n\n    def serialize(self, value: CacheValue) -&gt; bytes:\n        \"\"\"\u5c06\u503c\u5e8f\u5217\u5316\u4e3a JSON \u5b57\u8282\"\"\"\n        try:\n            # \u4f7f\u7528 ensure_ascii=False \u652f\u6301\u4e2d\u6587\u7b49 Unicode \u5b57\u7b26\n            json_str = json.dumps(value, ensure_ascii=False)\n            return json_str.encode(\"utf-8\")\n        except (TypeError, ValueError) as e:\n            msg = f\"JSON \u5e8f\u5217\u5316\u5931\u8d25: {e}\"\n            raise CacheSerializationError(msg) from e\n\n    def deserialize(self, data: bytes) -&gt; CacheValue:\n        \"\"\"\u4ece JSON \u5b57\u8282\u53cd\u5e8f\u5217\u5316\u503c\"\"\"\n        try:\n            json_str = data.decode(\"utf-8\")\n            return json.loads(json_str)\n        except (json.JSONDecodeError, UnicodeDecodeError) as e:\n            msg = f\"JSON \u53cd\u5e8f\u5217\u5316\u5931\u8d25: {e}\"\n            raise CacheSerializationError(msg) from e\n</code></pre> <p>               Bases: <code>BaseSerializer</code></p> <p>Pickle \u5e8f\u5217\u5316\u5668</p> <p>\u4f18\u70b9\uff1a - \u652f\u6301\u51e0\u4e4e\u6240\u6709 Python \u5bf9\u8c61 - \u6027\u80fd\u8f83\u597d - Python \u6807\u51c6\u5e93\u5185\u7f6e</p> <p>\u7f3a\u70b9\uff1a - \u4e0d\u8de8\u8bed\u8a00 - \u5b89\u5168\u98ce\u9669\uff08\u4e0d\u8981\u53cd\u5e8f\u5217\u5316\u4e0d\u53ef\u4fe1\u6570\u636e\uff09 - \u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u4e0d\u53ef\u8bfb</p> <p>\u8b66\u544a\uff1a     \u4ec5\u53cd\u5e8f\u5217\u5316\u53ef\u4fe1\u6765\u6e90\u7684\u6570\u636e\uff0c\u907f\u514d\u4ee3\u7801\u6ce8\u5165\u98ce\u9669</p> <p>\u793a\u4f8b\uff1a     &gt;&gt;&gt; serializer = PickleSerializer()     &gt;&gt;&gt; import datetime     &gt;&gt;&gt; data = {\"time\": datetime.datetime.now(), \"items\": [1, 2, 3]}     &gt;&gt;&gt; bytes_data = serializer.serialize(data)     &gt;&gt;&gt; original = serializer.deserialize(bytes_data)</p> Source code in <code>src/symphra_cache/serializers.py</code> <pre><code>class PickleSerializer(BaseSerializer):\n    \"\"\"\n    Pickle \u5e8f\u5217\u5316\u5668\n\n    \u4f18\u70b9\uff1a\n    - \u652f\u6301\u51e0\u4e4e\u6240\u6709 Python \u5bf9\u8c61\n    - \u6027\u80fd\u8f83\u597d\n    - Python \u6807\u51c6\u5e93\u5185\u7f6e\n\n    \u7f3a\u70b9\uff1a\n    - \u4e0d\u8de8\u8bed\u8a00\n    - \u5b89\u5168\u98ce\u9669\uff08\u4e0d\u8981\u53cd\u5e8f\u5217\u5316\u4e0d\u53ef\u4fe1\u6570\u636e\uff09\n    - \u4e8c\u8fdb\u5236\u683c\u5f0f\uff0c\u4e0d\u53ef\u8bfb\n\n    \u8b66\u544a\uff1a\n        \u4ec5\u53cd\u5e8f\u5217\u5316\u53ef\u4fe1\u6765\u6e90\u7684\u6570\u636e\uff0c\u907f\u514d\u4ee3\u7801\u6ce8\u5165\u98ce\u9669\n\n    \u793a\u4f8b\uff1a\n        &gt;&gt;&gt; serializer = PickleSerializer()\n        &gt;&gt;&gt; import datetime\n        &gt;&gt;&gt; data = {\"time\": datetime.datetime.now(), \"items\": [1, 2, 3]}\n        &gt;&gt;&gt; bytes_data = serializer.serialize(data)\n        &gt;&gt;&gt; original = serializer.deserialize(bytes_data)\n    \"\"\"\n\n    def serialize(self, value: CacheValue) -&gt; bytes:\n        \"\"\"\u5c06\u503c\u5e8f\u5217\u5316\u4e3a Pickle \u5b57\u8282\"\"\"\n        try:\n            # \u4f7f\u7528\u534f\u8bae 5\uff08Python 3.8+\uff0c\u6027\u80fd\u6700\u4f18\uff09\n            return pickle.dumps(value, protocol=pickle.HIGHEST_PROTOCOL)\n        except (pickle.PicklingError, TypeError) as e:\n            msg = f\"Pickle \u5e8f\u5217\u5316\u5931\u8d25: {e}\"\n            raise CacheSerializationError(msg) from e\n\n    def deserialize(self, data: bytes) -&gt; CacheValue:\n        \"\"\"\u4ece Pickle \u5b57\u8282\u53cd\u5e8f\u5217\u5316\u503c\"\"\"\n        try:\n            return pickle.loads(data)  # noqa: S301\n        except (pickle.UnpicklingError, AttributeError, EOFError) as e:\n            msg = f\"Pickle \u53cd\u5e8f\u5217\u5316\u5931\u8d25: {e}\"\n            raise CacheSerializationError(msg) from e\n</code></pre> <p>               Bases: <code>BaseSerializer</code></p> <p>MessagePack \u5e8f\u5217\u5316\u5668</p> <p>\u4f18\u70b9\uff1a - \u9ad8\u6027\u80fd\uff08\u6bd4 JSON \u5feb 2-5 \u500d\uff09 - \u7d27\u51d1\u7684\u4e8c\u8fdb\u5236\u683c\u5f0f - \u8de8\u8bed\u8a00\u517c\u5bb9</p> <p>\u7f3a\u70b9\uff1a - \u9700\u8981\u989d\u5916\u4f9d\u8d56 msgpack - \u5bf9\u590d\u6742 Python \u5bf9\u8c61\u652f\u6301\u6709\u9650</p> <p>\u793a\u4f8b\uff1a     &gt;&gt;&gt; serializer = MessagePackSerializer()     &gt;&gt;&gt; data = {\"users\": [{\"id\": 1}, {\"id\": 2}], \"total\": 2}     &gt;&gt;&gt; bytes_data = serializer.serialize(data)     &gt;&gt;&gt; original = serializer.deserialize(bytes_data)</p> Source code in <code>src/symphra_cache/serializers.py</code> <pre><code>class MessagePackSerializer(BaseSerializer):\n    \"\"\"\n    MessagePack \u5e8f\u5217\u5316\u5668\n\n    \u4f18\u70b9\uff1a\n    - \u9ad8\u6027\u80fd\uff08\u6bd4 JSON \u5feb 2-5 \u500d\uff09\n    - \u7d27\u51d1\u7684\u4e8c\u8fdb\u5236\u683c\u5f0f\n    - \u8de8\u8bed\u8a00\u517c\u5bb9\n\n    \u7f3a\u70b9\uff1a\n    - \u9700\u8981\u989d\u5916\u4f9d\u8d56 msgpack\n    - \u5bf9\u590d\u6742 Python \u5bf9\u8c61\u652f\u6301\u6709\u9650\n\n    \u793a\u4f8b\uff1a\n        &gt;&gt;&gt; serializer = MessagePackSerializer()\n        &gt;&gt;&gt; data = {\"users\": [{\"id\": 1}, {\"id\": 2}], \"total\": 2}\n        &gt;&gt;&gt; bytes_data = serializer.serialize(data)\n        &gt;&gt;&gt; original = serializer.deserialize(bytes_data)\n    \"\"\"\n\n    def __init__(self) -&gt; None:\n        \"\"\"\u521d\u59cb\u5316 MessagePack \u5e8f\u5217\u5316\u5668\"\"\"\n        try:\n            import msgpack\n\n            self._msgpack = msgpack\n        except ImportError as e:\n            msg = \"MessagePack \u5e8f\u5217\u5316\u9700\u8981\u5b89\u88c5 msgpack: pip install msgpack\"\n            raise ImportError(msg) from e\n\n    def serialize(self, value: CacheValue) -&gt; bytes:\n        \"\"\"\u5c06\u503c\u5e8f\u5217\u5316\u4e3a MessagePack \u5b57\u8282\"\"\"\n        try:\n            return self._msgpack.packb(value, use_bin_type=True)\n        except (self._msgpack.PackException, TypeError) as e:\n            msg = f\"MessagePack \u5e8f\u5217\u5316\u5931\u8d25: {e}\"\n            raise CacheSerializationError(msg) from e\n\n    def deserialize(self, data: bytes) -&gt; CacheValue:\n        \"\"\"\u4ece MessagePack \u5b57\u8282\u53cd\u5e8f\u5217\u5316\u503c\"\"\"\n        try:\n            return self._msgpack.unpackb(data, raw=False)\n        except (self._msgpack.UnpackException, ValueError) as e:\n            msg = f\"MessagePack \u53cd\u5e8f\u5217\u5316\u5931\u8d25: {e}\"\n            raise CacheSerializationError(msg) from e\n</code></pre> <p>\u83b7\u53d6\u6307\u5b9a\u6a21\u5f0f\u7684\u5e8f\u5217\u5316\u5668\u5b9e\u4f8b</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>SerializationMode | str</code> <p>\u5e8f\u5217\u5316\u6a21\u5f0f\uff08SerializationMode \u679a\u4e3e\u6216\u5b57\u7b26\u4e32\uff09</p> required <p>Returns:</p> Type Description <code>BaseSerializer</code> <p>\u5e8f\u5217\u5316\u5668\u5b9e\u4f8b</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u4e0d\u652f\u6301\u7684\u5e8f\u5217\u5316\u6a21\u5f0f</p> \u793a\u4f8b <p>serializer = get_serializer(SerializationMode.JSON)</p> Source code in <code>src/symphra_cache/serializers.py</code> <pre><code>def get_serializer(mode: SerializationMode | str) -&gt; BaseSerializer:\n    \"\"\"\n    \u83b7\u53d6\u6307\u5b9a\u6a21\u5f0f\u7684\u5e8f\u5217\u5316\u5668\u5b9e\u4f8b\n\n    Args:\n        mode: \u5e8f\u5217\u5316\u6a21\u5f0f\uff08SerializationMode \u679a\u4e3e\u6216\u5b57\u7b26\u4e32\uff09\n\n    Returns:\n        \u5e8f\u5217\u5316\u5668\u5b9e\u4f8b\n\n    Raises:\n        ValueError: \u4e0d\u652f\u6301\u7684\u5e8f\u5217\u5316\u6a21\u5f0f\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; serializer = get_serializer(SerializationMode.JSON)\n        &gt;&gt;&gt; # \u6216\u4f7f\u7528\u5b57\u7b26\u4e32\n        &gt;&gt;&gt; serializer = get_serializer(\"json\")\n    \"\"\"\n    # \u652f\u6301\u5b57\u7b26\u4e32\u53c2\u6570\n    if isinstance(mode, str):\n        try:\n            mode = SerializationMode(mode)\n        except ValueError as e:\n            msg = f\"\u4e0d\u652f\u6301\u7684\u5e8f\u5217\u5316\u6a21\u5f0f: {mode}\"\n            raise ValueError(msg) from e\n\n    # \u83b7\u53d6\u5e8f\u5217\u5316\u5668\u7c7b\n    serializer_cls = _SERIALIZERS.get(mode)\n    if serializer_cls is None:\n        msg = f\"\u672a\u6ce8\u518c\u7684\u5e8f\u5217\u5316\u6a21\u5f0f: {mode}\"\n        raise ValueError(msg)\n\n    # \u8fd4\u56de\u5b9e\u4f8b\n    return serializer_cls()\n</code></pre>"},{"location":"zh/api/serializers/#symphra_cache.serializers.BaseSerializer.deserialize","title":"<code>deserialize(data)</code>  <code>abstractmethod</code>","text":"<p>\u53cd\u5e8f\u5217\u5316\u5b57\u8282\u4e3a\u503c</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>bytes</code> <p>\u8981\u53cd\u5e8f\u5217\u5316\u7684\u5b57\u8282\u6570\u636e</p> required <p>Returns:</p> Type Description <code>CacheValue</code> <p>\u53cd\u5e8f\u5217\u5316\u540e\u7684\u503c</p> <p>Raises:</p> Type Description <code>CacheSerializationError</code> <p>\u53cd\u5e8f\u5217\u5316\u5931\u8d25</p> Source code in <code>src/symphra_cache/serializers.py</code> <pre><code>@abstractmethod\ndef deserialize(self, data: bytes) -&gt; CacheValue:\n    \"\"\"\n    \u53cd\u5e8f\u5217\u5316\u5b57\u8282\u4e3a\u503c\n\n    Args:\n        data: \u8981\u53cd\u5e8f\u5217\u5316\u7684\u5b57\u8282\u6570\u636e\n\n    Returns:\n        \u53cd\u5e8f\u5217\u5316\u540e\u7684\u503c\n\n    Raises:\n        CacheSerializationError: \u53cd\u5e8f\u5217\u5316\u5931\u8d25\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"zh/api/serializers/#symphra_cache.serializers.BaseSerializer.serialize","title":"<code>serialize(value)</code>  <code>abstractmethod</code>","text":"<p>\u5e8f\u5217\u5316\u503c\u4e3a\u5b57\u8282</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>CacheValue</code> <p>\u8981\u5e8f\u5217\u5316\u7684\u503c</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>\u5e8f\u5217\u5316\u540e\u7684\u5b57\u8282\u6570\u636e</p> <p>Raises:</p> Type Description <code>CacheSerializationError</code> <p>\u5e8f\u5217\u5316\u5931\u8d25</p> Source code in <code>src/symphra_cache/serializers.py</code> <pre><code>@abstractmethod\ndef serialize(self, value: CacheValue) -&gt; bytes:\n    \"\"\"\n    \u5e8f\u5217\u5316\u503c\u4e3a\u5b57\u8282\n\n    Args:\n        value: \u8981\u5e8f\u5217\u5316\u7684\u503c\n\n    Returns:\n        \u5e8f\u5217\u5316\u540e\u7684\u5b57\u8282\u6570\u636e\n\n    Raises:\n        CacheSerializationError: \u5e8f\u5217\u5316\u5931\u8d25\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"zh/api/serializers/#symphra_cache.serializers.JSONSerializer.deserialize","title":"<code>deserialize(data)</code>","text":"<p>\u4ece JSON \u5b57\u8282\u53cd\u5e8f\u5217\u5316\u503c</p> Source code in <code>src/symphra_cache/serializers.py</code> <pre><code>def deserialize(self, data: bytes) -&gt; CacheValue:\n    \"\"\"\u4ece JSON \u5b57\u8282\u53cd\u5e8f\u5217\u5316\u503c\"\"\"\n    try:\n        json_str = data.decode(\"utf-8\")\n        return json.loads(json_str)\n    except (json.JSONDecodeError, UnicodeDecodeError) as e:\n        msg = f\"JSON \u53cd\u5e8f\u5217\u5316\u5931\u8d25: {e}\"\n        raise CacheSerializationError(msg) from e\n</code></pre>"},{"location":"zh/api/serializers/#symphra_cache.serializers.JSONSerializer.serialize","title":"<code>serialize(value)</code>","text":"<p>\u5c06\u503c\u5e8f\u5217\u5316\u4e3a JSON \u5b57\u8282</p> Source code in <code>src/symphra_cache/serializers.py</code> <pre><code>def serialize(self, value: CacheValue) -&gt; bytes:\n    \"\"\"\u5c06\u503c\u5e8f\u5217\u5316\u4e3a JSON \u5b57\u8282\"\"\"\n    try:\n        # \u4f7f\u7528 ensure_ascii=False \u652f\u6301\u4e2d\u6587\u7b49 Unicode \u5b57\u7b26\n        json_str = json.dumps(value, ensure_ascii=False)\n        return json_str.encode(\"utf-8\")\n    except (TypeError, ValueError) as e:\n        msg = f\"JSON \u5e8f\u5217\u5316\u5931\u8d25: {e}\"\n        raise CacheSerializationError(msg) from e\n</code></pre>"},{"location":"zh/api/serializers/#symphra_cache.serializers.PickleSerializer.deserialize","title":"<code>deserialize(data)</code>","text":"<p>\u4ece Pickle \u5b57\u8282\u53cd\u5e8f\u5217\u5316\u503c</p> Source code in <code>src/symphra_cache/serializers.py</code> <pre><code>def deserialize(self, data: bytes) -&gt; CacheValue:\n    \"\"\"\u4ece Pickle \u5b57\u8282\u53cd\u5e8f\u5217\u5316\u503c\"\"\"\n    try:\n        return pickle.loads(data)  # noqa: S301\n    except (pickle.UnpicklingError, AttributeError, EOFError) as e:\n        msg = f\"Pickle \u53cd\u5e8f\u5217\u5316\u5931\u8d25: {e}\"\n        raise CacheSerializationError(msg) from e\n</code></pre>"},{"location":"zh/api/serializers/#symphra_cache.serializers.PickleSerializer.serialize","title":"<code>serialize(value)</code>","text":"<p>\u5c06\u503c\u5e8f\u5217\u5316\u4e3a Pickle \u5b57\u8282</p> Source code in <code>src/symphra_cache/serializers.py</code> <pre><code>def serialize(self, value: CacheValue) -&gt; bytes:\n    \"\"\"\u5c06\u503c\u5e8f\u5217\u5316\u4e3a Pickle \u5b57\u8282\"\"\"\n    try:\n        # \u4f7f\u7528\u534f\u8bae 5\uff08Python 3.8+\uff0c\u6027\u80fd\u6700\u4f18\uff09\n        return pickle.dumps(value, protocol=pickle.HIGHEST_PROTOCOL)\n    except (pickle.PicklingError, TypeError) as e:\n        msg = f\"Pickle \u5e8f\u5217\u5316\u5931\u8d25: {e}\"\n        raise CacheSerializationError(msg) from e\n</code></pre>"},{"location":"zh/api/serializers/#symphra_cache.serializers.MessagePackSerializer.__init__","title":"<code>__init__()</code>","text":"<p>\u521d\u59cb\u5316 MessagePack \u5e8f\u5217\u5316\u5668</p> Source code in <code>src/symphra_cache/serializers.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"\u521d\u59cb\u5316 MessagePack \u5e8f\u5217\u5316\u5668\"\"\"\n    try:\n        import msgpack\n\n        self._msgpack = msgpack\n    except ImportError as e:\n        msg = \"MessagePack \u5e8f\u5217\u5316\u9700\u8981\u5b89\u88c5 msgpack: pip install msgpack\"\n        raise ImportError(msg) from e\n</code></pre>"},{"location":"zh/api/serializers/#symphra_cache.serializers.MessagePackSerializer.deserialize","title":"<code>deserialize(data)</code>","text":"<p>\u4ece MessagePack \u5b57\u8282\u53cd\u5e8f\u5217\u5316\u503c</p> Source code in <code>src/symphra_cache/serializers.py</code> <pre><code>def deserialize(self, data: bytes) -&gt; CacheValue:\n    \"\"\"\u4ece MessagePack \u5b57\u8282\u53cd\u5e8f\u5217\u5316\u503c\"\"\"\n    try:\n        return self._msgpack.unpackb(data, raw=False)\n    except (self._msgpack.UnpackException, ValueError) as e:\n        msg = f\"MessagePack \u53cd\u5e8f\u5217\u5316\u5931\u8d25: {e}\"\n        raise CacheSerializationError(msg) from e\n</code></pre>"},{"location":"zh/api/serializers/#symphra_cache.serializers.MessagePackSerializer.serialize","title":"<code>serialize(value)</code>","text":"<p>\u5c06\u503c\u5e8f\u5217\u5316\u4e3a MessagePack \u5b57\u8282</p> Source code in <code>src/symphra_cache/serializers.py</code> <pre><code>def serialize(self, value: CacheValue) -&gt; bytes:\n    \"\"\"\u5c06\u503c\u5e8f\u5217\u5316\u4e3a MessagePack \u5b57\u8282\"\"\"\n    try:\n        return self._msgpack.packb(value, use_bin_type=True)\n    except (self._msgpack.PackException, TypeError) as e:\n        msg = f\"MessagePack \u5e8f\u5217\u5316\u5931\u8d25: {e}\"\n        raise CacheSerializationError(msg) from e\n</code></pre>"},{"location":"zh/api/serializers/#symphra_cache.serializers.get_serializer--_1","title":"\u6216\u4f7f\u7528\u5b57\u7b26\u4e32","text":"<p>serializer = get_serializer(\"json\")</p>"},{"location":"zh/api/types/","title":"\u7c7b\u578b\u4e0e\u679a\u4e3e","text":"<p>\u5e8f\u5217\u5316\u6a21\u5f0f\u3001\u6dd8\u6c70\u7b56\u7565\u4e0e\u540e\u7aef\u7c7b\u578b\u679a\u4e3e\u3002</p> <p>               Bases: <code>str</code>, <code>Enum</code></p> <p>\u5e8f\u5217\u5316\u6a21\u5f0f\u679a\u4e3e</p> <p>\u5b9a\u4e49\u7f13\u5b58\u503c\u7684\u5e8f\u5217\u5316\u65b9\u5f0f\uff1a - JSON: JSON \u5e8f\u5217\u5316\uff0c\u8de8\u8bed\u8a00\u517c\u5bb9\uff0c\u4f46\u7c7b\u578b\u652f\u6301\u6709\u9650 - PICKLE: Python \u539f\u751f\u5e8f\u5217\u5316\uff0c\u652f\u6301\u6240\u6709 Python \u5bf9\u8c61 - MSGPACK: MessagePack \u5e8f\u5217\u5316\uff0c\u7d27\u51d1\u9ad8\u6548</p> Source code in <code>src/symphra_cache/types.py</code> <pre><code>class SerializationMode(str, Enum):\n    \"\"\"\n    \u5e8f\u5217\u5316\u6a21\u5f0f\u679a\u4e3e\n\n    \u5b9a\u4e49\u7f13\u5b58\u503c\u7684\u5e8f\u5217\u5316\u65b9\u5f0f\uff1a\n    - JSON: JSON \u5e8f\u5217\u5316\uff0c\u8de8\u8bed\u8a00\u517c\u5bb9\uff0c\u4f46\u7c7b\u578b\u652f\u6301\u6709\u9650\n    - PICKLE: Python \u539f\u751f\u5e8f\u5217\u5316\uff0c\u652f\u6301\u6240\u6709 Python \u5bf9\u8c61\n    - MSGPACK: MessagePack \u5e8f\u5217\u5316\uff0c\u7d27\u51d1\u9ad8\u6548\n    \"\"\"\n\n    JSON = \"json\"  # JSON \u5e8f\u5217\u5316\n    PICKLE = \"pickle\"  # Pickle \u5e8f\u5217\u5316\n    MSGPACK = \"msgpack\"  # MessagePack \u5e8f\u5217\u5316\n</code></pre> <p>               Bases: <code>str</code>, <code>Enum</code></p> <p>\u7f13\u5b58\u6dd8\u6c70\u7b56\u7565\u679a\u4e3e</p> <p>\u5b9a\u4e49\u7f13\u5b58\u6ee1\u65f6\u7684\u6dd8\u6c70\u89c4\u5219\uff1a - LRU: Least Recently Used\uff08\u6700\u8fd1\u6700\u5c11\u4f7f\u7528\uff09\uff0c\u6dd8\u6c70\u6700\u4e45\u672a\u8bbf\u95ee\u7684\u9879 - LFU: Least Frequently Used\uff08\u6700\u4e0d\u7ecf\u5e38\u4f7f\u7528\uff09\uff0c\u6dd8\u6c70\u8bbf\u95ee\u6b21\u6570\u6700\u5c11\u7684\u9879 - FIFO: First In First Out\uff08\u5148\u8fdb\u5148\u51fa\uff09\uff0c\u6dd8\u6c70\u6700\u65e9\u63d2\u5165\u7684\u9879</p> Source code in <code>src/symphra_cache/types.py</code> <pre><code>class EvictionPolicy(str, Enum):\n    \"\"\"\n    \u7f13\u5b58\u6dd8\u6c70\u7b56\u7565\u679a\u4e3e\n\n    \u5b9a\u4e49\u7f13\u5b58\u6ee1\u65f6\u7684\u6dd8\u6c70\u89c4\u5219\uff1a\n    - LRU: Least Recently Used\uff08\u6700\u8fd1\u6700\u5c11\u4f7f\u7528\uff09\uff0c\u6dd8\u6c70\u6700\u4e45\u672a\u8bbf\u95ee\u7684\u9879\n    - LFU: Least Frequently Used\uff08\u6700\u4e0d\u7ecf\u5e38\u4f7f\u7528\uff09\uff0c\u6dd8\u6c70\u8bbf\u95ee\u6b21\u6570\u6700\u5c11\u7684\u9879\n    - FIFO: First In First Out\uff08\u5148\u8fdb\u5148\u51fa\uff09\uff0c\u6dd8\u6c70\u6700\u65e9\u63d2\u5165\u7684\u9879\n    \"\"\"\n\n    LRU = \"lru\"  # \u6700\u8fd1\u6700\u5c11\u4f7f\u7528\n    LFU = \"lfu\"  # \u6700\u4e0d\u7ecf\u5e38\u4f7f\u7528\n    FIFO = \"fifo\"  # \u5148\u8fdb\u5148\u51fa\n</code></pre> <p>               Bases: <code>str</code>, <code>Enum</code></p> <p>\u540e\u7aef\u7c7b\u578b\u679a\u4e3e</p> <p>\u5b9a\u4e49\u652f\u6301\u7684\u7f13\u5b58\u540e\u7aef\u7c7b\u578b\uff1a - MEMORY: \u5185\u5b58\u540e\u7aef\uff0c\u9ad8\u6027\u80fd\uff0c\u8fdb\u7a0b\u91cd\u542f\u6570\u636e\u4e22\u5931 - FILE: \u6587\u4ef6\u540e\u7aef\uff0c\u6301\u4e45\u5316\uff0c\u652f\u6301\u70ed\u91cd\u8f7d - REDIS: Redis \u540e\u7aef\uff0c\u5206\u5e03\u5f0f\uff0c\u9ad8\u53ef\u7528</p> Source code in <code>src/symphra_cache/types.py</code> <pre><code>class BackendType(str, Enum):\n    \"\"\"\n    \u540e\u7aef\u7c7b\u578b\u679a\u4e3e\n\n    \u5b9a\u4e49\u652f\u6301\u7684\u7f13\u5b58\u540e\u7aef\u7c7b\u578b\uff1a\n    - MEMORY: \u5185\u5b58\u540e\u7aef\uff0c\u9ad8\u6027\u80fd\uff0c\u8fdb\u7a0b\u91cd\u542f\u6570\u636e\u4e22\u5931\n    - FILE: \u6587\u4ef6\u540e\u7aef\uff0c\u6301\u4e45\u5316\uff0c\u652f\u6301\u70ed\u91cd\u8f7d\n    - REDIS: Redis \u540e\u7aef\uff0c\u5206\u5e03\u5f0f\uff0c\u9ad8\u53ef\u7528\n    \"\"\"\n\n    MEMORY = \"memory\"  # \u5185\u5b58\u540e\u7aef\n    FILE = \"file\"  # \u6587\u4ef6\u540e\u7aef\n    REDIS = \"redis\"  # Redis \u540e\u7aef\n</code></pre>"},{"location":"zh/api/warming/","title":"\u9884\u70ed","text":"<p>\u9884\u52a0\u8f7d\u4e0e\u667a\u80fd\u9884\u70ed\u5de5\u5177\u3002</p> <p>\u7f13\u5b58\u9884\u70ed\u5668</p> <p>\u63d0\u4f9b\u591a\u79cd\u7f13\u5b58\u9884\u70ed\u7b56\u7565\uff0c\u652f\u6301\u624b\u52a8\u548c\u81ea\u52a8\u9884\u70ed\u3002</p> <p>\u9884\u70ed\u7b56\u7565\uff1a - \u624b\u52a8\u9884\u70ed\uff1a\u76f4\u63a5\u6307\u5b9a\u952e\u503c\u5bf9\u8fdb\u884c\u9884\u70ed - \u81ea\u52a8\u9884\u70ed\uff1a\u57fa\u4e8e\u5386\u53f2\u8bbf\u95ee\u6570\u636e\u667a\u80fd\u9884\u70ed - \u589e\u91cf\u9884\u70ed\uff1a\u5b9a\u671f\u68c0\u67e5\u5e76\u9884\u70ed\u70ed\u70b9\u6570\u636e</p> <p>\u4f7f\u7528\u793a\u4f8b\uff1a     &gt;&gt;&gt; warmer = CacheWarmer(cache)     &gt;&gt;&gt; await warmer.warm_up({\"key1\": \"value1\", \"key2\": \"value2\"})     &gt;&gt;&gt; await warmer.auto_warm_up()</p> Source code in <code>src/symphra_cache/warming.py</code> <pre><code>class CacheWarmer:\n    \"\"\"\n    \u7f13\u5b58\u9884\u70ed\u5668\n\n    \u63d0\u4f9b\u591a\u79cd\u7f13\u5b58\u9884\u70ed\u7b56\u7565\uff0c\u652f\u6301\u624b\u52a8\u548c\u81ea\u52a8\u9884\u70ed\u3002\n\n    \u9884\u70ed\u7b56\u7565\uff1a\n    - \u624b\u52a8\u9884\u70ed\uff1a\u76f4\u63a5\u6307\u5b9a\u952e\u503c\u5bf9\u8fdb\u884c\u9884\u70ed\n    - \u81ea\u52a8\u9884\u70ed\uff1a\u57fa\u4e8e\u5386\u53f2\u8bbf\u95ee\u6570\u636e\u667a\u80fd\u9884\u70ed\n    - \u589e\u91cf\u9884\u70ed\uff1a\u5b9a\u671f\u68c0\u67e5\u5e76\u9884\u70ed\u70ed\u70b9\u6570\u636e\n\n    \u4f7f\u7528\u793a\u4f8b\uff1a\n        &gt;&gt;&gt; warmer = CacheWarmer(cache)\n        &gt;&gt;&gt; await warmer.warm_up({\"key1\": \"value1\", \"key2\": \"value2\"})\n        &gt;&gt;&gt; await warmer.auto_warm_up()\n    \"\"\"\n\n    def __init__(\n        self,\n        cache: CacheManager,\n        strategy: str = \"manual\",\n        batch_size: int = 100,\n        ttl: int | None = None,\n    ) -&gt; None:\n        \"\"\"\n        \u521d\u59cb\u5316\u7f13\u5b58\u9884\u70ed\u5668\n\n        Args:\n            cache: \u7f13\u5b58\u7ba1\u7406\u5668\u5b9e\u4f8b\n            strategy: \u9884\u70ed\u7b56\u7565 (\"manual\", \"auto\", \"incremental\")\n            batch_size: \u6279\u91cf\u64cd\u4f5c\u5927\u5c0f\n            ttl: \u9884\u70ed\u6570\u636e\u7684\u9ed8\u8ba4\u8fc7\u671f\u65f6\u95f4\n        \"\"\"\n        self.cache = cache\n        self.strategy = strategy\n        self.batch_size = batch_size\n        self.ttl = ttl\n        self._warming_tasks: list[asyncio.Task[Any]] = []\n        self._access_patterns: dict[CacheKey, dict[str, Any]] = {}\n        self._last_warm_up_time = time.time()\n\n    async def warm_up(\n        self,\n        data: dict[CacheKey, CacheValue],\n        ttl: int | None = None,\n        batch_size: int | None = None,\n    ) -&gt; None:\n        \"\"\"\n        \u624b\u52a8\u9884\u70ed\u7f13\u5b58\n\n        Args:\n            data: \u8981\u9884\u70ed\u7684\u952e\u503c\u5bf9\u6570\u636e\n            ttl: \u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u4f7f\u7528\u9ed8\u8ba4\u503c\n            batch_size: \u6279\u91cf\u5927\u5c0f\uff0cNone \u4f7f\u7528\u9ed8\u8ba4\u503c\n        \"\"\"\n        ttl = ttl if ttl is not None else self.ttl\n        batch_size = batch_size if batch_size is not None else self.batch_size\n\n        if not data:\n            return\n\n        # \u6279\u91cf\u9884\u70ed\uff0c\u907f\u514d\u4e00\u6b21\u6027\u64cd\u4f5c\u8fc7\u591a\u6570\u636e\n        keys = list(data.keys())\n        for i in range(0, len(keys), batch_size):\n            batch_keys = keys[i : i + batch_size]\n            batch_data = {key: data[key] for key in batch_keys}\n\n            # \u6279\u91cf\u8bbe\u7f6e\u7f13\u5b58\n            await self.cache.aset_many(batch_data, ttl=ttl)\n\n            # \u77ed\u6682\u4f11\u7720\u907f\u514d\u963b\u585e\n            if i + batch_size &lt; len(keys):\n                await asyncio.sleep(0.01)\n\n        self._last_warm_up_time = time.time()\n\n    async def auto_warm_up(\n        self,\n        data_source: Callable[[], dict[CacheKey, CacheValue]],\n        ttl: int | None = None,\n    ) -&gt; None:\n        \"\"\"\n        \u81ea\u52a8\u9884\u70ed\u7f13\u5b58\n\n        \u57fa\u4e8e\u6570\u636e\u6e90\u51fd\u6570\u81ea\u52a8\u9884\u70ed\u7f13\u5b58\u3002\n\n        Args:\n            data_source: \u6570\u636e\u6e90\u51fd\u6570\uff0c\u8fd4\u56de\u8981\u9884\u70ed\u7684\u6570\u636e\n            ttl: \u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\n        \"\"\"\n        try:\n            data = await asyncio.to_thread(data_source)\n            await self.warm_up(data, ttl=ttl)\n        except Exception as e:\n            # \u8bb0\u5f55\u9519\u8bef\u4f46\u4e0d\u4e2d\u65ad\u9884\u70ed\u8fc7\u7a0b\n            print(f\"\u81ea\u52a8\u9884\u70ed\u5931\u8d25: {e}\")\n\n    async def incremental_warm_up(\n        self,\n        hot_keys: list[CacheKey],\n        data_loader: Callable[[list[CacheKey]], dict[CacheKey, CacheValue]],\n        ttl: int | None = None,\n    ) -&gt; None:\n        \"\"\"\n        \u589e\u91cf\u9884\u70ed\n\n        \u9884\u70ed\u70ed\u70b9\u952e\uff0c\u9002\u7528\u4e8e\u5927\u6570\u636e\u96c6\u7684\u6e10\u8fdb\u5f0f\u9884\u70ed\u3002\n\n        Args:\n            hot_keys: \u70ed\u70b9\u952e\u5217\u8868\n            data_loader: \u6570\u636e\u52a0\u8f7d\u51fd\u6570\n            ttl: \u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\n        \"\"\"\n        if not hot_keys:\n            return\n\n        # \u5206\u6279\u5904\u7406\u70ed\u70b9\u952e\n        for i in range(0, len(hot_keys), self.batch_size):\n            batch_keys = hot_keys[i : i + self.batch_size]\n\n            try:\n                # \u52a0\u8f7d\u6570\u636e\n                data = await asyncio.to_thread(data_loader, batch_keys)\n\n                # \u9884\u70ed\u6570\u636e\n                await self.warm_up(data, ttl=ttl)\n\n                # \u8bb0\u5f55\u8bbf\u95ee\u6a21\u5f0f\n                for key in batch_keys:\n                    self._record_access_pattern(key)\n\n            except Exception as e:\n                print(f\"\u589e\u91cf\u9884\u70ed\u5931\u8d25 (\u6279\u6b21 {i // self.batch_size + 1}): {e}\")\n\n            # \u77ed\u6682\u4f11\u7720\n            if i + self.batch_size &lt; len(hot_keys):\n                await asyncio.sleep(0.1)\n\n    def _record_access_pattern(self, key: CacheKey) -&gt; None:\n        \"\"\"\n        \u8bb0\u5f55\u8bbf\u95ee\u6a21\u5f0f\n\n        Args:\n            key: \u88ab\u8bbf\u95ee\u7684\u7f13\u5b58\u952e\n        \"\"\"\n        current_time = time.time()\n        if key not in self._access_patterns:\n            self._access_patterns[key] = {\n                \"count\": 0,\n                \"first_access\": current_time,\n                \"last_access\": current_time,\n            }\n\n        pattern = self._access_patterns[key]\n        pattern[\"count\"] += 1\n        pattern[\"last_access\"] = current_time\n\n    def get_hot_keys(self, min_access_count: int = 5, hours: float = 1.0) -&gt; list[CacheKey]:\n        \"\"\"\n        \u83b7\u53d6\u70ed\u70b9\u952e\n\n        Args:\n            min_access_count: \u6700\u5c0f\u8bbf\u95ee\u6b21\u6570\n            hours: \u65f6\u95f4\u7a97\u53e3\uff08\u5c0f\u65f6\uff09\n\n        Returns:\n            \u70ed\u70b9\u952e\u5217\u8868\n        \"\"\"\n        current_time = time.time()\n        cutoff_time = current_time - (hours * 3600)\n\n        hot_keys = []\n        for key, pattern in self._access_patterns.items():\n            if pattern[\"count\"] &gt;= min_access_count and pattern[\"last_access\"] &gt;= cutoff_time:\n                hot_keys.append(key)\n\n        return hot_keys\n\n    async def start_background_warming(\n        self,\n        data_source: Callable[[], dict[CacheKey, CacheValue]],\n        interval: int = 3600,  # \u9ed8\u8ba41\u5c0f\u65f6\n    ) -&gt; None:\n        \"\"\"\n        \u542f\u52a8\u540e\u53f0\u9884\u70ed\u4efb\u52a1\n\n        Args:\n            data_source: \u6570\u636e\u6e90\u51fd\u6570\n            interval: \u9884\u70ed\u95f4\u9694\uff08\u79d2\uff09\n        \"\"\"\n\n        async def _background_warm_up() -&gt; None:\n            while True:\n                try:\n                    await self.auto_warm_up(data_source)\n                    await asyncio.sleep(interval)\n                except asyncio.CancelledError:\n                    break\n                except Exception as e:\n                    print(f\"\u540e\u53f0\u9884\u70ed\u4efb\u52a1\u5931\u8d25: {e}\")\n                    await asyncio.sleep(interval)\n\n        task = asyncio.create_task(_background_warm_up())\n        self._warming_tasks.append(task)\n\n    def stop_background_warming(self) -&gt; None:\n        \"\"\"\u505c\u6b62\u6240\u6709\u540e\u53f0\u9884\u70ed\u4efb\u52a1\"\"\"\n        for task in self._warming_tasks:\n            task.cancel()\n        self._warming_tasks.clear()\n\n    async def warm_up_from_file(\n        self,\n        file_path: str,\n        format: str = \"json\",\n        ttl: int | None = None,\n    ) -&gt; None:\n        \"\"\"\n        \u4ece\u6587\u4ef6\u9884\u70ed\u7f13\u5b58\n\n        \u652f\u6301 JSON\u3001CSV \u683c\u5f0f\u3002\n\n        Args:\n            file_path: \u6587\u4ef6\u8def\u5f84\n            format: \u6587\u4ef6\u683c\u5f0f (\"json\", \"csv\")\n            ttl: \u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\n        \"\"\"\n        import csv\n        import json\n\n        data: dict[CacheKey, CacheValue] = {}\n\n        try:\n            if format.lower() == \"json\":\n                with open(file_path, encoding=\"utf-8\") as f:\n                    file_data = json.load(f)\n                    data.update(file_data)\n\n            elif format.lower() == \"csv\":\n                with open(file_path, encoding=\"utf-8\") as f:\n                    reader = csv.DictReader(f)\n                    for row in reader:\n                        if \"key\" in row and \"value\" in row:\n                            data[row[\"key\"]] = row[\"value\"]\n\n            else:\n                raise ValueError(f\"\u4e0d\u652f\u6301\u7684\u6587\u4ef6\u683c\u5f0f: {format}\")\n\n            await self.warm_up(data, ttl=ttl)\n\n        except Exception as e:\n            raise RuntimeError(f\"\u4ece\u6587\u4ef6\u9884\u70ed\u5931\u8d25: {e}\") from e\n\n    async def warm_up_with_ttl_map(\n        self,\n        data: dict[CacheKey, CacheValue],\n        ttl_map: dict[CacheKey, int],\n    ) -&gt; None:\n        \"\"\"\n        \u4f7f\u7528 TTL \u6620\u5c04\u9884\u70ed\u7f13\u5b58\n\n        \u4e0d\u540c\u952e\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u8fc7\u671f\u65f6\u95f4\u3002\n\n        Args:\n            data: \u8981\u9884\u70ed\u7684\u6570\u636e\n            ttl_map: \u6bcf\u4e2a\u952e\u7684 TTL \u6620\u5c04\n        \"\"\"\n        if not data:\n            return\n\n        # \u6309 TTL \u5206\u7ec4\n        ttl_groups: dict[int, dict[CacheKey, CacheValue]] = {}\n        for key, value in data.items():\n            ttl = ttl_map.get(key, self.ttl)\n            if ttl not in ttl_groups:\n                ttl_groups[ttl] = {}\n            ttl_groups[ttl][key] = value\n\n        # \u5206\u7ec4\u9884\u70ed\n        for group_ttl, group_data in ttl_groups.items():\n            await self.warm_up(group_data, ttl=group_ttl)\n\n    def get_warming_stats(self) -&gt; dict[str, Any]:\n        \"\"\"\n        \u83b7\u53d6\u9884\u70ed\u7edf\u8ba1\u4fe1\u606f\n\n        Returns:\n            \u7edf\u8ba1\u4fe1\u606f\u5b57\u5178\n        \"\"\"\n        return {\n            \"strategy\": self.strategy,\n            \"batch_size\": self.batch_size,\n            \"last_warm_up_time\": self._last_warm_up_time,\n            \"total_keys_warmed\": len(self._access_patterns),\n            \"hot_keys_count\": len(self.get_hot_keys()),\n            \"background_tasks_count\": len(self._warming_tasks),\n        }\n\n    async def close(self) -&gt; None:\n        \"\"\"\n        \u5173\u95ed\u9884\u70ed\u5668\uff0c\u6e05\u7406\u8d44\u6e90\n        \"\"\"\n        self.stop_background_warming()\n\n        # \u7b49\u5f85\u6240\u6709\u4efb\u52a1\u5b8c\u6210\n        if self._warming_tasks:\n            await asyncio.gather(*self._warming_tasks, return_exceptions=True)\n\n    def __repr__(self) -&gt; str:\n        \"\"\"\n        \u5b57\u7b26\u4e32\u8868\u793a\n        \"\"\"\n        return f\"CacheWarmer(strategy={self.strategy!r}, cache={self.cache!r})\"\n</code></pre> <p>               Bases: <code>CacheWarmer</code></p> <p>\u667a\u80fd\u7f13\u5b58\u9884\u70ed\u5668</p> <p>\u57fa\u4e8e\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u9884\u6d4b\u70ed\u70b9\u6570\u636e\u8fdb\u884c\u9884\u70ed\u3002</p> <p>\u7279\u6027\uff1a - \u65f6\u95f4\u5e8f\u5217\u5206\u6790 - \u8bbf\u95ee\u6a21\u5f0f\u5b66\u4e60 - \u81ea\u9002\u5e94\u9884\u70ed\u7b56\u7565 - \u6027\u80fd\u76d1\u63a7\u548c\u4f18\u5316</p> Source code in <code>src/symphra_cache/warming.py</code> <pre><code>class SmartCacheWarmer(CacheWarmer):\n    \"\"\"\n    \u667a\u80fd\u7f13\u5b58\u9884\u70ed\u5668\n\n    \u57fa\u4e8e\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u9884\u6d4b\u70ed\u70b9\u6570\u636e\u8fdb\u884c\u9884\u70ed\u3002\n\n    \u7279\u6027\uff1a\n    - \u65f6\u95f4\u5e8f\u5217\u5206\u6790\n    - \u8bbf\u95ee\u6a21\u5f0f\u5b66\u4e60\n    - \u81ea\u9002\u5e94\u9884\u70ed\u7b56\u7565\n    - \u6027\u80fd\u76d1\u63a7\u548c\u4f18\u5316\n    \"\"\"\n\n    def __init__(\n        self,\n        cache: CacheManager,\n        prediction_window: int = 24,  # \u9884\u6d4b\u7a97\u53e3\uff08\u5c0f\u65f6\uff09\n        learning_rate: float = 0.1,\n    ) -&gt; None:\n        \"\"\"\n        \u521d\u59cb\u5316\u667a\u80fd\u9884\u70ed\u5668\n\n        Args:\n            cache: \u7f13\u5b58\u7ba1\u7406\u5668\n            prediction_window: \u9884\u6d4b\u65f6\u95f4\u7a97\u53e3\uff08\u5c0f\u65f6\uff09\n            learning_rate: \u5b66\u4e60\u7387\n        \"\"\"\n        super().__init__(cache, strategy=\"smart\")\n        self.prediction_window = prediction_window\n        self.learning_rate = learning_rate\n        self._historical_data: list[dict[str, Any]] = []\n\n    def _analyze_access_patterns(self) -&gt; dict[CacheKey, float]:\n        \"\"\"\n        \u5206\u6790\u8bbf\u95ee\u6a21\u5f0f\uff0c\u9884\u6d4b\u70ed\u70b9\u6570\u636e\n\n        Returns:\n            \u952e\u7684\u70ed\u5ea6\u8bc4\u5206\u5b57\u5178\n        \"\"\"\n        if not self._access_patterns:\n            return {}\n\n        # \u7b80\u5355\u7684\u70ed\u5ea6\u8ba1\u7b97\uff1a\u57fa\u4e8e\u8bbf\u95ee\u9891\u7387\u548c\u6700\u8fd1\u8bbf\u95ee\u65f6\u95f4\n        current_time = time.time()\n        heat_scores: dict[CacheKey, float] = {}\n\n        for key, pattern in self._access_patterns.items():\n            access_count = pattern[\"count\"]\n            last_access = pattern[\"last_access\"]\n\n            # \u65f6\u95f4\u8870\u51cf\u56e0\u5b50\n            time_diff = current_time - last_access\n            time_factor = max(0, 1 - (time_diff / (3600 * 24)))  # 24\u5c0f\u65f6\u8870\u51cf\n\n            # \u70ed\u5ea6\u8bc4\u5206\n            heat_score = access_count * time_factor\n            heat_scores[key] = heat_score\n\n        return heat_scores\n\n    async def smart_warm_up(\n        self,\n        data_source: Callable[[list[CacheKey]], dict[CacheKey, CacheValue]],\n        top_k: int = 100,\n    ) -&gt; None:\n        \"\"\"\n        \u667a\u80fd\u9884\u70ed\n\n        \u57fa\u4e8e\u70ed\u5ea6\u5206\u6790\u9884\u70ed\u6700\u70ed\u7684 K \u4e2a\u952e\u3002\n\n        Args:\n            data_source: \u6570\u636e\u52a0\u8f7d\u51fd\u6570\n            top_k: \u9884\u70ed\u524d K \u4e2a\u70ed\u70b9\u952e\n        \"\"\"\n        # \u5206\u6790\u8bbf\u95ee\u6a21\u5f0f\n        heat_scores = self._analyze_access_patterns()\n\n        # \u83b7\u53d6\u6700\u70ed\u7684\u952e\n        sorted_keys = sorted(heat_scores.items(), key=lambda x: x[1], reverse=True)[:top_k]\n\n        hot_keys = [key for key, _ in sorted_keys]\n\n        if hot_keys:\n            # \u667a\u80fd\u9884\u70ed\n            await self.incremental_warm_up(hot_keys, data_source)\n\n    def record_cache_miss(self, key: CacheKey) -&gt; None:\n        \"\"\"\n        \u8bb0\u5f55\u7f13\u5b58\u672a\u547d\u4e2d\n\n        \u7528\u4e8e\u5b66\u4e60\u54ea\u4e9b\u6570\u636e\u5e94\u8be5\u88ab\u9884\u70ed\u3002\n\n        Args:\n            key: \u672a\u547d\u4e2d\u7684\u7f13\u5b58\u952e\n        \"\"\"\n        self._record_access_pattern(key)\n\n    def get_prediction_accuracy(self) -&gt; float:\n        \"\"\"\n        \u83b7\u53d6\u9884\u6d4b\u51c6\u786e\u7387\n\n        Returns:\n            \u51c6\u786e\u7387\uff080-1\u4e4b\u95f4\uff09\n        \"\"\"\n        # \u7b80\u5355\u7684\u51c6\u786e\u7387\u8ba1\u7b97\uff1a\u57fa\u4e8e\u7f13\u5b58\u547d\u4e2d\u7387\u63d0\u5347\n        if not self._historical_data:\n            return 0.0\n\n        # \u8fd9\u91cc\u53ef\u4ee5\u5b9e\u73b0\u66f4\u590d\u6742\u7684\u51c6\u786e\u7387\u8ba1\u7b97\u903b\u8f91\n        # \u6682\u65f6\u8fd4\u56de\u4e00\u4e2a\u7b80\u5355\u7684\u4f30\u7b97\u503c\n        return min(1.0, len(self._access_patterns) / 1000)\n</code></pre> <p>\u521b\u5efa\u7f13\u5b58\u9884\u70ed\u5668\u5de5\u5382\u51fd\u6570</p> <p>Parameters:</p> Name Type Description Default <code>cache</code> <code>CacheManager</code> <p>\u7f13\u5b58\u7ba1\u7406\u5668</p> required <code>strategy</code> <code>str</code> <p>\u9884\u70ed\u7b56\u7565</p> <code>'manual'</code> <code>**kwargs</code> <code>Any</code> <p>\u5176\u4ed6\u53c2\u6570</p> <code>{}</code> <p>Returns:</p> Type Description <code>CacheWarmer</code> <p>\u7f13\u5b58\u9884\u70ed\u5668\u5b9e\u4f8b</p> Source code in <code>src/symphra_cache/warming.py</code> <pre><code>def create_warmer(\n    cache: CacheManager,\n    strategy: str = \"manual\",\n    **kwargs: Any,\n) -&gt; CacheWarmer:\n    \"\"\"\n    \u521b\u5efa\u7f13\u5b58\u9884\u70ed\u5668\u5de5\u5382\u51fd\u6570\n\n    Args:\n        cache: \u7f13\u5b58\u7ba1\u7406\u5668\n        strategy: \u9884\u70ed\u7b56\u7565\n        **kwargs: \u5176\u4ed6\u53c2\u6570\n\n    Returns:\n        \u7f13\u5b58\u9884\u70ed\u5668\u5b9e\u4f8b\n    \"\"\"\n    if strategy == \"smart\":\n        return SmartCacheWarmer(cache, **kwargs)\n    else:\n        return CacheWarmer(cache, strategy=strategy, **kwargs)\n</code></pre>"},{"location":"zh/api/warming/#symphra_cache.warming.CacheWarmer.__init__","title":"<code>__init__(cache, strategy='manual', batch_size=100, ttl=None)</code>","text":"<p>\u521d\u59cb\u5316\u7f13\u5b58\u9884\u70ed\u5668</p> <p>Parameters:</p> Name Type Description Default <code>cache</code> <code>CacheManager</code> <p>\u7f13\u5b58\u7ba1\u7406\u5668\u5b9e\u4f8b</p> required <code>strategy</code> <code>str</code> <p>\u9884\u70ed\u7b56\u7565 (\"manual\", \"auto\", \"incremental\")</p> <code>'manual'</code> <code>batch_size</code> <code>int</code> <p>\u6279\u91cf\u64cd\u4f5c\u5927\u5c0f</p> <code>100</code> <code>ttl</code> <code>int | None</code> <p>\u9884\u70ed\u6570\u636e\u7684\u9ed8\u8ba4\u8fc7\u671f\u65f6\u95f4</p> <code>None</code> Source code in <code>src/symphra_cache/warming.py</code> <pre><code>def __init__(\n    self,\n    cache: CacheManager,\n    strategy: str = \"manual\",\n    batch_size: int = 100,\n    ttl: int | None = None,\n) -&gt; None:\n    \"\"\"\n    \u521d\u59cb\u5316\u7f13\u5b58\u9884\u70ed\u5668\n\n    Args:\n        cache: \u7f13\u5b58\u7ba1\u7406\u5668\u5b9e\u4f8b\n        strategy: \u9884\u70ed\u7b56\u7565 (\"manual\", \"auto\", \"incremental\")\n        batch_size: \u6279\u91cf\u64cd\u4f5c\u5927\u5c0f\n        ttl: \u9884\u70ed\u6570\u636e\u7684\u9ed8\u8ba4\u8fc7\u671f\u65f6\u95f4\n    \"\"\"\n    self.cache = cache\n    self.strategy = strategy\n    self.batch_size = batch_size\n    self.ttl = ttl\n    self._warming_tasks: list[asyncio.Task[Any]] = []\n    self._access_patterns: dict[CacheKey, dict[str, Any]] = {}\n    self._last_warm_up_time = time.time()\n</code></pre>"},{"location":"zh/api/warming/#symphra_cache.warming.CacheWarmer.__repr__","title":"<code>__repr__()</code>","text":"<p>\u5b57\u7b26\u4e32\u8868\u793a</p> Source code in <code>src/symphra_cache/warming.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"\n    \u5b57\u7b26\u4e32\u8868\u793a\n    \"\"\"\n    return f\"CacheWarmer(strategy={self.strategy!r}, cache={self.cache!r})\"\n</code></pre>"},{"location":"zh/api/warming/#symphra_cache.warming.CacheWarmer.auto_warm_up","title":"<code>auto_warm_up(data_source, ttl=None)</code>  <code>async</code>","text":"<p>\u81ea\u52a8\u9884\u70ed\u7f13\u5b58</p> <p>\u57fa\u4e8e\u6570\u636e\u6e90\u51fd\u6570\u81ea\u52a8\u9884\u70ed\u7f13\u5b58\u3002</p> <p>Parameters:</p> Name Type Description Default <code>data_source</code> <code>Callable[[], dict[CacheKey, CacheValue]]</code> <p>\u6570\u636e\u6e90\u51fd\u6570\uff0c\u8fd4\u56de\u8981\u9884\u70ed\u7684\u6570\u636e</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09</p> <code>None</code> Source code in <code>src/symphra_cache/warming.py</code> <pre><code>async def auto_warm_up(\n    self,\n    data_source: Callable[[], dict[CacheKey, CacheValue]],\n    ttl: int | None = None,\n) -&gt; None:\n    \"\"\"\n    \u81ea\u52a8\u9884\u70ed\u7f13\u5b58\n\n    \u57fa\u4e8e\u6570\u636e\u6e90\u51fd\u6570\u81ea\u52a8\u9884\u70ed\u7f13\u5b58\u3002\n\n    Args:\n        data_source: \u6570\u636e\u6e90\u51fd\u6570\uff0c\u8fd4\u56de\u8981\u9884\u70ed\u7684\u6570\u636e\n        ttl: \u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\n    \"\"\"\n    try:\n        data = await asyncio.to_thread(data_source)\n        await self.warm_up(data, ttl=ttl)\n    except Exception as e:\n        # \u8bb0\u5f55\u9519\u8bef\u4f46\u4e0d\u4e2d\u65ad\u9884\u70ed\u8fc7\u7a0b\n        print(f\"\u81ea\u52a8\u9884\u70ed\u5931\u8d25: {e}\")\n</code></pre>"},{"location":"zh/api/warming/#symphra_cache.warming.CacheWarmer.close","title":"<code>close()</code>  <code>async</code>","text":"<p>\u5173\u95ed\u9884\u70ed\u5668\uff0c\u6e05\u7406\u8d44\u6e90</p> Source code in <code>src/symphra_cache/warming.py</code> <pre><code>async def close(self) -&gt; None:\n    \"\"\"\n    \u5173\u95ed\u9884\u70ed\u5668\uff0c\u6e05\u7406\u8d44\u6e90\n    \"\"\"\n    self.stop_background_warming()\n\n    # \u7b49\u5f85\u6240\u6709\u4efb\u52a1\u5b8c\u6210\n    if self._warming_tasks:\n        await asyncio.gather(*self._warming_tasks, return_exceptions=True)\n</code></pre>"},{"location":"zh/api/warming/#symphra_cache.warming.CacheWarmer.get_hot_keys","title":"<code>get_hot_keys(min_access_count=5, hours=1.0)</code>","text":"<p>\u83b7\u53d6\u70ed\u70b9\u952e</p> <p>Parameters:</p> Name Type Description Default <code>min_access_count</code> <code>int</code> <p>\u6700\u5c0f\u8bbf\u95ee\u6b21\u6570</p> <code>5</code> <code>hours</code> <code>float</code> <p>\u65f6\u95f4\u7a97\u53e3\uff08\u5c0f\u65f6\uff09</p> <code>1.0</code> <p>Returns:</p> Type Description <code>list[CacheKey]</code> <p>\u70ed\u70b9\u952e\u5217\u8868</p> Source code in <code>src/symphra_cache/warming.py</code> <pre><code>def get_hot_keys(self, min_access_count: int = 5, hours: float = 1.0) -&gt; list[CacheKey]:\n    \"\"\"\n    \u83b7\u53d6\u70ed\u70b9\u952e\n\n    Args:\n        min_access_count: \u6700\u5c0f\u8bbf\u95ee\u6b21\u6570\n        hours: \u65f6\u95f4\u7a97\u53e3\uff08\u5c0f\u65f6\uff09\n\n    Returns:\n        \u70ed\u70b9\u952e\u5217\u8868\n    \"\"\"\n    current_time = time.time()\n    cutoff_time = current_time - (hours * 3600)\n\n    hot_keys = []\n    for key, pattern in self._access_patterns.items():\n        if pattern[\"count\"] &gt;= min_access_count and pattern[\"last_access\"] &gt;= cutoff_time:\n            hot_keys.append(key)\n\n    return hot_keys\n</code></pre>"},{"location":"zh/api/warming/#symphra_cache.warming.CacheWarmer.get_warming_stats","title":"<code>get_warming_stats()</code>","text":"<p>\u83b7\u53d6\u9884\u70ed\u7edf\u8ba1\u4fe1\u606f</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>\u7edf\u8ba1\u4fe1\u606f\u5b57\u5178</p> Source code in <code>src/symphra_cache/warming.py</code> <pre><code>def get_warming_stats(self) -&gt; dict[str, Any]:\n    \"\"\"\n    \u83b7\u53d6\u9884\u70ed\u7edf\u8ba1\u4fe1\u606f\n\n    Returns:\n        \u7edf\u8ba1\u4fe1\u606f\u5b57\u5178\n    \"\"\"\n    return {\n        \"strategy\": self.strategy,\n        \"batch_size\": self.batch_size,\n        \"last_warm_up_time\": self._last_warm_up_time,\n        \"total_keys_warmed\": len(self._access_patterns),\n        \"hot_keys_count\": len(self.get_hot_keys()),\n        \"background_tasks_count\": len(self._warming_tasks),\n    }\n</code></pre>"},{"location":"zh/api/warming/#symphra_cache.warming.CacheWarmer.incremental_warm_up","title":"<code>incremental_warm_up(hot_keys, data_loader, ttl=None)</code>  <code>async</code>","text":"<p>\u589e\u91cf\u9884\u70ed</p> <p>\u9884\u70ed\u70ed\u70b9\u952e\uff0c\u9002\u7528\u4e8e\u5927\u6570\u636e\u96c6\u7684\u6e10\u8fdb\u5f0f\u9884\u70ed\u3002</p> <p>Parameters:</p> Name Type Description Default <code>hot_keys</code> <code>list[CacheKey]</code> <p>\u70ed\u70b9\u952e\u5217\u8868</p> required <code>data_loader</code> <code>Callable[[list[CacheKey]], dict[CacheKey, CacheValue]]</code> <p>\u6570\u636e\u52a0\u8f7d\u51fd\u6570</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09</p> <code>None</code> Source code in <code>src/symphra_cache/warming.py</code> <pre><code>async def incremental_warm_up(\n    self,\n    hot_keys: list[CacheKey],\n    data_loader: Callable[[list[CacheKey]], dict[CacheKey, CacheValue]],\n    ttl: int | None = None,\n) -&gt; None:\n    \"\"\"\n    \u589e\u91cf\u9884\u70ed\n\n    \u9884\u70ed\u70ed\u70b9\u952e\uff0c\u9002\u7528\u4e8e\u5927\u6570\u636e\u96c6\u7684\u6e10\u8fdb\u5f0f\u9884\u70ed\u3002\n\n    Args:\n        hot_keys: \u70ed\u70b9\u952e\u5217\u8868\n        data_loader: \u6570\u636e\u52a0\u8f7d\u51fd\u6570\n        ttl: \u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\n    \"\"\"\n    if not hot_keys:\n        return\n\n    # \u5206\u6279\u5904\u7406\u70ed\u70b9\u952e\n    for i in range(0, len(hot_keys), self.batch_size):\n        batch_keys = hot_keys[i : i + self.batch_size]\n\n        try:\n            # \u52a0\u8f7d\u6570\u636e\n            data = await asyncio.to_thread(data_loader, batch_keys)\n\n            # \u9884\u70ed\u6570\u636e\n            await self.warm_up(data, ttl=ttl)\n\n            # \u8bb0\u5f55\u8bbf\u95ee\u6a21\u5f0f\n            for key in batch_keys:\n                self._record_access_pattern(key)\n\n        except Exception as e:\n            print(f\"\u589e\u91cf\u9884\u70ed\u5931\u8d25 (\u6279\u6b21 {i // self.batch_size + 1}): {e}\")\n\n        # \u77ed\u6682\u4f11\u7720\n        if i + self.batch_size &lt; len(hot_keys):\n            await asyncio.sleep(0.1)\n</code></pre>"},{"location":"zh/api/warming/#symphra_cache.warming.CacheWarmer.start_background_warming","title":"<code>start_background_warming(data_source, interval=3600)</code>  <code>async</code>","text":"<p>\u542f\u52a8\u540e\u53f0\u9884\u70ed\u4efb\u52a1</p> <p>Parameters:</p> Name Type Description Default <code>data_source</code> <code>Callable[[], dict[CacheKey, CacheValue]]</code> <p>\u6570\u636e\u6e90\u51fd\u6570</p> required <code>interval</code> <code>int</code> <p>\u9884\u70ed\u95f4\u9694\uff08\u79d2\uff09</p> <code>3600</code> Source code in <code>src/symphra_cache/warming.py</code> <pre><code>async def start_background_warming(\n    self,\n    data_source: Callable[[], dict[CacheKey, CacheValue]],\n    interval: int = 3600,  # \u9ed8\u8ba41\u5c0f\u65f6\n) -&gt; None:\n    \"\"\"\n    \u542f\u52a8\u540e\u53f0\u9884\u70ed\u4efb\u52a1\n\n    Args:\n        data_source: \u6570\u636e\u6e90\u51fd\u6570\n        interval: \u9884\u70ed\u95f4\u9694\uff08\u79d2\uff09\n    \"\"\"\n\n    async def _background_warm_up() -&gt; None:\n        while True:\n            try:\n                await self.auto_warm_up(data_source)\n                await asyncio.sleep(interval)\n            except asyncio.CancelledError:\n                break\n            except Exception as e:\n                print(f\"\u540e\u53f0\u9884\u70ed\u4efb\u52a1\u5931\u8d25: {e}\")\n                await asyncio.sleep(interval)\n\n    task = asyncio.create_task(_background_warm_up())\n    self._warming_tasks.append(task)\n</code></pre>"},{"location":"zh/api/warming/#symphra_cache.warming.CacheWarmer.stop_background_warming","title":"<code>stop_background_warming()</code>","text":"<p>\u505c\u6b62\u6240\u6709\u540e\u53f0\u9884\u70ed\u4efb\u52a1</p> Source code in <code>src/symphra_cache/warming.py</code> <pre><code>def stop_background_warming(self) -&gt; None:\n    \"\"\"\u505c\u6b62\u6240\u6709\u540e\u53f0\u9884\u70ed\u4efb\u52a1\"\"\"\n    for task in self._warming_tasks:\n        task.cancel()\n    self._warming_tasks.clear()\n</code></pre>"},{"location":"zh/api/warming/#symphra_cache.warming.CacheWarmer.warm_up","title":"<code>warm_up(data, ttl=None, batch_size=None)</code>  <code>async</code>","text":"<p>\u624b\u52a8\u9884\u70ed\u7f13\u5b58</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict[CacheKey, CacheValue]</code> <p>\u8981\u9884\u70ed\u7684\u952e\u503c\u5bf9\u6570\u636e</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u4f7f\u7528\u9ed8\u8ba4\u503c</p> <code>None</code> <code>batch_size</code> <code>int | None</code> <p>\u6279\u91cf\u5927\u5c0f\uff0cNone \u4f7f\u7528\u9ed8\u8ba4\u503c</p> <code>None</code> Source code in <code>src/symphra_cache/warming.py</code> <pre><code>async def warm_up(\n    self,\n    data: dict[CacheKey, CacheValue],\n    ttl: int | None = None,\n    batch_size: int | None = None,\n) -&gt; None:\n    \"\"\"\n    \u624b\u52a8\u9884\u70ed\u7f13\u5b58\n\n    Args:\n        data: \u8981\u9884\u70ed\u7684\u952e\u503c\u5bf9\u6570\u636e\n        ttl: \u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u4f7f\u7528\u9ed8\u8ba4\u503c\n        batch_size: \u6279\u91cf\u5927\u5c0f\uff0cNone \u4f7f\u7528\u9ed8\u8ba4\u503c\n    \"\"\"\n    ttl = ttl if ttl is not None else self.ttl\n    batch_size = batch_size if batch_size is not None else self.batch_size\n\n    if not data:\n        return\n\n    # \u6279\u91cf\u9884\u70ed\uff0c\u907f\u514d\u4e00\u6b21\u6027\u64cd\u4f5c\u8fc7\u591a\u6570\u636e\n    keys = list(data.keys())\n    for i in range(0, len(keys), batch_size):\n        batch_keys = keys[i : i + batch_size]\n        batch_data = {key: data[key] for key in batch_keys}\n\n        # \u6279\u91cf\u8bbe\u7f6e\u7f13\u5b58\n        await self.cache.aset_many(batch_data, ttl=ttl)\n\n        # \u77ed\u6682\u4f11\u7720\u907f\u514d\u963b\u585e\n        if i + batch_size &lt; len(keys):\n            await asyncio.sleep(0.01)\n\n    self._last_warm_up_time = time.time()\n</code></pre>"},{"location":"zh/api/warming/#symphra_cache.warming.CacheWarmer.warm_up_from_file","title":"<code>warm_up_from_file(file_path, format='json', ttl=None)</code>  <code>async</code>","text":"<p>\u4ece\u6587\u4ef6\u9884\u70ed\u7f13\u5b58</p> <p>\u652f\u6301 JSON\u3001CSV \u683c\u5f0f\u3002</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>\u6587\u4ef6\u8def\u5f84</p> required <code>format</code> <code>str</code> <p>\u6587\u4ef6\u683c\u5f0f (\"json\", \"csv\")</p> <code>'json'</code> <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09</p> <code>None</code> Source code in <code>src/symphra_cache/warming.py</code> <pre><code>async def warm_up_from_file(\n    self,\n    file_path: str,\n    format: str = \"json\",\n    ttl: int | None = None,\n) -&gt; None:\n    \"\"\"\n    \u4ece\u6587\u4ef6\u9884\u70ed\u7f13\u5b58\n\n    \u652f\u6301 JSON\u3001CSV \u683c\u5f0f\u3002\n\n    Args:\n        file_path: \u6587\u4ef6\u8def\u5f84\n        format: \u6587\u4ef6\u683c\u5f0f (\"json\", \"csv\")\n        ttl: \u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\n    \"\"\"\n    import csv\n    import json\n\n    data: dict[CacheKey, CacheValue] = {}\n\n    try:\n        if format.lower() == \"json\":\n            with open(file_path, encoding=\"utf-8\") as f:\n                file_data = json.load(f)\n                data.update(file_data)\n\n        elif format.lower() == \"csv\":\n            with open(file_path, encoding=\"utf-8\") as f:\n                reader = csv.DictReader(f)\n                for row in reader:\n                    if \"key\" in row and \"value\" in row:\n                        data[row[\"key\"]] = row[\"value\"]\n\n        else:\n            raise ValueError(f\"\u4e0d\u652f\u6301\u7684\u6587\u4ef6\u683c\u5f0f: {format}\")\n\n        await self.warm_up(data, ttl=ttl)\n\n    except Exception as e:\n        raise RuntimeError(f\"\u4ece\u6587\u4ef6\u9884\u70ed\u5931\u8d25: {e}\") from e\n</code></pre>"},{"location":"zh/api/warming/#symphra_cache.warming.CacheWarmer.warm_up_with_ttl_map","title":"<code>warm_up_with_ttl_map(data, ttl_map)</code>  <code>async</code>","text":"<p>\u4f7f\u7528 TTL \u6620\u5c04\u9884\u70ed\u7f13\u5b58</p> <p>\u4e0d\u540c\u952e\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u8fc7\u671f\u65f6\u95f4\u3002</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict[CacheKey, CacheValue]</code> <p>\u8981\u9884\u70ed\u7684\u6570\u636e</p> required <code>ttl_map</code> <code>dict[CacheKey, int]</code> <p>\u6bcf\u4e2a\u952e\u7684 TTL \u6620\u5c04</p> required Source code in <code>src/symphra_cache/warming.py</code> <pre><code>async def warm_up_with_ttl_map(\n    self,\n    data: dict[CacheKey, CacheValue],\n    ttl_map: dict[CacheKey, int],\n) -&gt; None:\n    \"\"\"\n    \u4f7f\u7528 TTL \u6620\u5c04\u9884\u70ed\u7f13\u5b58\n\n    \u4e0d\u540c\u952e\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u8fc7\u671f\u65f6\u95f4\u3002\n\n    Args:\n        data: \u8981\u9884\u70ed\u7684\u6570\u636e\n        ttl_map: \u6bcf\u4e2a\u952e\u7684 TTL \u6620\u5c04\n    \"\"\"\n    if not data:\n        return\n\n    # \u6309 TTL \u5206\u7ec4\n    ttl_groups: dict[int, dict[CacheKey, CacheValue]] = {}\n    for key, value in data.items():\n        ttl = ttl_map.get(key, self.ttl)\n        if ttl not in ttl_groups:\n            ttl_groups[ttl] = {}\n        ttl_groups[ttl][key] = value\n\n    # \u5206\u7ec4\u9884\u70ed\n    for group_ttl, group_data in ttl_groups.items():\n        await self.warm_up(group_data, ttl=group_ttl)\n</code></pre>"},{"location":"zh/api/warming/#symphra_cache.warming.SmartCacheWarmer.__init__","title":"<code>__init__(cache, prediction_window=24, learning_rate=0.1)</code>","text":"<p>\u521d\u59cb\u5316\u667a\u80fd\u9884\u70ed\u5668</p> <p>Parameters:</p> Name Type Description Default <code>cache</code> <code>CacheManager</code> <p>\u7f13\u5b58\u7ba1\u7406\u5668</p> required <code>prediction_window</code> <code>int</code> <p>\u9884\u6d4b\u65f6\u95f4\u7a97\u53e3\uff08\u5c0f\u65f6\uff09</p> <code>24</code> <code>learning_rate</code> <code>float</code> <p>\u5b66\u4e60\u7387</p> <code>0.1</code> Source code in <code>src/symphra_cache/warming.py</code> <pre><code>def __init__(\n    self,\n    cache: CacheManager,\n    prediction_window: int = 24,  # \u9884\u6d4b\u7a97\u53e3\uff08\u5c0f\u65f6\uff09\n    learning_rate: float = 0.1,\n) -&gt; None:\n    \"\"\"\n    \u521d\u59cb\u5316\u667a\u80fd\u9884\u70ed\u5668\n\n    Args:\n        cache: \u7f13\u5b58\u7ba1\u7406\u5668\n        prediction_window: \u9884\u6d4b\u65f6\u95f4\u7a97\u53e3\uff08\u5c0f\u65f6\uff09\n        learning_rate: \u5b66\u4e60\u7387\n    \"\"\"\n    super().__init__(cache, strategy=\"smart\")\n    self.prediction_window = prediction_window\n    self.learning_rate = learning_rate\n    self._historical_data: list[dict[str, Any]] = []\n</code></pre>"},{"location":"zh/api/warming/#symphra_cache.warming.SmartCacheWarmer.get_prediction_accuracy","title":"<code>get_prediction_accuracy()</code>","text":"<p>\u83b7\u53d6\u9884\u6d4b\u51c6\u786e\u7387</p> <p>Returns:</p> Type Description <code>float</code> <p>\u51c6\u786e\u7387\uff080-1\u4e4b\u95f4\uff09</p> Source code in <code>src/symphra_cache/warming.py</code> <pre><code>def get_prediction_accuracy(self) -&gt; float:\n    \"\"\"\n    \u83b7\u53d6\u9884\u6d4b\u51c6\u786e\u7387\n\n    Returns:\n        \u51c6\u786e\u7387\uff080-1\u4e4b\u95f4\uff09\n    \"\"\"\n    # \u7b80\u5355\u7684\u51c6\u786e\u7387\u8ba1\u7b97\uff1a\u57fa\u4e8e\u7f13\u5b58\u547d\u4e2d\u7387\u63d0\u5347\n    if not self._historical_data:\n        return 0.0\n\n    # \u8fd9\u91cc\u53ef\u4ee5\u5b9e\u73b0\u66f4\u590d\u6742\u7684\u51c6\u786e\u7387\u8ba1\u7b97\u903b\u8f91\n    # \u6682\u65f6\u8fd4\u56de\u4e00\u4e2a\u7b80\u5355\u7684\u4f30\u7b97\u503c\n    return min(1.0, len(self._access_patterns) / 1000)\n</code></pre>"},{"location":"zh/api/warming/#symphra_cache.warming.SmartCacheWarmer.record_cache_miss","title":"<code>record_cache_miss(key)</code>","text":"<p>\u8bb0\u5f55\u7f13\u5b58\u672a\u547d\u4e2d</p> <p>\u7528\u4e8e\u5b66\u4e60\u54ea\u4e9b\u6570\u636e\u5e94\u8be5\u88ab\u9884\u70ed\u3002</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u672a\u547d\u4e2d\u7684\u7f13\u5b58\u952e</p> required Source code in <code>src/symphra_cache/warming.py</code> <pre><code>def record_cache_miss(self, key: CacheKey) -&gt; None:\n    \"\"\"\n    \u8bb0\u5f55\u7f13\u5b58\u672a\u547d\u4e2d\n\n    \u7528\u4e8e\u5b66\u4e60\u54ea\u4e9b\u6570\u636e\u5e94\u8be5\u88ab\u9884\u70ed\u3002\n\n    Args:\n        key: \u672a\u547d\u4e2d\u7684\u7f13\u5b58\u952e\n    \"\"\"\n    self._record_access_pattern(key)\n</code></pre>"},{"location":"zh/api/warming/#symphra_cache.warming.SmartCacheWarmer.smart_warm_up","title":"<code>smart_warm_up(data_source, top_k=100)</code>  <code>async</code>","text":"<p>\u667a\u80fd\u9884\u70ed</p> <p>\u57fa\u4e8e\u70ed\u5ea6\u5206\u6790\u9884\u70ed\u6700\u70ed\u7684 K \u4e2a\u952e\u3002</p> <p>Parameters:</p> Name Type Description Default <code>data_source</code> <code>Callable[[list[CacheKey]], dict[CacheKey, CacheValue]]</code> <p>\u6570\u636e\u52a0\u8f7d\u51fd\u6570</p> required <code>top_k</code> <code>int</code> <p>\u9884\u70ed\u524d K \u4e2a\u70ed\u70b9\u952e</p> <code>100</code> Source code in <code>src/symphra_cache/warming.py</code> <pre><code>async def smart_warm_up(\n    self,\n    data_source: Callable[[list[CacheKey]], dict[CacheKey, CacheValue]],\n    top_k: int = 100,\n) -&gt; None:\n    \"\"\"\n    \u667a\u80fd\u9884\u70ed\n\n    \u57fa\u4e8e\u70ed\u5ea6\u5206\u6790\u9884\u70ed\u6700\u70ed\u7684 K \u4e2a\u952e\u3002\n\n    Args:\n        data_source: \u6570\u636e\u52a0\u8f7d\u51fd\u6570\n        top_k: \u9884\u70ed\u524d K \u4e2a\u70ed\u70b9\u952e\n    \"\"\"\n    # \u5206\u6790\u8bbf\u95ee\u6a21\u5f0f\n    heat_scores = self._analyze_access_patterns()\n\n    # \u83b7\u53d6\u6700\u70ed\u7684\u952e\n    sorted_keys = sorted(heat_scores.items(), key=lambda x: x[1], reverse=True)[:top_k]\n\n    hot_keys = [key for key, _ in sorted_keys]\n\n    if hot_keys:\n        # \u667a\u80fd\u9884\u70ed\n        await self.incremental_warm_up(hot_keys, data_source)\n</code></pre>"},{"location":"zh/api/backends/file/","title":"\u6587\u4ef6\u540e\u7aef","text":"<p>\u57fa\u4e8e\u6587\u4ef6\u7cfb\u7edf\u7684\u7f13\u5b58\uff0c\u652f\u6301\u70ed\u91cd\u8f7d\uff0c\u9002\u5408\u5f00\u53d1\u4e0e\u7b80\u5355\u6301\u4e45\u5316\u573a\u666f\u3002</p> <p>               Bases: <code>BaseBackend</code></p> <p>\u6587\u4ef6\u7f13\u5b58\u540e\u7aef</p> <p>\u57fa\u4e8e SQLite \u5b9e\u73b0\u7684\u6301\u4e45\u5316\u7f13\u5b58\uff0c\u652f\u6301\u70ed\u91cd\u8f7d\u548c LRU \u6dd8\u6c70\u3002</p> <p>\u67b6\u6784\u8bbe\u8ba1\uff1a - \u5b58\u50a8\u5f15\u64ce\uff1aSQLite\uff08WAL \u6a21\u5f0f\uff0c\u9ad8\u5e76\u53d1\uff09 - \u8868\u7ed3\u6784\uff1acache_entries(key PRIMARY KEY, value BLOB, expires_at REAL, last_access REAL) - LRU \u5b9e\u73b0\uff1a\u57fa\u4e8e last_access \u5b57\u6bb5\uff0c\u5b9a\u671f\u6e05\u7406 - \u5e8f\u5217\u5316\uff1a\u53ef\u914d\u7f6e\uff08JSON/Pickle/MessagePack\uff09</p> <p>\u6027\u80fd\u7279\u70b9\uff1a - \u8bfb\u53d6\uff1a~1-5ms\uff08\u53d6\u51b3\u4e8e\u78c1\u76d8\u6027\u80fd\uff09 - \u5199\u5165\uff1a~1-5ms\uff08WAL \u6a21\u5f0f\u5f02\u6b65\uff09 - \u70ed\u91cd\u8f7d\uff1a\u6587\u4ef6 mtime \u68c0\u6d4b\uff0c\u589e\u91cf\u52a0\u8f7d</p> <p>\u4f7f\u7528\u793a\u4f8b\uff1a     &gt;&gt;&gt; backend = FileBackend(     ...     db_path=Path(\"./cache.db\"),     ...     max_size=10000,     ...     serialization_mode=SerializationMode.PICKLE,     ... )     &gt;&gt;&gt; backend.set(\"user:123\", {\"name\": \"Alice\"}, ttl=3600)</p> Source code in <code>src/symphra_cache/backends/file.py</code> <pre><code>class FileBackend(BaseBackend):\n    \"\"\"\n    \u6587\u4ef6\u7f13\u5b58\u540e\u7aef\n\n    \u57fa\u4e8e SQLite \u5b9e\u73b0\u7684\u6301\u4e45\u5316\u7f13\u5b58\uff0c\u652f\u6301\u70ed\u91cd\u8f7d\u548c LRU \u6dd8\u6c70\u3002\n\n    \u67b6\u6784\u8bbe\u8ba1\uff1a\n    - \u5b58\u50a8\u5f15\u64ce\uff1aSQLite\uff08WAL \u6a21\u5f0f\uff0c\u9ad8\u5e76\u53d1\uff09\n    - \u8868\u7ed3\u6784\uff1acache_entries(key PRIMARY KEY, value BLOB, expires_at REAL, last_access REAL)\n    - LRU \u5b9e\u73b0\uff1a\u57fa\u4e8e last_access \u5b57\u6bb5\uff0c\u5b9a\u671f\u6e05\u7406\n    - \u5e8f\u5217\u5316\uff1a\u53ef\u914d\u7f6e\uff08JSON/Pickle/MessagePack\uff09\n\n    \u6027\u80fd\u7279\u70b9\uff1a\n    - \u8bfb\u53d6\uff1a~1-5ms\uff08\u53d6\u51b3\u4e8e\u78c1\u76d8\u6027\u80fd\uff09\n    - \u5199\u5165\uff1a~1-5ms\uff08WAL \u6a21\u5f0f\u5f02\u6b65\uff09\n    - \u70ed\u91cd\u8f7d\uff1a\u6587\u4ef6 mtime \u68c0\u6d4b\uff0c\u589e\u91cf\u52a0\u8f7d\n\n    \u4f7f\u7528\u793a\u4f8b\uff1a\n        &gt;&gt;&gt; backend = FileBackend(\n        ...     db_path=Path(\"./cache.db\"),\n        ...     max_size=10000,\n        ...     serialization_mode=SerializationMode.PICKLE,\n        ... )\n        &gt;&gt;&gt; backend.set(\"user:123\", {\"name\": \"Alice\"}, ttl=3600)\n    \"\"\"\n\n    def __init__(\n        self,\n        db_path: Path | str = \"./symphra_cache.db\",\n        max_size: int = 10000,\n        serialization_mode: SerializationMode | str = SerializationMode.PICKLE,\n        cleanup_interval: int = 300,  # 5 \u5206\u949f\n        enable_hot_reload: bool = False,\n    ) -&gt; None:\n        \"\"\"\n        \u521d\u59cb\u5316\u6587\u4ef6\u540e\u7aef\n\n        Args:\n            db_path: SQLite \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84\n            max_size: \u6700\u5927\u7f13\u5b58\u6761\u6570\uff08\u8d85\u8fc7\u89e6\u53d1 LRU \u6dd8\u6c70\uff09\n            serialization_mode: \u5e8f\u5217\u5316\u6a21\u5f0f\n            cleanup_interval: \u6e05\u7406\u95f4\u9694\uff08\u79d2\uff09\n            enable_hot_reload: \u662f\u5426\u542f\u7528\u70ed\u91cd\u8f7d\uff08\u5f00\u53d1\u6a21\u5f0f\uff09\n\n        \u793a\u4f8b\uff1a\n            &gt;&gt;&gt; backend = FileBackend(\n            ...     db_path=\"./dev_cache.db\",\n            ...     enable_hot_reload=True,  # \u5f00\u53d1\u73af\u5883\n            ... )\n        \"\"\"\n        self._db_path = Path(db_path)\n        self._max_size = max_size\n        self._serializer = get_serializer(serialization_mode)\n        self._cleanup_interval = cleanup_interval\n        self._enable_hot_reload = enable_hot_reload\n\n        # \u7ebf\u7a0b\u9501\uff08\u4fdd\u62a4\u540c\u6b65\u64cd\u4f5c\uff09\n        self._lock = threading.RLock()\n\n        # \u521d\u59cb\u5316\u6570\u636e\u5e93\n        self._init_database()\n\n        # \u542f\u52a8\u540e\u53f0\u6e05\u7406\u4efb\u52a1\n        self._cleanup_thread: threading.Thread | None = None\n        self._stop_cleanup = threading.Event()\n        self._start_cleanup_task()\n\n        # \u70ed\u91cd\u8f7d\u76f8\u5173\n        self._last_reload_time = time.time()\n        self._db_mtime = self._get_db_mtime()\n\n    # ========== \u6570\u636e\u5e93\u521d\u59cb\u5316 ==========\n\n    def _init_database(self) -&gt; None:\n        \"\"\"\n        \u521d\u59cb\u5316 SQLite \u6570\u636e\u5e93\n\n        \u521b\u5efa\u8868\u7ed3\u6784\u548c\u7d22\u5f15\uff0c\u542f\u7528 WAL \u6a21\u5f0f\u3002\n        \"\"\"\n        # \u786e\u4fdd\u7236\u76ee\u5f55\u5b58\u5728\n        self._db_path.parent.mkdir(parents=True, exist_ok=True)\n\n        with sqlite3.connect(self._db_path) as conn:\n            # \u542f\u7528 WAL \u6a21\u5f0f\uff08Write-Ahead Logging\uff09\n            # \u63d0\u5347\u5e76\u53d1\u6027\u80fd\uff0c\u5141\u8bb8\u8bfb\u5199\u5e76\u884c\n            conn.execute(\"PRAGMA journal_mode=WAL\")\n\n            # \u542f\u7528\u5916\u952e\u7ea6\u675f\n            conn.execute(\"PRAGMA foreign_keys=ON\")\n\n            # \u521b\u5efa\u7f13\u5b58\u8868\n            conn.execute(\n                \"\"\"\n                CREATE TABLE IF NOT EXISTS cache_entries (\n                    key TEXT PRIMARY KEY,\n                    value BLOB NOT NULL,\n                    expires_at REAL,  -- NULL \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n                    last_access REAL NOT NULL,\n                    created_at REAL NOT NULL\n                )\n            \"\"\"\n            )\n\n            # \u521b\u5efa\u7d22\u5f15\uff08\u4f18\u5316 TTL \u6e05\u7406\u548c LRU \u6dd8\u6c70\uff09\n            conn.execute(\n                \"\"\"\n                CREATE INDEX IF NOT EXISTS idx_expires_at\n                ON cache_entries(expires_at)\n                WHERE expires_at IS NOT NULL\n            \"\"\"\n            )\n\n            conn.execute(\n                \"\"\"\n                CREATE INDEX IF NOT EXISTS idx_last_access\n                ON cache_entries(last_access)\n            \"\"\"\n            )\n\n            conn.commit()\n\n    # ========== \u540c\u6b65\u57fa\u7840\u64cd\u4f5c ==========\n\n    def get(self, key: CacheKey) -&gt; CacheValue | None:\n        \"\"\"\n        \u540c\u6b65\u83b7\u53d6\u7f13\u5b58\u503c\n\n        \u5b9e\u73b0\u7ec6\u8282\uff1a\n        1. \u67e5\u8be2\u6570\u636e\u5e93\n        2. \u68c0\u67e5 TTL \u662f\u5426\u8fc7\u671f\n        3. \u66f4\u65b0 last_access\uff08LRU\uff09\n        4. \u53cd\u5e8f\u5217\u5316\u8fd4\u56de\n\n        Args:\n            key: \u7f13\u5b58\u952e\n\n        Returns:\n            \u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u8fd4\u56de None\n        \"\"\"\n        # \u70ed\u91cd\u8f7d\u68c0\u6d4b\n        if self._enable_hot_reload:\n            self._check_hot_reload()\n\n        with self._lock:\n            conn = sqlite3.connect(self._db_path)\n            try:\n                cursor = conn.execute(\n                    \"SELECT value, expires_at FROM cache_entries WHERE key = ?\",\n                    (str(key),),\n                )\n                row = cursor.fetchone()\n\n                if row is None:\n                    return None\n\n                value_bytes, expires_at = row\n\n                # \u68c0\u67e5\u662f\u5426\u8fc7\u671f\n                if expires_at is not None and time.time() &gt; expires_at:\n                    # \u5df2\u8fc7\u671f\uff0c\u5220\u9664\n                    conn.execute(\"DELETE FROM cache_entries WHERE key = ?\", (str(key),))\n                    conn.commit()\n                    return None\n\n                # \u66f4\u65b0 last_access\uff08LRU\uff09\n                conn.execute(\n                    \"UPDATE cache_entries SET last_access = ? WHERE key = ?\",\n                    (time.time(), str(key)),\n                )\n                conn.commit()\n\n                # \u53cd\u5e8f\u5217\u5316\n                return self._serializer.deserialize(value_bytes)\n\n            finally:\n                conn.close()\n\n    async def aget(self, key: CacheKey) -&gt; CacheValue | None:\n        \"\"\"\n        \u5f02\u6b65\u83b7\u53d6\u7f13\u5b58\u503c\n\n        \u4f7f\u7528 aiosqlite \u5b9e\u73b0\u771f\u6b63\u7684\u5f02\u6b65 I/O\u3002\n        \"\"\"\n        # \u70ed\u91cd\u8f7d\u68c0\u6d4b\n        if self._enable_hot_reload:\n            self._check_hot_reload()\n\n        async with aiosqlite.connect(self._db_path) as conn:\n            cursor = await conn.execute(\n                \"SELECT value, expires_at FROM cache_entries WHERE key = ?\",\n                (str(key),),\n            )\n            row = await cursor.fetchone()\n\n            if row is None:\n                return None\n\n            value_bytes, expires_at = row\n\n            # \u68c0\u67e5\u8fc7\u671f\n            if expires_at is not None and time.time() &gt; expires_at:\n                await conn.execute(\"DELETE FROM cache_entries WHERE key = ?\", (str(key),))\n                await conn.commit()\n                return None\n\n            # \u66f4\u65b0 last_access\n            await conn.execute(\n                \"UPDATE cache_entries SET last_access = ? WHERE key = ?\",\n                (time.time(), str(key)),\n            )\n            await conn.commit()\n\n            return self._serializer.deserialize(value_bytes)\n\n    def set(\n        self,\n        key: CacheKey,\n        value: CacheValue,\n        ttl: int | None = None,\n        ex: bool = False,\n        nx: bool = False,\n    ) -&gt; bool:\n        \"\"\"\n        \u8bbe\u7f6e\u7f13\u5b58\u503c\n\n        Args:\n            key: \u7f13\u5b58\u952e\n            value: \u7f13\u5b58\u503c\n            ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2)\n            ex: \u4fdd\u7559\u53c2\u6570\n            nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n        Returns:\n            \u662f\u5426\u8bbe\u7f6e\u6210\u529f\n        \"\"\"\n        with self._lock:\n            conn = sqlite3.connect(self._db_path)\n            try:\n                # \u5e8f\u5217\u5316\u503c\n                serialized_value = self._serializer.serialize(value)\n\n                # \u8ba1\u7b97\u8fc7\u671f\u65f6\u95f4\n                now = time.time()\n                expires_at = None if ttl is None else now + ttl\n\n                # NX \u6a21\u5f0f\u68c0\u67e5\n                if nx:\n                    cursor = conn.execute(\n                        \"SELECT COUNT(*) FROM cache_entries WHERE key = ? AND (expires_at IS NULL OR expires_at &gt; ?)\",\n                        (key, now),\n                    )\n                    if cursor.fetchone()[0] &gt; 0:\n                        return False  # \u952e\u5df2\u5b58\u5728\u4e14\u672a\u8fc7\u671f\n\n                # \u4f7f\u7528 INSERT OR REPLACE\n                conn.execute(\n                    \"\"\"\n                    INSERT OR REPLACE INTO cache_entries\n                    (key, value, expires_at, last_access, created_at)\n                    VALUES (?, ?, ?, ?, ?)\n                    \"\"\",\n                    (key, serialized_value, expires_at, now, now),\n                )\n\n                # LRU \u6dd8\u6c70\u68c0\u67e5\n                self._evict_if_needed(conn)\n\n                # \u7edf\u4e00\u63d0\u4ea4\u6240\u6709\u53d8\u66f4\n                conn.commit()\n\n                return True\n\n            except Exception as e:\n                conn.rollback()\n                msg = f\"\u8bbe\u7f6e\u7f13\u5b58\u5931\u8d25: {key}\"\n                raise CacheBackendError(msg) from e\n            finally:\n                conn.close()\n\n    async def aset(\n        self,\n        key: CacheKey,\n        value: CacheValue,\n        ttl: int | None = None,\n        ex: bool = False,\n        nx: bool = False,\n    ) -&gt; bool:\n        \"\"\"\n        \u5f02\u6b65\u8bbe\u7f6e\u7f13\u5b58\u503c\n\n        Args:\n            key: \u7f13\u5b58\u952e\n            value: \u7f13\u5b58\u503c\n            ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2)\n            ex: \u4fdd\u7559\u53c2\u6570\n            nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n        Returns:\n            \u662f\u5426\u8bbe\u7f6e\u6210\u529f\n        \"\"\"\n        async with aiosqlite.connect(self._db_path) as conn:\n            try:\n                # \u5e8f\u5217\u5316\u503c\n                serialized_value = self._serializer.serialize(value)\n\n                # \u8ba1\u7b97\u8fc7\u671f\u65f6\u95f4\n                now = time.time()\n                expires_at = None if ttl is None else now + ttl\n\n                # NX \u6a21\u5f0f\u68c0\u67e5\n                if nx:\n                    cursor = await conn.execute(\n                        \"SELECT COUNT(*) FROM cache_entries WHERE key = ? AND (expires_at IS NULL OR expires_at &gt; ?)\",\n                        (key, now),\n                    )\n                    row = await cursor.fetchone()\n                    if row[0] &gt; 0:\n                        return False\n\n                # \u63d2\u5165\u6216\u66ff\u6362\n                await conn.execute(\n                    \"\"\"\n                    INSERT OR REPLACE INTO cache_entries\n                    (key, value, expires_at, last_access, created_at)\n                    VALUES (?, ?, ?, ?, ?)\n                    \"\"\",\n                    (key, serialized_value, expires_at, now, now),\n                )\n\n                # LRU \u6dd8\u6c70\n                await self._aevict_if_needed(conn)\n\n                # \u7edf\u4e00\u63d0\u4ea4\u6240\u6709\u53d8\u66f4\n                await conn.commit()\n\n                return True\n\n            except Exception as e:\n                await conn.rollback()\n                msg = f\"\u5f02\u6b65\u8bbe\u7f6e\u7f13\u5b58\u5931\u8d25: {key}\"\n                raise CacheBackendError(msg) from e\n\n    def delete(self, key: CacheKey) -&gt; bool:\n        \"\"\"\u5220\u9664\u7f13\u5b58\"\"\"\n        with self._lock:\n            conn = sqlite3.connect(self._db_path)\n            try:\n                cursor = conn.execute(\n                    \"DELETE FROM cache_entries WHERE key = ?\",\n                    (str(key),),\n                )\n                conn.commit()\n                return cursor.rowcount &gt; 0\n            finally:\n                conn.close()\n\n    async def adelete(self, key: CacheKey) -&gt; bool:\n        \"\"\"\u5f02\u6b65\u5220\u9664\u7f13\u5b58\"\"\"\n        async with aiosqlite.connect(self._db_path) as conn:\n            cursor = await conn.execute(\n                \"DELETE FROM cache_entries WHERE key = ?\",\n                (str(key),),\n            )\n            await conn.commit()\n            return cursor.rowcount &gt; 0\n\n    def exists(self, key: CacheKey) -&gt; bool:\n        \"\"\"\u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728\uff08\u672a\u8fc7\u671f\uff09\"\"\"\n        return self.get(key) is not None\n\n    def clear(self) -&gt; None:\n        \"\"\"\u6e05\u7a7a\u6240\u6709\u7f13\u5b58\"\"\"\n        with self._lock:\n            conn = sqlite3.connect(self._db_path)\n            try:\n                conn.execute(\"DELETE FROM cache_entries\")\n                conn.commit()\n            finally:\n                conn.close()\n\n    # ========== LRU \u6dd8\u6c70 ==========\n\n    def _evict_if_needed(self, conn: sqlite3.Connection) -&gt; None:\n        \"\"\"\n        LRU \u6dd8\u6c70(\u540c\u6b65\u7248\u672c)\n\n        \u5f53\u7f13\u5b58\u6570\u91cf\u8d85\u8fc7 max_size \u65f6,\u5220\u9664\u6700\u65e7\u7684\u6761\u76ee\u3002\n        \"\"\"\n        # \u83b7\u53d6\u5f53\u524d\u6761\u76ee\u6570\n        cursor = conn.execute(\"SELECT COUNT(*) FROM cache_entries\")\n        count = cursor.fetchone()[0]\n\n        if count &gt; self._max_size:\n            # \u8ba1\u7b97\u9700\u8981\u5220\u9664\u7684\u6570\u91cf\n            to_delete = count - self._max_size\n\n            # \u5220\u9664\u6700\u65e7\u7684\u6761\u76ee(last_access \u6700\u5c0f)\n            conn.execute(\n                \"\"\"\n                DELETE FROM cache_entries\n                WHERE key IN (\n                    SELECT key FROM cache_entries\n                    ORDER BY last_access ASC\n                    LIMIT ?\n                )\n                \"\"\",\n                (to_delete,),\n            )\n\n    async def _aevict_if_needed(self, conn: aiosqlite.Connection) -&gt; None:\n        \"\"\"LRU \u6dd8\u6c70(\u5f02\u6b65\u7248\u672c)\"\"\"\n        cursor = await conn.execute(\"SELECT COUNT(*) FROM cache_entries\")\n        row = await cursor.fetchone()\n        count = row[0] if row else 0\n\n        if count &gt; self._max_size:\n            to_delete = count - self._max_size\n\n            await conn.execute(\n                \"\"\"\n                DELETE FROM cache_entries\n                WHERE key IN (\n                    SELECT key FROM cache_entries\n                    ORDER BY last_access ASC\n                    LIMIT ?\n                )\n                \"\"\",\n                (to_delete,),\n            )\n\n    # ========== \u540e\u53f0\u6e05\u7406\u4efb\u52a1 ==========\n\n    def _start_cleanup_task(self) -&gt; None:\n        \"\"\"\u542f\u52a8\u540e\u53f0\u6e05\u7406\u4efb\u52a1\"\"\"\n\n        def _cleanup_loop() -&gt; None:\n            while not self._stop_cleanup.wait(self._cleanup_interval):\n                self._cleanup_expired()\n\n        self._cleanup_thread = threading.Thread(\n            target=_cleanup_loop,\n            daemon=True,\n            name=\"symphra-file-cache-cleanup\",\n        )\n        self._cleanup_thread.start()\n\n    def _cleanup_expired(self) -&gt; None:\n        \"\"\"\u6e05\u7406\u8fc7\u671f\u7684\u7f13\u5b58\u6761\u76ee\"\"\"\n        with self._lock:\n            conn = sqlite3.connect(self._db_path)\n            try:\n                now = time.time()\n                conn.execute(\n                    \"DELETE FROM cache_entries WHERE expires_at IS NOT NULL AND expires_at &lt; ?\",\n                    (now,),\n                )\n                conn.commit()\n            finally:\n                conn.close()\n\n    # ========== \u70ed\u91cd\u8f7d ==========\n\n    def _get_db_mtime(self) -&gt; float:\n        \"\"\"\u83b7\u53d6\u6570\u636e\u5e93\u6587\u4ef6\u7684\u4fee\u6539\u65f6\u95f4\"\"\"\n        if self._db_path.exists():\n            return self._db_path.stat().st_mtime\n        return 0.0\n\n    def _check_hot_reload(self) -&gt; None:\n        \"\"\"\n        \u68c0\u67e5\u6570\u636e\u5e93\u6587\u4ef6\u662f\u5426\u88ab\u5916\u90e8\u4fee\u6539\uff0c\u89e6\u53d1\u70ed\u91cd\u8f7d\n\n        \u9002\u7528\u4e8e\u5f00\u53d1\u73af\u5883\uff0c\u591a\u8fdb\u7a0b\u5171\u4eab\u7f13\u5b58\u65f6\u81ea\u52a8\u540c\u6b65\u3002\n        \"\"\"\n        current_mtime = self._get_db_mtime()\n        if current_mtime &gt; self._db_mtime:\n            # \u6587\u4ef6\u5df2\u66f4\u65b0\uff0c\u91cd\u65b0\u52a0\u8f7d\uff08\u8fd9\u91cc\u5b9e\u9645\u4e0a\u662f\u900f\u660e\u7684\uff0cSQLite \u81ea\u52a8\u540c\u6b65\uff09\n            self._db_mtime = current_mtime\n            self._last_reload_time = time.time()\n\n    # ========== \u8c03\u8bd5\u548c\u76d1\u63a7 ==========\n\n    # ========== \u6269\u5c55\u64cd\u4f5c ==========\n\n    def keys(\n        self,\n        pattern: str = \"*\",\n        cursor: int = 0,\n        count: int = 100,\n        max_keys: int | None = None,\n    ) -&gt; KeysPage:\n        \"\"\"\n        \u626b\u63cf\u7f13\u5b58\u952e\n\n        Args:\n            pattern: \u5339\u914d\u6a21\u5f0f\uff08\u652f\u6301\u901a\u914d\u7b26 * \u548c ?\uff09\n            cursor: \u6e38\u6807\u4f4d\u7f6e\uff08\u7528\u4e8e\u5206\u9875\uff0c\u6b64\u5b9e\u73b0\u4e2d\u57fa\u4e8e\u7d22\u5f15\uff09\n            count: \u6bcf\u9875\u8fd4\u56de\u7684\u952e\u6570\u91cf\n            max_keys: \u6700\u591a\u8fd4\u56de\u7684\u952e\u6570\u91cf\n\n        Returns:\n            KeysPage \u5bf9\u8c61\n        \"\"\"\n        import fnmatch\n\n        from ..types import KeysPage\n\n        with self._lock:\n            conn = sqlite3.connect(self._db_path)\n            try:\n                # \u83b7\u53d6\u6240\u6709\u672a\u8fc7\u671f\u7684\u952e\n                now = time.time()\n                cursor_obj = conn.execute(\n                    \"SELECT key FROM cache_entries WHERE expires_at IS NULL OR expires_at &gt; ? ORDER BY key\",\n                    (now,),\n                )\n                all_keys = [row[0] for row in cursor_obj.fetchall()]\n\n                # \u6a21\u5f0f\u5339\u914d\n                if pattern != \"*\":\n                    matched_keys = [k for k in all_keys if fnmatch.fnmatch(k, pattern)]\n                else:\n                    matched_keys = all_keys\n\n                # \u5206\u9875\u5904\u7406\n                total = len(matched_keys)\n                start_idx = cursor\n                end_idx = start_idx + count\n\n                if max_keys is not None:\n                    end_idx = min(end_idx, start_idx + max_keys)\n\n                page_keys = matched_keys[start_idx:end_idx]\n\n                # \u8ba1\u7b97\u4e0b\u4e00\u9875\u6e38\u6807\n                next_cursor = end_idx if end_idx &lt; total else 0\n                has_more = next_cursor &gt; 0\n\n                return KeysPage(\n                    keys=page_keys,\n                    cursor=next_cursor,\n                    has_more=has_more,\n                    total_scanned=len(page_keys),\n                )\n\n            finally:\n                conn.close()\n\n    async def akeys(\n        self,\n        pattern: str = \"*\",\n        cursor: int = 0,\n        count: int = 100,\n        max_keys: int | None = None,\n    ) -&gt; KeysPage:\n        \"\"\"\u5f02\u6b65\u626b\u63cf\u7f13\u5b58\u952e\"\"\"\n        return self.keys(pattern=pattern, cursor=cursor, count=count, max_keys=max_keys)\n\n    def close(self) -&gt; None:\n        \"\"\"\n        \u5173\u95ed\u540e\u7aef\u8fde\u63a5\uff08\u540c\u6b65\uff09\n\n        \u505c\u6b62\u540e\u53f0\u6e05\u7406\u7ebf\u7a0b\u3002\n        \"\"\"\n        self._stop_cleanup.set()\n        if self._cleanup_thread and self._cleanup_thread.is_alive():\n            self._cleanup_thread.join(timeout=1.0)\n\n    async def aclose(self) -&gt; None:\n        \"\"\"\n        \u5173\u95ed\u540e\u7aef\u8fde\u63a5\uff08\u5f02\u6b65\uff09\n        \"\"\"\n        self.close()\n\n    def __len__(self) -&gt; int:\n        \"\"\"\u83b7\u53d6\u5f53\u524d\u7f13\u5b58\u6761\u76ee\u6570\"\"\"\n        with self._lock:\n            conn = sqlite3.connect(self._db_path)\n            try:\n                cursor = conn.execute(\"SELECT COUNT(*) FROM cache_entries\")\n                return cursor.fetchone()[0]\n            finally:\n                conn.close()\n\n    def __repr__(self) -&gt; str:\n        \"\"\"\u5b57\u7b26\u4e32\u8868\u793a\"\"\"\n        return f\"FileBackend(db_path={self._db_path}, size={len(self)}, max_size={self._max_size})\"\n\n    def __del__(self) -&gt; None:\n        \"\"\"\u6790\u6784\u51fd\u6570\"\"\"\n        self._stop_cleanup.set()\n        if self._cleanup_thread and self._cleanup_thread.is_alive():\n            self._cleanup_thread.join(timeout=1.0)\n</code></pre>"},{"location":"zh/api/backends/file/#symphra_cache.backends.file.FileBackend.__del__","title":"<code>__del__()</code>","text":"<p>\u6790\u6784\u51fd\u6570</p> Source code in <code>src/symphra_cache/backends/file.py</code> <pre><code>def __del__(self) -&gt; None:\n    \"\"\"\u6790\u6784\u51fd\u6570\"\"\"\n    self._stop_cleanup.set()\n    if self._cleanup_thread and self._cleanup_thread.is_alive():\n        self._cleanup_thread.join(timeout=1.0)\n</code></pre>"},{"location":"zh/api/backends/file/#symphra_cache.backends.file.FileBackend.__init__","title":"<code>__init__(db_path='./symphra_cache.db', max_size=10000, serialization_mode=SerializationMode.PICKLE, cleanup_interval=300, enable_hot_reload=False)</code>","text":"<p>\u521d\u59cb\u5316\u6587\u4ef6\u540e\u7aef</p> <p>Parameters:</p> Name Type Description Default <code>db_path</code> <code>Path | str</code> <p>SQLite \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84</p> <code>'./symphra_cache.db'</code> <code>max_size</code> <code>int</code> <p>\u6700\u5927\u7f13\u5b58\u6761\u6570\uff08\u8d85\u8fc7\u89e6\u53d1 LRU \u6dd8\u6c70\uff09</p> <code>10000</code> <code>serialization_mode</code> <code>SerializationMode | str</code> <p>\u5e8f\u5217\u5316\u6a21\u5f0f</p> <code>PICKLE</code> <code>cleanup_interval</code> <code>int</code> <p>\u6e05\u7406\u95f4\u9694\uff08\u79d2\uff09</p> <code>300</code> <code>enable_hot_reload</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528\u70ed\u91cd\u8f7d\uff08\u5f00\u53d1\u6a21\u5f0f\uff09</p> <code>False</code> <p>\u793a\u4f8b\uff1a     &gt;&gt;&gt; backend = FileBackend(     ...     db_path=\"./dev_cache.db\",     ...     enable_hot_reload=True,  # \u5f00\u53d1\u73af\u5883     ... )</p> Source code in <code>src/symphra_cache/backends/file.py</code> <pre><code>def __init__(\n    self,\n    db_path: Path | str = \"./symphra_cache.db\",\n    max_size: int = 10000,\n    serialization_mode: SerializationMode | str = SerializationMode.PICKLE,\n    cleanup_interval: int = 300,  # 5 \u5206\u949f\n    enable_hot_reload: bool = False,\n) -&gt; None:\n    \"\"\"\n    \u521d\u59cb\u5316\u6587\u4ef6\u540e\u7aef\n\n    Args:\n        db_path: SQLite \u6570\u636e\u5e93\u6587\u4ef6\u8def\u5f84\n        max_size: \u6700\u5927\u7f13\u5b58\u6761\u6570\uff08\u8d85\u8fc7\u89e6\u53d1 LRU \u6dd8\u6c70\uff09\n        serialization_mode: \u5e8f\u5217\u5316\u6a21\u5f0f\n        cleanup_interval: \u6e05\u7406\u95f4\u9694\uff08\u79d2\uff09\n        enable_hot_reload: \u662f\u5426\u542f\u7528\u70ed\u91cd\u8f7d\uff08\u5f00\u53d1\u6a21\u5f0f\uff09\n\n    \u793a\u4f8b\uff1a\n        &gt;&gt;&gt; backend = FileBackend(\n        ...     db_path=\"./dev_cache.db\",\n        ...     enable_hot_reload=True,  # \u5f00\u53d1\u73af\u5883\n        ... )\n    \"\"\"\n    self._db_path = Path(db_path)\n    self._max_size = max_size\n    self._serializer = get_serializer(serialization_mode)\n    self._cleanup_interval = cleanup_interval\n    self._enable_hot_reload = enable_hot_reload\n\n    # \u7ebf\u7a0b\u9501\uff08\u4fdd\u62a4\u540c\u6b65\u64cd\u4f5c\uff09\n    self._lock = threading.RLock()\n\n    # \u521d\u59cb\u5316\u6570\u636e\u5e93\n    self._init_database()\n\n    # \u542f\u52a8\u540e\u53f0\u6e05\u7406\u4efb\u52a1\n    self._cleanup_thread: threading.Thread | None = None\n    self._stop_cleanup = threading.Event()\n    self._start_cleanup_task()\n\n    # \u70ed\u91cd\u8f7d\u76f8\u5173\n    self._last_reload_time = time.time()\n    self._db_mtime = self._get_db_mtime()\n</code></pre>"},{"location":"zh/api/backends/file/#symphra_cache.backends.file.FileBackend.__len__","title":"<code>__len__()</code>","text":"<p>\u83b7\u53d6\u5f53\u524d\u7f13\u5b58\u6761\u76ee\u6570</p> Source code in <code>src/symphra_cache/backends/file.py</code> <pre><code>def __len__(self) -&gt; int:\n    \"\"\"\u83b7\u53d6\u5f53\u524d\u7f13\u5b58\u6761\u76ee\u6570\"\"\"\n    with self._lock:\n        conn = sqlite3.connect(self._db_path)\n        try:\n            cursor = conn.execute(\"SELECT COUNT(*) FROM cache_entries\")\n            return cursor.fetchone()[0]\n        finally:\n            conn.close()\n</code></pre>"},{"location":"zh/api/backends/file/#symphra_cache.backends.file.FileBackend.__repr__","title":"<code>__repr__()</code>","text":"<p>\u5b57\u7b26\u4e32\u8868\u793a</p> Source code in <code>src/symphra_cache/backends/file.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"\u5b57\u7b26\u4e32\u8868\u793a\"\"\"\n    return f\"FileBackend(db_path={self._db_path}, size={len(self)}, max_size={self._max_size})\"\n</code></pre>"},{"location":"zh/api/backends/file/#symphra_cache.backends.file.FileBackend.aclose","title":"<code>aclose()</code>  <code>async</code>","text":"<p>\u5173\u95ed\u540e\u7aef\u8fde\u63a5\uff08\u5f02\u6b65\uff09</p> Source code in <code>src/symphra_cache/backends/file.py</code> <pre><code>async def aclose(self) -&gt; None:\n    \"\"\"\n    \u5173\u95ed\u540e\u7aef\u8fde\u63a5\uff08\u5f02\u6b65\uff09\n    \"\"\"\n    self.close()\n</code></pre>"},{"location":"zh/api/backends/file/#symphra_cache.backends.file.FileBackend.adelete","title":"<code>adelete(key)</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u5220\u9664\u7f13\u5b58</p> Source code in <code>src/symphra_cache/backends/file.py</code> <pre><code>async def adelete(self, key: CacheKey) -&gt; bool:\n    \"\"\"\u5f02\u6b65\u5220\u9664\u7f13\u5b58\"\"\"\n    async with aiosqlite.connect(self._db_path) as conn:\n        cursor = await conn.execute(\n            \"DELETE FROM cache_entries WHERE key = ?\",\n            (str(key),),\n        )\n        await conn.commit()\n        return cursor.rowcount &gt; 0\n</code></pre>"},{"location":"zh/api/backends/file/#symphra_cache.backends.file.FileBackend.aget","title":"<code>aget(key)</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u83b7\u53d6\u7f13\u5b58\u503c</p> <p>\u4f7f\u7528 aiosqlite \u5b9e\u73b0\u771f\u6b63\u7684\u5f02\u6b65 I/O\u3002</p> Source code in <code>src/symphra_cache/backends/file.py</code> <pre><code>async def aget(self, key: CacheKey) -&gt; CacheValue | None:\n    \"\"\"\n    \u5f02\u6b65\u83b7\u53d6\u7f13\u5b58\u503c\n\n    \u4f7f\u7528 aiosqlite \u5b9e\u73b0\u771f\u6b63\u7684\u5f02\u6b65 I/O\u3002\n    \"\"\"\n    # \u70ed\u91cd\u8f7d\u68c0\u6d4b\n    if self._enable_hot_reload:\n        self._check_hot_reload()\n\n    async with aiosqlite.connect(self._db_path) as conn:\n        cursor = await conn.execute(\n            \"SELECT value, expires_at FROM cache_entries WHERE key = ?\",\n            (str(key),),\n        )\n        row = await cursor.fetchone()\n\n        if row is None:\n            return None\n\n        value_bytes, expires_at = row\n\n        # \u68c0\u67e5\u8fc7\u671f\n        if expires_at is not None and time.time() &gt; expires_at:\n            await conn.execute(\"DELETE FROM cache_entries WHERE key = ?\", (str(key),))\n            await conn.commit()\n            return None\n\n        # \u66f4\u65b0 last_access\n        await conn.execute(\n            \"UPDATE cache_entries SET last_access = ? WHERE key = ?\",\n            (time.time(), str(key)),\n        )\n        await conn.commit()\n\n        return self._serializer.deserialize(value_bytes)\n</code></pre>"},{"location":"zh/api/backends/file/#symphra_cache.backends.file.FileBackend.akeys","title":"<code>akeys(pattern='*', cursor=0, count=100, max_keys=None)</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u626b\u63cf\u7f13\u5b58\u952e</p> Source code in <code>src/symphra_cache/backends/file.py</code> <pre><code>async def akeys(\n    self,\n    pattern: str = \"*\",\n    cursor: int = 0,\n    count: int = 100,\n    max_keys: int | None = None,\n) -&gt; KeysPage:\n    \"\"\"\u5f02\u6b65\u626b\u63cf\u7f13\u5b58\u952e\"\"\"\n    return self.keys(pattern=pattern, cursor=cursor, count=count, max_keys=max_keys)\n</code></pre>"},{"location":"zh/api/backends/file/#symphra_cache.backends.file.FileBackend.aset","title":"<code>aset(key, value, ttl=None, ex=False, nx=False)</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u8bbe\u7f6e\u7f13\u5b58\u503c</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <code>value</code> <code>CacheValue</code> <p>\u7f13\u5b58\u503c</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4(\u79d2)</p> <code>None</code> <code>ex</code> <code>bool</code> <p>\u4fdd\u7559\u53c2\u6570</p> <code>False</code> <code>nx</code> <code>bool</code> <p>\u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>\u662f\u5426\u8bbe\u7f6e\u6210\u529f</p> Source code in <code>src/symphra_cache/backends/file.py</code> <pre><code>async def aset(\n    self,\n    key: CacheKey,\n    value: CacheValue,\n    ttl: int | None = None,\n    ex: bool = False,\n    nx: bool = False,\n) -&gt; bool:\n    \"\"\"\n    \u5f02\u6b65\u8bbe\u7f6e\u7f13\u5b58\u503c\n\n    Args:\n        key: \u7f13\u5b58\u952e\n        value: \u7f13\u5b58\u503c\n        ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2)\n        ex: \u4fdd\u7559\u53c2\u6570\n        nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n    Returns:\n        \u662f\u5426\u8bbe\u7f6e\u6210\u529f\n    \"\"\"\n    async with aiosqlite.connect(self._db_path) as conn:\n        try:\n            # \u5e8f\u5217\u5316\u503c\n            serialized_value = self._serializer.serialize(value)\n\n            # \u8ba1\u7b97\u8fc7\u671f\u65f6\u95f4\n            now = time.time()\n            expires_at = None if ttl is None else now + ttl\n\n            # NX \u6a21\u5f0f\u68c0\u67e5\n            if nx:\n                cursor = await conn.execute(\n                    \"SELECT COUNT(*) FROM cache_entries WHERE key = ? AND (expires_at IS NULL OR expires_at &gt; ?)\",\n                    (key, now),\n                )\n                row = await cursor.fetchone()\n                if row[0] &gt; 0:\n                    return False\n\n            # \u63d2\u5165\u6216\u66ff\u6362\n            await conn.execute(\n                \"\"\"\n                INSERT OR REPLACE INTO cache_entries\n                (key, value, expires_at, last_access, created_at)\n                VALUES (?, ?, ?, ?, ?)\n                \"\"\",\n                (key, serialized_value, expires_at, now, now),\n            )\n\n            # LRU \u6dd8\u6c70\n            await self._aevict_if_needed(conn)\n\n            # \u7edf\u4e00\u63d0\u4ea4\u6240\u6709\u53d8\u66f4\n            await conn.commit()\n\n            return True\n\n        except Exception as e:\n            await conn.rollback()\n            msg = f\"\u5f02\u6b65\u8bbe\u7f6e\u7f13\u5b58\u5931\u8d25: {key}\"\n            raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"zh/api/backends/file/#symphra_cache.backends.file.FileBackend.clear","title":"<code>clear()</code>","text":"<p>\u6e05\u7a7a\u6240\u6709\u7f13\u5b58</p> Source code in <code>src/symphra_cache/backends/file.py</code> <pre><code>def clear(self) -&gt; None:\n    \"\"\"\u6e05\u7a7a\u6240\u6709\u7f13\u5b58\"\"\"\n    with self._lock:\n        conn = sqlite3.connect(self._db_path)\n        try:\n            conn.execute(\"DELETE FROM cache_entries\")\n            conn.commit()\n        finally:\n            conn.close()\n</code></pre>"},{"location":"zh/api/backends/file/#symphra_cache.backends.file.FileBackend.close","title":"<code>close()</code>","text":"<p>\u5173\u95ed\u540e\u7aef\u8fde\u63a5\uff08\u540c\u6b65\uff09</p> <p>\u505c\u6b62\u540e\u53f0\u6e05\u7406\u7ebf\u7a0b\u3002</p> Source code in <code>src/symphra_cache/backends/file.py</code> <pre><code>def close(self) -&gt; None:\n    \"\"\"\n    \u5173\u95ed\u540e\u7aef\u8fde\u63a5\uff08\u540c\u6b65\uff09\n\n    \u505c\u6b62\u540e\u53f0\u6e05\u7406\u7ebf\u7a0b\u3002\n    \"\"\"\n    self._stop_cleanup.set()\n    if self._cleanup_thread and self._cleanup_thread.is_alive():\n        self._cleanup_thread.join(timeout=1.0)\n</code></pre>"},{"location":"zh/api/backends/file/#symphra_cache.backends.file.FileBackend.delete","title":"<code>delete(key)</code>","text":"<p>\u5220\u9664\u7f13\u5b58</p> Source code in <code>src/symphra_cache/backends/file.py</code> <pre><code>def delete(self, key: CacheKey) -&gt; bool:\n    \"\"\"\u5220\u9664\u7f13\u5b58\"\"\"\n    with self._lock:\n        conn = sqlite3.connect(self._db_path)\n        try:\n            cursor = conn.execute(\n                \"DELETE FROM cache_entries WHERE key = ?\",\n                (str(key),),\n            )\n            conn.commit()\n            return cursor.rowcount &gt; 0\n        finally:\n            conn.close()\n</code></pre>"},{"location":"zh/api/backends/file/#symphra_cache.backends.file.FileBackend.exists","title":"<code>exists(key)</code>","text":"<p>\u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728\uff08\u672a\u8fc7\u671f\uff09</p> Source code in <code>src/symphra_cache/backends/file.py</code> <pre><code>def exists(self, key: CacheKey) -&gt; bool:\n    \"\"\"\u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728\uff08\u672a\u8fc7\u671f\uff09\"\"\"\n    return self.get(key) is not None\n</code></pre>"},{"location":"zh/api/backends/file/#symphra_cache.backends.file.FileBackend.get","title":"<code>get(key)</code>","text":"<p>\u540c\u6b65\u83b7\u53d6\u7f13\u5b58\u503c</p> <p>\u5b9e\u73b0\u7ec6\u8282\uff1a 1. \u67e5\u8be2\u6570\u636e\u5e93 2. \u68c0\u67e5 TTL \u662f\u5426\u8fc7\u671f 3. \u66f4\u65b0 last_access\uff08LRU\uff09 4. \u53cd\u5e8f\u5217\u5316\u8fd4\u56de</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <p>Returns:</p> Type Description <code>CacheValue | None</code> <p>\u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u8fd4\u56de None</p> Source code in <code>src/symphra_cache/backends/file.py</code> <pre><code>def get(self, key: CacheKey) -&gt; CacheValue | None:\n    \"\"\"\n    \u540c\u6b65\u83b7\u53d6\u7f13\u5b58\u503c\n\n    \u5b9e\u73b0\u7ec6\u8282\uff1a\n    1. \u67e5\u8be2\u6570\u636e\u5e93\n    2. \u68c0\u67e5 TTL \u662f\u5426\u8fc7\u671f\n    3. \u66f4\u65b0 last_access\uff08LRU\uff09\n    4. \u53cd\u5e8f\u5217\u5316\u8fd4\u56de\n\n    Args:\n        key: \u7f13\u5b58\u952e\n\n    Returns:\n        \u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u8fd4\u56de None\n    \"\"\"\n    # \u70ed\u91cd\u8f7d\u68c0\u6d4b\n    if self._enable_hot_reload:\n        self._check_hot_reload()\n\n    with self._lock:\n        conn = sqlite3.connect(self._db_path)\n        try:\n            cursor = conn.execute(\n                \"SELECT value, expires_at FROM cache_entries WHERE key = ?\",\n                (str(key),),\n            )\n            row = cursor.fetchone()\n\n            if row is None:\n                return None\n\n            value_bytes, expires_at = row\n\n            # \u68c0\u67e5\u662f\u5426\u8fc7\u671f\n            if expires_at is not None and time.time() &gt; expires_at:\n                # \u5df2\u8fc7\u671f\uff0c\u5220\u9664\n                conn.execute(\"DELETE FROM cache_entries WHERE key = ?\", (str(key),))\n                conn.commit()\n                return None\n\n            # \u66f4\u65b0 last_access\uff08LRU\uff09\n            conn.execute(\n                \"UPDATE cache_entries SET last_access = ? WHERE key = ?\",\n                (time.time(), str(key)),\n            )\n            conn.commit()\n\n            # \u53cd\u5e8f\u5217\u5316\n            return self._serializer.deserialize(value_bytes)\n\n        finally:\n            conn.close()\n</code></pre>"},{"location":"zh/api/backends/file/#symphra_cache.backends.file.FileBackend.keys","title":"<code>keys(pattern='*', cursor=0, count=100, max_keys=None)</code>","text":"<p>\u626b\u63cf\u7f13\u5b58\u952e</p> <p>Parameters:</p> Name Type Description Default <code>pattern</code> <code>str</code> <p>\u5339\u914d\u6a21\u5f0f\uff08\u652f\u6301\u901a\u914d\u7b26 * \u548c ?\uff09</p> <code>'*'</code> <code>cursor</code> <code>int</code> <p>\u6e38\u6807\u4f4d\u7f6e\uff08\u7528\u4e8e\u5206\u9875\uff0c\u6b64\u5b9e\u73b0\u4e2d\u57fa\u4e8e\u7d22\u5f15\uff09</p> <code>0</code> <code>count</code> <code>int</code> <p>\u6bcf\u9875\u8fd4\u56de\u7684\u952e\u6570\u91cf</p> <code>100</code> <code>max_keys</code> <code>int | None</code> <p>\u6700\u591a\u8fd4\u56de\u7684\u952e\u6570\u91cf</p> <code>None</code> <p>Returns:</p> Type Description <code>KeysPage</code> <p>KeysPage \u5bf9\u8c61</p> Source code in <code>src/symphra_cache/backends/file.py</code> <pre><code>def keys(\n    self,\n    pattern: str = \"*\",\n    cursor: int = 0,\n    count: int = 100,\n    max_keys: int | None = None,\n) -&gt; KeysPage:\n    \"\"\"\n    \u626b\u63cf\u7f13\u5b58\u952e\n\n    Args:\n        pattern: \u5339\u914d\u6a21\u5f0f\uff08\u652f\u6301\u901a\u914d\u7b26 * \u548c ?\uff09\n        cursor: \u6e38\u6807\u4f4d\u7f6e\uff08\u7528\u4e8e\u5206\u9875\uff0c\u6b64\u5b9e\u73b0\u4e2d\u57fa\u4e8e\u7d22\u5f15\uff09\n        count: \u6bcf\u9875\u8fd4\u56de\u7684\u952e\u6570\u91cf\n        max_keys: \u6700\u591a\u8fd4\u56de\u7684\u952e\u6570\u91cf\n\n    Returns:\n        KeysPage \u5bf9\u8c61\n    \"\"\"\n    import fnmatch\n\n    from ..types import KeysPage\n\n    with self._lock:\n        conn = sqlite3.connect(self._db_path)\n        try:\n            # \u83b7\u53d6\u6240\u6709\u672a\u8fc7\u671f\u7684\u952e\n            now = time.time()\n            cursor_obj = conn.execute(\n                \"SELECT key FROM cache_entries WHERE expires_at IS NULL OR expires_at &gt; ? ORDER BY key\",\n                (now,),\n            )\n            all_keys = [row[0] for row in cursor_obj.fetchall()]\n\n            # \u6a21\u5f0f\u5339\u914d\n            if pattern != \"*\":\n                matched_keys = [k for k in all_keys if fnmatch.fnmatch(k, pattern)]\n            else:\n                matched_keys = all_keys\n\n            # \u5206\u9875\u5904\u7406\n            total = len(matched_keys)\n            start_idx = cursor\n            end_idx = start_idx + count\n\n            if max_keys is not None:\n                end_idx = min(end_idx, start_idx + max_keys)\n\n            page_keys = matched_keys[start_idx:end_idx]\n\n            # \u8ba1\u7b97\u4e0b\u4e00\u9875\u6e38\u6807\n            next_cursor = end_idx if end_idx &lt; total else 0\n            has_more = next_cursor &gt; 0\n\n            return KeysPage(\n                keys=page_keys,\n                cursor=next_cursor,\n                has_more=has_more,\n                total_scanned=len(page_keys),\n            )\n\n        finally:\n            conn.close()\n</code></pre>"},{"location":"zh/api/backends/file/#symphra_cache.backends.file.FileBackend.set","title":"<code>set(key, value, ttl=None, ex=False, nx=False)</code>","text":"<p>\u8bbe\u7f6e\u7f13\u5b58\u503c</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <code>value</code> <code>CacheValue</code> <p>\u7f13\u5b58\u503c</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4(\u79d2)</p> <code>None</code> <code>ex</code> <code>bool</code> <p>\u4fdd\u7559\u53c2\u6570</p> <code>False</code> <code>nx</code> <code>bool</code> <p>\u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>\u662f\u5426\u8bbe\u7f6e\u6210\u529f</p> Source code in <code>src/symphra_cache/backends/file.py</code> <pre><code>def set(\n    self,\n    key: CacheKey,\n    value: CacheValue,\n    ttl: int | None = None,\n    ex: bool = False,\n    nx: bool = False,\n) -&gt; bool:\n    \"\"\"\n    \u8bbe\u7f6e\u7f13\u5b58\u503c\n\n    Args:\n        key: \u7f13\u5b58\u952e\n        value: \u7f13\u5b58\u503c\n        ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2)\n        ex: \u4fdd\u7559\u53c2\u6570\n        nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n    Returns:\n        \u662f\u5426\u8bbe\u7f6e\u6210\u529f\n    \"\"\"\n    with self._lock:\n        conn = sqlite3.connect(self._db_path)\n        try:\n            # \u5e8f\u5217\u5316\u503c\n            serialized_value = self._serializer.serialize(value)\n\n            # \u8ba1\u7b97\u8fc7\u671f\u65f6\u95f4\n            now = time.time()\n            expires_at = None if ttl is None else now + ttl\n\n            # NX \u6a21\u5f0f\u68c0\u67e5\n            if nx:\n                cursor = conn.execute(\n                    \"SELECT COUNT(*) FROM cache_entries WHERE key = ? AND (expires_at IS NULL OR expires_at &gt; ?)\",\n                    (key, now),\n                )\n                if cursor.fetchone()[0] &gt; 0:\n                    return False  # \u952e\u5df2\u5b58\u5728\u4e14\u672a\u8fc7\u671f\n\n            # \u4f7f\u7528 INSERT OR REPLACE\n            conn.execute(\n                \"\"\"\n                INSERT OR REPLACE INTO cache_entries\n                (key, value, expires_at, last_access, created_at)\n                VALUES (?, ?, ?, ?, ?)\n                \"\"\",\n                (key, serialized_value, expires_at, now, now),\n            )\n\n            # LRU \u6dd8\u6c70\u68c0\u67e5\n            self._evict_if_needed(conn)\n\n            # \u7edf\u4e00\u63d0\u4ea4\u6240\u6709\u53d8\u66f4\n            conn.commit()\n\n            return True\n\n        except Exception as e:\n            conn.rollback()\n            msg = f\"\u8bbe\u7f6e\u7f13\u5b58\u5931\u8d25: {key}\"\n            raise CacheBackendError(msg) from e\n        finally:\n            conn.close()\n</code></pre>"},{"location":"zh/api/backends/memory/","title":"\u5185\u5b58\u540e\u7aef","text":"<p>\u8fdb\u7a0b\u5185\u5185\u5b58\u7f13\u5b58\uff0c\u901f\u5ea6\u6700\u5feb\uff0c\u9002\u5408\u5355\u5b9e\u4f8b\u4f7f\u7528\u3002</p> <p>               Bases: <code>BaseBackend</code></p> <p>\u5185\u5b58\u7f13\u5b58\u540e\u7aef</p> <p>\u57fa\u4e8e OrderedDict \u5b9e\u73b0\u7684\u9ad8\u6027\u80fd\u5185\u5b58\u7f13\u5b58\uff0c\u652f\u6301 LRU \u6dd8\u6c70\u3002</p> <p>\u67b6\u6784\u8bbe\u8ba1: - \u5b58\u50a8\u7ed3\u6784: OrderedDict[key, (value, expires_at)] - LRU \u5b9e\u73b0: \u8bbf\u95ee\u65f6\u5c06\u952e\u79fb\u5230\u672b\u5c3e\uff0c\u6dd8\u6c70\u65f6\u5220\u9664\u5934\u90e8 - TTL \u7ba1\u7406: \u60f0\u6027\u5220\u9664\uff08\u8bfb\u53d6\u65f6\u68c0\u67e5\uff09+ \u540e\u53f0\u5b9a\u671f\u6e05\u7406 - \u7ebf\u7a0b\u5b89\u5168: \u6240\u6709\u64cd\u4f5c\u4f7f\u7528 RLock \u4fdd\u62a4</p> <p>\u6027\u80fd\u7279\u70b9: - \u8bfb\u53d6: O(1)\uff0c&lt; 0.01ms - \u5199\u5165: O(1)\uff0c&lt; 0.01ms - LRU \u6dd8\u6c70: O(1) - \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)</p> \u4f7f\u7528\u793a\u4f8b <p>backend = MemoryBackend(max_size=10000) backend.set(\"user:123\", {\"name\": \"Alice\"}, ttl=3600) user = backend.get(\"user:123\") print(user)  # {\"name\": \"Alice\"}</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>class MemoryBackend(BaseBackend):\n    \"\"\"\n    \u5185\u5b58\u7f13\u5b58\u540e\u7aef\n\n    \u57fa\u4e8e OrderedDict \u5b9e\u73b0\u7684\u9ad8\u6027\u80fd\u5185\u5b58\u7f13\u5b58\uff0c\u652f\u6301 LRU \u6dd8\u6c70\u3002\n\n    \u67b6\u6784\u8bbe\u8ba1:\n    - \u5b58\u50a8\u7ed3\u6784: OrderedDict[key, (value, expires_at)]\n    - LRU \u5b9e\u73b0: \u8bbf\u95ee\u65f6\u5c06\u952e\u79fb\u5230\u672b\u5c3e\uff0c\u6dd8\u6c70\u65f6\u5220\u9664\u5934\u90e8\n    - TTL \u7ba1\u7406: \u60f0\u6027\u5220\u9664\uff08\u8bfb\u53d6\u65f6\u68c0\u67e5\uff09+ \u540e\u53f0\u5b9a\u671f\u6e05\u7406\n    - \u7ebf\u7a0b\u5b89\u5168: \u6240\u6709\u64cd\u4f5c\u4f7f\u7528 RLock \u4fdd\u62a4\n\n    \u6027\u80fd\u7279\u70b9:\n    - \u8bfb\u53d6: O(1)\uff0c&lt; 0.01ms\n    - \u5199\u5165: O(1)\uff0c&lt; 0.01ms\n    - LRU \u6dd8\u6c70: O(1)\n    - \u7a7a\u95f4\u590d\u6742\u5ea6: O(n)\n\n    \u4f7f\u7528\u793a\u4f8b:\n        &gt;&gt;&gt; backend = MemoryBackend(max_size=10000)\n        &gt;&gt;&gt; backend.set(\"user:123\", {\"name\": \"Alice\"}, ttl=3600)\n        &gt;&gt;&gt; user = backend.get(\"user:123\")\n        &gt;&gt;&gt; print(user)  # {\"name\": \"Alice\"}\n    \"\"\"\n\n    def __init__(\n        self,\n        max_size: int = 10000,\n        cleanup_interval: int = 60,\n    ) -&gt; None:\n        \"\"\"\n        \u521d\u59cb\u5316\u5185\u5b58\u540e\u7aef\n\n        Args:\n            max_size: \u6700\u5927\u7f13\u5b58\u6761\u6570\uff0c\u8d85\u8fc7\u540e\u89e6\u53d1 LRU \u6dd8\u6c70\uff08\u9ed8\u8ba4 10000\uff09\n            cleanup_interval: TTL \u6e05\u7406\u95f4\u9694\uff08\u79d2\uff09\uff0c\u9ed8\u8ba4 60 \u79d2\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; # \u521b\u5efa\u6700\u5927\u5bb9\u91cf 1000 \u7684\u7f13\u5b58\n            &gt;&gt;&gt; backend = MemoryBackend(max_size=1000, cleanup_interval=30)\n        \"\"\"\n        self._max_size = max_size\n        self._cleanup_interval = cleanup_interval\n\n        # \u5b58\u50a8\u683c\u5f0f: {key: (value, expires_at)}\n        # expires_at \u4e3a None \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n        # \u4f7f\u7528 OrderedDict \u652f\u6301 LRU\uff1a\u6700\u8fd1\u8bbf\u95ee\u7684\u5728\u672b\u5c3e\uff0c\u6700\u65e7\u7684\u5728\u5934\u90e8\n        self._cache: OrderedDict[CacheKey, tuple[CacheValue, float | None]] = OrderedDict()\n\n        # \u7ebf\u7a0b\u9501\uff08\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\uff09\n        # \u4f7f\u7528 RLock \u5141\u8bb8\u540c\u4e00\u7ebf\u7a0b\u91cd\u5165\n        self._lock = threading.RLock()\n\n        # \u542f\u52a8\u540e\u53f0\u6e05\u7406\u4efb\u52a1\n        self._cleanup_thread: threading.Thread | None = None\n        self._stop_cleanup = threading.Event()\n        self._start_cleanup_task()\n\n    # ========== \u540c\u6b65\u57fa\u7840\u64cd\u4f5c ==========\n\n    def get(self, key: CacheKey) -&gt; CacheValue | None:\n        \"\"\"\n        \u540c\u6b65\u83b7\u53d6\u7f13\u5b58\u503c\n\n        \u5b9e\u73b0\u7ec6\u8282:\n        1. \u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728\n        2. \u68c0\u67e5\u662f\u5426\u8fc7\u671f\uff08\u60f0\u6027\u5220\u9664\uff09\n        3. \u66f4\u65b0 LRU \u987a\u5e8f\uff08\u79fb\u5230\u672b\u5c3e\u8868\u793a\u6700\u8fd1\u4f7f\u7528\uff09\n        4. \u8fd4\u56de\u503c\n\n        \u65f6\u95f4\u590d\u6742\u5ea6: O(1)\n\n        Args:\n            key: \u7f13\u5b58\u952e\n\n        Returns:\n            \u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u5219\u8fd4\u56de None\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; backend.set(\"key\", \"value\", ttl=60)\n            &gt;&gt;&gt; backend.get(\"key\")  # \"value\"\n            &gt;&gt;&gt; time.sleep(61)\n            &gt;&gt;&gt; backend.get(\"key\")  # None\uff08\u5df2\u8fc7\u671f\uff09\n        \"\"\"\n        with self._lock:\n            # \u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728\n            if key not in self._cache:\n                return None\n\n            value, expires_at = self._cache[key]\n\n            # \u68c0\u67e5\u662f\u5426\u8fc7\u671f\uff08\u60f0\u6027\u5220\u9664\uff09\n            if expires_at is not None and time.time() &gt; expires_at:\n                # \u5df2\u8fc7\u671f\uff0c\u5220\u9664\u5e76\u8fd4\u56de None\n                del self._cache[key]\n                return None\n\n            # \u66f4\u65b0 LRU\uff1a\u79fb\u5230\u672b\u5c3e\u8868\u793a\u6700\u8fd1\u4f7f\u7528\n            self._cache.move_to_end(key)\n\n            return value\n\n    async def aget(self, key: CacheKey) -&gt; CacheValue | None:\n        \"\"\"\n        \u5f02\u6b65\u83b7\u53d6\u7f13\u5b58\u503c\n\n        \u5185\u5b58\u540e\u7aef\u7684\u5f02\u6b65\u7248\u672c\u76f4\u63a5\u8c03\u7528\u540c\u6b65\u65b9\u6cd5\u3002\n        \u56e0\u4e3a\u5185\u5b58\u64cd\u4f5c\u975e\u5e38\u5feb\uff08&lt; 0.01ms\uff09\uff0c\u65e0\u9700\u771f\u6b63\u7684\u5f02\u6b65 I/O\u3002\n\n        Args:\n            key: \u7f13\u5b58\u952e\n\n        Returns:\n            \u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u5219\u8fd4\u56de None\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; value = await backend.aget(\"user:123\")\n        \"\"\"\n        return self.get(key)\n\n    def set(\n        self,\n        key: CacheKey,\n        value: CacheValue,\n        ttl: int | None = None,\n        ex: bool = False,\n        nx: bool = False,\n    ) -&gt; bool:\n        \"\"\"\n        \u8bbe\u7f6e\u7f13\u5b58\u503c\n\n        Args:\n            key: \u7f13\u5b58\u952e\n            value: \u7f13\u5b58\u503c\n            ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2),None \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n            ex: \u4fdd\u7559\u53c2\u6570,\u5185\u5b58\u540e\u7aef\u59cb\u7ec8\u4f7f\u7528\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4\n            nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n        Returns:\n            \u662f\u5426\u8bbe\u7f6e\u6210\u529f\n        \"\"\"\n        with self._lock:\n            # \u68c0\u67e5 max_size \u662f\u5426\u4e3a 0\n            if self._max_size == 0:\n                return False\n\n            # NX \u6a21\u5f0f:\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u8bbe\u7f6e\n            if nx and key in self._cache:\n                # \u68c0\u67e5\u662f\u5426\u5df2\u8fc7\u671f\n                _, expires_at = self._cache[key]\n                if expires_at is None or time.time() &lt;= expires_at:\n                    return False  # \u952e\u5b58\u5728\u4e14\u672a\u8fc7\u671f,\u8bbe\u7f6e\u5931\u8d25\n\n            # \u8ba1\u7b97\u8fc7\u671f\u65f6\u95f4\n            expires_at = None if ttl is None else time.time() + ttl\n\n            # \u5982\u679c\u952e\u5df2\u5b58\u5728,\u66f4\u65b0\u4f4d\u7f6e\n            if key in self._cache:\n                self._cache.move_to_end(key)\n            # \u5982\u679c\u7f13\u5b58\u5df2\u6ee1,\u6267\u884c LRU \u6dd8\u6c70\n            elif len(self._cache) &gt;= self._max_size:\n                self._cache.popitem(last=False)\n\n            # \u8bbe\u7f6e\u7f13\u5b58\u503c\n            self._cache[key] = (value, expires_at)\n            return True\n\n    async def aset(\n        self,\n        key: CacheKey,\n        value: CacheValue,\n        ttl: int | None = None,\n        ex: bool = False,\n        nx: bool = False,\n    ) -&gt; bool:\n        \"\"\"\n        \u5f02\u6b65\u8bbe\u7f6e\u7f13\u5b58\u503c\n\n        Args:\n            key: \u7f13\u5b58\u952e\n            value: \u7f13\u5b58\u503c\n            ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2)\n            ex: \u4fdd\u7559\u53c2\u6570\n            nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n        Returns:\n            \u662f\u5426\u8bbe\u7f6e\u6210\u529f\n        \"\"\"\n        return self.set(key, value, ttl=ttl, ex=ex, nx=nx)\n\n    def delete(self, key: CacheKey) -&gt; bool:\n        \"\"\"\n        \u5220\u9664\u7f13\u5b58\n\n        Args:\n            key: \u7f13\u5b58\u952e\n\n        Returns:\n            \u5982\u679c\u952e\u5b58\u5728\u5e76\u6210\u529f\u5220\u9664\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; backend.set(\"temp\", \"data\")\n            &gt;&gt;&gt; backend.delete(\"temp\")  # True\n            &gt;&gt;&gt; backend.delete(\"temp\")  # False\uff08\u5df2\u5220\u9664\uff09\n        \"\"\"\n        with self._lock:\n            if key in self._cache:\n                del self._cache[key]\n                return True\n            return False\n\n    async def adelete(self, key: CacheKey) -&gt; bool:\n        \"\"\"\n        \u5f02\u6b65\u5220\u9664\u7f13\u5b58\n\n        Args:\n            key: \u7f13\u5b58\u952e\n\n        Returns:\n            \u5982\u679c\u952e\u5b58\u5728\u5e76\u6210\u529f\u5220\u9664\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; deleted = await backend.adelete(\"user:123\")\n        \"\"\"\n        return self.delete(key)\n\n    def exists(self, key: CacheKey) -&gt; bool:\n        \"\"\"\n        \u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728\n\n        \u4f1a\u68c0\u67e5\u952e\u662f\u5426\u8fc7\u671f\uff0c\u8fc7\u671f\u7684\u952e\u8fd4\u56de False\u3002\n\n        Args:\n            key: \u7f13\u5b58\u952e\n\n        Returns:\n            \u5982\u679c\u952e\u5b58\u5728\u4e14\u672a\u8fc7\u671f\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; backend.set(\"key\", \"value\", ttl=60)\n            &gt;&gt;&gt; backend.exists(\"key\")  # True\n            &gt;&gt;&gt; time.sleep(61)\n            &gt;&gt;&gt; backend.exists(\"key\")  # False\uff08\u5df2\u8fc7\u671f\uff09\n        \"\"\"\n        return self.get(key) is not None\n\n    def clear(self) -&gt; None:\n        \"\"\"\n        \u6e05\u7a7a\u6240\u6709\u7f13\u5b58\n\n        \u8b66\u544a:\n            \u6b64\u64cd\u4f5c\u4e0d\u53ef\u9006\uff0c\u4f1a\u5220\u9664\u6240\u6709\u7f13\u5b58\u6570\u636e\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; backend.clear()  # \u5220\u9664\u6240\u6709\u7f13\u5b58\n        \"\"\"\n        with self._lock:\n            self._cache.clear()\n\n    # ========== \u6279\u91cf\u64cd\u4f5c\u4f18\u5316 ==========\n\n    def get_many(self, keys: list[CacheKey]) -&gt; dict[CacheKey, CacheValue]:\n        \"\"\"\n        \u6279\u91cf\u83b7\u53d6\u7f13\u5b58\u503c\uff08\u4f18\u5316\u7248\uff09\n\n        \u76f8\u6bd4\u57fa\u7c7b\u7684\u9ed8\u8ba4\u5b9e\u73b0\uff0c\u6b64\u7248\u672c\u5728\u5355\u4e2a\u9501\u5185\u5b8c\u6210\u6240\u6709\u64cd\u4f5c\uff0c\n        \u51cf\u5c11\u9501\u5f00\u9500\uff0c\u63d0\u5347\u6027\u80fd\u3002\n\n        Args:\n            keys: \u7f13\u5b58\u952e\u5217\u8868\n\n        Returns:\n            \u952e\u503c\u5bf9\u5b57\u5178\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u7684\u952e\u4e0d\u5305\u542b\u5728\u7ed3\u679c\u4e2d\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; backend.set_many({\"k1\": \"v1\", \"k2\": \"v2\"})\n            &gt;&gt;&gt; results = backend.get_many([\"k1\", \"k2\", \"k3\"])\n            &gt;&gt;&gt; print(results)  # {\"k1\": \"v1\", \"k2\": \"v2\"}\n        \"\"\"\n        result: dict[CacheKey, CacheValue] = {}\n        now = time.time()\n\n        with self._lock:\n            for key in keys:\n                if key not in self._cache:\n                    continue\n\n                value, expires_at = self._cache[key]\n\n                # \u68c0\u67e5\u662f\u5426\u8fc7\u671f\n                if expires_at is not None and now &gt; expires_at:\n                    # \u8fc7\u671f\uff0c\u5220\u9664\uff08\u60f0\u6027\u6e05\u7406\uff09\n                    del self._cache[key]\n                    continue\n\n                # \u66f4\u65b0 LRU\n                self._cache.move_to_end(key)\n                result[key] = value\n\n        return result\n\n    def set_many(\n        self,\n        mapping: dict[CacheKey, CacheValue],\n        ttl: int | None = None,\n    ) -&gt; None:\n        \"\"\"\n        \u6279\u91cf\u8bbe\u7f6e\u7f13\u5b58\u503c\uff08\u4f18\u5316\u7248\uff09\n\n        \u5728\u5355\u4e2a\u9501\u5185\u5b8c\u6210\u6240\u6709\u64cd\u4f5c\uff0c\u63d0\u5347\u6027\u80fd\u3002\n\n        Args:\n            mapping: \u952e\u503c\u5bf9\u5b57\u5178\n            ttl: \u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; backend.set_many(\n            ...     {\n            ...         \"user:1\": {\"name\": \"Alice\"},\n            ...         \"user:2\": {\"name\": \"Bob\"},\n            ...     },\n            ...     ttl=600,\n            ... )\n        \"\"\"\n        with self._lock:\n            # \u8fb9\u754c\u60c5\u51b5\uff1amax_size=0 \u65f6\u4e0d\u5b58\u50a8\u4efb\u4f55\u5185\u5bb9\n            if self._max_size == 0:\n                return\n\n            expires_at = time.time() + ttl if ttl is not None else None\n\n            for key, value in mapping.items():\n                # \u68c0\u67e5\u5bb9\u91cf\u5e76 LRU \u6dd8\u6c70\n                if len(self._cache) &gt;= self._max_size and key not in self._cache:\n                    self._cache.popitem(last=False)\n\n                # \u5b58\u50a8\u5e76\u79fb\u5230\u672b\u5c3e\n                self._cache[key] = (value, expires_at)\n                self._cache.move_to_end(key)\n\n    # ========== \u6269\u5c55\u64cd\u4f5c ==========\n\n    def keys(\n        self,\n        pattern: str = \"*\",\n        cursor: int = 0,\n        count: int = 100,\n        max_keys: int | None = None,\n    ) -&gt; KeysPage:\n        \"\"\"\n        \u626b\u63cf\u7f13\u5b58\u952e\n\n        Args:\n            pattern: \u5339\u914d\u6a21\u5f0f(\u652f\u6301\u901a\u914d\u7b26 * \u548c ?)\n            cursor: \u6e38\u6807\u4f4d\u7f6e\n            count: \u6bcf\u9875\u8fd4\u56de\u7684\u952e\u6570\u91cf\n            max_keys: \u6700\u591a\u8fd4\u56de\u7684\u952e\u6570\u91cf\n\n        Returns:\n            KeysPage \u5bf9\u8c61\n        \"\"\"\n        import fnmatch\n\n        from ..types import KeysPage\n\n        with self._lock:\n            # \u83b7\u53d6\u6240\u6709\u952e\u5e76\u8fc7\u6ee4\n            all_keys = list(self._cache.keys())\n\n            # \u6a21\u5f0f\u5339\u914d\n            if pattern != \"*\":\n                matched_keys = [k for k in all_keys if fnmatch.fnmatch(k, pattern)]\n            else:\n                matched_keys = all_keys\n\n            # \u5206\u9875\u5904\u7406\n            total = len(matched_keys)\n            start_idx = cursor\n            end_idx = start_idx + count\n\n            if max_keys is not None:\n                end_idx = min(end_idx, start_idx + max_keys)\n\n            page_keys = matched_keys[start_idx:end_idx]\n\n            # \u8ba1\u7b97\u4e0b\u4e00\u9875\u6e38\u6807\n            next_cursor = end_idx if end_idx &lt; total else 0\n            has_more = next_cursor &gt; 0\n\n            return KeysPage(\n                keys=page_keys,\n                cursor=next_cursor,\n                has_more=has_more,\n                total_scanned=len(page_keys),\n            )\n\n    async def akeys(\n        self,\n        pattern: str = \"*\",\n        cursor: int = 0,\n        count: int = 100,\n        max_keys: int | None = None,\n    ) -&gt; KeysPage:\n        \"\"\"\u5f02\u6b65\u626b\u63cf\u7f13\u5b58\u952e\"\"\"\n        return self.keys(pattern=pattern, cursor=cursor, count=count, max_keys=max_keys)\n\n    def ttl(self, key: CacheKey) -&gt; int:\n        \"\"\"\n        \u83b7\u53d6\u952e\u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4\n\n        Returns:\n            \u5269\u4f59\u79d2\u6570,-1 \u8868\u793a\u6c38\u4e0d\u8fc7\u671f,-2 \u8868\u793a\u952e\u4e0d\u5b58\u5728\n        \"\"\"\n        with self._lock:\n            if key not in self._cache:\n                return -2\n\n            _, expires_at = self._cache[key]\n            if expires_at is None:\n                return -1\n\n            remaining = int(expires_at - time.time())\n            return remaining if remaining &gt; 0 else -2\n\n    async def attl(self, key: CacheKey) -&gt; int:\n        \"\"\"\u5f02\u6b65\u83b7\u53d6\u952e\u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4\"\"\"\n        return self.ttl(key)\n\n    def close(self) -&gt; None:\n        \"\"\"\n        \u5173\u95ed\u540e\u7aef\n\n        \u505c\u6b62\u540e\u53f0\u6e05\u7406\u7ebf\u7a0b\u3002\n        \"\"\"\n        if self._cleanup_thread and self._cleanup_thread.is_alive():\n            # \u8bbe\u7f6e\u505c\u6b62\u6807\u5fd7(\u5982\u679c\u6709\u7684\u8bdd)\n            # \u5f53\u524d\u5b9e\u73b0\u4e2d\u6e05\u7406\u7ebf\u7a0b\u662f daemon,\u4f1a\u81ea\u52a8\u9000\u51fa\n            pass\n\n    async def aclose(self) -&gt; None:\n        \"\"\"\u5f02\u6b65\u5173\u95ed\u540e\u7aef\"\"\"\n        self.close()\n\n    # ========== \u540e\u53f0\u6e05\u7406\u4efb\u52a1 ==========\n\n    def _start_cleanup_task(self) -&gt; None:\n        \"\"\"\n        \u542f\u52a8\u540e\u53f0 TTL \u6e05\u7406\u4efb\u52a1\n\n        \u4f7f\u7528\u5b88\u62a4\u7ebf\u7a0b\u5b9a\u671f\u6e05\u7406\u8fc7\u671f\u7684\u952e\u3002\n        \u7ebf\u7a0b\u5728\u5bf9\u8c61\u9500\u6bc1\u65f6\u81ea\u52a8\u505c\u6b62\u3002\n        \"\"\"\n\n        def _cleanup_loop() -&gt; None:\n            \"\"\"\u540e\u53f0\u6e05\u7406\u5faa\u73af\"\"\"\n            while not self._stop_cleanup.wait(self._cleanup_interval):\n                self._cleanup_expired()\n\n        # \u521b\u5efa\u5e76\u542f\u52a8\u5b88\u62a4\u7ebf\u7a0b\n        self._cleanup_thread = threading.Thread(\n            target=_cleanup_loop,\n            daemon=True,  # \u5b88\u62a4\u7ebf\u7a0b\uff0c\u4e3b\u7a0b\u5e8f\u9000\u51fa\u65f6\u81ea\u52a8\u7ec8\u6b62\n            name=\"symphra-cache-cleanup\",\n        )\n        self._cleanup_thread.start()\n\n    def _cleanup_expired(self) -&gt; None:\n        \"\"\"\n        \u6e05\u7406\u6240\u6709\u8fc7\u671f\u7684\u952e\n\n        \u904d\u5386\u6240\u6709\u7f13\u5b58\u9879\uff0c\u5220\u9664\u5df2\u8fc7\u671f\u7684\u952e\u3002\n        \u6b64\u65b9\u6cd5\u7531\u540e\u53f0\u7ebf\u7a0b\u5b9a\u671f\u8c03\u7528\u3002\n        \"\"\"\n        with self._lock:\n            now = time.time()\n            # \u6536\u96c6\u8fc7\u671f\u7684\u952e\n            expired_keys = [\n                key\n                for key, (_, expires_at) in self._cache.items()\n                if expires_at is not None and now &gt; expires_at\n            ]\n\n            # \u6279\u91cf\u5220\u9664\u8fc7\u671f\u952e\n            for key in expired_keys:\n                del self._cache[key]\n\n    def __del__(self) -&gt; None:\n        \"\"\"\n        \u6790\u6784\u51fd\u6570\n\n        \u505c\u6b62\u540e\u53f0\u6e05\u7406\u7ebf\u7a0b\u3002\n        \"\"\"\n        # \u901a\u77e5\u6e05\u7406\u7ebf\u7a0b\u505c\u6b62\n        self._stop_cleanup.set()\n\n        # \u7b49\u5f85\u7ebf\u7a0b\u7ed3\u675f\uff08\u6700\u591a\u7b49\u5f85 1 \u79d2\uff09\n        if self._cleanup_thread and self._cleanup_thread.is_alive():\n            self._cleanup_thread.join(timeout=1.0)\n\n    # ========== \u8c03\u8bd5\u548c\u76d1\u63a7\u65b9\u6cd5 ==========\n\n    def __len__(self) -&gt; int:\n        \"\"\"\n        \u83b7\u53d6\u5f53\u524d\u7f13\u5b58\u9879\u6570\u91cf\n\n        Returns:\n            \u7f13\u5b58\u9879\u6570\u91cf\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; backend.set(\"k1\", \"v1\")\n            &gt;&gt;&gt; backend.set(\"k2\", \"v2\")\n            &gt;&gt;&gt; len(backend)  # 2\n        \"\"\"\n        with self._lock:\n            return len(self._cache)\n\n    def __repr__(self) -&gt; str:\n        \"\"\"\n        \u5b57\u7b26\u4e32\u8868\u793a\n\n        Returns:\n            \u5bf9\u8c61\u7684\u5b57\u7b26\u4e32\u8868\u793a\n\n        \u793a\u4f8b:\n            &gt;&gt;&gt; backend = MemoryBackend(max_size=1000)\n            &gt;&gt;&gt; repr(backend)\n            \"MemoryBackend(size=0, max_size=1000)\"\n        \"\"\"\n        with self._lock:\n            return f\"MemoryBackend(size={len(self._cache)}, max_size={self._max_size})\"\n</code></pre>"},{"location":"zh/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.__del__","title":"<code>__del__()</code>","text":"<p>\u6790\u6784\u51fd\u6570</p> <p>\u505c\u6b62\u540e\u53f0\u6e05\u7406\u7ebf\u7a0b\u3002</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>def __del__(self) -&gt; None:\n    \"\"\"\n    \u6790\u6784\u51fd\u6570\n\n    \u505c\u6b62\u540e\u53f0\u6e05\u7406\u7ebf\u7a0b\u3002\n    \"\"\"\n    # \u901a\u77e5\u6e05\u7406\u7ebf\u7a0b\u505c\u6b62\n    self._stop_cleanup.set()\n\n    # \u7b49\u5f85\u7ebf\u7a0b\u7ed3\u675f\uff08\u6700\u591a\u7b49\u5f85 1 \u79d2\uff09\n    if self._cleanup_thread and self._cleanup_thread.is_alive():\n        self._cleanup_thread.join(timeout=1.0)\n</code></pre>"},{"location":"zh/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.__init__","title":"<code>__init__(max_size=10000, cleanup_interval=60)</code>","text":"<p>\u521d\u59cb\u5316\u5185\u5b58\u540e\u7aef</p> <p>Parameters:</p> Name Type Description Default <code>max_size</code> <code>int</code> <p>\u6700\u5927\u7f13\u5b58\u6761\u6570\uff0c\u8d85\u8fc7\u540e\u89e6\u53d1 LRU \u6dd8\u6c70\uff08\u9ed8\u8ba4 10000\uff09</p> <code>10000</code> <code>cleanup_interval</code> <code>int</code> <p>TTL \u6e05\u7406\u95f4\u9694\uff08\u79d2\uff09\uff0c\u9ed8\u8ba4 60 \u79d2</p> <code>60</code> \u793a\u4f8b Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>def __init__(\n    self,\n    max_size: int = 10000,\n    cleanup_interval: int = 60,\n) -&gt; None:\n    \"\"\"\n    \u521d\u59cb\u5316\u5185\u5b58\u540e\u7aef\n\n    Args:\n        max_size: \u6700\u5927\u7f13\u5b58\u6761\u6570\uff0c\u8d85\u8fc7\u540e\u89e6\u53d1 LRU \u6dd8\u6c70\uff08\u9ed8\u8ba4 10000\uff09\n        cleanup_interval: TTL \u6e05\u7406\u95f4\u9694\uff08\u79d2\uff09\uff0c\u9ed8\u8ba4 60 \u79d2\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; # \u521b\u5efa\u6700\u5927\u5bb9\u91cf 1000 \u7684\u7f13\u5b58\n        &gt;&gt;&gt; backend = MemoryBackend(max_size=1000, cleanup_interval=30)\n    \"\"\"\n    self._max_size = max_size\n    self._cleanup_interval = cleanup_interval\n\n    # \u5b58\u50a8\u683c\u5f0f: {key: (value, expires_at)}\n    # expires_at \u4e3a None \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n    # \u4f7f\u7528 OrderedDict \u652f\u6301 LRU\uff1a\u6700\u8fd1\u8bbf\u95ee\u7684\u5728\u672b\u5c3e\uff0c\u6700\u65e7\u7684\u5728\u5934\u90e8\n    self._cache: OrderedDict[CacheKey, tuple[CacheValue, float | None]] = OrderedDict()\n\n    # \u7ebf\u7a0b\u9501\uff08\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\uff09\n    # \u4f7f\u7528 RLock \u5141\u8bb8\u540c\u4e00\u7ebf\u7a0b\u91cd\u5165\n    self._lock = threading.RLock()\n\n    # \u542f\u52a8\u540e\u53f0\u6e05\u7406\u4efb\u52a1\n    self._cleanup_thread: threading.Thread | None = None\n    self._stop_cleanup = threading.Event()\n    self._start_cleanup_task()\n</code></pre>"},{"location":"zh/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.__init__--1000","title":"\u521b\u5efa\u6700\u5927\u5bb9\u91cf 1000 \u7684\u7f13\u5b58","text":"<p>backend = MemoryBackend(max_size=1000, cleanup_interval=30)</p>"},{"location":"zh/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.__len__","title":"<code>__len__()</code>","text":"<p>\u83b7\u53d6\u5f53\u524d\u7f13\u5b58\u9879\u6570\u91cf</p> <p>Returns:</p> Type Description <code>int</code> <p>\u7f13\u5b58\u9879\u6570\u91cf</p> \u793a\u4f8b <p>backend.set(\"k1\", \"v1\") backend.set(\"k2\", \"v2\") len(backend)  # 2</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>def __len__(self) -&gt; int:\n    \"\"\"\n    \u83b7\u53d6\u5f53\u524d\u7f13\u5b58\u9879\u6570\u91cf\n\n    Returns:\n        \u7f13\u5b58\u9879\u6570\u91cf\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; backend.set(\"k1\", \"v1\")\n        &gt;&gt;&gt; backend.set(\"k2\", \"v2\")\n        &gt;&gt;&gt; len(backend)  # 2\n    \"\"\"\n    with self._lock:\n        return len(self._cache)\n</code></pre>"},{"location":"zh/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.__repr__","title":"<code>__repr__()</code>","text":"<p>\u5b57\u7b26\u4e32\u8868\u793a</p> <p>Returns:</p> Type Description <code>str</code> <p>\u5bf9\u8c61\u7684\u5b57\u7b26\u4e32\u8868\u793a</p> \u793a\u4f8b <p>backend = MemoryBackend(max_size=1000) repr(backend) \"MemoryBackend(size=0, max_size=1000)\"</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"\n    \u5b57\u7b26\u4e32\u8868\u793a\n\n    Returns:\n        \u5bf9\u8c61\u7684\u5b57\u7b26\u4e32\u8868\u793a\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; backend = MemoryBackend(max_size=1000)\n        &gt;&gt;&gt; repr(backend)\n        \"MemoryBackend(size=0, max_size=1000)\"\n    \"\"\"\n    with self._lock:\n        return f\"MemoryBackend(size={len(self._cache)}, max_size={self._max_size})\"\n</code></pre>"},{"location":"zh/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.aclose","title":"<code>aclose()</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u5173\u95ed\u540e\u7aef</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>async def aclose(self) -&gt; None:\n    \"\"\"\u5f02\u6b65\u5173\u95ed\u540e\u7aef\"\"\"\n    self.close()\n</code></pre>"},{"location":"zh/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.adelete","title":"<code>adelete(key)</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u5220\u9664\u7f13\u5b58</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <p>Returns:</p> Type Description <code>bool</code> <p>\u5982\u679c\u952e\u5b58\u5728\u5e76\u6210\u529f\u5220\u9664\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False</p> \u793a\u4f8b <p>deleted = await backend.adelete(\"user:123\")</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>async def adelete(self, key: CacheKey) -&gt; bool:\n    \"\"\"\n    \u5f02\u6b65\u5220\u9664\u7f13\u5b58\n\n    Args:\n        key: \u7f13\u5b58\u952e\n\n    Returns:\n        \u5982\u679c\u952e\u5b58\u5728\u5e76\u6210\u529f\u5220\u9664\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; deleted = await backend.adelete(\"user:123\")\n    \"\"\"\n    return self.delete(key)\n</code></pre>"},{"location":"zh/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.aget","title":"<code>aget(key)</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u83b7\u53d6\u7f13\u5b58\u503c</p> <p>\u5185\u5b58\u540e\u7aef\u7684\u5f02\u6b65\u7248\u672c\u76f4\u63a5\u8c03\u7528\u540c\u6b65\u65b9\u6cd5\u3002 \u56e0\u4e3a\u5185\u5b58\u64cd\u4f5c\u975e\u5e38\u5feb\uff08&lt; 0.01ms\uff09\uff0c\u65e0\u9700\u771f\u6b63\u7684\u5f02\u6b65 I/O\u3002</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <p>Returns:</p> Type Description <code>CacheValue | None</code> <p>\u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u5219\u8fd4\u56de None</p> \u793a\u4f8b <p>value = await backend.aget(\"user:123\")</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>async def aget(self, key: CacheKey) -&gt; CacheValue | None:\n    \"\"\"\n    \u5f02\u6b65\u83b7\u53d6\u7f13\u5b58\u503c\n\n    \u5185\u5b58\u540e\u7aef\u7684\u5f02\u6b65\u7248\u672c\u76f4\u63a5\u8c03\u7528\u540c\u6b65\u65b9\u6cd5\u3002\n    \u56e0\u4e3a\u5185\u5b58\u64cd\u4f5c\u975e\u5e38\u5feb\uff08&lt; 0.01ms\uff09\uff0c\u65e0\u9700\u771f\u6b63\u7684\u5f02\u6b65 I/O\u3002\n\n    Args:\n        key: \u7f13\u5b58\u952e\n\n    Returns:\n        \u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u5219\u8fd4\u56de None\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; value = await backend.aget(\"user:123\")\n    \"\"\"\n    return self.get(key)\n</code></pre>"},{"location":"zh/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.akeys","title":"<code>akeys(pattern='*', cursor=0, count=100, max_keys=None)</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u626b\u63cf\u7f13\u5b58\u952e</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>async def akeys(\n    self,\n    pattern: str = \"*\",\n    cursor: int = 0,\n    count: int = 100,\n    max_keys: int | None = None,\n) -&gt; KeysPage:\n    \"\"\"\u5f02\u6b65\u626b\u63cf\u7f13\u5b58\u952e\"\"\"\n    return self.keys(pattern=pattern, cursor=cursor, count=count, max_keys=max_keys)\n</code></pre>"},{"location":"zh/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.aset","title":"<code>aset(key, value, ttl=None, ex=False, nx=False)</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u8bbe\u7f6e\u7f13\u5b58\u503c</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <code>value</code> <code>CacheValue</code> <p>\u7f13\u5b58\u503c</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4(\u79d2)</p> <code>None</code> <code>ex</code> <code>bool</code> <p>\u4fdd\u7559\u53c2\u6570</p> <code>False</code> <code>nx</code> <code>bool</code> <p>\u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>\u662f\u5426\u8bbe\u7f6e\u6210\u529f</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>async def aset(\n    self,\n    key: CacheKey,\n    value: CacheValue,\n    ttl: int | None = None,\n    ex: bool = False,\n    nx: bool = False,\n) -&gt; bool:\n    \"\"\"\n    \u5f02\u6b65\u8bbe\u7f6e\u7f13\u5b58\u503c\n\n    Args:\n        key: \u7f13\u5b58\u952e\n        value: \u7f13\u5b58\u503c\n        ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2)\n        ex: \u4fdd\u7559\u53c2\u6570\n        nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n    Returns:\n        \u662f\u5426\u8bbe\u7f6e\u6210\u529f\n    \"\"\"\n    return self.set(key, value, ttl=ttl, ex=ex, nx=nx)\n</code></pre>"},{"location":"zh/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.attl","title":"<code>attl(key)</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u83b7\u53d6\u952e\u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>async def attl(self, key: CacheKey) -&gt; int:\n    \"\"\"\u5f02\u6b65\u83b7\u53d6\u952e\u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4\"\"\"\n    return self.ttl(key)\n</code></pre>"},{"location":"zh/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.clear","title":"<code>clear()</code>","text":"<p>\u6e05\u7a7a\u6240\u6709\u7f13\u5b58</p> \u8b66\u544a <p>\u6b64\u64cd\u4f5c\u4e0d\u53ef\u9006\uff0c\u4f1a\u5220\u9664\u6240\u6709\u7f13\u5b58\u6570\u636e</p> \u793a\u4f8b <p>backend.clear()  # \u5220\u9664\u6240\u6709\u7f13\u5b58</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>def clear(self) -&gt; None:\n    \"\"\"\n    \u6e05\u7a7a\u6240\u6709\u7f13\u5b58\n\n    \u8b66\u544a:\n        \u6b64\u64cd\u4f5c\u4e0d\u53ef\u9006\uff0c\u4f1a\u5220\u9664\u6240\u6709\u7f13\u5b58\u6570\u636e\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; backend.clear()  # \u5220\u9664\u6240\u6709\u7f13\u5b58\n    \"\"\"\n    with self._lock:\n        self._cache.clear()\n</code></pre>"},{"location":"zh/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.close","title":"<code>close()</code>","text":"<p>\u5173\u95ed\u540e\u7aef</p> <p>\u505c\u6b62\u540e\u53f0\u6e05\u7406\u7ebf\u7a0b\u3002</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>def close(self) -&gt; None:\n    \"\"\"\n    \u5173\u95ed\u540e\u7aef\n\n    \u505c\u6b62\u540e\u53f0\u6e05\u7406\u7ebf\u7a0b\u3002\n    \"\"\"\n    if self._cleanup_thread and self._cleanup_thread.is_alive():\n        # \u8bbe\u7f6e\u505c\u6b62\u6807\u5fd7(\u5982\u679c\u6709\u7684\u8bdd)\n        # \u5f53\u524d\u5b9e\u73b0\u4e2d\u6e05\u7406\u7ebf\u7a0b\u662f daemon,\u4f1a\u81ea\u52a8\u9000\u51fa\n        pass\n</code></pre>"},{"location":"zh/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.delete","title":"<code>delete(key)</code>","text":"<p>\u5220\u9664\u7f13\u5b58</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <p>Returns:</p> Type Description <code>bool</code> <p>\u5982\u679c\u952e\u5b58\u5728\u5e76\u6210\u529f\u5220\u9664\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False</p> \u793a\u4f8b <p>backend.set(\"temp\", \"data\") backend.delete(\"temp\")  # True backend.delete(\"temp\")  # False\uff08\u5df2\u5220\u9664\uff09</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>def delete(self, key: CacheKey) -&gt; bool:\n    \"\"\"\n    \u5220\u9664\u7f13\u5b58\n\n    Args:\n        key: \u7f13\u5b58\u952e\n\n    Returns:\n        \u5982\u679c\u952e\u5b58\u5728\u5e76\u6210\u529f\u5220\u9664\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; backend.set(\"temp\", \"data\")\n        &gt;&gt;&gt; backend.delete(\"temp\")  # True\n        &gt;&gt;&gt; backend.delete(\"temp\")  # False\uff08\u5df2\u5220\u9664\uff09\n    \"\"\"\n    with self._lock:\n        if key in self._cache:\n            del self._cache[key]\n            return True\n        return False\n</code></pre>"},{"location":"zh/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.exists","title":"<code>exists(key)</code>","text":"<p>\u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728</p> <p>\u4f1a\u68c0\u67e5\u952e\u662f\u5426\u8fc7\u671f\uff0c\u8fc7\u671f\u7684\u952e\u8fd4\u56de False\u3002</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <p>Returns:</p> Type Description <code>bool</code> <p>\u5982\u679c\u952e\u5b58\u5728\u4e14\u672a\u8fc7\u671f\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False</p> \u793a\u4f8b <p>backend.set(\"key\", \"value\", ttl=60) backend.exists(\"key\")  # True time.sleep(61) backend.exists(\"key\")  # False\uff08\u5df2\u8fc7\u671f\uff09</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>def exists(self, key: CacheKey) -&gt; bool:\n    \"\"\"\n    \u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728\n\n    \u4f1a\u68c0\u67e5\u952e\u662f\u5426\u8fc7\u671f\uff0c\u8fc7\u671f\u7684\u952e\u8fd4\u56de False\u3002\n\n    Args:\n        key: \u7f13\u5b58\u952e\n\n    Returns:\n        \u5982\u679c\u952e\u5b58\u5728\u4e14\u672a\u8fc7\u671f\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; backend.set(\"key\", \"value\", ttl=60)\n        &gt;&gt;&gt; backend.exists(\"key\")  # True\n        &gt;&gt;&gt; time.sleep(61)\n        &gt;&gt;&gt; backend.exists(\"key\")  # False\uff08\u5df2\u8fc7\u671f\uff09\n    \"\"\"\n    return self.get(key) is not None\n</code></pre>"},{"location":"zh/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.get","title":"<code>get(key)</code>","text":"<p>\u540c\u6b65\u83b7\u53d6\u7f13\u5b58\u503c</p> <p>\u5b9e\u73b0\u7ec6\u8282: 1. \u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728 2. \u68c0\u67e5\u662f\u5426\u8fc7\u671f\uff08\u60f0\u6027\u5220\u9664\uff09 3. \u66f4\u65b0 LRU \u987a\u5e8f\uff08\u79fb\u5230\u672b\u5c3e\u8868\u793a\u6700\u8fd1\u4f7f\u7528\uff09 4. \u8fd4\u56de\u503c</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6: O(1)</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <p>Returns:</p> Type Description <code>CacheValue | None</code> <p>\u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u5219\u8fd4\u56de None</p> \u793a\u4f8b <p>backend.set(\"key\", \"value\", ttl=60) backend.get(\"key\")  # \"value\" time.sleep(61) backend.get(\"key\")  # None\uff08\u5df2\u8fc7\u671f\uff09</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>def get(self, key: CacheKey) -&gt; CacheValue | None:\n    \"\"\"\n    \u540c\u6b65\u83b7\u53d6\u7f13\u5b58\u503c\n\n    \u5b9e\u73b0\u7ec6\u8282:\n    1. \u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728\n    2. \u68c0\u67e5\u662f\u5426\u8fc7\u671f\uff08\u60f0\u6027\u5220\u9664\uff09\n    3. \u66f4\u65b0 LRU \u987a\u5e8f\uff08\u79fb\u5230\u672b\u5c3e\u8868\u793a\u6700\u8fd1\u4f7f\u7528\uff09\n    4. \u8fd4\u56de\u503c\n\n    \u65f6\u95f4\u590d\u6742\u5ea6: O(1)\n\n    Args:\n        key: \u7f13\u5b58\u952e\n\n    Returns:\n        \u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u5219\u8fd4\u56de None\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; backend.set(\"key\", \"value\", ttl=60)\n        &gt;&gt;&gt; backend.get(\"key\")  # \"value\"\n        &gt;&gt;&gt; time.sleep(61)\n        &gt;&gt;&gt; backend.get(\"key\")  # None\uff08\u5df2\u8fc7\u671f\uff09\n    \"\"\"\n    with self._lock:\n        # \u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728\n        if key not in self._cache:\n            return None\n\n        value, expires_at = self._cache[key]\n\n        # \u68c0\u67e5\u662f\u5426\u8fc7\u671f\uff08\u60f0\u6027\u5220\u9664\uff09\n        if expires_at is not None and time.time() &gt; expires_at:\n            # \u5df2\u8fc7\u671f\uff0c\u5220\u9664\u5e76\u8fd4\u56de None\n            del self._cache[key]\n            return None\n\n        # \u66f4\u65b0 LRU\uff1a\u79fb\u5230\u672b\u5c3e\u8868\u793a\u6700\u8fd1\u4f7f\u7528\n        self._cache.move_to_end(key)\n\n        return value\n</code></pre>"},{"location":"zh/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.get_many","title":"<code>get_many(keys)</code>","text":"<p>\u6279\u91cf\u83b7\u53d6\u7f13\u5b58\u503c\uff08\u4f18\u5316\u7248\uff09</p> <p>\u76f8\u6bd4\u57fa\u7c7b\u7684\u9ed8\u8ba4\u5b9e\u73b0\uff0c\u6b64\u7248\u672c\u5728\u5355\u4e2a\u9501\u5185\u5b8c\u6210\u6240\u6709\u64cd\u4f5c\uff0c \u51cf\u5c11\u9501\u5f00\u9500\uff0c\u63d0\u5347\u6027\u80fd\u3002</p> <p>Parameters:</p> Name Type Description Default <code>keys</code> <code>list[CacheKey]</code> <p>\u7f13\u5b58\u952e\u5217\u8868</p> required <p>Returns:</p> Type Description <code>dict[CacheKey, CacheValue]</code> <p>\u952e\u503c\u5bf9\u5b57\u5178\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u7684\u952e\u4e0d\u5305\u542b\u5728\u7ed3\u679c\u4e2d</p> \u793a\u4f8b <p>backend.set_many({\"k1\": \"v1\", \"k2\": \"v2\"}) results = backend.get_many([\"k1\", \"k2\", \"k3\"]) print(results)  # {\"k1\": \"v1\", \"k2\": \"v2\"}</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>def get_many(self, keys: list[CacheKey]) -&gt; dict[CacheKey, CacheValue]:\n    \"\"\"\n    \u6279\u91cf\u83b7\u53d6\u7f13\u5b58\u503c\uff08\u4f18\u5316\u7248\uff09\n\n    \u76f8\u6bd4\u57fa\u7c7b\u7684\u9ed8\u8ba4\u5b9e\u73b0\uff0c\u6b64\u7248\u672c\u5728\u5355\u4e2a\u9501\u5185\u5b8c\u6210\u6240\u6709\u64cd\u4f5c\uff0c\n    \u51cf\u5c11\u9501\u5f00\u9500\uff0c\u63d0\u5347\u6027\u80fd\u3002\n\n    Args:\n        keys: \u7f13\u5b58\u952e\u5217\u8868\n\n    Returns:\n        \u952e\u503c\u5bf9\u5b57\u5178\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u7684\u952e\u4e0d\u5305\u542b\u5728\u7ed3\u679c\u4e2d\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; backend.set_many({\"k1\": \"v1\", \"k2\": \"v2\"})\n        &gt;&gt;&gt; results = backend.get_many([\"k1\", \"k2\", \"k3\"])\n        &gt;&gt;&gt; print(results)  # {\"k1\": \"v1\", \"k2\": \"v2\"}\n    \"\"\"\n    result: dict[CacheKey, CacheValue] = {}\n    now = time.time()\n\n    with self._lock:\n        for key in keys:\n            if key not in self._cache:\n                continue\n\n            value, expires_at = self._cache[key]\n\n            # \u68c0\u67e5\u662f\u5426\u8fc7\u671f\n            if expires_at is not None and now &gt; expires_at:\n                # \u8fc7\u671f\uff0c\u5220\u9664\uff08\u60f0\u6027\u6e05\u7406\uff09\n                del self._cache[key]\n                continue\n\n            # \u66f4\u65b0 LRU\n            self._cache.move_to_end(key)\n            result[key] = value\n\n    return result\n</code></pre>"},{"location":"zh/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.keys","title":"<code>keys(pattern='*', cursor=0, count=100, max_keys=None)</code>","text":"<p>\u626b\u63cf\u7f13\u5b58\u952e</p> <p>Parameters:</p> Name Type Description Default <code>pattern</code> <code>str</code> <p>\u5339\u914d\u6a21\u5f0f(\u652f\u6301\u901a\u914d\u7b26 * \u548c ?)</p> <code>'*'</code> <code>cursor</code> <code>int</code> <p>\u6e38\u6807\u4f4d\u7f6e</p> <code>0</code> <code>count</code> <code>int</code> <p>\u6bcf\u9875\u8fd4\u56de\u7684\u952e\u6570\u91cf</p> <code>100</code> <code>max_keys</code> <code>int | None</code> <p>\u6700\u591a\u8fd4\u56de\u7684\u952e\u6570\u91cf</p> <code>None</code> <p>Returns:</p> Type Description <code>KeysPage</code> <p>KeysPage \u5bf9\u8c61</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>def keys(\n    self,\n    pattern: str = \"*\",\n    cursor: int = 0,\n    count: int = 100,\n    max_keys: int | None = None,\n) -&gt; KeysPage:\n    \"\"\"\n    \u626b\u63cf\u7f13\u5b58\u952e\n\n    Args:\n        pattern: \u5339\u914d\u6a21\u5f0f(\u652f\u6301\u901a\u914d\u7b26 * \u548c ?)\n        cursor: \u6e38\u6807\u4f4d\u7f6e\n        count: \u6bcf\u9875\u8fd4\u56de\u7684\u952e\u6570\u91cf\n        max_keys: \u6700\u591a\u8fd4\u56de\u7684\u952e\u6570\u91cf\n\n    Returns:\n        KeysPage \u5bf9\u8c61\n    \"\"\"\n    import fnmatch\n\n    from ..types import KeysPage\n\n    with self._lock:\n        # \u83b7\u53d6\u6240\u6709\u952e\u5e76\u8fc7\u6ee4\n        all_keys = list(self._cache.keys())\n\n        # \u6a21\u5f0f\u5339\u914d\n        if pattern != \"*\":\n            matched_keys = [k for k in all_keys if fnmatch.fnmatch(k, pattern)]\n        else:\n            matched_keys = all_keys\n\n        # \u5206\u9875\u5904\u7406\n        total = len(matched_keys)\n        start_idx = cursor\n        end_idx = start_idx + count\n\n        if max_keys is not None:\n            end_idx = min(end_idx, start_idx + max_keys)\n\n        page_keys = matched_keys[start_idx:end_idx]\n\n        # \u8ba1\u7b97\u4e0b\u4e00\u9875\u6e38\u6807\n        next_cursor = end_idx if end_idx &lt; total else 0\n        has_more = next_cursor &gt; 0\n\n        return KeysPage(\n            keys=page_keys,\n            cursor=next_cursor,\n            has_more=has_more,\n            total_scanned=len(page_keys),\n        )\n</code></pre>"},{"location":"zh/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.set","title":"<code>set(key, value, ttl=None, ex=False, nx=False)</code>","text":"<p>\u8bbe\u7f6e\u7f13\u5b58\u503c</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <code>value</code> <code>CacheValue</code> <p>\u7f13\u5b58\u503c</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4(\u79d2),None \u8868\u793a\u6c38\u4e0d\u8fc7\u671f</p> <code>None</code> <code>ex</code> <code>bool</code> <p>\u4fdd\u7559\u53c2\u6570,\u5185\u5b58\u540e\u7aef\u59cb\u7ec8\u4f7f\u7528\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4</p> <code>False</code> <code>nx</code> <code>bool</code> <p>\u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>\u662f\u5426\u8bbe\u7f6e\u6210\u529f</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>def set(\n    self,\n    key: CacheKey,\n    value: CacheValue,\n    ttl: int | None = None,\n    ex: bool = False,\n    nx: bool = False,\n) -&gt; bool:\n    \"\"\"\n    \u8bbe\u7f6e\u7f13\u5b58\u503c\n\n    Args:\n        key: \u7f13\u5b58\u952e\n        value: \u7f13\u5b58\u503c\n        ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2),None \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n        ex: \u4fdd\u7559\u53c2\u6570,\u5185\u5b58\u540e\u7aef\u59cb\u7ec8\u4f7f\u7528\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4\n        nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n    Returns:\n        \u662f\u5426\u8bbe\u7f6e\u6210\u529f\n    \"\"\"\n    with self._lock:\n        # \u68c0\u67e5 max_size \u662f\u5426\u4e3a 0\n        if self._max_size == 0:\n            return False\n\n        # NX \u6a21\u5f0f:\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u8bbe\u7f6e\n        if nx and key in self._cache:\n            # \u68c0\u67e5\u662f\u5426\u5df2\u8fc7\u671f\n            _, expires_at = self._cache[key]\n            if expires_at is None or time.time() &lt;= expires_at:\n                return False  # \u952e\u5b58\u5728\u4e14\u672a\u8fc7\u671f,\u8bbe\u7f6e\u5931\u8d25\n\n        # \u8ba1\u7b97\u8fc7\u671f\u65f6\u95f4\n        expires_at = None if ttl is None else time.time() + ttl\n\n        # \u5982\u679c\u952e\u5df2\u5b58\u5728,\u66f4\u65b0\u4f4d\u7f6e\n        if key in self._cache:\n            self._cache.move_to_end(key)\n        # \u5982\u679c\u7f13\u5b58\u5df2\u6ee1,\u6267\u884c LRU \u6dd8\u6c70\n        elif len(self._cache) &gt;= self._max_size:\n            self._cache.popitem(last=False)\n\n        # \u8bbe\u7f6e\u7f13\u5b58\u503c\n        self._cache[key] = (value, expires_at)\n        return True\n</code></pre>"},{"location":"zh/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.set_many","title":"<code>set_many(mapping, ttl=None)</code>","text":"<p>\u6279\u91cf\u8bbe\u7f6e\u7f13\u5b58\u503c\uff08\u4f18\u5316\u7248\uff09</p> <p>\u5728\u5355\u4e2a\u9501\u5185\u5b8c\u6210\u6240\u6709\u64cd\u4f5c\uff0c\u63d0\u5347\u6027\u80fd\u3002</p> <p>Parameters:</p> Name Type Description Default <code>mapping</code> <code>dict[CacheKey, CacheValue]</code> <p>\u952e\u503c\u5bf9\u5b57\u5178</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u8868\u793a\u6c38\u4e0d\u8fc7\u671f</p> <code>None</code> \u793a\u4f8b <p>backend.set_many( ...     { ...         \"user:1\": {\"name\": \"Alice\"}, ...         \"user:2\": {\"name\": \"Bob\"}, ...     }, ...     ttl=600, ... )</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>def set_many(\n    self,\n    mapping: dict[CacheKey, CacheValue],\n    ttl: int | None = None,\n) -&gt; None:\n    \"\"\"\n    \u6279\u91cf\u8bbe\u7f6e\u7f13\u5b58\u503c\uff08\u4f18\u5316\u7248\uff09\n\n    \u5728\u5355\u4e2a\u9501\u5185\u5b8c\u6210\u6240\u6709\u64cd\u4f5c\uff0c\u63d0\u5347\u6027\u80fd\u3002\n\n    Args:\n        mapping: \u952e\u503c\u5bf9\u5b57\u5178\n        ttl: \u8fc7\u671f\u65f6\u95f4\uff08\u79d2\uff09\uff0cNone \u8868\u793a\u6c38\u4e0d\u8fc7\u671f\n\n    \u793a\u4f8b:\n        &gt;&gt;&gt; backend.set_many(\n        ...     {\n        ...         \"user:1\": {\"name\": \"Alice\"},\n        ...         \"user:2\": {\"name\": \"Bob\"},\n        ...     },\n        ...     ttl=600,\n        ... )\n    \"\"\"\n    with self._lock:\n        # \u8fb9\u754c\u60c5\u51b5\uff1amax_size=0 \u65f6\u4e0d\u5b58\u50a8\u4efb\u4f55\u5185\u5bb9\n        if self._max_size == 0:\n            return\n\n        expires_at = time.time() + ttl if ttl is not None else None\n\n        for key, value in mapping.items():\n            # \u68c0\u67e5\u5bb9\u91cf\u5e76 LRU \u6dd8\u6c70\n            if len(self._cache) &gt;= self._max_size and key not in self._cache:\n                self._cache.popitem(last=False)\n\n            # \u5b58\u50a8\u5e76\u79fb\u5230\u672b\u5c3e\n            self._cache[key] = (value, expires_at)\n            self._cache.move_to_end(key)\n</code></pre>"},{"location":"zh/api/backends/memory/#symphra_cache.backends.memory.MemoryBackend.ttl","title":"<code>ttl(key)</code>","text":"<p>\u83b7\u53d6\u952e\u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4</p> <p>Returns:</p> Type Description <code>int</code> <p>\u5269\u4f59\u79d2\u6570,-1 \u8868\u793a\u6c38\u4e0d\u8fc7\u671f,-2 \u8868\u793a\u952e\u4e0d\u5b58\u5728</p> Source code in <code>src/symphra_cache/backends/memory.py</code> <pre><code>def ttl(self, key: CacheKey) -&gt; int:\n    \"\"\"\n    \u83b7\u53d6\u952e\u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4\n\n    Returns:\n        \u5269\u4f59\u79d2\u6570,-1 \u8868\u793a\u6c38\u4e0d\u8fc7\u671f,-2 \u8868\u793a\u952e\u4e0d\u5b58\u5728\n    \"\"\"\n    with self._lock:\n        if key not in self._cache:\n            return -2\n\n        _, expires_at = self._cache[key]\n        if expires_at is None:\n            return -1\n\n        remaining = int(expires_at - time.time())\n        return remaining if remaining &gt; 0 else -2\n</code></pre>"},{"location":"zh/api/backends/redis/","title":"Redis \u540e\u7aef","text":"<p>\u5171\u4eab\u3001\u6301\u4e45\u5316\u7684\u5206\u5e03\u5f0f\u7f13\u5b58\uff0c\u9002\u5408\u591a\u5b9e\u4f8b\u4e0e\u6c34\u5e73\u6269\u5c55\u3002</p> <p>               Bases: <code>BaseBackend</code></p> <p>Redis \u7f13\u5b58\u540e\u7aef</p> <p>\u57fa\u4e8e redis-py \u5b9e\u73b0\u7684\u5206\u5e03\u5f0f\u7f13\u5b58\uff0c\u652f\u6301\u96c6\u7fa4\u548c\u54e8\u5175\u3002</p> <p>\u67b6\u6784\u8bbe\u8ba1\uff1a - \u8fde\u63a5\uff1aConnectionPool \u590d\u7528\u8fde\u63a5 - \u5e8f\u5217\u5316\uff1a\u53ef\u914d\u7f6e\uff08JSON/Pickle/MessagePack\uff09 - TTL\uff1aRedis \u539f\u751f SETEX/EXPIRE - \u539f\u5b50\u6027\uff1aLua \u811a\u672c\u4fdd\u8bc1</p> <p>\u6027\u80fd\u7279\u70b9\uff1a - \u8bfb\u53d6\uff1a~0.1-1ms\uff08\u7f51\u7edc\u5ef6\u8fdf\uff09 - \u5199\u5165\uff1a~0.1-1ms - \u6279\u91cf\u64cd\u4f5c\uff1aMGET/MSET \u7ba1\u9053\u4f18\u5316</p> <p>\u4f7f\u7528\u793a\u4f8b\uff1a     &gt;&gt;&gt; # \u5355\u673a\u6a21\u5f0f     &gt;&gt;&gt; backend = RedisBackend(host=\"localhost\", port=6379)     &gt;&gt;&gt;     &gt;&gt;&gt; # \u8fde\u63a5\u6c60\u6a21\u5f0f     &gt;&gt;&gt; from redis import ConnectionPool     &gt;&gt;&gt; pool = ConnectionPool(host=\"localhost\", port=6379, db=0)     &gt;&gt;&gt; backend = RedisBackend(connection_pool=pool)     &gt;&gt;&gt;     &gt;&gt;&gt; # \u54e8\u5175\u6a21\u5f0f     &gt;&gt;&gt; from redis.sentinel import Sentinel     &gt;&gt;&gt; sentinel = Sentinel([(\"sentinel1\", 26379), (\"sentinel2\", 26379)])     &gt;&gt;&gt; backend = RedisBackend(sentinel=sentinel, service_name=\"mymaster\")</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>class RedisBackend(BaseBackend):\n    \"\"\"\n    Redis \u7f13\u5b58\u540e\u7aef\n\n    \u57fa\u4e8e redis-py \u5b9e\u73b0\u7684\u5206\u5e03\u5f0f\u7f13\u5b58\uff0c\u652f\u6301\u96c6\u7fa4\u548c\u54e8\u5175\u3002\n\n    \u67b6\u6784\u8bbe\u8ba1\uff1a\n    - \u8fde\u63a5\uff1aConnectionPool \u590d\u7528\u8fde\u63a5\n    - \u5e8f\u5217\u5316\uff1a\u53ef\u914d\u7f6e\uff08JSON/Pickle/MessagePack\uff09\n    - TTL\uff1aRedis \u539f\u751f SETEX/EXPIRE\n    - \u539f\u5b50\u6027\uff1aLua \u811a\u672c\u4fdd\u8bc1\n\n    \u6027\u80fd\u7279\u70b9\uff1a\n    - \u8bfb\u53d6\uff1a~0.1-1ms\uff08\u7f51\u7edc\u5ef6\u8fdf\uff09\n    - \u5199\u5165\uff1a~0.1-1ms\n    - \u6279\u91cf\u64cd\u4f5c\uff1aMGET/MSET \u7ba1\u9053\u4f18\u5316\n\n    \u4f7f\u7528\u793a\u4f8b\uff1a\n        &gt;&gt;&gt; # \u5355\u673a\u6a21\u5f0f\n        &gt;&gt;&gt; backend = RedisBackend(host=\"localhost\", port=6379)\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; # \u8fde\u63a5\u6c60\u6a21\u5f0f\n        &gt;&gt;&gt; from redis import ConnectionPool\n        &gt;&gt;&gt; pool = ConnectionPool(host=\"localhost\", port=6379, db=0)\n        &gt;&gt;&gt; backend = RedisBackend(connection_pool=pool)\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; # \u54e8\u5175\u6a21\u5f0f\n        &gt;&gt;&gt; from redis.sentinel import Sentinel\n        &gt;&gt;&gt; sentinel = Sentinel([(\"sentinel1\", 26379), (\"sentinel2\", 26379)])\n        &gt;&gt;&gt; backend = RedisBackend(sentinel=sentinel, service_name=\"mymaster\")\n    \"\"\"\n\n    def __init__(\n        self,\n        host: str = \"localhost\",\n        port: int = 6379,\n        db: int = 0,\n        password: str | None = None,\n        key_prefix: str = \"symphra:\",\n        serialization_mode: SerializationMode | str = SerializationMode.PICKLE,\n        socket_timeout: float = 5.0,\n        socket_connect_timeout: float = 5.0,\n        connection_pool: Any = None,\n        max_connections: int = 50,\n        decode_responses: bool = False,\n        **kwargs: Any,\n    ) -&gt; None:\n        \"\"\"\n        \u521d\u59cb\u5316 Redis \u540e\u7aef\n\n        Args:\n            host: Redis \u4e3b\u673a\u5730\u5740\n            port: Redis \u7aef\u53e3\n            db: \u6570\u636e\u5e93\u7f16\u53f7\uff080-15\uff09\n            password: Redis \u5bc6\u7801\n            key_prefix: \u952e\u524d\u7f00\uff08\u907f\u514d\u51b2\u7a81\uff09\n            serialization_mode: \u5e8f\u5217\u5316\u6a21\u5f0f\n            socket_timeout: \u5957\u63a5\u5b57\u8d85\u65f6\uff08\u79d2\uff09\n            socket_connect_timeout: \u8fde\u63a5\u8d85\u65f6\uff08\u79d2\uff09\n            connection_pool: \u81ea\u5b9a\u4e49\u8fde\u63a5\u6c60\n            max_connections: \u6700\u5927\u8fde\u63a5\u6570\n            decode_responses: \u662f\u5426\u89e3\u7801\u54cd\u5e94\u4e3a\u5b57\u7b26\u4e32\n            **kwargs: \u5176\u4ed6 redis.Redis \u53c2\u6570\n\n        \u793a\u4f8b\uff1a\n            &gt;&gt;&gt; backend = RedisBackend(\n            ...     host=\"redis.example.com\",\n            ...     port=6379,\n            ...     password=\"secret\",\n            ...     key_prefix=\"myapp:\",\n            ... )\n        \"\"\"\n        try:\n            import redis\n            import redis.asyncio as aioredis\n        except ImportError as e:\n            msg = \"Redis \u540e\u7aef\u9700\u8981\u5b89\u88c5 redis: pip install redis\"\n            raise ImportError(msg) from e\n\n        self._key_prefix = key_prefix\n        self._serializer = get_serializer(serialization_mode)\n\n        # \u521b\u5efa\u540c\u6b65\u5ba2\u6237\u7aef\n        if connection_pool is not None:\n            self._client = redis.Redis(connection_pool=connection_pool)\n        else:\n            self._client = redis.Redis(\n                host=host,\n                port=port,\n                db=db,\n                password=password,\n                socket_timeout=socket_timeout,\n                socket_connect_timeout=socket_connect_timeout,\n                max_connections=max_connections,\n                decode_responses=decode_responses,\n                **kwargs,\n            )\n\n        # \u521b\u5efa\u5f02\u6b65\u5ba2\u6237\u7aef\n        self._async_client = aioredis.Redis(\n            host=host,\n            port=port,\n            db=db,\n            password=password,\n            socket_timeout=socket_timeout,\n            socket_connect_timeout=socket_connect_timeout,\n            max_connections=max_connections,\n            decode_responses=decode_responses,\n            **kwargs,\n        )\n\n        # \u6d4b\u8bd5\u8fde\u63a5\n        self._test_connection()\n\n    # ========== \u8fde\u63a5\u7ba1\u7406 ==========\n\n    def _test_connection(self) -&gt; None:\n        \"\"\"\u6d4b\u8bd5 Redis \u8fde\u63a5\"\"\"\n        try:\n            self._client.ping()\n        except Exception as e:\n            msg = f\"\u65e0\u6cd5\u8fde\u63a5\u5230 Redis \u670d\u52a1\u5668: {e}\"\n            raise CacheConnectionError(msg) from e\n\n    def _make_key(self, key: CacheKey) -&gt; str:\n        \"\"\"\u751f\u6210\u5e26\u524d\u7f00\u7684\u5b8c\u6574\u952e\u540d\"\"\"\n        return f\"{self._key_prefix}{key}\"\n\n    # ========== \u540c\u6b65\u57fa\u7840\u64cd\u4f5c ==========\n\n    def get(self, key: CacheKey) -&gt; CacheValue | None:\n        \"\"\"\n        \u540c\u6b65\u83b7\u53d6\u7f13\u5b58\u503c\n\n        \u4f7f\u7528 Redis GET \u547d\u4ee4\uff0c\u81ea\u52a8\u5904\u7406 TTL \u8fc7\u671f\u3002\n\n        Args:\n            key: \u7f13\u5b58\u952e\n\n        Returns:\n            \u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u8fd4\u56de None\n        \"\"\"\n        try:\n            full_key = self._make_key(key)\n            value_bytes = self._client.get(full_key)\n\n            if value_bytes is None:\n                return None\n\n            # \u53cd\u5e8f\u5217\u5316\n            return self._serializer.deserialize(value_bytes)\n\n        except Exception as e:\n            msg = f\"Redis GET \u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    async def aget(self, key: CacheKey) -&gt; CacheValue | None:\n        \"\"\"\u5f02\u6b65\u83b7\u53d6\u7f13\u5b58\u503c\"\"\"\n        try:\n            full_key = self._make_key(key)\n            value_bytes = await self._async_client.get(full_key)\n\n            if value_bytes is None:\n                return None\n\n            return self._serializer.deserialize(value_bytes)\n\n        except Exception as e:\n            msg = f\"Redis AGET \u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    def set(\n        self,\n        key: CacheKey,\n        value: CacheValue,\n        ttl: int | None = None,\n        ex: bool = False,\n        nx: bool = False,\n    ) -&gt; bool:\n        \"\"\"\n        \u540c\u6b65\u8bbe\u7f6e\u7f13\u5b58\u503c\n\n        Args:\n            key: \u7f13\u5b58\u952e\n            value: \u7f13\u5b58\u503c\n            ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2)\n            ex: \u4fdd\u7559\u53c2\u6570,Redis \u59cb\u7ec8\u4f7f\u7528\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4\n            nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e(SET NX)\n\n        Returns:\n            \u662f\u5426\u8bbe\u7f6e\u6210\u529f\n        \"\"\"\n        try:\n            full_key = self._make_key(key)\n            value_bytes = self._serializer.serialize(value)\n\n            # \u5f53 ttl &lt;= 0 \u6216 None \u65f6\uff0c\u4e0d\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\uff0c\u907f\u514d Redis invalid expire time \u9519\u8bef\n            if ttl is not None and ttl &gt; 0:\n                result = self._client.set(\n                    full_key,\n                    value_bytes,\n                    ex=ttl,  # \u8fc7\u671f\u65f6\u95f4(\u79d2)\n                    nx=nx,  # \u4ec5\u5f53\u4e0d\u5b58\u5728\u65f6\u8bbe\u7f6e\n                )\n            else:\n                result = self._client.set(\n                    full_key,\n                    value_bytes,\n                    nx=nx,\n                )\n\n            # nx=True \u65f6,\u5982\u679c\u952e\u5df2\u5b58\u5728\u5219\u8fd4\u56de None\n            return result is not False and result is not None\n\n        except Exception as e:\n            msg = f\"Redis SET \u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    async def aset(\n        self,\n        key: CacheKey,\n        value: CacheValue,\n        ttl: int | None = None,\n        ex: bool = False,\n        nx: bool = False,\n    ) -&gt; bool:\n        \"\"\"\n        \u5f02\u6b65\u8bbe\u7f6e\u7f13\u5b58\u503c\n\n        Args:\n            key: \u7f13\u5b58\u952e\n            value: \u7f13\u5b58\u503c\n            ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2)\n            ex: \u4fdd\u7559\u53c2\u6570\n            nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n        Returns:\n            \u662f\u5426\u8bbe\u7f6e\u6210\u529f\n        \"\"\"\n        try:\n            full_key = self._make_key(key)\n            value_bytes = self._serializer.serialize(value)\n\n            if ttl is not None and ttl &gt; 0:\n                result = await self._async_client.set(\n                    full_key,\n                    value_bytes,\n                    ex=ttl,\n                    nx=nx,\n                )\n            else:\n                result = await self._async_client.set(\n                    full_key,\n                    value_bytes,\n                    nx=nx,\n                )\n\n            return result is not False and result is not None\n\n        except Exception as e:\n            msg = f\"Redis ASET \u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    def delete(self, key: CacheKey) -&gt; bool:\n        \"\"\"\u5220\u9664\u7f13\u5b58\"\"\"\n        try:\n            full_key = self._make_key(key)\n            count = self._client.delete(full_key)\n            return count &gt; 0\n        except Exception as e:\n            msg = f\"Redis DELETE \u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    async def adelete(self, key: CacheKey) -&gt; bool:\n        \"\"\"\u5f02\u6b65\u5220\u9664\u7f13\u5b58\"\"\"\n        try:\n            full_key = self._make_key(key)\n            count = await self._async_client.delete(full_key)\n            return count &gt; 0\n        except Exception as e:\n            msg = f\"Redis ADELETE \u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    def exists(self, key: CacheKey) -&gt; bool:\n        \"\"\"\u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728\"\"\"\n        try:\n            full_key = self._make_key(key)\n            return self._client.exists(full_key) &gt; 0\n        except Exception as e:\n            msg = f\"Redis EXISTS \u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    def clear(self) -&gt; None:\n        \"\"\"\n        \u6e05\u7a7a\u6240\u6709\u7f13\u5b58\n\n        \u8b66\u544a\uff1a\u8fd9\u4f1a\u5220\u9664\u6240\u6709\u5e26\u524d\u7f00\u7684\u952e\n        \"\"\"\n        try:\n            # \u4f7f\u7528 SCAN \u904d\u5386\u6240\u6709\u5339\u914d\u7684\u952e\n            pattern = f\"{self._key_prefix}*\"\n            cursor = 0\n\n            while True:\n                cursor, keys = self._client.scan(cursor, match=pattern, count=100)\n\n                if keys:\n                    self._client.delete(*keys)\n\n                if cursor == 0:\n                    break\n\n        except Exception as e:\n            msg = f\"Redis CLEAR \u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    # ========== \u6279\u91cf\u64cd\u4f5c\u4f18\u5316 ==========\n\n    def get_many(self, keys: list[CacheKey]) -&gt; dict[CacheKey, CacheValue]:\n        \"\"\"\n        \u6279\u91cf\u83b7\u53d6\uff08\u4f7f\u7528 MGET \u4f18\u5316\uff09\n\n        \u76f8\u6bd4\u5faa\u73af\u8c03\u7528 get()\uff0cMGET \u53ea\u9700\u4e00\u6b21\u7f51\u7edc\u5f80\u8fd4\u3002\n        \"\"\"\n        if not keys:\n            return {}\n\n        try:\n            full_keys = [self._make_key(k) for k in keys]\n\n            # \u4f7f\u7528 MGET \u6279\u91cf\u83b7\u53d6\n            values_bytes = self._client.mget(full_keys)\n\n            result: dict[CacheKey, CacheValue] = {}\n            for key, value_bytes in zip(keys, values_bytes, strict=False):\n                if value_bytes is not None:\n                    result[key] = self._serializer.deserialize(value_bytes)\n\n            return result\n\n        except Exception as e:\n            msg = f\"Redis MGET \u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    def set_many(\n        self,\n        mapping: dict[CacheKey, CacheValue],\n        ttl: int | None = None,\n    ) -&gt; None:\n        \"\"\"\n        \u6279\u91cf\u8bbe\u7f6e\uff08\u4f7f\u7528\u7ba1\u9053\u4f18\u5316\uff09\n\n        \u4f7f\u7528 Pipeline \u6279\u91cf\u63d0\u4ea4\u547d\u4ee4\uff0c\u51cf\u5c11\u7f51\u7edc\u5f80\u8fd4\u3002\n        \"\"\"\n        if not mapping:\n            return\n\n        try:\n            # \u4f7f\u7528 Pipeline \u6279\u91cf\u6267\u884c\n            pipe = self._client.pipeline()\n\n            for key, value in mapping.items():\n                full_key = self._make_key(key)\n                value_bytes = self._serializer.serialize(value)\n\n                if ttl is not None and ttl &gt; 0:\n                    pipe.setex(full_key, ttl, value_bytes)\n                else:\n                    pipe.set(full_key, value_bytes)\n\n            pipe.execute()\n\n        except Exception as e:\n            msg = f\"Redis MSET \u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    def delete_many(self, keys: list[CacheKey]) -&gt; int:\n        \"\"\"\u6279\u91cf\u5220\u9664\"\"\"\n        if not keys:\n            return 0\n\n        try:\n            full_keys = [self._make_key(k) for k in keys]\n            return self._client.delete(*full_keys)\n\n        except Exception as e:\n            msg = f\"Redis DEL \u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    # ========== \u9ad8\u7ea7\u529f\u80fd ==========\n\n    def incr(self, key: CacheKey, delta: int = 1) -&gt; int:\n        \"\"\"\n        \u539f\u5b50\u81ea\u589e\n\n        Args:\n            key: \u7f13\u5b58\u952e\n            delta: \u589e\u91cf\uff08\u9ed8\u8ba4 1\uff09\n\n        Returns:\n            \u81ea\u589e\u540e\u7684\u503c\n        \"\"\"\n        try:\n            full_key = self._make_key(key)\n            return self._client.incrby(full_key, delta)\n        except Exception as e:\n            msg = f\"Redis INCR \u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    def decr(self, key: CacheKey, delta: int = 1) -&gt; int:\n        \"\"\"\n        \u539f\u5b50\u81ea\u51cf\n\n        Args:\n            key: \u7f13\u5b58\u952e\n            delta: \u51cf\u91cf\uff08\u9ed8\u8ba4 1\uff09\n\n        Returns:\n            \u81ea\u51cf\u540e\u7684\u503c\n        \"\"\"\n        try:\n            full_key = self._make_key(key)\n            return self._client.decrby(full_key, delta)\n        except Exception as e:\n            msg = f\"Redis DECR \u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    # ========== \u6269\u5c55\u64cd\u4f5c ==========\n\n    def keys(\n        self,\n        pattern: str = \"*\",\n        cursor: int = 0,\n        count: int = 100,\n        max_keys: int | None = None,\n    ) -&gt; KeysPage:\n        \"\"\"\n        \u626b\u63cf\u7f13\u5b58\u952e(\u4f7f\u7528 SCAN)\n\n        Args:\n            pattern: \u5339\u914d\u6a21\u5f0f\n            cursor: \u6e38\u6807\u4f4d\u7f6e\n            count: \u6bcf\u9875\u8fd4\u56de\u7684\u952e\u6570\u91cf\u5efa\u8bae\u503c\n            max_keys: \u6700\u591a\u8fd4\u56de\u7684\u952e\u6570\u91cf\n\n        Returns:\n            KeysPage \u5bf9\u8c61\n        \"\"\"\n        from ..types import KeysPage\n\n        try:\n            # \u6dfb\u52a0\u952e\u524d\u7f00\u5230\u6a21\u5f0f\n            full_pattern = f\"{self._key_prefix}{pattern}\"\n\n            # \u4f7f\u7528 SCAN \u547d\u4ee4\n            next_cursor, keys_found = self._client.scan(\n                cursor=cursor,\n                match=full_pattern,\n                count=count,\n            )\n\n            # \u79fb\u9664\u952e\u524d\u7f00\n            prefix_len = len(self._key_prefix)\n            clean_keys = [k.decode() if isinstance(k, bytes) else k for k in keys_found]\n            clean_keys = [k[prefix_len:] for k in clean_keys]\n\n            # \u9650\u5236\u8fd4\u56de\u6570\u91cf\uff0c\u4f18\u5148\u9075\u5faa count\uff08\u5206\u9875\u5927\u5c0f\uff09\n            if count is not None and count &gt; 0:\n                clean_keys = clean_keys[:count]\n            # \u8fdb\u4e00\u6b65\u9650\u5236\u5230 max_keys\uff08\u5982\u679c\u63d0\u4f9b\uff09\n            if max_keys is not None:\n                clean_keys = clean_keys[:max_keys]\n\n            return KeysPage(\n                keys=clean_keys,\n                cursor=next_cursor,\n                has_more=next_cursor != 0,\n                total_scanned=len(clean_keys),\n            )\n\n        except Exception as e:\n            msg = f\"Redis SCAN \u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    async def akeys(\n        self,\n        pattern: str = \"*\",\n        cursor: int = 0,\n        count: int = 100,\n        max_keys: int | None = None,\n    ) -&gt; KeysPage:\n        \"\"\"\u5f02\u6b65\u626b\u63cf\u7f13\u5b58\u952e\"\"\"\n        from ..types import KeysPage\n\n        try:\n            full_pattern = f\"{self._key_prefix}{pattern}\"\n\n            next_cursor, keys_found = await self._async_client.scan(\n                cursor=cursor,\n                match=full_pattern,\n                count=count,\n            )\n\n            prefix_len = len(self._key_prefix)\n            clean_keys = [k.decode() if isinstance(k, bytes) else k for k in keys_found]\n            clean_keys = [k[prefix_len:] for k in clean_keys]\n\n            if count is not None and count &gt; 0:\n                clean_keys = clean_keys[:count]\n            if max_keys is not None:\n                clean_keys = clean_keys[:max_keys]\n\n            return KeysPage(\n                keys=clean_keys,\n                cursor=next_cursor,\n                has_more=next_cursor != 0,\n                total_scanned=len(clean_keys),\n            )\n\n        except Exception as e:\n            msg = f\"Redis ASCAN \u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    def ttl(self, key: CacheKey) -&gt; int:\n        \"\"\"\n        \u83b7\u53d6\u952e\u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4\n\n        Returns:\n            \u5269\u4f59\u79d2\u6570,-1 \u8868\u793a\u6c38\u4e0d\u8fc7\u671f,-2 \u8868\u793a\u952e\u4e0d\u5b58\u5728\n        \"\"\"\n        try:\n            full_key = self._make_key(key)\n            return self._client.ttl(full_key)\n        except Exception as e:\n            msg = f\"Redis TTL \u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    async def attl(self, key: CacheKey) -&gt; int:\n        \"\"\"\u5f02\u6b65\u83b7\u53d6\u952e\u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4\"\"\"\n        try:\n            full_key = self._make_key(key)\n            return await self._async_client.ttl(full_key)\n        except Exception as e:\n            msg = f\"Redis ATTL \u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    # ========== \u8c03\u8bd5\u548c\u76d1\u63a7 ==========\n\n    def __len__(self) -&gt; int:\n        \"\"\"\n        \u83b7\u53d6\u7f13\u5b58\u952e\u6570\u91cf\n\n        \u6ce8\u610f\uff1a\u4f7f\u7528 SCAN \u904d\u5386\uff0c\u5927\u6570\u636e\u96c6\u53ef\u80fd\u8f83\u6162\n        \"\"\"\n        try:\n            pattern = f\"{self._key_prefix}*\"\n            cursor = 0\n            count = 0\n\n            while True:\n                cursor, keys = self._client.scan(cursor, match=pattern, count=100)\n                count += len(keys)\n\n                if cursor == 0:\n                    break\n\n            return count\n\n        except Exception as e:\n            msg = f\"Redis \u8ba1\u6570\u5931\u8d25: {e}\"\n            raise CacheBackendError(msg) from e\n\n    def __repr__(self) -&gt; str:\n        \"\"\"\u5b57\u7b26\u4e32\u8868\u793a\"\"\"\n        return f\"RedisBackend(prefix={self._key_prefix}, client={self._client})\"\n\n    def close(self) -&gt; None:\n        \"\"\"\u5173\u95ed Redis \u8fde\u63a5\"\"\"\n        self._client.close()\n\n    async def aclose(self) -&gt; None:\n        \"\"\"\u5f02\u6b65\u5173\u95ed Redis \u8fde\u63a5\"\"\"\n        await self._async_client.close()\n\n    def __del__(self) -&gt; None:\n        \"\"\"\u6790\u6784\u51fd\u6570\"\"\"\n        import contextlib\n\n        with contextlib.suppress(Exception):\n            self.close()\n</code></pre>"},{"location":"zh/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.__del__","title":"<code>__del__()</code>","text":"<p>\u6790\u6784\u51fd\u6570</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>def __del__(self) -&gt; None:\n    \"\"\"\u6790\u6784\u51fd\u6570\"\"\"\n    import contextlib\n\n    with contextlib.suppress(Exception):\n        self.close()\n</code></pre>"},{"location":"zh/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.__init__","title":"<code>__init__(host='localhost', port=6379, db=0, password=None, key_prefix='symphra:', serialization_mode=SerializationMode.PICKLE, socket_timeout=5.0, socket_connect_timeout=5.0, connection_pool=None, max_connections=50, decode_responses=False, **kwargs)</code>","text":"<p>\u521d\u59cb\u5316 Redis \u540e\u7aef</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>Redis \u4e3b\u673a\u5730\u5740</p> <code>'localhost'</code> <code>port</code> <code>int</code> <p>Redis \u7aef\u53e3</p> <code>6379</code> <code>db</code> <code>int</code> <p>\u6570\u636e\u5e93\u7f16\u53f7\uff080-15\uff09</p> <code>0</code> <code>password</code> <code>str | None</code> <p>Redis \u5bc6\u7801</p> <code>None</code> <code>key_prefix</code> <code>str</code> <p>\u952e\u524d\u7f00\uff08\u907f\u514d\u51b2\u7a81\uff09</p> <code>'symphra:'</code> <code>serialization_mode</code> <code>SerializationMode | str</code> <p>\u5e8f\u5217\u5316\u6a21\u5f0f</p> <code>PICKLE</code> <code>socket_timeout</code> <code>float</code> <p>\u5957\u63a5\u5b57\u8d85\u65f6\uff08\u79d2\uff09</p> <code>5.0</code> <code>socket_connect_timeout</code> <code>float</code> <p>\u8fde\u63a5\u8d85\u65f6\uff08\u79d2\uff09</p> <code>5.0</code> <code>connection_pool</code> <code>Any</code> <p>\u81ea\u5b9a\u4e49\u8fde\u63a5\u6c60</p> <code>None</code> <code>max_connections</code> <code>int</code> <p>\u6700\u5927\u8fde\u63a5\u6570</p> <code>50</code> <code>decode_responses</code> <code>bool</code> <p>\u662f\u5426\u89e3\u7801\u54cd\u5e94\u4e3a\u5b57\u7b26\u4e32</p> <code>False</code> <code>**kwargs</code> <code>Any</code> <p>\u5176\u4ed6 redis.Redis \u53c2\u6570</p> <code>{}</code> <p>\u793a\u4f8b\uff1a     &gt;&gt;&gt; backend = RedisBackend(     ...     host=\"redis.example.com\",     ...     port=6379,     ...     password=\"secret\",     ...     key_prefix=\"myapp:\",     ... )</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>def __init__(\n    self,\n    host: str = \"localhost\",\n    port: int = 6379,\n    db: int = 0,\n    password: str | None = None,\n    key_prefix: str = \"symphra:\",\n    serialization_mode: SerializationMode | str = SerializationMode.PICKLE,\n    socket_timeout: float = 5.0,\n    socket_connect_timeout: float = 5.0,\n    connection_pool: Any = None,\n    max_connections: int = 50,\n    decode_responses: bool = False,\n    **kwargs: Any,\n) -&gt; None:\n    \"\"\"\n    \u521d\u59cb\u5316 Redis \u540e\u7aef\n\n    Args:\n        host: Redis \u4e3b\u673a\u5730\u5740\n        port: Redis \u7aef\u53e3\n        db: \u6570\u636e\u5e93\u7f16\u53f7\uff080-15\uff09\n        password: Redis \u5bc6\u7801\n        key_prefix: \u952e\u524d\u7f00\uff08\u907f\u514d\u51b2\u7a81\uff09\n        serialization_mode: \u5e8f\u5217\u5316\u6a21\u5f0f\n        socket_timeout: \u5957\u63a5\u5b57\u8d85\u65f6\uff08\u79d2\uff09\n        socket_connect_timeout: \u8fde\u63a5\u8d85\u65f6\uff08\u79d2\uff09\n        connection_pool: \u81ea\u5b9a\u4e49\u8fde\u63a5\u6c60\n        max_connections: \u6700\u5927\u8fde\u63a5\u6570\n        decode_responses: \u662f\u5426\u89e3\u7801\u54cd\u5e94\u4e3a\u5b57\u7b26\u4e32\n        **kwargs: \u5176\u4ed6 redis.Redis \u53c2\u6570\n\n    \u793a\u4f8b\uff1a\n        &gt;&gt;&gt; backend = RedisBackend(\n        ...     host=\"redis.example.com\",\n        ...     port=6379,\n        ...     password=\"secret\",\n        ...     key_prefix=\"myapp:\",\n        ... )\n    \"\"\"\n    try:\n        import redis\n        import redis.asyncio as aioredis\n    except ImportError as e:\n        msg = \"Redis \u540e\u7aef\u9700\u8981\u5b89\u88c5 redis: pip install redis\"\n        raise ImportError(msg) from e\n\n    self._key_prefix = key_prefix\n    self._serializer = get_serializer(serialization_mode)\n\n    # \u521b\u5efa\u540c\u6b65\u5ba2\u6237\u7aef\n    if connection_pool is not None:\n        self._client = redis.Redis(connection_pool=connection_pool)\n    else:\n        self._client = redis.Redis(\n            host=host,\n            port=port,\n            db=db,\n            password=password,\n            socket_timeout=socket_timeout,\n            socket_connect_timeout=socket_connect_timeout,\n            max_connections=max_connections,\n            decode_responses=decode_responses,\n            **kwargs,\n        )\n\n    # \u521b\u5efa\u5f02\u6b65\u5ba2\u6237\u7aef\n    self._async_client = aioredis.Redis(\n        host=host,\n        port=port,\n        db=db,\n        password=password,\n        socket_timeout=socket_timeout,\n        socket_connect_timeout=socket_connect_timeout,\n        max_connections=max_connections,\n        decode_responses=decode_responses,\n        **kwargs,\n    )\n\n    # \u6d4b\u8bd5\u8fde\u63a5\n    self._test_connection()\n</code></pre>"},{"location":"zh/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.__len__","title":"<code>__len__()</code>","text":"<p>\u83b7\u53d6\u7f13\u5b58\u952e\u6570\u91cf</p> <p>\u6ce8\u610f\uff1a\u4f7f\u7528 SCAN \u904d\u5386\uff0c\u5927\u6570\u636e\u96c6\u53ef\u80fd\u8f83\u6162</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>def __len__(self) -&gt; int:\n    \"\"\"\n    \u83b7\u53d6\u7f13\u5b58\u952e\u6570\u91cf\n\n    \u6ce8\u610f\uff1a\u4f7f\u7528 SCAN \u904d\u5386\uff0c\u5927\u6570\u636e\u96c6\u53ef\u80fd\u8f83\u6162\n    \"\"\"\n    try:\n        pattern = f\"{self._key_prefix}*\"\n        cursor = 0\n        count = 0\n\n        while True:\n            cursor, keys = self._client.scan(cursor, match=pattern, count=100)\n            count += len(keys)\n\n            if cursor == 0:\n                break\n\n        return count\n\n    except Exception as e:\n        msg = f\"Redis \u8ba1\u6570\u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"zh/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.__repr__","title":"<code>__repr__()</code>","text":"<p>\u5b57\u7b26\u4e32\u8868\u793a</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"\u5b57\u7b26\u4e32\u8868\u793a\"\"\"\n    return f\"RedisBackend(prefix={self._key_prefix}, client={self._client})\"\n</code></pre>"},{"location":"zh/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.aclose","title":"<code>aclose()</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u5173\u95ed Redis \u8fde\u63a5</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>async def aclose(self) -&gt; None:\n    \"\"\"\u5f02\u6b65\u5173\u95ed Redis \u8fde\u63a5\"\"\"\n    await self._async_client.close()\n</code></pre>"},{"location":"zh/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.adelete","title":"<code>adelete(key)</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u5220\u9664\u7f13\u5b58</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>async def adelete(self, key: CacheKey) -&gt; bool:\n    \"\"\"\u5f02\u6b65\u5220\u9664\u7f13\u5b58\"\"\"\n    try:\n        full_key = self._make_key(key)\n        count = await self._async_client.delete(full_key)\n        return count &gt; 0\n    except Exception as e:\n        msg = f\"Redis ADELETE \u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"zh/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.aget","title":"<code>aget(key)</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u83b7\u53d6\u7f13\u5b58\u503c</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>async def aget(self, key: CacheKey) -&gt; CacheValue | None:\n    \"\"\"\u5f02\u6b65\u83b7\u53d6\u7f13\u5b58\u503c\"\"\"\n    try:\n        full_key = self._make_key(key)\n        value_bytes = await self._async_client.get(full_key)\n\n        if value_bytes is None:\n            return None\n\n        return self._serializer.deserialize(value_bytes)\n\n    except Exception as e:\n        msg = f\"Redis AGET \u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"zh/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.akeys","title":"<code>akeys(pattern='*', cursor=0, count=100, max_keys=None)</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u626b\u63cf\u7f13\u5b58\u952e</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>async def akeys(\n    self,\n    pattern: str = \"*\",\n    cursor: int = 0,\n    count: int = 100,\n    max_keys: int | None = None,\n) -&gt; KeysPage:\n    \"\"\"\u5f02\u6b65\u626b\u63cf\u7f13\u5b58\u952e\"\"\"\n    from ..types import KeysPage\n\n    try:\n        full_pattern = f\"{self._key_prefix}{pattern}\"\n\n        next_cursor, keys_found = await self._async_client.scan(\n            cursor=cursor,\n            match=full_pattern,\n            count=count,\n        )\n\n        prefix_len = len(self._key_prefix)\n        clean_keys = [k.decode() if isinstance(k, bytes) else k for k in keys_found]\n        clean_keys = [k[prefix_len:] for k in clean_keys]\n\n        if count is not None and count &gt; 0:\n            clean_keys = clean_keys[:count]\n        if max_keys is not None:\n            clean_keys = clean_keys[:max_keys]\n\n        return KeysPage(\n            keys=clean_keys,\n            cursor=next_cursor,\n            has_more=next_cursor != 0,\n            total_scanned=len(clean_keys),\n        )\n\n    except Exception as e:\n        msg = f\"Redis ASCAN \u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"zh/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.aset","title":"<code>aset(key, value, ttl=None, ex=False, nx=False)</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u8bbe\u7f6e\u7f13\u5b58\u503c</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <code>value</code> <code>CacheValue</code> <p>\u7f13\u5b58\u503c</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4(\u79d2)</p> <code>None</code> <code>ex</code> <code>bool</code> <p>\u4fdd\u7559\u53c2\u6570</p> <code>False</code> <code>nx</code> <code>bool</code> <p>\u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>\u662f\u5426\u8bbe\u7f6e\u6210\u529f</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>async def aset(\n    self,\n    key: CacheKey,\n    value: CacheValue,\n    ttl: int | None = None,\n    ex: bool = False,\n    nx: bool = False,\n) -&gt; bool:\n    \"\"\"\n    \u5f02\u6b65\u8bbe\u7f6e\u7f13\u5b58\u503c\n\n    Args:\n        key: \u7f13\u5b58\u952e\n        value: \u7f13\u5b58\u503c\n        ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2)\n        ex: \u4fdd\u7559\u53c2\u6570\n        nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e\n\n    Returns:\n        \u662f\u5426\u8bbe\u7f6e\u6210\u529f\n    \"\"\"\n    try:\n        full_key = self._make_key(key)\n        value_bytes = self._serializer.serialize(value)\n\n        if ttl is not None and ttl &gt; 0:\n            result = await self._async_client.set(\n                full_key,\n                value_bytes,\n                ex=ttl,\n                nx=nx,\n            )\n        else:\n            result = await self._async_client.set(\n                full_key,\n                value_bytes,\n                nx=nx,\n            )\n\n        return result is not False and result is not None\n\n    except Exception as e:\n        msg = f\"Redis ASET \u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"zh/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.attl","title":"<code>attl(key)</code>  <code>async</code>","text":"<p>\u5f02\u6b65\u83b7\u53d6\u952e\u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>async def attl(self, key: CacheKey) -&gt; int:\n    \"\"\"\u5f02\u6b65\u83b7\u53d6\u952e\u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4\"\"\"\n    try:\n        full_key = self._make_key(key)\n        return await self._async_client.ttl(full_key)\n    except Exception as e:\n        msg = f\"Redis ATTL \u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"zh/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.clear","title":"<code>clear()</code>","text":"<p>\u6e05\u7a7a\u6240\u6709\u7f13\u5b58</p> <p>\u8b66\u544a\uff1a\u8fd9\u4f1a\u5220\u9664\u6240\u6709\u5e26\u524d\u7f00\u7684\u952e</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>def clear(self) -&gt; None:\n    \"\"\"\n    \u6e05\u7a7a\u6240\u6709\u7f13\u5b58\n\n    \u8b66\u544a\uff1a\u8fd9\u4f1a\u5220\u9664\u6240\u6709\u5e26\u524d\u7f00\u7684\u952e\n    \"\"\"\n    try:\n        # \u4f7f\u7528 SCAN \u904d\u5386\u6240\u6709\u5339\u914d\u7684\u952e\n        pattern = f\"{self._key_prefix}*\"\n        cursor = 0\n\n        while True:\n            cursor, keys = self._client.scan(cursor, match=pattern, count=100)\n\n            if keys:\n                self._client.delete(*keys)\n\n            if cursor == 0:\n                break\n\n    except Exception as e:\n        msg = f\"Redis CLEAR \u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"zh/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.close","title":"<code>close()</code>","text":"<p>\u5173\u95ed Redis \u8fde\u63a5</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>def close(self) -&gt; None:\n    \"\"\"\u5173\u95ed Redis \u8fde\u63a5\"\"\"\n    self._client.close()\n</code></pre>"},{"location":"zh/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.decr","title":"<code>decr(key, delta=1)</code>","text":"<p>\u539f\u5b50\u81ea\u51cf</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <code>delta</code> <code>int</code> <p>\u51cf\u91cf\uff08\u9ed8\u8ba4 1\uff09</p> <code>1</code> <p>Returns:</p> Type Description <code>int</code> <p>\u81ea\u51cf\u540e\u7684\u503c</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>def decr(self, key: CacheKey, delta: int = 1) -&gt; int:\n    \"\"\"\n    \u539f\u5b50\u81ea\u51cf\n\n    Args:\n        key: \u7f13\u5b58\u952e\n        delta: \u51cf\u91cf\uff08\u9ed8\u8ba4 1\uff09\n\n    Returns:\n        \u81ea\u51cf\u540e\u7684\u503c\n    \"\"\"\n    try:\n        full_key = self._make_key(key)\n        return self._client.decrby(full_key, delta)\n    except Exception as e:\n        msg = f\"Redis DECR \u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"zh/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.delete","title":"<code>delete(key)</code>","text":"<p>\u5220\u9664\u7f13\u5b58</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>def delete(self, key: CacheKey) -&gt; bool:\n    \"\"\"\u5220\u9664\u7f13\u5b58\"\"\"\n    try:\n        full_key = self._make_key(key)\n        count = self._client.delete(full_key)\n        return count &gt; 0\n    except Exception as e:\n        msg = f\"Redis DELETE \u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"zh/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.delete_many","title":"<code>delete_many(keys)</code>","text":"<p>\u6279\u91cf\u5220\u9664</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>def delete_many(self, keys: list[CacheKey]) -&gt; int:\n    \"\"\"\u6279\u91cf\u5220\u9664\"\"\"\n    if not keys:\n        return 0\n\n    try:\n        full_keys = [self._make_key(k) for k in keys]\n        return self._client.delete(*full_keys)\n\n    except Exception as e:\n        msg = f\"Redis DEL \u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"zh/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.exists","title":"<code>exists(key)</code>","text":"<p>\u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>def exists(self, key: CacheKey) -&gt; bool:\n    \"\"\"\u68c0\u67e5\u952e\u662f\u5426\u5b58\u5728\"\"\"\n    try:\n        full_key = self._make_key(key)\n        return self._client.exists(full_key) &gt; 0\n    except Exception as e:\n        msg = f\"Redis EXISTS \u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"zh/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.get","title":"<code>get(key)</code>","text":"<p>\u540c\u6b65\u83b7\u53d6\u7f13\u5b58\u503c</p> <p>\u4f7f\u7528 Redis GET \u547d\u4ee4\uff0c\u81ea\u52a8\u5904\u7406 TTL \u8fc7\u671f\u3002</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <p>Returns:</p> Type Description <code>CacheValue | None</code> <p>\u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u8fd4\u56de None</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>def get(self, key: CacheKey) -&gt; CacheValue | None:\n    \"\"\"\n    \u540c\u6b65\u83b7\u53d6\u7f13\u5b58\u503c\n\n    \u4f7f\u7528 Redis GET \u547d\u4ee4\uff0c\u81ea\u52a8\u5904\u7406 TTL \u8fc7\u671f\u3002\n\n    Args:\n        key: \u7f13\u5b58\u952e\n\n    Returns:\n        \u7f13\u5b58\u503c\uff0c\u4e0d\u5b58\u5728\u6216\u5df2\u8fc7\u671f\u8fd4\u56de None\n    \"\"\"\n    try:\n        full_key = self._make_key(key)\n        value_bytes = self._client.get(full_key)\n\n        if value_bytes is None:\n            return None\n\n        # \u53cd\u5e8f\u5217\u5316\n        return self._serializer.deserialize(value_bytes)\n\n    except Exception as e:\n        msg = f\"Redis GET \u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"zh/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.get_many","title":"<code>get_many(keys)</code>","text":"<p>\u6279\u91cf\u83b7\u53d6\uff08\u4f7f\u7528 MGET \u4f18\u5316\uff09</p> <p>\u76f8\u6bd4\u5faa\u73af\u8c03\u7528 get()\uff0cMGET \u53ea\u9700\u4e00\u6b21\u7f51\u7edc\u5f80\u8fd4\u3002</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>def get_many(self, keys: list[CacheKey]) -&gt; dict[CacheKey, CacheValue]:\n    \"\"\"\n    \u6279\u91cf\u83b7\u53d6\uff08\u4f7f\u7528 MGET \u4f18\u5316\uff09\n\n    \u76f8\u6bd4\u5faa\u73af\u8c03\u7528 get()\uff0cMGET \u53ea\u9700\u4e00\u6b21\u7f51\u7edc\u5f80\u8fd4\u3002\n    \"\"\"\n    if not keys:\n        return {}\n\n    try:\n        full_keys = [self._make_key(k) for k in keys]\n\n        # \u4f7f\u7528 MGET \u6279\u91cf\u83b7\u53d6\n        values_bytes = self._client.mget(full_keys)\n\n        result: dict[CacheKey, CacheValue] = {}\n        for key, value_bytes in zip(keys, values_bytes, strict=False):\n            if value_bytes is not None:\n                result[key] = self._serializer.deserialize(value_bytes)\n\n        return result\n\n    except Exception as e:\n        msg = f\"Redis MGET \u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"zh/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.incr","title":"<code>incr(key, delta=1)</code>","text":"<p>\u539f\u5b50\u81ea\u589e</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <code>delta</code> <code>int</code> <p>\u589e\u91cf\uff08\u9ed8\u8ba4 1\uff09</p> <code>1</code> <p>Returns:</p> Type Description <code>int</code> <p>\u81ea\u589e\u540e\u7684\u503c</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>def incr(self, key: CacheKey, delta: int = 1) -&gt; int:\n    \"\"\"\n    \u539f\u5b50\u81ea\u589e\n\n    Args:\n        key: \u7f13\u5b58\u952e\n        delta: \u589e\u91cf\uff08\u9ed8\u8ba4 1\uff09\n\n    Returns:\n        \u81ea\u589e\u540e\u7684\u503c\n    \"\"\"\n    try:\n        full_key = self._make_key(key)\n        return self._client.incrby(full_key, delta)\n    except Exception as e:\n        msg = f\"Redis INCR \u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"zh/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.keys","title":"<code>keys(pattern='*', cursor=0, count=100, max_keys=None)</code>","text":"<p>\u626b\u63cf\u7f13\u5b58\u952e(\u4f7f\u7528 SCAN)</p> <p>Parameters:</p> Name Type Description Default <code>pattern</code> <code>str</code> <p>\u5339\u914d\u6a21\u5f0f</p> <code>'*'</code> <code>cursor</code> <code>int</code> <p>\u6e38\u6807\u4f4d\u7f6e</p> <code>0</code> <code>count</code> <code>int</code> <p>\u6bcf\u9875\u8fd4\u56de\u7684\u952e\u6570\u91cf\u5efa\u8bae\u503c</p> <code>100</code> <code>max_keys</code> <code>int | None</code> <p>\u6700\u591a\u8fd4\u56de\u7684\u952e\u6570\u91cf</p> <code>None</code> <p>Returns:</p> Type Description <code>KeysPage</code> <p>KeysPage \u5bf9\u8c61</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>def keys(\n    self,\n    pattern: str = \"*\",\n    cursor: int = 0,\n    count: int = 100,\n    max_keys: int | None = None,\n) -&gt; KeysPage:\n    \"\"\"\n    \u626b\u63cf\u7f13\u5b58\u952e(\u4f7f\u7528 SCAN)\n\n    Args:\n        pattern: \u5339\u914d\u6a21\u5f0f\n        cursor: \u6e38\u6807\u4f4d\u7f6e\n        count: \u6bcf\u9875\u8fd4\u56de\u7684\u952e\u6570\u91cf\u5efa\u8bae\u503c\n        max_keys: \u6700\u591a\u8fd4\u56de\u7684\u952e\u6570\u91cf\n\n    Returns:\n        KeysPage \u5bf9\u8c61\n    \"\"\"\n    from ..types import KeysPage\n\n    try:\n        # \u6dfb\u52a0\u952e\u524d\u7f00\u5230\u6a21\u5f0f\n        full_pattern = f\"{self._key_prefix}{pattern}\"\n\n        # \u4f7f\u7528 SCAN \u547d\u4ee4\n        next_cursor, keys_found = self._client.scan(\n            cursor=cursor,\n            match=full_pattern,\n            count=count,\n        )\n\n        # \u79fb\u9664\u952e\u524d\u7f00\n        prefix_len = len(self._key_prefix)\n        clean_keys = [k.decode() if isinstance(k, bytes) else k for k in keys_found]\n        clean_keys = [k[prefix_len:] for k in clean_keys]\n\n        # \u9650\u5236\u8fd4\u56de\u6570\u91cf\uff0c\u4f18\u5148\u9075\u5faa count\uff08\u5206\u9875\u5927\u5c0f\uff09\n        if count is not None and count &gt; 0:\n            clean_keys = clean_keys[:count]\n        # \u8fdb\u4e00\u6b65\u9650\u5236\u5230 max_keys\uff08\u5982\u679c\u63d0\u4f9b\uff09\n        if max_keys is not None:\n            clean_keys = clean_keys[:max_keys]\n\n        return KeysPage(\n            keys=clean_keys,\n            cursor=next_cursor,\n            has_more=next_cursor != 0,\n            total_scanned=len(clean_keys),\n        )\n\n    except Exception as e:\n        msg = f\"Redis SCAN \u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"zh/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.set","title":"<code>set(key, value, ttl=None, ex=False, nx=False)</code>","text":"<p>\u540c\u6b65\u8bbe\u7f6e\u7f13\u5b58\u503c</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>CacheKey</code> <p>\u7f13\u5b58\u952e</p> required <code>value</code> <code>CacheValue</code> <p>\u7f13\u5b58\u503c</p> required <code>ttl</code> <code>int | None</code> <p>\u8fc7\u671f\u65f6\u95f4(\u79d2)</p> <code>None</code> <code>ex</code> <code>bool</code> <p>\u4fdd\u7559\u53c2\u6570,Redis \u59cb\u7ec8\u4f7f\u7528\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4</p> <code>False</code> <code>nx</code> <code>bool</code> <p>\u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e(SET NX)</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>\u662f\u5426\u8bbe\u7f6e\u6210\u529f</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>def set(\n    self,\n    key: CacheKey,\n    value: CacheValue,\n    ttl: int | None = None,\n    ex: bool = False,\n    nx: bool = False,\n) -&gt; bool:\n    \"\"\"\n    \u540c\u6b65\u8bbe\u7f6e\u7f13\u5b58\u503c\n\n    Args:\n        key: \u7f13\u5b58\u952e\n        value: \u7f13\u5b58\u503c\n        ttl: \u8fc7\u671f\u65f6\u95f4(\u79d2)\n        ex: \u4fdd\u7559\u53c2\u6570,Redis \u59cb\u7ec8\u4f7f\u7528\u76f8\u5bf9\u8fc7\u671f\u65f6\u95f4\n        nx: \u5982\u679c\u4e3a True,\u4ec5\u5f53\u952e\u4e0d\u5b58\u5728\u65f6\u624d\u8bbe\u7f6e(SET NX)\n\n    Returns:\n        \u662f\u5426\u8bbe\u7f6e\u6210\u529f\n    \"\"\"\n    try:\n        full_key = self._make_key(key)\n        value_bytes = self._serializer.serialize(value)\n\n        # \u5f53 ttl &lt;= 0 \u6216 None \u65f6\uff0c\u4e0d\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\uff0c\u907f\u514d Redis invalid expire time \u9519\u8bef\n        if ttl is not None and ttl &gt; 0:\n            result = self._client.set(\n                full_key,\n                value_bytes,\n                ex=ttl,  # \u8fc7\u671f\u65f6\u95f4(\u79d2)\n                nx=nx,  # \u4ec5\u5f53\u4e0d\u5b58\u5728\u65f6\u8bbe\u7f6e\n            )\n        else:\n            result = self._client.set(\n                full_key,\n                value_bytes,\n                nx=nx,\n            )\n\n        # nx=True \u65f6,\u5982\u679c\u952e\u5df2\u5b58\u5728\u5219\u8fd4\u56de None\n        return result is not False and result is not None\n\n    except Exception as e:\n        msg = f\"Redis SET \u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"zh/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.set_many","title":"<code>set_many(mapping, ttl=None)</code>","text":"<p>\u6279\u91cf\u8bbe\u7f6e\uff08\u4f7f\u7528\u7ba1\u9053\u4f18\u5316\uff09</p> <p>\u4f7f\u7528 Pipeline \u6279\u91cf\u63d0\u4ea4\u547d\u4ee4\uff0c\u51cf\u5c11\u7f51\u7edc\u5f80\u8fd4\u3002</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>def set_many(\n    self,\n    mapping: dict[CacheKey, CacheValue],\n    ttl: int | None = None,\n) -&gt; None:\n    \"\"\"\n    \u6279\u91cf\u8bbe\u7f6e\uff08\u4f7f\u7528\u7ba1\u9053\u4f18\u5316\uff09\n\n    \u4f7f\u7528 Pipeline \u6279\u91cf\u63d0\u4ea4\u547d\u4ee4\uff0c\u51cf\u5c11\u7f51\u7edc\u5f80\u8fd4\u3002\n    \"\"\"\n    if not mapping:\n        return\n\n    try:\n        # \u4f7f\u7528 Pipeline \u6279\u91cf\u6267\u884c\n        pipe = self._client.pipeline()\n\n        for key, value in mapping.items():\n            full_key = self._make_key(key)\n            value_bytes = self._serializer.serialize(value)\n\n            if ttl is not None and ttl &gt; 0:\n                pipe.setex(full_key, ttl, value_bytes)\n            else:\n                pipe.set(full_key, value_bytes)\n\n        pipe.execute()\n\n    except Exception as e:\n        msg = f\"Redis MSET \u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"},{"location":"zh/api/backends/redis/#symphra_cache.backends.redis.RedisBackend.ttl","title":"<code>ttl(key)</code>","text":"<p>\u83b7\u53d6\u952e\u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4</p> <p>Returns:</p> Type Description <code>int</code> <p>\u5269\u4f59\u79d2\u6570,-1 \u8868\u793a\u6c38\u4e0d\u8fc7\u671f,-2 \u8868\u793a\u952e\u4e0d\u5b58\u5728</p> Source code in <code>src/symphra_cache/backends/redis.py</code> <pre><code>def ttl(self, key: CacheKey) -&gt; int:\n    \"\"\"\n    \u83b7\u53d6\u952e\u7684\u5269\u4f59\u751f\u5b58\u65f6\u95f4\n\n    Returns:\n        \u5269\u4f59\u79d2\u6570,-1 \u8868\u793a\u6c38\u4e0d\u8fc7\u671f,-2 \u8868\u793a\u952e\u4e0d\u5b58\u5728\n    \"\"\"\n    try:\n        full_key = self._make_key(key)\n        return self._client.ttl(full_key)\n    except Exception as e:\n        msg = f\"Redis TTL \u5931\u8d25: {e}\"\n        raise CacheBackendError(msg) from e\n</code></pre>"}]}